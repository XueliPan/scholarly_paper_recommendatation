WADEIn II: Adaptive Explanatory Visualization for Expressions Evaluation

Tomasz D. Loboda∗

University of Pittsburgh

Pittsburgh, PA 15260

Peter Brusilovsky†

University of Pittsburgh

Pittsburgh, PA 15260

Abstract

Adaptive visualization and explanatory visualization have been
suggested as two approaches to increasing the educational effec-
tiveness of software visualization. This paper presents our work on
the integration of adaptive and explanatory visualization. We intro-
duce the motivation behind this research and describe how adaptive,
explanatory visualization is implemented in WADEIn II, a system
that visualizes the process of expression evaluation in the C pro-
gramming language.

CR Categories:
I.6.8 [Simulation and Modeling]: Types of
Simulation—Animation, Combined, Visual; K.3.2 [Computers
and Education]: Computer and Information Science Education—
Computer science education;

Keywords: adaptive visualization, adaptive explanations, program
visualization, user modeling, expression evaluation

1

Introduction

Visualization can be a very powerful educational aid. However,
even well-developed visualization have been found to fail in helping
students understand the subject matter [Byrne et al. 1999; Stasko
et al. 1993]. One of the approaches suggested to increase the ed-
ucational effectiveness of visualization is adaptive visualization.
Adaptive visualization is based on the assumption that a student
may have unequal levels of knowledge about different elements of
a program or algorithm that is being visualized. The theory be-
hind adaptive visualization is to inversely match the level of de-
tail of visualization to the student’s level of knowledge: the lower
the student’s understanding of a construct the more detailed the re-
lated visualization should be. This approach allows the student to
focus on the least understood components while still being able
to understand the whole picture. Our early studies with a simple
mini-language conﬁrmed that adaptive visualization improves the
student’s understanding of visualization. More recently, we devel-
oped the WADEIn system [Brusilovsky and Su 2002] to explore the
value of system-adapted visualization in the context of the C pro-
gramming language. Several classroom studies of WADEIn have
brought encouraging results: more than 80% of the students in our
classes found the system and its adaptive visualizations to be help-
ful or very helpful.

Our current work extends this stream of work by attempting to com-
bine adaptive visualization with a complementary approach known

∗e-mail:tol7@pitt.edu
†e-mail:peterb@pitt.edu

Copyright © 2006 by the Association for Computing Machinery, Inc. 
Permission  to  make  digital  or  hard  copies  of  part  or  all  of  this  work  for  personal  or 
classroom use is granted without  fee provided  that  copies are not  made or distributed  for 
commercial  advantage  and  that  copies  bear  this  notice  and  the  full  citation  on  the  first 
page.  Copyrights  for  components  of  this  work  owned  by  others  than  ACM  must  be 
honored.  Abstracting  with  credit  is  permitted.  To  copy  otherwise,  to  republish,  to  post  on 
servers,  or  to  redistribute  to lists,  requires prior  specific permission and/or a  fee. Request 
permissions  from  Permissions  Dept,  ACM  Inc.,  fax  +1  (212)  869-0481  or  e-mail 
permissions@acm.org. 
SOFTVIS 2006, Brighton, United Kingdom, September 04–05, 2006. 
© 2006 ACM 1-59593-464-2/06/0009 $5.00 

197

as explanatory visualization. The idea of explanatory visualization
is to augment every visualization step with a natural language ex-
planations [Brusilovsky 1994; Stasko et al. 1993]. Studies demon-
strate that explanations do indeed help students understand what
they see [Brusilovsky 1994]. Our new system attempts to truly in-
tegrate explanations into the adaptive visualization framework, not
by simply adding static text, but rather by producing explanations
that are adapted to the user’s level of knowledge.

2 Expression Evaluation

WADEIn II is a Web-based tool for students studying the C lan-
guage in introductory programming courses and is a successor of
the WADEIn system. It addresses the problem of explaining ex-
pression evaluation (excluding pointer arithmetic). This problem
is both relatively complicated and rarely addressed by visualization
tools. WADEIn II supports 24 operators covering simple arithmetic,
comparison, increment/decrement, logic, and assignment.

The domain model consists of these 24 operators modeled as ex-
plicit concepts and 4 implicit concepts. The implicit concepts are:
(1) reading a variable, (2) implicit integer-to-double casting, (3) in-
plicit double-to-integer casting, and (4) logical value representation
(0 evaluates to false, any non-zero value evaluates to true). Implicit
concepts are relevant for more than one operator.

The user interface of WADEIn II (Figure 1) is divided into four ar-
eas: Goals and Progress (A), Settings (B), Navigation (C), and the
Blackboard (D). Goals and Progress area contains a list of explicit
concepts, along with progress indicators known as skillometers that
allow the student to monitor their progress. The student’s knowl-
edge of implicit concepts is not visualized (although tracked and
used for adaptation purposes). The Settings area allows the student
to select the expression to be evaluated, set the initial values of vari-
ables, and select the mode. The Navigation area allows the student
to go through the evaluation process in a step-by-step or operator-
by-operator basis, either forward or backward. Finally, the Black-
board area is where the evaluation takes place. All visualizations
and explanations are presented there.

The system can work in two modes: exploration (EX) and knowl-
edge evaluation (EV). In the EX mode the student is presented with
the order of evaluation and the evaluation itself. Evaluation of each
operator in the current expression takes several steps. In this mode
the student’s role is narrowed to navigating and observing the vi-
sualization and reading explanations. The EV mode is more in-
teractive. First, the student is asked to indicate the correct order
of evaluation (shaped by the precedence of operators). Then, for
each operator in the expression they are asked to predict its out-
come value. These modes serve two purposes: training and test.
This separation is also present on the student model level.

There are a couple of concepts that students may ﬁnd more difﬁ-
cult: (1) logical values representation, (2) integer-to-double implicit
casting, (3) double-to-integer implicit casting, and (4) postdecre-
ment/postincrement. Each of these concepts has a dedicated visual
ﬂag in the Blackboard area. The ﬂag is highlighted when a more

Eventually, the animations are collapsed. As mentioned in the pre-
vious section, explanations are constructed from short paragraphs
of text. Each paragraph is tagged with a value. Once the stu-
dent’s knowledge level has exceeded that value, the paragraph is
no longer shown. Many paragraphs can have the same value as-
signed and therefore several of them may disappear at the same
time. Eventually, when the student has already mastered an opera-
tor, no paragraphs are shown. For example, the ﬁrst paragraph for
the predecrement operator explains what it means to ”decrement a
variable”. The student will see that paragraph the ﬁrst three times
predecrement is evaluated. After that, their knowledge level will in-
dicate that the idea from that paragraph has been remembered and
therefore the paragraph should be excluded from the explanation.
However, a couple of incorrect answers about predecrement (in the
EV mode) will provide evidence that in fact the student may have
misunderstood the idea of decrementing. This will cause the para-
graph to become visible again.

The speed of knowledge accumulation, as modeled by the system,
is a function of concept complexity, which is assigned to each con-
cept by a domain expert1. The more complex a concept is the lower
the assumption of knowledge accumulation.

The EX-EV dichotomy inﬂuences how the student’s progress is rep-
resented on the skillometers (Figure 1, area A). The amount of EX-
related work is represented as the length of the progress bar while
the amount of EV-related work is represented by the intensity of its
color. That distinction helps students plan their work better. For
instance, they can easily identify operators that need more work in
the EV mode by their color.

4 Acknowledgements

This material is based upon work supported by the National Science
Foundation under Grant No. 0426021. Special thanks go to Sergey
Sosnovsky, Rosta Farzan, and Roman Bednarik for their input.

References

BRUSILOVSKY, P., AND SU, H.-D. 2002. Adaptive visualization
component of a distributed web-based adaptive educational sys-
tem. In Intelligent Tutoring Systems, Springer-Verlag, vol. 2363,
229–238.

BRUSILOVSKY, P. 1994. Explanatory visualization in an edu-
cational programming environment: connecting examples with
general knowledge. In Blumenthal, B., Gornostaev, J. and Unger,
C. (eds.) Human-Computer Interaction. Lecture Notes in Com-
puter Science, Springer-Verlag, vol. 876, 202–212.

BYRNE, M. D., CATARAMBONE, R., AND STASKO, J. T. 1999.
Evaluating animations as student aids in learning computer algo-
rithms. In Computers & Education, vol. 33, 253–278.

NAPS, T. L., EAGAN, J. R., AND NORTON, L. L. 2000. JHAVE
– an environment to actively engage students in web-based algo-
rithm visualizations. In ACM SIGCSE bulletin, vol. 32, 109–113.

STASKO, J. T., BADRE, A., AND LEWIS, C. 1993. Do algorithm
animations assist learning? an empirical study and analysis. In
INTERCHI’93, ACM, 61–66.

Figure 1: WADEIn II launched in exploration mode.

difﬁcult concept is involved to make the student aware of this fact
(hopefully, making them more alert).

To make sure the object of visualization is clear for all students
additionally to using visual metaphors WADEIn II also includes
natural language explanations. Please note, that even though some
of the concepts are modeled as implicit and are not listed in the
Goals and Progress area, they still have explanations. Each evalua-
tion step is accompanied by an explanation, constructed from short
paragraphs of text. Each paragraph addresses a different idea. For
instance, when there is a logical OR operator, the explanation con-
tains (a) its function and (b) how numbers are evaluated to result in
a boolean value. Each of these ideas has a separate paragraph.

The quality of an explanation is very important. Bad wording can
increase student’s confusion instead of helping him to understand
the material better. Explanations used in WADEIn II have been
proofread by a native speaker who is also a domain expert.

3 Adaptation

As the student learns more and more about a concept they need
less and less guidance. Once they have mastered a concept they
don’t need any more guidance. Overly detailed presentations may
discourage or bore the student, because they are forced to see the
things they already know over and over. When nothing ever changes
in a system the student may conclude that they have already learned
all there is to know. WADEIn II adjusts both the visualization and
explanations to match the student’s current knowledge.

WADEIn II uses an overlay student model. Each concept in the
model is described in terms of the two system modes (EX and EV).
The following four student activity types are logged into the student
model: (1) the student observes the visualization and explanations,
(2) the student correctly indicates the order of evaluation, (3) the
student provides the correct outcome value of an operation, and (4)
the student provides an incorrect outcome value of an operation.
The history of the student’s activities is used to make inferences
about their current level of knowledge which then drives the sys-
tem’s adaptation engine.

As the student’s knowledge level related to a certain concept in-
creases, the related animations gradually become faster and faster.

1In WADEIn II, level of complexity was assigned by an advanced pro-

grammer and an instructor for an introductory programming course

198

