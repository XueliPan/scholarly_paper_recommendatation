On the cost of participating in a peer-to-peer network ∗

Nicolas Christin

John Chuang

School of Information Management and Systems

University of California, Berkeley

Berkeley, CA 94720

{christin,chuang}@sims.berkeley.edu

Technical report, University of California, Berkeley

http://p2pecon.berkeley.edu/pub/TR-2003-12-CC.pdf

December 2003

Abstract

In this paper, we model the cost incurred by each peer participating in a peer-to-peer network. Such
a cost model allows to gauge potential disincentives for peers to collaborate, and provides a measure of
the “total cost” of a network, which is a possible benchmark to distinguish between proposals. We char-
acterize the cost imposed on a node as a function of the experienced load and the node connectivity, and
show how our model applies to a few proposed routing geometries for distributed hash tables (DHTs).
We further outline a number of open questions this research has raised.

4
0
0
2

 

n
a
J
 

4
1

 
 
]
I

N
.
s
c
[
 
 

1
v
0
1
0
1
0
4
0
/
s
c
:
v
i
X
r
a

∗This research is supported in part by the National Science Foundation, through grant ANI-0085879.

1 Introduction

A key factor in the efﬁciency of a peer-to-peer overlay network is the level of collaboration provided by each
peer. This paper takes a ﬁrst step towards quantifying the level of collaboration that can be expected from
each participant, by proposing a model to evaluate the cost each peer incurs for being a part of the overlay.
Such a cost model has several useful applications, among which, (1) providing a benchmark that can
be used to compare between different proposals, complementary to recent works comparing topological
properties of various overlays [7, 12], (2) allowing for predicting disincentives, and designing mechanisms
that ensure a protocol is strategyproof [16], and (3) facilitating the design of load balancing primitives.

This work is not the ﬁrst attempt to characterize the cost of participating in a network. Jackson and
Wolinsky [9] proposed cost models to analyze formation strategies in social and economic networks. More
recent studies [4, 6] model (overlay) network formation as a non-cooperative game. These studies assume
that each node has the freedom to choose which links it maintains, whereas we assume that the overlay
topology is constrained by a protocol. Moreover, our approach extends previously proposed cost models
[4, 6, 9], by considering the load imposed on each node in addition to the distance to other nodes and degree
of connectivity.

In the remainder of this paper, we introduce our proposed cost model, before applying it to several
routing geometries used in recently proposed distributed hash tables (DHT) algorithms [10, 12, 18, 19, 21].
We conclude by discussing some open problems this research has uncovered.

2 Proposed cost model

The model we propose applies to any peer-to-peer network where nodes request and serve items, or serve
requests between other nodes. This includes peer-to-peer ﬁle-sharing systems [1], ad-hoc networks [5], peer-
to-peer lookup services [18, 21], peer-to-peer streaming systems [8], or application-layer multicast overlays
[2, 3, 11], to name a few examples.

To simplify the presentation, we assume a DHT-like structure, deﬁned by quadruplet (V, E, K, F ),
where V is the set of vertices in the network, E is the set of edges, K is the set of keys (items) in the network,
and F : K → V is the hash function that assigns keys to vertices. We denote by Ki = {k ∈ K : F (k) = i}
the set of keys stored at node i ∈ V . We have K =
i Ki, and we assume, without loss of generality, that
the sets Ki are disjoint.1 We characterize each request with two independent random variables, X ∈ V and
Y ∈ K, which denote the node X making the request, and the key Y being requested, respectively.

S

Consider a given node i ∈ V . Every time a key k is requested in the entire network, node i is in one of

four situations:

to any cost.

of being requested.

1. Node i does not hold or request k, and is not on the routing path of the request. Node i is not subject

1If a key is stored on several nodes (replication), the replicas can be considered as different keys with the exact same probability

2

2. Node i holds key k, and pays a price si,k for serving the request. We deﬁne the service cost Si incurred

by i, as the expected value of si,k over all possible requests. That is,

Si =

si,kPr[Y = k] .

Xk∈Ki

3. Node i requests key k, and pays a price to look up and retrieve k. We model this price as ai,kti,j,
where ti,j is the number of hops between i and the node j that holds the key k, and ai,k is a (positive)
proportional factor. We deﬁne the access cost suffered by node i, Ai, as the sum of the individual
costs ai,kti,j multiplied by the probability key k ∈ Kj is requested, that is,

Ai =

ai,kti,jPr[Y = k] ,

(1)

Xj∈V Xk∈Kj

with ti,j = ∞ if there is no path from node i to node j, and ti,i = 0 for any i.

4. i does not hold or request k, but has to forward the request for k, thereby paying a price ri,k. The
overall routing cost Ri experienced by node i is the average over all possible keys k, of the values of
ri,k such that i is on the path of the request. That is, we consider the binary function

1 if i is on the path from j to l,

χj,l(i) = 


excluding j and l

0 otherwise,

and express Ri as



Ri =

ri,kPr[X = j]Pr[Y = k]χj,l(i) .

(2)

Xj∈V Xl∈V Xk∈Kl

In addition, each node keeps some state information so that the protocol governing the DHT operates cor-
rectly. In most DHT algorithms, each node i maintains a neighborhood table, which grows linearly with the
out-degree deg(i) of the node, resulting in a maintenance cost Mi given by

where mi > 0 denotes the cost of keeping a single entry in the neighborhood table of node i.

Last, the total cost Ci imposed on node i is given by

Mi = mi deg(i) ,

Ci = Si + Ai + Ri + Mi ,

i∈V Ci. The topology that minimizes
which can be used to compute the total cost of the network, C =
C, or “social optimum,” is generally not trivial. In particular, the social optimum is the full mesh only if
mi = 0 for all i, and the empty set only if ai,k = 0 for all (i, k).

P

3

3 Case studies

We next apply the proposed cost model to a few selected routing geometries. We deﬁne a routing geometry
as in [7], that is, as a collection of edges, or topology, associated with a route selection mechanism. Unless
otherwise noted, we assume shortest path routing, and distinguish between different topologies. We derive
the various costs experienced by a node in each geometry, before illustrating the results with numerical
examples.

3.1 Analysis

which implies

We consider a network of N > 0 nodes, and, for simplicity, assume that, for all i and k, si,k = s, ai,k = a,
ri,k = r, and mi = m. For the analysis in this section, we also assume that each node holds the same
number of keys, and that all keys have the same popularity. As a result, for all i,

regardless of the geometry considered. We also assume that requests are uniformly distributed over the set
of nodes, that is, for any node i,

Last, we assume that no node is acting maliciously.

Star network The star frequently appears as an equilibrium in network formation studies using cost mod-
els based on graph connectivity [4, 6, 9].

We use i = 0 to denote the center of the star, which routes all trafﬁc between peripheral nodes. That is,

χj,l(0) = 1 for any j 6= l (j > 0, l > 0). Substituting in Eqn. (2), we get

The center node is located at a distance of one hop from all (N − 1) other nodes, thus

In addition, deg(0) = N − 1, which implies that the cost incurred by the center of the star, C0, is

C0 = m(N − 1) +

+

s
N

N

a(N − 1)

r(N − 1)(N − 2)

N 2

.

(3)

Peripheral nodes do not route any trafﬁc, i.e., Ri = 0 for all i > 0, and are located at a distance of one

from the center of the star, and at a distance of two from the (N − 2) other nodes, giving

Pr[Y = k] =

1
N

,

Xk∈Ki

Si =

s
N

,

Pr[X = i] =

1
N

.

R0 =

r(N − 1)(N − 2)

.

N 2

A0 =

a(N − 1)

N

.

+

Ai =

a(2N − 3)

.

N

4

Furthermore, deg(i) = 1 for all peripheral nodes. Thus, Mi = m, and the total cost imposed on nodes i > 0
is

Ci = m +

s + a(2N − 3)

.

N

(4)

The difference C0 − Ci quantiﬁes the (dis)incentive to be in the center of the star. As expressed in the
following two theorems, there is a (dis)incentive to be in the center of the star in a vast majority of cases.

Theorem 1. If the number of nodes N (N > 0) is variable, C0 6= Ci unless m = r = a = 0.

Proof. Assume that C0 − Ci = 0. Because N 6= 0, C0 − Ci = 0 is equivalent to N 2(C0 − Ci) = 0. Using
the expressions for C0 and Ci given in Eqs. (3) and (4), and rewriting the condition N 2(C0 − Ci) = 0 as a
polynomial in N , we obtain

mN 3 − (2m + a − r)N 2 + (2a − 3r)N + 2r = 0 .

We can factor the above by (N − 2), and obtain

(N − 2)(mN 2 − (a − r)N − r) = 0 .

(5)

A polynomial in N is constantly equal to zero if and only if all of the polynomial coefﬁcients are equal to
zero. Thus, Eqn. (5) holds for any value of N if and only if:

= 0 ,
m
a − r = 0 ,
r
= 0 .






The solutions of the above system of equations are m = r = a = 0. Hence, C0 − Ci = 0 for any N only
when nodes only pay an (arbitrary) price for serving data, while state maintenance, trafﬁc forwarding, and
key lookup and retrieval come for free.

Theorem 2. If the number of nodes N (N > 0) is held ﬁxed, and at least one of m, r, or a is different from
zero, C0 = Ci only if N = 2 or N = N0, where N0 is a positive integer that must satisfy:

N0 =

(

r

r−a
a−r
2m +

if m = 0 and r 6= a ,

2

a−r
2m

+ r

m if m 6= 0 .

Additionally, C0 6= Ci for any N 6= 2 if m = 0 and r = a.

q(cid:0)

(cid:1)

Proof. Recall from the proof of Theorem 1, that C0 − Ci = 0 is equivalent to Eqn. (5). Clearly, setting
N = 2 satisﬁes Eqn. (5) for all values of s, r, and m. Assuming now that N 6= 2, to have C0 − Ci = 0, we
need to have

mN 2 − (a − r)N − r = 0 .

Since at least one of m, r, or a is not equal to zero, Eqn. (7) has at most two real solutions. We distinguish
between all possible cases for m, r, and a such that at least one of m, r, and a is different from zero.

(6)

(7)

5

• If m = 0, and a = r, Eqn. (7) reduces to r = 0, which implies m = r = a = 0, thereby contradicting
the hypothesis that at least one of m, r, and a is different from zero. Therefore, Eqn. (7) does not
admit any solution, i.e., there is a (dis)incentive to be in the center of the star regardless of N .

• If m = 0 and r 6= a, the only solution to Eqn. (7) is

N0 =

r

.

r − a

Note that if r < a, N0 < 0 which is not feasible. (The number of nodes has to be positive.)

• If m 6= 0, then Eqn. (7) admits two real roots (or a double root if a = r = 0), given by

However, because r ≥ 0, and m ≥ 0,

so that the only potentially feasible N0 is given by

N0 =

a − r
2m

±

a − r
2m

(cid:19)

s(cid:18)

2

+

r
m

.

a − r
2m

−

a − r
2m

2

(cid:19)

s(cid:18)

+

≤ 0 ,

r
m

N0 =

a − r
2m

+

a − r
2m

(cid:19)

s(cid:18)

2

+

r
m

.

(8)

(9)

Combining Eqs. (8) and Eqs. (9) yields the expression for N0 given in Eqn. (6). Note that the expression
given in Eqn. (6) is only a necessary condition. In addition, N0 has to be an integer so that we can set the
number of nodes N to N = N0.

De Bruijn graphs De Bruijn graphs are used in algorithms such as Koorde [10], Distance-Halving [15],
or ODRI [12], and are extensively discussed in [12, 20]. In a de Bruijn graph, any node i is represented by
an identiﬁer string (i1, . . . , iD) of D symbols taken from an alphabet of size ∆. The node represented by
(i1, . . . , iD) links to each node represented by (i2, . . . , iD, x) for all possible values of x in the alphabet.
The resulting directed graph has a ﬁxed out-degree ∆, and a diameter D.

Denote by V ′ the set of nodes such that the identiﬁer of each node in V ′ is of the form (h, h, . . . , h).
Nodes in V ′ link to themselves, so that Mi = m(∆ − 1) for i ∈ V ′. For nodes i /∈ V ′, the maintenance
cost Mi is Mi = m∆. The next two lemmas will allow us to show that the routing cost at each node also
depends on the position of the node in the graph.

Lemma 1. With shortest-path routing, nodes i ∈ V ′ do not route any trafﬁc, and Ri = 0.

Proof. (By contradiction.) Consider a node i ∈ V ′ with identiﬁer (h, h, . . . , h), and suppose i routes trafﬁc
from a node j to a node k. The nodes linking to i are all the nodes with an identiﬁer of the form (x, h, . . . , h),

6

for all values of x in the alphabet. The nodes linked from i are all the nodes of the form (h, . . . , h, y) for all
values of y in the alphabet. Therefore, there exists x0 and y0 such that trafﬁc from node j to node k follows
a path P = (x0, h, . . . , h) → (h, h, . . . , h) → (h, h, . . . , y0). Because, in a de Bruijn graph, there is an
edge between (x0, h, . . . , h) and (h, h, . . . , y0), trafﬁc using the path P between j and k does not follows
the shortest path. We arrive to a contradiction, which proves that i does not route any trafﬁc.

Lemma 2. The number of routes Li passing through a given node i is bounded by Li ≤ Lmax with

Lmax =

(D − 1)(∆D+2 − (∆ − 1)2) − D∆D+1 + ∆2

.

(∆ − 1)2

The bound is tight, since it can be reached when ∆ ≥ D for the node (0, 1, 2, . . . , D − 1).

Proof. The proof follows the spirit of the proof used in [20] to bound the maximum number of routes passing
through a given edge. In a de Bruijn graph, by construction, each node maps to an identiﬁer string of length
D, and each path of length k hops maps to a string of length D + k, where each substring of D consecutive
symbols corresponds to a different hop [12]. Thus, determining an upper bound on the number of paths of
length k that pass through a given node i is equivalent to computing the maximum number, lk, of strings
of length D + k that include node i’s identiﬁer, σi = (i1, . . . , iD), as a substring. In each string of length
D + k corresponding to a paths including i, where i is neither the source nor the destination of the path, the
substring σi can start at one of (k − 1) positions (2, . . . , k). There are ∆ possible choices for each of the k
symbols in the string of length D + k that are not part of the substring σi. As a result,

lk ≤ (k − 1)∆k .

With shortest path routing, the set of all paths going through node i include all paths of length D + k with
k ∈ [1, D]. So,

k=D

k=D

Li ≤

lk ≤

(k − 1)∆k

Xk=1
(D − 1)∆D+2 − D∆D+1 + ∆2

Xk=1

(∆ − 1)2

.

≤

(10)

We improve the bound given in Eqn. (10) by considering the strings of length 2D that are of the form σ∗σ∗,
where σ∗ is a string of length D. Strings of the form σ∗σ∗ denote a cycle σ∗ → σ∗, and cannot be a
shortest path in a de Bruijn graph. Hence, we can subtract the number of the strings σ∗σ∗ from the bound in
Eqn. (10). Because σi = (i1, . . . , iD) is a substring of σ∗σ∗ of length D, σ∗ has to be a circular permutation
of σi, for instance (iD−1, iD, i1, . . . , iD−2). Since i does not route any trafﬁc when i is the source of trafﬁc,
σ∗ 6= σi. Thus, there are only (D − 1) possibilities for σ∗, and (D − 1) strings σ∗σ∗. Subtracting (D − 1)
from the bound in Eqn. (10) yields Lmax.

7

From Lemmas 1 and 2, we infer that, in a de Bruijn graph, for any i, j and k, 0 ≤ Pr[χi,j(k) =
1] ≤ Lmax/N 2. Because χi,j(k) is a binary function, Pr[χi,j(k) = 1] = E[χi,j], and we ﬁnally obtain
0 ≤ Ri ≤ Rmax with

Rmax =

rLmax

N 2

.

We next compute upper and lower bounds on the access cost. To derive a tight upper bound on Ai, consider
a node i ∈ V ′. Node i links to itself and has only (∆ − 1) neighbors. Each neighbor of i has itself ∆
neighbors, so that there are ∆(∆ − 1) nodes k such that ti,k = 2. By iteration and substitution in Eqn. (1),
we get, after simpliﬁcation, Ai ≤ Amax, with

Amax = a

D∆D+1 − (D + 1)∆D + 1

,

N (∆ − 1)

and Ai = Amax for nodes in V ′.

Now, consider that each node i has at most ∆ neighbors. Then, node i has at most ∆2 nodes at distance
D−1
k=0 ∆k nodes at the

2, at most ∆3 nodes at distance 3, and so forth. Hence, there are at least ∆D −
maximum distance of D from node i. We get

P

Ai ≥

a
N  

D−1

Xk=1

k∆k + D

∆D −

∆k

 

!!

D−1

Xk=0

which reduces to Ai ≥ Amin, with

Amin =

D∆D +

a
N

D

∆ − 1

−

∆(∆D − 1)
(∆ − 1)2

(cid:19)
It can be shown that Ai = Amin for the node (0, 1, . . . , D − 1) when ∆ ≥ D.

(cid:18)

,

.

Note that, the expressions for both Amin and Amax can be further simpliﬁed for N = ∆D, that is, when

the identiﬁer space is fully populated.

D-dimensional tori We next consider D-dimensional tori, as in CAN [18], where each node is represented
by D Cartesian coordinates, and has 2D neighbors, for a maintenance cost of Mi = 2mD for any i.

Routing at each node is implemented by greedy forwarding to the neighbor with the shortest Euclidean
distance to the destination. We assume here that each node is in charge of an equal portion of the D-
4 N 1/D hops.2 Because
dimensional space. From [18], we know that the average length of a routing path is D
we assume that the D-dimensional torus is equally partitioned, we conclude by symmetry, that for all i,

To determine the routing cost Ri, we compute the number of routes passing through a given node i,
or node loading, as a function Li,D of the dimension D. With our assumption that the D-torus is equally
partitioned, Li,D is the same for all i by symmetry. We next compute Li,D by induction on the dimension
D.

2Loguinov et al. [12] reﬁned that result by distinguishing between odd and even values of N .

Ai = a

N 1/D .

D
4

8

0

(2)

0

1

6

(2)

5

(1)

1

(2)

6

(1)

2

5

(1)

(0)

4

(0)

3

(0)

4

(0)

3

(1)

4

(1)

3

(0)

2
(2)

. . .

5

(2)

2

(0)

(2)

0

6

1

(1)

Figure 1: Routing in a ring. The numbers in parentheses represent the number of routes originating from
the black node that pass through each node.

Base case (D = 1). For D = 1, the D-torus is a ring, as depicted in Figure 1 for N = 7. Each of
the diagrams in the ﬁgure corresponds to a case where the source of all requests, represented by a black
node, is held ﬁxed. The numbers in each node (0, . . . , 6) represent the node coordinate, the different line
styles represent the different routes to all destinations, and the numbers in parentheses denote the number of
routes originating from the ﬁxed source that pass through each of the other nodes. As shown in the ﬁgure,
shifting the source of all requests from 0 to 1, . . . , 6 only results in shifting the number of routes that pass
through each node. Hence, the node loading Li,1 at each node i, is equal to the sum of the number of routes
passing through each node when the source is held ﬁxed. In the ﬁgure, for N = 7, we have for any i,
Li,1 = 0 + 1 + 2 + 2 + 1 + 0 = 6. More generally, for N odd, the sum of the number of routes passing
through each node is equal to

Li,1 = 2

1 + 2 + . . . +

(cid:18)

(N − 1)(N − 3)

(cid:18)
,

=

4

N − 1

2

− 1

(cid:19)(cid:19)

and for N even, is given by

Li,1 =

1 + 2 + . . . +

− 1

+

1 + 2 + . . . +

− 2

N
2

(cid:18)

(cid:19)(cid:19)

(cid:18)

N
2

(cid:18)

(cid:19)(cid:19)

(cid:18)
(N − 2)2

.

4

=

We can express Eqs. (11) and (12) in a more compact form, which holds for any N ,

Li,1 =

− 1

− 1

.

(cid:18)(cid:22)

(cid:23)

(cid:19) (cid:18)(cid:24)

(cid:25)

(cid:19)

N
2

N
2

(11)

(12)

(13)

General case (D > 1). The key observation to compute the number of routes Li,D passing through
each node i for D > 1, is that there are several equivalent shortest paths along the Cartesian coordinates,

9

(2,3,2)

(0,4,2)

(0,4,1)

(0,4,0)

(4,0,4)

(3,2,2)

(4,0,3)

(2,1,3)

(2,2,2)

(3,1,2)

Figure 2: Routing in 3-torus. Coordinates are corrected one at a time, ﬁrst along the horizontal axis, then
along the vertical axis, and ﬁnally along the diagonal axis.

because the coordinates of two consecutive nodes in a path cannot differ in more than one dimension.
Consider for instance, for D = 2, going from node (0,0) to node (1,1): both P1 = (0, 0) → (1, 0) → (1, 1)
and P2 = (0, 0) → (0, 1) → (1, 1) are equivalent shortest paths. Therefore, we can always pick the path
that corrects coordinates successively, starting with the ﬁrst coordinate, i.e., P1 in the above example.

Consider a D-torus, as represented for D = 3 in Figure 2, where each of the N = 125 nodes is
represented by a dot. The ﬁgure illustrate how requests are routed by correcting coordinates successively,
with the example of three different paths, (2, 3, 2) → (3, 1, 2), (2, 2, 2) → (0, 4, 0), and (2, 1, 3) → (4, 0, 4).
For any node k, we compute the number of routes passing through k. We denote the source of the route as
node i, and the destination of the route as node j. We have i 6= j 6= k. We further denote the coordinates of i,
j, and k by (i1, . . . , iD), (j1, . . . , jD), and (k1, . . . , kD). We distinguish between the only three possibilities
for k that are allowed by the routing scheme that corrects coordinates one at a time:

1. Node k has the same D-th coordinate as both the source i and the destination j, i.e., iD = jD = kD. In
other words, the route P = i → j is entirely contained within a (D − 1)-torus. This case is illustrated
in the ﬁgure for the route represented by a solid line going from i = (2, 3, 2) to j = (3, 1, 2) through
k = (3, 2, 2). The corresponding (D − 1)-torus containing i, j and k is denoted by the shaded box.
By deﬁnition of the node loading, the node loading resulting from all possible paths P contained in
a (D − 1)-torus is equal to Li,D−1. There are n different such (D − 1)-tori in the D-torus under
consideration, one for each possible value of iD = jD = kD. So, the total load incurred on each node
by all paths which remain contained within a (D − 1)-torus is equal to nLi,D−1.

2. Nodes i, j and k all differ in their D-th coordinate, i.e., iD 6= jD 6= kD. Because coordinates are

10

corrected one at a time, for any l ∈ (1, . . . , D − 1), we must have kl = jl. This case is illustrated in
the ﬁgure for the route represented by a dashed line, going from i = (2, 2, 2) to j = (0, 4, 0), through
k = (0, 4, 1). Since kl = jl, nodes j and k belong to the same ring where only the D-th coordinate
varies. Such a ring is represented in the ﬁgure by the dotted curve. From node k’s perspective, routing
trafﬁc from i to j is equivalent to routing trafﬁc between nodes i′ and j, where node i′ satisﬁes i′
l = kl
for any l ∈ (1, . . . , D − 1), and i′
D = iD. (In the ﬁgure, the coordinates of node i′ are (0, 4, 2).)
From our hypothesis kD 6= iD, we have kD 6= i′
D, which implies k 6= i′. Therefore, computing the
number of routes passing through node k coming from i is equivalent to computing the number of
routes passing through node k and originating from node i′. Summing over all possible destination
nodes j, the computation of all routes passing through k and originating from all nodes i′ in the same
ring as j and k is identical to the computation of the node loading in the base case D = 1. So, the load
imposed on node k is equal to Li,1. Now, summing over all possible nodes i is equivalent to summing
over all possible rings where only the D-th coordinate varies. There are are nD−1 such rings in the
D-torus. We conclude that the total load incurred on each node k by the paths going from all i to all
j satisfying iD 6= jD 6= kD is equal to nD−1Li,1.

3. Node k has the same D-th coordinate as node i, and a D-th coordinate different from that of the
destination j. In other words, iD 6= jD, iD = kD. This situation is illustrated in the ﬁgure for the
route going from i = (2, 1, 3) to j = (4, 0, 4) and passing through k = (4, 0, 3), and represented by a
thick dotted line. In this conﬁguration, there are (n − 1) possible choices for the destination node j
such that jD 6= kD, and jl = kl for l ≤ D − 1. There are nD−1 − 1 possible choices for the source
node i such that iD = kD and i 6= j. Hence, in this conﬁguration, there is a total of (n − 1)(nD−1 − 1)
routes passing through each node k.

Summing the node loadings obtained in all three possible cases above, we obtain

Li,D = nLi,D−1 + nD−1Li,1 + (n − 1)(nD−1 − 1) .

Replacing Li,1 by the expression given in Eqn. (13), using n = N 1/D, and removing the recursion in the
above relationship, we obtain, for any node i,

Li,D = N

D−1

D

1
D − 1 +

N

D

 

 

1
D

N
2 %

 $

− 1

!  &

1
D

N
2 '

− 1

1
D

− N

+ 1 .

!!

!

For all i, Ri immediately follows from Li,D with

Plaxton trees We next consider the variant of Plaxton trees [17] used in Pastry [19] or Tapestry [22].
Nodes are represented by a string (i1, . . . , iD) of D digits in base ∆. Each node is connected to D(∆ − 1)

Ri = r

Li,D
N 2 .

11

distinct neighbors of the form (i1, . . . , il−1, x, yl+1, . . . , yD), for l = 1 . . . D, and x 6= il ∈ {0, . . . , ∆−1}.3
The resulting maintenance cost is Mi = mD(∆ − 1).

Among the different possibilities for the remaining coordinates yl+1, . . . , yD, the protocols generally
select a node that is nearby according to a spatial proximity metric. We here assume that the spatial distribu-
tion of the nodes is uniform, and that the identiﬁer space is fully populated (i.e., N = ∆D), which enables
us to pick yl+1 = il+1, . . . , yD = iD. Thus, two nodes i and j at a distance of k hops differ in k digits.
There are
ways of choosing which digits are different, and each such digit can take any of (∆ − 1)
(∆ − 1)k nodes that are at distance k from i. Multiplying by
values. So, for a given node i, there are
the total number of nodes N = ∆D, and dividing by the total number of paths N 2, we infer that, for all i, j,
and k, we have

D
k

D
k

(cid:0)

(cid:1)

(cid:1)

(cid:0)

Now, for any i and j such that ti,j = l, because routes are unique, there are exactly (l − 1) different nodes
on the path between i and j. So, the probability that a node k picked at random is on the path from i to j is

Pr[ti,j = k] =

D
k

(∆ − 1)k

.

N

(cid:0)

(cid:1)

Pr[χi,j(k) = 1|ti,j = l] =

l − 1

N

.

(14)

(15)

The total probability theorem tells us that

Pr[χi,j(k) = 1] =

Pr[χi,j(k) = 1|ti,j = l] · Pr[ti,j = l] .

D

Xl=1

Substituting with the expressions obtained for Pr[ti,j = l] and Pr[χi,j(k) = 1|ti,j = l] in Eqs. (14) and (15)
gives:

Pr[χi,j(k) = 1] =

(l − 1)

(∆ − 1)l ,

(16)

1
N 2

D

Xl=1

D
l

(cid:18)

(cid:19)

which can be simpliﬁed as follows. We write:

(l − 1)(∆ − 1)l = (∆ − 1)2

(l − 1)

(∆ − 1)l−2 ,

D

Xl=1

D
l

(cid:18)

(cid:19)

and rewrite the right-hand term as a function of the derivative of a series,

(l − 1)(∆ − 1)l = (∆ − 1)2 ∂

D

D
l

∂∆  

Xl=1 (cid:18)

(cid:19)

(∆ − 1)l−1

,

!

or, equivalently,

(l − 1)(∆ − 1)l = (∆ − 1)2 ∂

∂∆  

∆ − 1

D

1

D
l

Xl=1 (cid:18)

(cid:19)

1D−l(∆ − 1)l

.

!

3For ∆ = 2, this geometry reduces to a hypercube.

D

D
l

Xl=1 (cid:18)

(cid:19)

D
l

Xl=1 (cid:18)

(cid:19)

D

D
l

D

Xl=1 (cid:18)

(cid:19)

12

D

D

Xl=1 (cid:18)

(cid:19)

Xl=1 (cid:18)

D
l

(cid:19)

D

The binomial theorem allows us to simplify the above to:

D
l

(l − 1)(∆ − 1)l = (∆ − 1)2 ∂
∂∆

1

∆ − 1

(cid:18)

(1 + ∆ − 1)D − 1

,

which, making the partial derivative explicit, becomes,

(l − 1)(∆ − 1)l = (∆ − 1)2

D∆D−1(∆ − 1) − ∆D + 1

(cid:18)

(∆ − 1)2

D
l

(l − 1)(∆ − 1)l = ∆D−1(D(∆ − 1) − ∆) + 1 .

Pr[χi,j(k) = 1] =

∆D−1(D(∆ − 1) − ∆) + 1

,

N 2

and reduces to

Xl=1 (cid:18)
Substituting in Eqn. (16) gives:

(cid:19)

which we multiply by r to obtain

(cid:19)

,

(cid:19)

∆D−1(D(∆ − 1) − ∆) + 1

.

Ri = r

N 2

(17)

To compute the access cost Ai, we use the relationship Ai = aE[ti,j]. We have

which, using the expression for Pr[ti,j = k] given in Eqn. (14), implies

and can be expressed in terms of the derivative of a classical series:

E[ti,j] =

kPr[ti,j = k] ,

D

Xk=1

E[ti,j] =

(∆ − 1)k

,

D
k

k

(cid:0)

(cid:1)

D

Xk=0

N

D
k

E[ti,j] =

D

∆ − 1

N

∂
∂∆  

(∆ − 1)k

.

!

Xk=0 (cid:18)

(cid:19)

Using the binomial theorem, the series on the right-hand side collapses to ∆D, which yields

We compute the partial derivative, and obtain

N
Multiplying by a to obtain Ai, we eventually get, for all i,

which can be simpliﬁed, using N = ∆D:

E[ti,j] =

∆ − 1

∂(∆D)

N

∂∆

D∆D−1(∆ − 1)

E[ti,j] =

D∆D−1(∆ − 1)

Ai = a

N

.

,

.

Ai = aD

∆ − 1

.

∆

13

(18)

(∆, D) Amin Amax

(2, 9)

(3, 6)

(4, 4)

(5, 4)

(6, 3)

7.18

5.26

3.56

3.69

2.76

8.00

5.50

3.67

3.75

2.80

Amax

Amin R′
1.11

min Rmax
17.53

3.89

1.04

1.03

1.02

1.01

2.05

5.11

1.98

5.38

9.05

13.87

5.50

9.99

Rmax
R′
min
4.51

4.41

2.71

2.78

1.86

Table 1: Asymmetry in costs in a de Bruijn graph (a = 1, r = 1000)

A

max

R

max

t
s
o
c
 

g
n
i
t
u
o
R

 8

 7

 6

 5

 4

 3

 2

 1

 0

 0

 100

 200

 400

 500

 600

 0

 100

 200

 400

 500

 600

A

min

 300
Node id

R

min

R’

min

 300
Node id

(a) Access cost (a = 1)

(b) Routing cost (r = 1000)

Figure 3: Costs in a de Bruijn network with ∆ = 5, D = 4 and N = 625

 3.8

 3.78

 3.76

 3.74

 3.72

 3.7

 3.68

 3.66

t
s
o
c
 
s
s
e
c
c
A

In a Chord ring [21], nodes are represented using a binary string (i.e., ∆ = 2). When the ring
Chord rings
is fully populated, each node i is connected to a set of D neighbors, with identiﬁers ((i + 2m) mod 2D)
for m = 0 . . . D − 1. An analysis identical to the above yields Ri and Ai as in Eqs. (17) and (18) for ∆ = 2.
Note that Eqn. (18) with ∆ = 2 is conﬁrmed by experimental measurements [21].

3.2 Numerical results

We illustrate our analysis with a few numerical results. In Table 1, we consider ﬁve de Bruijn graphs with
different values for ∆ and D, and X and Y i.i.d. uniform random variables. Table 1 shows that while the
access costs of all nodes are comparable, the ratio between Rmax and the second best case routing cost,4
R′
min, is in general signiﬁcant. Thus, if r ≫ a, there can be an incentive for the nodes with Ri = Rmax to
defect. For instance, these nodes may leave the network and immediately come back, hoping to be assigned
a different identiﬁer i′ 6= i and incurring a lower cost. Additional mechanisms, such as enforcing a cost of
entry to the network, may be required to prevent such defections. We graph the access and routing costs
for the case ∆ = 5, D = 4 and N = 625 in Figure 3. We plot the access cost of each node in function
of the node identiﬁer in Figure 3(a), and the routing cost of each node in function of the node identiﬁer

4That is, the minimum value for Ri over all nodes but the ∆ nodes in V ′ for which Ri = 0.

14

t
s
o
c
 
s
s
e
c
c
A

 20

 15

 10

 5

 0

2−torus
(sim)

2−torus
(model)

De Bruijn

(upper bound)

De Bruijn
(sim, average)

Plaxton (sim)

Plaxton (model)

De Bruijn
(lower bound)

6−torus (model)

Star (average)

t
s
o
c
 

g
n
i
t
u
o
R

 1000

 100

 10

 1

De Bruijn

(upper bound)

2−torus
(model)

De Bruijn
(sim, avg)

2−torus
(sim)

Plaxton

(sim)

Star (average)

6−torus (model)

Plaxton (model)

 100  200  300  400  500  600  700  800  900  1000

 100  200  300  400  500  600  700  800  900  1000

Number of nodes

(a) Access cost (a = 1)

Number of nodes

(b) Routing cost (r = 1000)

Figure 4: Access and routing costs. Curves marked “sim” present simulation results.

in Figure 3(b). Figure 3 further illustrates the asymmetry in costs evidenced in Table 1, by exhibiting that
different nodes have generally different access and routing costs. Therefore, in a de Bruijn graph, there
is potentially a large number of nodes that can defect, which, in turn, may result in network instability, if
defection is characterized by leaving and immediately rejoining the network.

Next, we provide an illustration by simulation of the costs in the different geometries. We choose
∆ = 2, for which the results for Plaxton trees and Chord rings are identical. We choose D = {2, 6} for the
D-dimensional tori, and D = log∆ N for the other geometries. We point out that selecting a value for D
and ∆ common to all geometries may inadvertently bias one geometry against another. We emphasize that
we only illustrate a speciﬁc example here, without making any general comparison between different DHT
geometries.

We vary the number of nodes between N = 10 and N = 1000, and, for each value of N run ten
differently seeded simulations, consisting of 100,000 requests each, with X and Y i.i.d. uniform random
variables. We plot the access and routing costs averaged over all nodes and all requests in Figure 4. The
graphs show that our analysis is validated by simulation, and that the star provides a lower average cost than
all the other geometries. In other words, a centralized architecture appears more desirable to the community
as a whole than a distributed solution. However, we stress that we do not consider robustness against attack,
fault-tolerance, or potential performance bottlenecks, all being factors that pose practical challenges in a
centralized approach, nor do we offer a mechanism creating an incentive to be in the center of the star.
While the cost model proposed here can be used to quantify the cost incurred by adding links for a higher
resiliency to failures, we defer that study to future work.

4 Discussion

We proposed a model, based on experienced load and node connectivity, for the cost incurred by each peer
to participate in a peer-to-peer network. We argue such a cost model is a useful complement to topological
performance metrics [7, 12], in that it allows to predict disincentives to collaborate (peers refusing to serve

15

References

[1] The annotated Gnutella protocol speciﬁcation v0.4, June 2001. http://rfc-gnutella.sourceforge.net/developer/sta

requests to reduce their cost), discover possible network instabilities (peers leaving and re-joining in hopes
of lowering their cost), identify hot spots (peers with high routing load), and characterize the efﬁciency of a
network as a whole.

We believe however that this paper raises more questions than it provides answers. First, we only ana-
lyzed a handful of DHT routing geometries, and even omitted interesting geometries such as the butterﬂy
[13], or geometries based on the XOR metric [14]. Applying the proposed cost model to deployed peer-to-
peer systems such as Gnutella or FastTrack could yield some insight regarding user behavior. Furthermore,
for the mathematical analysis, we used strong assumptions such as identical popularity of all items and
uniform spatial distribution of all participants. Relaxing these assumptions is necessary to evaluate the per-
formance of a geometry in a realistic setting. Also, obtaining a meaningful set of values for the parameters
(s, a, r, m) for a given class of applications (e.g., ﬁle sharing between PCs, ad-hoc routing between energy-
constrained sensor motes) remains an open problem. Finally, identifying the minimal amount of knowledge
each node should possess to devise a rational strategy, or studying network formation with the proposed cost
model are other promising avenues for further research.

[2] S. Banerjee, B. Bhattacharjee, and C. Kommareddy. Scalable application layer multicast. In Proceedings of

ACM SIGCOMM’02, pages 205–217, Pittsburgh, PA, August 2002.

[3] Y.-H. Chu, S. Rao, and H. Zhang. A case for endsystem multicast. In Proceedings of ACM SIGMETRICS’00,

pages 1–12, Santa Clara, CA, June 2000.

[4] B.-G. Chun, R. Fonseca, I. Stoica, and J. Kubiatowicz. Characterizing selﬁshly constructed overlay networks. In

Proceedings of IEEE INFOCOM’04, Hong Kong, March 2004. To appear.

[5] C. Perkins (ed). Ad hoc networking. Addison-Wesley, Boston, MA, 2000.

[6] A. Fabrikant, A. Luthra, E. Maneva, C. Papadimitriou, and S. Shenker. On a network creation game. In Proceed-

ings of ACM PODC’03, pages 347–351, Boston, MA, July 2003.

[7] K. Gummadi, R. Gummadi, S. Gribble, S. Ratnasamy, S. Shenker, and I. Stoica. The impact of DHT rout-
ing geometry on resilience and proximity. In Proceedings of ACM SIGCOMM’03, pages 381–394, Karlsruhe,
Germany, August 2003.

[8] M. Hefeeda, A. Habib, B. Botev, D. Xu, and B. Bhargava. Promise: Peer-to-peer media streaming using Collect-

Cast. In Proceedings of ACM Multimedia’03, pages 45–54, Berkeley, CA, November 2003.

[9] M. Jackson and A. Wolinsky. A strategic model for social and economic networks. Journal of Economic Theory,

71(1):44–74, October 1996.

[10] M. F. Kaashoek and D. Karger. Koorde: A simple degree-optimal distributed hash table. In Proceedings of the
2nd International Workshop on Peer-to-Peer Systems (IPTPS’03), pages 323–336, Berkeley, CA, February 2003.

16

[11] J. Liebeherr, M. Nahas, and W. Si. Application-layer multicast with Delaunay triangulations. IEEE Journal of

Selected Areas in Communications, 20(8):1472–1488, October 2002.

[12] D. Loguinov, A. Kumar, V. Rai, and S. Ganesh. Graph-theoretic analysis of structured peer-to-peer systems: rout-
ing distances and fault resilience. In Proceedings of ACM SIGCOMM’03, pages 395–406, Karlsruhe, Germany,
August 2003.

[13] D. Malkhi, M. Naor, and D. Ratajczak. Viceroy: a scalable and dynamic emulation of the butterﬂy. In Proceed-

ings of ACM PODC’02, pages 183–192, Monterey, CA, July 2002.

[14] P. Maymounkov and D. Mazi`eres. Kademlia: A peer-to-peer information system based on the XOR metric. In
Proceedings of the 1st International Workshop on Peer-to-Peer Systems (IPTPS’02), pages 53–65, Cambridge,
MA, February 2002.

[15] M. Naor and U. Wieder. Novel architectures for P2P applications: the continuous-discrete approach. In Pro-

ceedings of ACM SPAA’03, pages 50–59, San Diego, CA, June 2003.

[16] C. Ng, D. Parkes, and M. Seltzer. Strategyproof computing: Systems infrastructures for self-interested parties.

In Proceedings of the 1st Workshop on the Economics of Peer-to-Peer Systems, Berkeley, CA, June 2003.

[17] C. G. Plaxton, R. Rajamaran, and A. Richa. Accessing nearby copies of replicated objects in a distributed

environment. Theory of Computing Systems, 32(3):241–280, June 1999.

[18] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker. A scalable content-addressable network. In

Proceedings of ACM SIGCOMM’01, pages 161–172, San Diego, CA, August 2001.

[19] A. Rowston and P. Druschel. Pastry: Scalable, decentralized object location and routing for large scale peer-to-
peer systems. In Proceedings of the 18th IFIP/ACM International Conference on Distributed Systems Platform
(Middleware’01), pages 329–350, Heidelberg, Germany, November 2001.

[20] K. Sivarajan and R. Ramaswami. Lightwave networks based on de Bruijn graphs. IEEE/ACM Transactions on

Networking, 2(1):70–79, February 1994.

[21] I. Stoica, R. Morris, D. Liben-Nowell, D. Karger, M. F. Kaashoek, and H. Balakrishnan. Chord: A scalable
peer-to-peer lookup protocol for Internet applications. IEEE/ACM Transactions on Networking, 11(1):17–32,
February 2003.

[22] B. Zhao, L. Huang, J. Stribling, S. Rhea, A. Joseph, and J. Kubiatowicz. Tapestry: A resilient global-scale

overlay for service deployment. IEEE Journal on Selected Areas in Communications, 2004. To appear.

17

