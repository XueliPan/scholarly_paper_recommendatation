An XML Interaction Service for Workflow Applications 

Y. S. Kuo, Lendle Tseng, Hsun-Cheng Hu, and N. C. Shih 

Institute of Information Science 

Academia Sinica, Taiwan 

{yskuo | lendle | hchu | ncshi}@iis.sinica.edu.tw 

 

ABSTRACT   
Interactions  with  human  users  are  a  crucial  part  of  many 
workflow  applications.  In  workflow  or  business  process 
management  specifications,  such  as  WSBPEL,  all  data  are 
represented  as  XML.  As  a  consequence,  many  human  tasks 
simply  support  users  to  create  or  update  XML  data  compliant 
with  a  schema.  We  propose  the  XML  interaction  service  as  a 
generic  Web  service  for  use  by  human  tasks  that  provides 
HTML form-based Web interfaces for users to interact with and 
update  schema-compliant  XML  data.  In  addition,  a  visual 
interface design tool is provided for interface designers to create 
and  customize  the  Web  interfaces  an  XML  interaction  service 
supports. 

Categories and Subject Descriptors 
H.4.1 [Office Automation]: Workflow Management, H.5.2 
[Information Interfaces and Presentation]: User Interfaces 

General Terms: Design, Experimentation 

Keywords: XML, User Interface, Workflow Management 

1.  INTRODUCTION 
Many  workflow-based  applications  must  interact  with  human 
users.  Current  XML-based  workflow  engines,  such  as  those 
implementing  WSBPEL  [9],  only  deal  with  the  process  model; 
user interactions are beyond their scope. On the other hand, the 
adoption  of  an  XML  data  model  in  these  workflow  engines 
gives  rise  to  opportunities  and  challenges.  Since  sophisticated 
data can be represented as XML and passed between a workflow 
engine  and  human  tasks  by  large  chunks,  the  programming 
interface  between 
simplified.  However, 
sophisticated XML data are governed by sophisticated schemas 
[13][14],  which  impose  stringent  validity  constraints  on  user 
interactions.  Developing  user  interfaces  for  sophisticated  XML 
data requires advanced programming skill and is expensive. This 
has motivated our development of a Web service [11], the XML 
interaction  service,  that  in  a  service-oriented  architecture  [8] 
undertakes  the  generic  task  of  interacting  with  human  users 
through the Web.   

them  can  be 

An  XML  interaction  service  simplifies  the  development  of 
human  tasks  in  XML-based  workflow  applications.  In  these 
applications,  since  all  data  are  represented  as  XML,  many 
human tasks simply support users to create or update XML data, 
which  can  be  described  by  an  XML  schema.  The  XML 

 

Permission to  make digital or hard  copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
DocEng'06, October 10–13, 2006, Amsterdam, The Netherlands. 
Copyright 2006 ACM 1-59593-515-0/06/0010...$5.00. 

for  user 

interfaces 

interactions 

from  human 

interaction  service  maintains  a  Web  server  while  providing 
human  tasks  with  XML-based  user  interactions.  It  accepts 
requests 
tasks  and 
communicates XML data with them while providing form-based 
Web 
interact  with  and  update 
schema-compliant XML data. Since the Web service can support 
Web  interfaces  for  general  XML  data,  human  tasks  can 
communicate  with  it  “first-hand”  application  data  without 
unnecessary data conversions. On the other hand, as a server, the 
XML interaction service must be able to manage a large amount 
of uncompleted interaction requests efficiently.   

for  users 

to 

An  XML  interaction  service  distinguishes  itself  in  its  role  in  a 
workflow  management  system.  Most,  if  not  all,  workflow 
management  systems  follow  the  WfMC  workflow  reference 
model where client applications (e.g. form filling) interact with 
the  central  workflow  enactment  service  through  a  client 
application interface [2]. We have pulled this function out of the 
workflow  enactment  service  as  a  stand-alone  service.  This 
approach enables the workflow enactment service to concentrate 
more on process control while the XML interaction service can 
be open to all workflow applications independent of the driving 
workflow engine. 

The development of human tasks can be simplified by not only 
the  XML  interaction  service  but  its  accompanying  interface 
generation component and tool. The authors have developed an 
interactive  component,  Forms-XML,  that  can  generate  HTML 
form-based  user  interfaces  from  prescribed  XML  schemas 
automatically  [6].  The  XML  data  produced  by  the  component 
are guaranteed to be schema-compliant [4][5]. A visual interface 
customization tool, the Forms-XML Designer, enables interface 
designers to tailor the user interfaces the component generates.   

2.  RELATED WORK 
As pointed out in Section 1, an XML interaction service realizes 
an  architecture  distinct  from  the  widely  adopted  WfMC 
workflow reference model [2]. On the other hand, this approach 
is consistent with WSBPEL4People [3], a white paper published 
by  IBM  and  SAP  as  an  extension  to  WSBPEL  for  human  user 
interactions. An XML interaction service can be used to support 
the  tasks  defined  in  the  white  paper,  which  implement  people 
activities. But it is not necessary to support WSBPEL4People in 
order to use an XML interaction service. 

Many  workflow  management  products  encompass 
form 
development tools for form developers to design forms visually. 
Some  recent  form  development  tools  produce  forms  that  can 
convert  form  data  to  application  XML  data  [7].  They  provide 
some  support  for,  but  still  rely  on,  developers  to  make  the 
conversion  and  guarantee  schema  compliance.  Since  they  have 
their 
form 
development  tools  may  appear  clumsy  when  multiple  dynamic 
forms must cooperate to form a user interface for a sophisticated 

focus  on  single, 

rather  static 

forms, 

these 

though  being 

XML  vocabulary.  In  contrast,  the  user  interfaces  Forms-XML 
generates, 
less  flexible,  guarantee  schema 
compliance  and  are  more  dynamic.  Moreover,  Forms-XML 
supports  multiple-form  user  interfaces  intrinsically  while  its 
supporting 
interface 
designers. 

targeted  for  non-programmer 

tool 

is 

3.  XML INTERACTION SERVICE 
In  a  service-oriented  workflow  application,  human  tasks  are 
typically  hosted  on  a  human  task  server,  which  is  under  the 
control  of  a  workflow  engine.  Human  tasks  may  realize  their 
functions by obtaining services from service providers. An XML 
interaction  service  is  a  service  provider  that  provides  Web 
interfaces for human users to interact with human tasks.   

The major design goal for the XML interaction service is for it 
to be generic and independent so that it can be used by a variety 
of  workflow  applications  and  its  functions  do  not  depend  on 
other  services.  As  a  consequence,  the  service  must  be  very 
cohesive. Its only objective is to provide Web interfaces for user 
interactions.  It  excludes  all  operations  that  are  not  directly 
required  for  this  objective.  For  instance,  it  does  not  support 
XML data management, user notification, user management, and 
task  assignment,  etc.  (It  supports  user  authentication  and 
authorization  using  the  underlying  Java  security  mechanism 
though.)   

The system architecture of an XML interaction service is shown 
in  Figure  1.  A  human  task  may  invoke  the  XML  interaction 
service  by  issuing  user  interaction  requests,  such  as  “provide  a 
Web  user  interface  for  the  user  to  create  or  update  some  XML 
data  compliant  with  a  certain  schema”.  To  accomplish  the 
interaction  requests,  the  XML  interaction  service  drives  (i.e. 
enables) a server program behind a Web server, referred to as the 
interaction  server,  which  actually  performs 
task  of 
generating and delivering Web pages to the Web clients for user 
interactions.  (The  service  and  the  interaction  server  actually 
execute  in  two  distinct  threads.)  The  current  implementation 
relies on an interactive component, Forms-XML, for generating 
HTML 
for  prescribed  XML 
vocabularies [6]. The component is kept on the Web server and 
will be downloaded to the client at runtime. Whenever a user has 
completed  a  Web  interaction  by submitting  the  requested  XML 
data  to  the  interaction  server,  the  interaction  server  completes 
the  interaction  request  by  calling  back  the  human  task  and 
passing it the resulting XML data. 

form-based  user 

interfaces 

the 

An  XML  interaction  service  may  accept  interaction  requests 
from  multiple  human  tasks,  which  may  come  from  different 
processes and even be driven by different workflow engines. It 
simply  uses  an  interactionID  to  identify  an  interaction  request, 
independent of the involved task, process, workflow engine and 
process instance. 

The interaction server supports 4 user commands issued from a 
Web client: Submit, Complete, OK and Abort. A user selects to 
Submit an updated XML data for possibly further update of the 
data.  A  further  update  by  the  same  user  begins  with  the  XML 
data  submitted  last  time.  A  user  interaction  is  considered  as 
finished  when  the  user  executes  Complete,  OK,  or  Abort. 
Complete  causes  the  current  XML  data  submitted  as  the  final 
results.  OK,  used  on  READ  mode,  finishes  a  user  interaction 
without  submitting  any  XML  data.  Abort  is  a  user-triggered 
exception. 

Fig. 1. System architecture 

 

A  human  task  issuing  an  interaction  request  must  provide  a 
call-back  operation  for  the  XML  interaction  service  to  return 
results  submitted  by  users.  The  call-back  operation  will  be 
triggered  on  user  commands.  How  frequent  the  call-back 
operation  will  be 
triggered  depends  on  a  parameter, 
callBackMode. 

4.  FORMS-XML AND SUPPORTING 
TOOL 
Forms-XML  has  been  developed  mainly  for  data-centric  XML 
vocabularies, such as those found in e-business applications. It is 
an ActiveX control, which accepts 4 inputs: an XML schema, an 
XML  document  compliant  with  the  XML  schema,  a  user 
interface  customization  (UIC)  file,  and  a  CSS  style  sheet  [10]. 
Based  on  the  schema  and  the  UIC  file  for  layout  options  (e.g. 
single/multiple  column 
layout,  current/new  form  control, 
element  fold/unfold  control,  and  labeling,  etc.),  the  component 
generates  a  hierarchy  of  HTML  forms  for  the  user  to  edit  the 
input  XML  document.  The  presentation  style  of  the  generated 
HTML forms is specified by the given CSS style sheet.   

Forms-XML  generates  forms  that  are  more  dynamic  than 
ordinary HTML forms. It provides appropriate insertion options 
for the user to select from so that a working document is always 
kept  compliant  with  the  schema.  When  a  working  document  is 
not yet valid, the component is able to generate required element 
slots as prominent hints to the user to produce valid documents 
eventually.  On 
supports 
neighborhood insertions where an element may be inserted into 
a  neighborhood  around 
insertion.  As  a 
consequence, the user is able to make desired insertions without 
locating the exact positions for insertions. 

the  other  hand,  Forms-XML 

the  position  of 

interface  design 

the 
We  have  developed  a  visual 
Forms-XML  Designer,  for  interface  designers  to  customize  the 
layout and style of a user interface Forms-XML generates. The 
tool  supports  the  user to create and edit the  UIC  files and  CSS 
files  associated  with  a  schema,  and  see  the  effect  of  interface 
modifications  immediately  by  invoking  the  component  on 
sample XML documents. 

tool, 

Forms-XML supports the invocation of external custom controls 
in a generated user interface. Custom controls are easy to build. 
They just have to support a small, fixed set of functions as their 
interfaces  in  order  to  cooperate  with  the  Forms-XML  layout 
engine.  Custom  controls  are  also  easy  to  use.  They  are 
associated  with  XML  element  types.  Thus  once  built,  they  can 

be  used  by  interface  designers  who  have  no  programming 
experience. 

We  could  make  Forms-XML  generate  forms  in  XForms  [12], 
which  are  more  powerful  than  HTML  forms.  Since  the 
component would not exploit the full power of XForms anyway, 
we  have  favored  the  high availability of  HTML forms  than  the 
power of XForms. 

5.  BINDING PARAMETERS TO 

CONTROLS 

A  human  task  can  communicate  with  an  XML  interaction 
service  not  only  sophisticated  XML  data  but  other  simple-type 
data,  referred  to  as  parameters.  An  interaction  server  supports 
the association of these parameters with controls in a generated 
Web  interface.  When  an  HTML  form  is  loaded  initially,  a 
control’s initial value is set to the current value of its associated 
parameter.  When  a  user  issues  a  Submit  or  Complete  over  an 
HTML form, the interaction server will update a parameter with 
the current value of its associated control. A calling human task 
can  then  get  an  updated  data  submitted  by  a  user  by  invoking 
operation getParameter at appropriate time. 

Note that an interaction server only puts “logical” constraints on 
the Web pages it accepts: An HTML form must contain an object 
control for sophisticated XML data, and other standard controls 
associated  with  parameters,  and  issue  commands  Submit, 
Complete,  OK  and  Abort.  But  the  layout  of  the  controls  in  an 
HTML  form  is  not  restricted,  thus  being  flexible  enough  to 
satisfy the requirements of different applications. 

To  simplify  the  development  of  HTML  forms  that  can  interact 
with  an  interaction  server,  we  have  built  a  JSP  tag  library  that 
hides the programming details between the client and the server. 
In  this  tag  library,  there  is  a  custom  tag  associated  with  each 
standard  control  in  HTML  forms.  These  custom  tags  resemble 
their  corresponding  HTML  tags  in  functions,  but  support 
parameter  binding  as  an  additional  feature.  Moreover,  the  tag 
library  has  a  custom  tag  associated  with  the  Forms-XML 
component.   

The tag library is implemented by converting the custom tags to 
their  associated  HTML  tags.  Parameter  binding,  which  is 
beyond  HTML,  needs  special  treatment.  When  a  JSP  page  is 
converted  to  an  HTML  form,  the  information  regarding 
parameter  binding  is  recorded  in  the  generated  HTML  form  as 
hidden  variables  for  later  submission  to  the  interaction  server. 
Similarly, the interactionID for the current interaction request is 
also recorded as a hidden variable. With all these data submitted 
to  the  interaction  server,  the  interaction  server  is  then  able  to 
update the parameters bound to HTML controls. 

6.  CURRENT STATUS AND 

CONCLUSION 

We  have  finished  implementing  an  XML  interaction  service  in 
Java  JDK  running  on  Apache  Tomcat  and  Axis.  We  have  used 
the  JSP  Tag  Library  to  create  the  custom  tag  library,  and  used 
Hibernate running on MySQL to store all information regarding 
uncompleted interaction requests. The workflow engine we use 
is  ActiveBPEL  [1].  We  have  started  using  the  service  in  some 
sample  workflow  applications,  such  as  a  workflow  for  the 
purchase  process  in  the  institute  with  which  the  authors  are 
affiliated. 
 

service 

technologies  and  a 

Workflow management systems have increasingly adopted XML 
and  Web 
service-oriented 
architecture. Our research work has its aim to exploit these new 
technologies to make a better workflow management system in 
terms  of  openness,  modularity,  and  effort  for  application 
development.  Representing  sophisticated  application  data  in 
XML  helps 
the  development  of  workflow 
applications.  The  XML  interaction  service  takes  advantage  of 
this fact while bringing in some additional benefits. It minimizes 
the  effort  for  programming  Web  user  interactions  so  that 
developers and workflow modelers can concentrate more on the 
overall system of a workflow application. Moreover, it is open, 
generic,  and 
in  a 
service-oriented architecture. 

the  other  services 

independent  of 

to  simplify 

7.  REFERENCES 
[1]  ActiveBPEL, http://www.activebpel.org/ 
[2]  D. Hollingsworth, “The workflow reference model”, 

WFMC-TC-1003, Jan. 1995, 1.1, 
http://www.wfmc.org/standards/model.htm 

[3]  IBM and SAP, “WS-BPEL Extension for People – 

BPEL4People”, 
http://www-128.ibm.com/developerworks/webservices/library/
specification/ws-bpel4people/ 

[4]  Y. S. Kuo, Jaspher Wang, and N. C. Shih, “Handling syntactic 

constraints in a DTD-compliant XML editor”, Proc. ACM 
Symp. Document Engineering, Grenoble, France, Nov. 2003, 
222-224. 

[5]  Y. S. Kuo, N. C. Shih, Jaspher Wang, and Lendle Tseng, 
“Avoiding syntactic violations in Forms-XML”, Extreme 
Markup Languages, Montreal, Aug. 2004. 

[6]  Y. S. Kuo, N. C. Shih, Lendle Tseng, and Hsun-Cheng Hu, 

“Generating form-based user interfaces for XML 
vocabularies”, Proc. ACM Symp. Document Engineering, 
Bristol, United Kingdom, Nov. 2005, 58-60. 

[7]  Microsoft, Office InfoPath 2003, SP1, 

http://www.microsoft.com/office/infopath/prodinfo/default.ms
px 

[8]  OASIS, “Reference Model for Service Oriented Architecture 

1.0”, Official Committee Specification, July 2006, 
http://www.oasis-open.org/committees/download.php/19361/s
oa-rm-cs.pdf 

[9]  OASIS, “Web Services Business Process Execution Language 

Version 2.0”, Committee Draft, Dec. 2005, 
http://www.oasis-open.org/committees/download.php/16024/w
sbpel-specification-draft-Dec-22-2005.htm 

[10] W3C, Cascading Style Sheets, Level 2, W3C 

Recommendation, May 12, 1998, 
http://www.w3.org/TR/REC-CSS2/ 

[11] W3C, “Web Services Description Language (WSDL) 1.1”, 

W3C Note, March 2001, http://www.w3.org/TR/wsdl 

[12] W3C, “XForms 1.0 (Second Edition)”, W3C Recommendation, 

March 2006, 
http://www.w3.org/TR/2006/REC-xforms-20060314/ 

[13] W3C, “XML Schema Part 1: Structures, Second Edition”, 

[14] W3C, “XML Schema Part 2: Datatypes, Second Edition”, 

W3C Recommendation, Oct. 2004, 
http://www.w3.org/TR/xmlschema-1/ 

W3C Recommendation, Oct. 2004, 
http://www.w3.org/TR/xmlschema-2/ 

