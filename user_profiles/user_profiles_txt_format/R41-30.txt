Rate Allocation and Buffer Management  for Differentiated

Services  *

Jorg Liebeheru  Nicolcts  Christin
Department of Computer Science

University of Virginia

Charlottesville,  VA 22904

Architecture,  May 2002.

@ Elsevier,  2oo2.

To appear  in  Computer Networks, Special Issue on the  New Internet

Abstract

A novel  algorithm for buffer  management and rate  allocation  is presented  for providing  loss  and delay
differentiation  for traffic  classes at a network router.  The algorithm,  called  JoBS, provides  delay and  loss
differentiation  independently  at each  node, without  assuming admission  control or policing. Contrary  to
most existing  algorithms,  scheduling  and buffer  management  decisions  are performed in a single step.
Both  relative and (whenever  possible)  absolute  QoS requirements  of classes  are supported. Simulation
examples,  including  results  for a heuristic approximation,  are presented to illustrate the effectiveness  of
the approach, to compare the new algorithm  to existing  methods  for  loss and  delay  differentiation.  1

Key Words: Buffer Management,  Scheduling,  Service  Curves,  Quality-of-Service, Service Dffirentiation.

.This  work is supported  in parl  by  the National  Science  Foundation through  grants  NCR-9624106  (CAREER),  ANI-9730103,

and ANI-0085955.

lAn carlier  version of  this  paper  was  prescntcd  at the Ninth Intemational  Workshop on Quality-of:Service  (IWQoS  2001)  [28].

Introduction

Quality-of-Service  (QoS)  guarantees  in packet networks  are often  classified  according  to two criteria.  The
first  criterion  is whether guarantees  are expressed  for individual end-to-end  tralhc  flows  (trter-fioru  Qo$
or for groups  of flows with the  same  QoS requirements  Qter-class QoS).The  second  criterion  is whether
guarantees  are expressed  with reference to guarantees  given  to other  flows/flow  classes  (relative Qo$,  or
whether  guarantees  are expressed  as absolute  bounds (absolute  QoS).

Efforts to provision for QoS  in the  Intemet  in the  early  and mid-1990s,  which resulted in the Integrated
Services  (IntServ) service  model [7], focused on per-flow absolute  QoS guarantees.  Howeveq  due to scala-
bility  issues  and a lagging  demand  for per-flow  absolute  QoS,  the interest in Internet  QoS  eventually  shifted
to relative  per-class guarantees.  Since late  1991 , the  Dffirentiated Services  (DiffServ) [5] working  group
has discussed  several proposals for  per-class  relative  QoS  guarantees,  e.9.,  Il 1, 33].

With  the  exception of the Expedited  Forwarding  service l22l afi its current revisions  [3, 16],  proposals
for relative per-class  QoS discussed  within the DiflServ  context  define the  service differentiation  qualita-
tively,  in the sense  that some classes  receive  lower  delays  and a lower  loss rate  than  others, but without
quantif,,ing the differentiation.  Recently, research  studies  have tried to strengthen  the  guarantees  of relative
per-class QoS,  and  have proposed new buffer  management and scheduling  algorithms which  can support
stronger  notions  of relative  QoS [6, 13, 14,31,32,39]. Probably  the  best known such  effort is the propor-
tional service dffirentiatioz model  [13, 14],  which attempts  to enforce that the ratios of delays  or loss rates
of successive priority classes  be roughly constant. For two  priority classes such a service could  speci$, that
the delays of packets  from  the higher-priority  class be half of the delays from  the lower-priority  class,  but
without  specifying  an upper  bound on the  delays.

In this paper,  we  express the provisioning of per-class  QoS  within a formalism inspired  by the network
calculus [2].  We present a rate  allocation  and dropping algorithm  for  a single output link, calledJoint
Buffer  Management and Scheduling  (JoBS) , which is capable  of supporling  a wide  range  of relative,  as well
as absolute,  per-class  guarantees  for loss and  delay,  without  assuming  admission control or tramc policing.
JoBS has two  unique  capabilities:  (1) Rate allocation for link scheduling  and  buffer  management are
approached  together in a single  step, and (2) JoBS supports  both relative  and absolute  QoS  requirements of
classes.

The JoBS algorithm  operates as follows. Upon  each arrival,  a prediction  is made  on the delays  of
the currently  backlogged  traffic. Then,  the service  rates allocation to classes  are adjusted to meet  delay
requirements.  If necessary, traffic  from cefiain  classes is selectively  dropped.  The algorithm  provides  delay
and loss differentiation  independently  at each  node.  End-to-end  delays and end-to-end  loss  rates  are  thus
dependent  on the per-node  guarantees  oftraffic and on the  number ofnodes traversed.

This paper is organized  as follows.  ln Section 2 we give an overview of the curent  work on relative
per-class QoS guarantees. ln Sections 3 and 4, we specifl, our algorithm  for buffer  management  and rate
allocation. In Section 5 we  propose  a heuristic  approximation  of the algorithm. In Section 6 we evaluate  the
effectiveness  of our algorithm via simulation. In Section 7 we  present  brief  conclusions.

2  Related Work

The significant  amount of literature  on seryice differentiation prevents  us from presentive a comprehensive
survey  of the related  work on scheduling and  buffer  management  algorithms  on  per-class  relative  guarantees.
The  discussion  in this section  thus focuses on  techniques  devised  to improve Best Efforl or DiffServ  services,
which are  the  closest  to our proposed scheme.

With two exceptions  121,  391,  the  related work  on relative  per-class service differentiation  treats  delay
and loss differentiation  as orthogonal  issues. The common  approach  is to use scheduling  algorithms for

achieving  delay  differentiation, and to use buffer  management  algorithms  for performing  loss differentiation.

2.1 Scheduling

The  majority  of work on per-class  relative  service differentiation  suggests  to use  well-known  fixed-priority,
e.g., [33],  or rate-based scheduling  algorithms,  e.g., [19]. Only a few scheduling  algorithms have been
specifi  cally  des i gned  for relative  delay differentiati  on.

The Proportional  Queue  Control Mechanism  (PQCM,  [31])  and Backlog-Proportional  Rate  (BPR,[  5])
are  variations of the  GPS algorithm  [35]. Both  schedulers dynamically  adjust  service  rate  allocations  of
classes to meet  relative  QoS  requirements.  The service rate  allocation  is based upon the  backlog  of classes
at the scheduler.  The main  difference  between  PQCM and BPR  is the speciflc method used to calculate the
service rates.  Both  schemes  bear similarity to the scheduling  component  of JoBS,  in the sense  that  they
dynamically adjust service  rate  allocations  to meet  relative  QoS  requirements.

Different  from the  rate-based schedulers discussed  above, Waiting-Time  Priority  (WTP, tl5l)  imple-
ments  a well-known  scheduling algorithm  with  dynamic  time-dependent priorities ([23], Ch. 3.1).  A class-z
packet,  which arrives  at time r, is assigned  a time-dependent priority as follows.  If the packet  is backlogged
at time t )  r,then  WTP assigns this packet a priority of (t -  r) - sr where  si is a class-dependent  priority
coefficient [23]. WTP packets  are  transmitted  in the order of their priorities.  In [15], the coefficientS  si orâ‚¬
chosensothat sr:  k.sz:  k2.s3:.  ..:  ka.sq,resultinginadelaydifferentiationunderhighloads,
where Class- (? + 1) Delay = k.Class- i Delay. The  Mean-Delay  Proportional  scheduler  (MDP,  [32]) has a
dynamic  priority mechanism similar  to WTP,  but uses  estimates  of the average delay of a class to determine
the priority of that class.  Thus,  the priority of a class-i packet  is set to t,  ,1.,(t). wtrere [(t)  is the estimated
average  delay for  class-  i, averaged  over the entire up-time of the link.  The coefficients  si, are as in WTP,
i.e.,  s1 :  k.sz:  k2. s3:  ...:  kQ.sq.  Finally,theHybridProportionalDelayscheduler(HPD,
[13]) uses  a combination  of waiting-time  and average  experienced  delay  to determine the priority of a given
packet.Therefore,thepriorityofagivenclassissettosi(9(r-?)  +11-S),1,t\t))with0<g<1.([13]
recommends  to set g :  0.875.)

In contrast  to the  schedulers  presented  in this  section,  the rate  allocation algorithms presented  in this
paper not only consider  the current state  and past history  of the link, but, in addition,  use this information to
make  predictions  on  future  delays  in order to improve  the performance  of the scheduling  decisions.

We conclude  by briefly  discussing  the  relation  of our work to the recently  proposed  Scalable-Core
(SCORE) approach  [38]. SCORE  provides end-to-end  delay guarantees  to flows  without  requiring  per-
flow state  information  at network routers.  The  basic idea for  meeting  end-to-end  delay  requirements  is to
keep track ofthe  delays  experienced  by packets  along the path  from  the source to the  destination, by storing
the experienced delays in the packet headers.  The  stored information  is used  for adjusting  the priority  of
packets  so that end-to-end  requirements are met. The Corelite  architecture  [32] is an  extension  of this work
which  couples  per-hop proportional delay differentiation with end-to-end delay  guarantees.  Different  from
the  above  schedulers,  the  algorithms  presented  in this paper  do not store  any  state information in packets.

2.2  Buffer  Management

The  key mechanisms  of  a buffer  management  algorithm are the backlog controller, which specifies  the time
instances  when  traffic should  be dropped,  and  the  dropper, which  specifies the traffic  to be dropped.  We
refer  to a recent  survey article [25] for an extensive  discussion of buffer  management  algorithms.

Backlog Controllers Initial  proposals for buffer  management (or active  queue  management)  in IP net-
works [7,  18] were motivated  by the need  to improve TCP performance,  without  considering  service dif-

ferentiation.  More  recent  research  efforls I I I , 3 0, 34,  36)  enhance these initial  proposals in order  to provide
service differentiation.

Among backlog  controllers  for IP networks,  Random Early Detection  (RED, tl8l)  is probably  the  best
known algorithm.  RED was  motivated  by the goal to improve  TCP  throughput  in highly  loaded  networks.
RED operates  by probabilistically  dropping  traffic arrivals,  when  the backlog  at a node grows  large. RED
has two threshold parameters  for the backlog  at a node, denoted  as T H ,*o11  ay! T H1orn".  RED estimates
and  compares  the estimate  to the  two  thresholds. If Q."t I  T H r^o11, RED  does
the average queue  size, Q "", 
not  drop  any arrival.  lf Q""t  )> TH1orn".  RED drops all incoming traffic. If TH"-o11 I  Qr"t I  THhrs.,
RED will drop an arrival  with probability  P(Q."), where 0 < P(Q."r)  < 1 is a function which  increases
in Q."t.

Several  algorithms  that attempt to improve  or extend  RED have been proposed, 

14, ll,  17 ,20, 30,
34,361. For example,  BLUE [ 7] uses different  metrics to characterize  the  probability of dropping  an arrival.
Instead  of the backlog,  this  algorithm  uses the current  loss ratio and link utilization  as input  parameters.

".g., 

RIO [11] and multiclass  RED  [36] are extensions  to RED which  aim  at class-based  service differentia-
tion.  Both schemes have  different dropping  thresholds for different classes, in order to ensure loss differen-
tiation.  In an IntServ  context, the idea  of using  different  threshold  values  is pursued  for Flow-RED  (FRED,
[30]), which uses  per-flow  thresholds.  Flows  are  discriminated  by their source-destination  address  pairs.

Random  Early Marking  (REM, [4]) is close in spirit  to the dropping  algorithm  in JoBS, since it treats
the problem of marking  (or dropping) arrivals  as an optimization  problem. The objective  is to maximize
a utility function  subject to the constraint  that  the output  link  has  a finite capacity. In [4], this  problem is
reduced  to the REM  algorithm,  which  marks packets  with  a probability  exponentially  dependent  on the  cost
of a link. The  cost is directly  proporlional  to the buffer  occupancy.  [20]  proposes  to replace RED with  a
proportional-htegral  controller  to achieve faster  convergence  to the  desired queue length and to increase
robustness  of the  system.

Droppers  The  simplest  and most widely used dropping  scheme  is Drop-Tail,  which  discards arivals  to
a full buffer.  For  a long  time, discarding  arrivals  was  thought  to be the only viable solution  for  high-speed
routers. Recent implementation studies  [40] demonstrated that other,  more complex, dropping schemes,
which  discard  packets that are already present in the buffer  (push-out),  are viable design  choices even at
high data rates.

The  simplest  push-out  technique  is called  Drop-from-Front  [26]. Here,  the oldest packet in the trans-
mission  queue  is discarded. In comparison to Drop-Tail, Drop-from-Front  lowers the  queueing  delays  of all
packets  waiting  in the system.  Note  that with  Drop-Tail, dropping  of a packet  has no  influence  on the delay
of currently queued packets.

Other  push-out  techniques  include  Lower  Priority First  (LPF, 124,291),  Complete  Buffer Parlitioning
(CBP, [29]),  and Partial  Buffer  Sharing (PBS,  [24]).  LPF always drops  packets  from the  lowest backlogged
priority queue.  As shown  in [14],  LPF does  not  provide  any mechanism  for proporlional loss differentiation.
CBP assigns  a dedicated  amount of buffer  space  to each  class, and drops traffic when  this dedicated  buffer  is
full. PBS  uses  a partitioning  scheme similar to CBP, but the  decision  to drop is made  after having  looked  at
the aggregated  backlog  of all classes. The  static parlitioning  of buffers  in LPF,  CBP,  and PBS  is not suitable
for relative  per-class  service  differentiation,  since no a priori  knowledge  of the incoming  traffic  is available

[14].

The Proportional  Loss Rate (PLR) dropper  [14]  is specifically  designed  to support proportional differ-
entiated  services. PLR  enforces that  the ratio  of the  loss  rates of two successive  classes remains  roughly
constant  at a given value.  There are two variants of PLR.  PLR(M)  uses  only the  last M arrivals for estimat-
ing  the loss  rate of a class,  whereas PLR(oo)  has no such  memory  constraints.  Average  Drop  Distance  (ADD,
[6]) is a variant  of PLR(M) aiming at providing  loss  differentiation  regardless  of the timescale  chosen  for

computing  the  loss rates.

There  are two recent  exceptions  to the idea  that delay and  loss  differentiation  are ofthogonal issues
which  are  handled by separate algorithms. The  Duplicate Scheduler  with  Deadlines  used in the Altemative
Best-Efforl  service (ABE,  [21]) provides  service  differentiation  for two traffic classes.  The first class  has
an absolute  delay  bound, while the second class experienes a lower  loss rate. The delay guarantees  for
the first class are enforced  by dropping all traffic that has exceeded  a given delay bound.  The recently
proposed Class-Distance-Based-Priority-De1ay-Loss  scheduler (C-DBP-Delay-Loss,  [39]) tries  to provide
proportional  delay  and proportional  loss differentiation  in a single  algorithm. At any time,  C-DBP-Loss-
Delay  keeps  state  information  as a set of (*t, k) pairs, where, for each class i, r7z; represents  the number  of
packets  that have been successfully  transmitted  in the last  k packets.  For each packet, C-DBP-Loss-Delay
computes the  distance between  the  current  state  of the system,  and a "failure  state",  defined  as any  state
where mi is less than  a desired  value fh,i. The lower the distance, the higher  the priority  assigned  to the
packet.  The authors  of [39]  conjecture that setting rfu :  k -  si, where  si is selected  as in WTP and MDP,
can be used to provide  proportional  loss  and delay differentiation.

3  An Approach to Joint Buffer Management  and Rate  Allocation

In this  section, we introduce  the  key concepts  of the  JoBS  algorithm.  Before  we provide  a detailed descrip-
tion, we first give an informal  overview  of the operations.

3.1  Overview

We assume  that each  output link  performs  per-class  buffering  of arriving  traffic and  that  traffic is transmitted
from the  buffers  using  a rate-based  scheduling  algorithm  [41] with a dynamic,  time-dependent  service  rate
allocation for classes.  Traffic  from the same class is transmitted  in a First-Come-First-Served  order.  There
is no admission  control and no policing  of traffic. The set  of performance requirements  are specified to the
algorithm as a set of per-class  QoS  constraints.  As an example, for three classes,  the QoS  constraints could
be of the  form:

o Class-l  Delay = 2.Class-2 Delay,
o Class-2  Loss  Rate = 10-1 . Class-3  Loss  Rate,  or
o Class-3  Delay {  $ vns.

Here,  the first two constraints  are  relative constraints  and the last one is an absolute constraint.  2The set
of constraints  can be any mix of relative and absolute constraints.  Since absolute  constraints  may render
a system  of constraints  infeasible,  some  constraints may  need  to be relaxed. We assume that all QoS con-
straints are  given a precedence  order,  which is used to determine which constraints are relaxed in case  of an
unfeasible  system.

The  service  rate allocation  operates  as follows.  For each arrival,  a prediction  is made  on the delays  of all
backlogged traffic.  Then,  the service  rate  allocation  to traffic  classes is modified so that all QoS  constraints
will be met.  If there  exists no feasible  rate  allocationthat  meets all constraints,  traffic is dropped,  either
from  a new arrival  or from the  current backlog.

We will view  the service  rate  allocation  in terms  of an optimization  problem.  The  constraints are relative
or absolute  bounds on the loss and  delay  as given  in the example  above  (QoS constraints)  arrd constraints
2Throughout  this paper,  wc only  consider  determin  rslic QoS  guarantees.  Statistical guarantccs  (scc  for  instancc  [8]), which,  for

instanceprovidcadelayboundDstoClass-3packetswithprobabilityl-ewherce>0areoutsidethescopeofthispaper.

E

F;a
a
o
o

o
E
(o
F
'i
o
a
.(E

tr  L 
s 
tT,.J

time

(a) Delay and  backlog.

(b) Projected  input  curve,  projected  output
curve,  and  projected  delays.

Figure l: Delay,_Backlog  and  Projections.
interval ls,s*T;,,1.

ln Figure 1(b), the projection  is performed  at time  s for  the time

on the link  and buffer  capacity  (system  constraints). The objective function  of the optimizatior^  aims  at
minimizing the amount  of traffic to be  dropped,  and,  as a secondary objective, aims at maintaining  the
current  service  rate allocation. The first objective  prevents  traffic from being  dropped  unnecessarily,  and
the  second  objective  tries to avoid  frequent  fluctuations  ofthe  service rate allocation.  The  solution ofthe
optimization  problem  yields  a service rate allocation of classes  and determines how much  traffic  must  be
dropped.

To explore  the principal properties of the  optimization,  we will, at flrst, assume  that sufficient  computing
resources  are  available to solve the optimization problem  for each arrival to the link. In a later section, we
will  approximate  the optimization with a heuristic  which incurs  less computational  overhead.

3.2 Formal Description

Next we describe the basic  operations  of the  service rate allocation and the dropping algorithms  at a link
with capacity C and total  buffer space  B. We assume that all traffic  is marked to belong to one of Q traffic
classes.  In general, we expect  Q to be small, e.g., Q :  4. Classes  are marked  by an index. We use a
convention,  whereby  a class  with a smaller  index  requires  a better level of QoS. We  use o;(r) and l;(t) to
denote  the traffic arrivals  and amount  of dropped traffic from  class  ri at time t. We  use ri(t)  to denote  the
servicerateallocatedtoclass'iattime  l.  Weassumethatrz(t)  > 0onlyif  thereisabacklogof  class-e
traffic  in the buffer (and r;(t) :  0 otherwise),  and  we assume that  scheduling  is work-conserving,  that  is,
L,trt(t) :  C, if there  is at least  one backlogged  class attime  t.
Remark. With the  exception  of the evaluation  section,  we  take  a fluid-flow interpretation  of traffic through-
out  this  paper. That is, the  output link is regarded as serving simultaneously  traffic from several  classes.
Since  actual traffic  is sent  in discrete-sized packets,  a fluid-flow  interpretation  of traffic  is idealistic.  How-
ever, scheduling algorithms  that closely approximate  fluid-flow  schedulers  with  rate guarantees  are available
f35,411.

We  now introduce  the  notions  of arrival  curve,  input curve, and  output  curve  for a traffic  class  ri in the

time interval  [0, t]. fhe arrival  cuwe Ai and the input curve -Rl"  of class z are  defined as

Ar(t)

: 

a;\r)d,r. ni"(r) - A;lL) -  [' ,,(*)o*

Jo

t"'

(1)

So,  the  difference  between the  arrival and input  curve  is the  amount  of dropped traffic. The  output  curve
,Rf"' of class-z is the transmitted  traffic  in the interval  [0, t], given by
Ri,,ft): [' ,0'r1a* . 

e)

Jo

We refer  to Figure  1(a)  for an illustration.  In the figure,  the service rate  is adjusted at times  t1, t2, and t4,
and packet drops  occur at times t2 andfu.

The vertical and the horizontal distance  between the input and  ouQut curves from  class  z, respectively,
are  the backlog  Bi and the delay D,;. This is illustrated  in Figure  1(a) for time t. The  delay Di attime  t is
the  delay of an arrival  which  is transmitted  at time  t. Backlog  and delay at time I are  defined as

&(t): ry"(t) - R?"r(t),  Dtft):  mar{r lR?",\t), R:"(t- r)}. 

(3)

Upon a traffic  arrival, say  at time s, the  new  service  rates ri(s) and the amount of traffic to be dropped
l6(s)  for all classes  are set  such that all QoS  and  system  constraints can be met at times greater  than s. If all
constraints  cannot  be satisfied at the same  time, then some  QoS constraints are relaxed  in a predetermined
order.

To determine  the rate allocation,  the  scheduler  makes  a projection  of the delays  of all backlogged traffic.
For the purpose of the projection, it is assumed that the  current  state of the link will not change  after time s.
Specifically,  indicating  projected  values by a tilde ("), for times t  > s, we assume  that (1) service  rates
remain  as they are (i.e., ri(t) :  rz (s)), (2)  there  are  no further  arivals  (i.e., d,i(t) :  0), and (3) there are no
further  packet drops  (i.e.,  li (r) :  0).

With  these assumptions,  we  now deflne  the  notions of projected  input  curve  Ri'",projected output curve

frollt, andprojected  backlog  ,8.;,,, for t > s as follows:

Ei7"(t) : R\*G), A";t(t) : R?"t(s)+  (r - s)r;(s),  Anf(t) :  Ai7"(il  Aryt(t) . 

(4)

We refer to the projected  horizon  for  class  i, attime  s, denoted  as 4,", as the  time  when  the  projected backlog
:  0i. With  this  notation,  we  can make predictions  for
becomes  zero, i.e.,7.i," :  min,;.0{r  I Bt,"(t + ") 
delays  in the  time  interval  [s, s * 4,,].  W"  define  the  projected  delay D;,, as
,_T2p,{, I Efit(D > R:'(t - r)}

Dn,(t): 

(s)

Ifthere  are  no arrivals after time s, the delay  projections  are corect, in the sense  that the projected  delay at
time s is the delay that will  be  encountered when  the traffic  element  departs  the system at time t. In Fig-
ure  I (b), we illustrate  the projected  input  curve,  projected  output  curve, and  projected  delays  for  projections
made at time s. In the figure, all values for t > s are projections  and are indicated  by dashed  lines. The
figure  includes the  projected  delays  for  times t5 and t6.

4  Service Rate  Adaptation  and Drop Algorithm

ln this  section  we discuss  an algorithm to perform the service  rates allocation  to classes and the  decision  to
drop traffic  in terms of an optimization problem.

Each time s at which  an arrival occurs, a new optimization  is performed.  The optimization  variable  is
a time-dependent vector  x, :  (r1(s) . . .rq(t)  lr (")  . . .tq(t))'  , which  contains the service rates ri(s)  and,
the  amount of traffic to be dropped l;(s).  The optimization  problem  has  the form

Minimize F(r,)
Subjectto  gi(x,) :0,  j :1,...,M

h7(x,) > 0, i:  M + 1,...,,^'I,

(6)

where  F(.)  is an  objective  function,  andthe  9y's  and hi'sare  constraints. The  objective  function,  which
will be presented  in Subsection 4.2, will be chosen  so that  the  amount  of dropped traffic and  the changes
to the current  service rate allocation are minimized. The  constraints  of the optimization  problem  are  QoS
constraints  and system  constraints.  The optimization  at time s is done  with knowledge  of the system  state
before time s, that is the optimizer knows  R'r" and Ron"t for all times t < s, and Ai for alltimes f (  s.

In the remainder  of this section  we  present  the constraints and the optimization function.  The optimiza-
tion  can be  used  as a reference system  against  which practical scheduling  and dropping  algorithms  can be
compared.

4.1  System and  QoS Constraints

There  are two types  of constraints.  System  constraints  describe  constraints and properties  of the  output link,
and  QoS constraints  define  the desired  service differentiation.
System  Constraints. The system  constraints specify  physical  limitations  and properties  at the output  link.
The  first such constraint  states  that  the total backlog  cannot  exceed the buffer  size  B, that is, Di B.ift)  < B
for all times t. The  second  system  constraint  enforces  that scheduling  at the  output link is work-conserving.
At a work-conserving  link, !;  ,t(t) :  C holds for all times f where Dt Blt) > 0. Note that systems  that
are  not work-conserving,  i.e., where the link  may be idle even if there is a positive  backlog,  are undesirable
for networks  that need  to achieve a high resource  utilization.  Other  system  constraints  enforce that  trans-
mission  rates and loss rates are  non-negative.  Also, the  amount of traffic that can be dropped  is bounded by
the current backlog. So  we obtain ,lt)  > 0 and 0 < ltft) < &(t) for all times t.
QoS Constraints. We  consider  two types  of QoS constraints, relative  constraints and absolute  constraints.
QoS  conshaints  are either constraints on delays  or constraints on the  loss rate. The  number and type of QoS
constraints is not limited.  Since  absolute  QoS constraints may result  in an infeasible  system  of constraints,
one or more constraints  may need  to be relaxed at certain  times.  We assume  that  the set of QoS constraints is
assigned  some total order, and that constraints are relaxed in the given order until the system  ofconstraints
becomes  feasible.  In addition,  QoS  constraints for  classes  which are not backlogged  are simply ignored.
Absolute  delay constraints  (ADC) enforce that the projected  delays  of class z satisfz  a worst-case  bound  di.
That is,

[s, s + Ti,"].lf this  condition  holds for all s, the  delay  bound di is never  violated.

for all f â‚¬ 
Relative delay constraints (RDC)  specifl, the proportional  delay differentiation  between  classes.  As  an
example, for two classes I and2,  the RDC enforces  a relationship

,.,?ffr. Di,s(t)  < di , 

Delay  of Class  2
Delay  of Class I

= constant

While  absolute  delay constraints  are needed  by applications  which present  stringent QoS  requirements,
relative  differentiation  is useful for differentiating  traffic with less  stringent  QoS requirements  in times of
resource  contention  [13]. Since, in general, there are  several  packets  backlogged  from  a class,  each  likely
to have a different  delay, the  notion  of 'delay  of class ri' needs  to be further specified.  For example,  the
delay of class i could  be specified  as the delay of the  packet at the head of the class-i  queue,  the maximum
projected  delay as in Eqn. (7), or via other measures.  We  choose  a measure, called  average  projected  delay
D1,r, which is the time  average of the projected  delays  from  a class, averaged  over  the horizon  fr.". That is,

{7)

(8)

D; ":

\  Ss+r''"
i,," J 

"

0i,"1r7d,,  .

To  provide  some flexibility  in the scheduling  decision,  we do  not  enforce relative  delay  constraints strictly,
but  allow for some  slack.  Using the metric  deflned  in Eqn.  (8),  and translating  the notion of slack into a
tolerance level, we can write the  relative  delay constraints as

(9)

(10)

(11)

(12)

wherek;>lisaconstantdefiningtheproportionaldifferentiationdesired,andt(0<e<1)indicatesa
tolerance level.  Ifrelative  constraints are not specified for some classes,  the  constraints are  adjusted  accord-
ingly. Note  that in the delay  constraints in Eqs. (7) and (9), all values  with exception  of the components of
the optimization variable  x" are  known  at time s.

Next  we discuss constraints  on  the  loss rate.  Similar  to delays,  there  are several sensible choices for
defining oloss'. Here, we  select  a loss  measure,  denoted  by pt.,", which  expresses  the fraction of lost traffic
since  the beginning  of the current  busy period  at time ts.3 So,  pi,s  expresses the fraction of traffic  that has
been  dropped in the time interval [ts, s],  that is,4

t'i'": 

[,"nL,tt1d* "  R','(s )-] (oi(s)  li(s))  Ri'(/o)
J;*,1r)d.r 

4,111  -  41ta1

-  '- 

In the last  equation, all values  except  l.;(s)  are known  at time  s. With  this definition we  now speciff  absolute
and relative  constraints on the  loss rates.
An absolute  loss constraint (ALC)  specifies  that  the loss  rate of class  z, as defined  above,  never  exceeds  a
limit Li, that is,

pi,s < Li. 

Relative  loss constraints  (MC)  speciff  the desired  proportional  loss differentiation between  classes.  Similar
to the  RDCs,  we  provide  a certain  slack  within  these constraints.  The  RLC for  classes (, + 1) and  e has  the
form

tttt 

t,  -Pi+l,s 

k',(1 ,') < ;: 

< k',(7 + e')  .
-

where  k| > 1 is the  target differentiation factor,  and â‚¬'  (0 < â‚¬'  < l) indicates a level  of tolerance.  Note  that
theconstraintsdeflnedbyEqs.  (7),(9), (11)and(12)areexpressedintermsofdelaysandlossratios,but
the only parameters  the system  can control  at time s are the components  of the optimizationvaiable xr, that
is, the service rates r;(s)  and  the packet drops li(s). We refer  to l21l  for the expression of the constraints
defined by Eqs.  (7),  (9),  (1 1) and (12)  as functions  ofthe  service  rates and the  packet drops.

4.2  Objective  Function

Provided that  the QoS  and system  constraints  can be satisfied,  the  objective function  will select a solution  for
x". Even though  the choice  of the objective  function is a policy  decision,  we  select two specific  objectives,
which,  we believe,  have  general validity:  (1) avoid dropping trffic , and (2) avoid changes  to the current
service  rate  allocation.  The  flrst  objective  ensures that traffic  is dropped only if there is no  alternative way
to satisfu the constraints.  The second  objective  hies to hold on to a feasible  service rate allocation  as long
as possible.  We give the first objective  priority over  the second  objective.

pcriod  is given by sup,.,{I;  B;(y) :  0}.

3 Abusy  periodis  atime  intervalwith  apositivebacklog  of traffic.  Fortime  rwith fo B;(r) > 0, thebeginningof  thebusy
4s-  s -  h. whcrch > 0 is infinitesimallysmall.

Find  1(s),,{9
subject to:
- ADCs
- ALCs
- ignore  RDCs

and RLCs

(") lf necessary  relax the RLCs  (RDCs)  to

obtain  a feasible solution  'for the  l,(s) or r,(s)

Figure  2: Outline  of the  Heuristic  Algorithm.

The following  formulation  of an objective  function  expresses  the above objectives  in terms  of a cost

function:

aa

F(x,) : f  (rt(r) n(s-))2 + C2\tr(s) ,

(l 3)

where C is the link capacity.  The  first term  expresses the changes  to the service  rate  allocation  and the
second  term  expresses the losses  at time s. Note that, at time  s, ri (s) is part of the optimization  variable,
while r1(s ) is a known  value.  ln Eqn. (13) we use  the  quadratic  form  (r7(s) -  rt(s ))2, since  !r(r;(s)  -
rr(s-)) :  0 for a work-conserving link with a backlog at time s. The scaling  factor  C2 in front of the
second  sum  of Eqn. (13)  ensures  that traffic  drops  are  the  dominating  term  in the  objective  function.

This  concludes  the  description  of the optimization process  in JoBS.  The structure of constraints and ob-
jective function  makes  this a non-linear  optimization  problem,  which can  be solved  with  available  numerical
algorithms  [37].

5  HeuristicApproximation

We  next  present  a heuristic  that approximates the optimization  presented  in the  previous  section,  with  signif-
icantly lower computational  complexity.  The presented  heuristic  should be regarded  as a first  step towards
a router  implementation.

Approximating  a non-linear optimization  problem such as the one presented  in Section 4 can be per-
formed  by well-known  techniques  such as fuzzy  systems,  or neural  networks.  However,  these techniques
can be computationally expensive.  Therefore,  we choose  a different  approach, which  decomposes  the op-
timization  problem  into several  computationally  less intensive problems.  The  heuristic  algorithm presented
here  maintains  a feasible rate  allocation  until a buffer ovetflow  occurs or a delay violation  is predicted.  At
that time,  the heuristic picks  a new feasible  rate  allocation andlor drops traffic. Unless there  is a buffer
overflow,  the tests for violations  of ADCs  and  RDCs are  not performed  for every packet  arrival, but  only
periodically.

10

A set  of constraints, which  contains absolute  constraints (ALCs  or ADCs),  may be  infeasible  at certain
times. Then,  some constraints need to be relaxed.  In our heuristic  algorithm,  the constraints are prioritized
in the following  order:  system  constraints  have  priority over  absolute  constraints,  which in turn have  priority
over relative  constraints.  Ifthe  system  of constraints becomes  infeasible,  the heuristic  relaxes the relative
constraints  (RLCs or RDCs).  If this does  not yield  a feasible  solution, the heuristic relaxes one or more
absolute  constraints.

A high-level overview of the heuristic algorithm  is presented  in Figure  2. The  algorithm consists of a
number  of small computations,  one for each situation  which  requires  to adjust  the service rate allocation
and/or to drop packets. We next present  each of these situations  and the  associated  computation.
Buffer  Overflow. If an arrival  at time  s causes  a buffer  overflow,  one can either drop the arriving packet or
free  enough  buffer  space  to accommodate  the arriving packets.  Both cases  are satisfied  if

Izu(,): Do,(')  .

(14)

The  heuristic  picks  a solution  for  the li(s) which satisfies  Eqn. (14) and the RLCs  in Eqn. (12), where we set
e' :  0 to obtain  a unique  solution. If the  solution  violates  an ALC, the RLCs  are  relaxed until  all ALCs  are
satisfied.  Once  the li (s)'s  are  determined the algorithm continues with  a test for delay constraint  violations,
as shown  in Figure  2. The  algorithm only  specifies the amount  of traffic  which  should  be  dropped  from  a
parlicular class,  however,  the algorithm does not select  the  position  in the queue  from which  to drop traffic.
As we did for the optimization-based  algorithm,  we assume  a Drop-Tail  dropping  policy for  the heuristic
presented  in this  section.

Ifthere are  no buffer  overflows,  the algorithm  makes projections  for  delay  violations only  once for  every
l/ packet  arrivals.  The  selection of N represents  a tradeoff  between  the runtime  complexity of the algorithm
and performance  of the scheduling  with  respect to satis$ring  the  constraints.  Simulation  experiments,  as
described  in Section 6, were performed  with the value l/  :  100 and exhibit good  performance.

The tests use the current  service rate allocation  to predict future  violations.  For  delay  constraint  viola-

tions,  the heuristic  distinguishes  three  cases.
Case 1: No violation. In this  case, the service  rates  are  unchanged.
Case 2: RDC violation. If some RDC  (but no ADC) is violated, the heuristic  algorithm determines new
rate values. Here,  the RDCs  as defined  in Eqn. (9) are transformed  into equations  by setting e :  0. Together
with the work-conselving  property, one  obtains  a system  of equations,  for which the  algorithm  picks  a
solution. If the solution  violates  an ADC,  the  RDCs  are relaxed until the ADCs  are satisfied.
Case  3: ADC violation. Resolving  an ADC violation  is not entirely trivial as it requires to recalculate the
ri(s)'s,  and, if traffic  needs  to be dropped  to meet  the ADCs, the l;(s)'s.  To simplify  the task,  our heuristic
ignores all relative  constraints when an ADC violation  occurs,  and only hies  to satisfl,  absolute  constraints.
The  heuristic  starts with  a conservative  estimate  of the worst-case  delay  for the class-z  backlog  at time s.
For this, the heuristic  uses the  fact  that for all r  e [s, s *  7,,"], D,,"(*)  < Dz(s) + *8,  which  can  be
verified by referring  to Figures 1(a) and 1(b).  Then, using Bi(s) :  B.iG-) + oi(s) -  h(t),  we can write  a
sufficient  condition for satisfuing  the ADC  of class  z with  delay  bound di attime  s,

1

,rG)

BrG-)+aiG)-tls)

<1

di -  Di(s)

(15)

The  heuristic  algorithm  will select  the ri(s)  and  l7(s) such that Eqn. (15)  is satisfled for all z. Initially, rates
and traffic drops are set  to ri(s) :  ri(s-)  and li(s) :  0. Since at least one ADC  is violated, there is at
least  one class with fi )  l, where p; is deflned in Eqn.(l5).  Now,  we apply  a greedy  method which hies  to

II

i'
o
6o
'od60
ov
al.E
ho

vo

o\

140 

|
1201

100 L

801
6of
401

201

0L
0

24681012141618
Simulation  Time  (s)

Figure  3: Offered  Load.

redistribute  the rate  allocations  until p7 (  1 for all classes.  This is done  by reducing  ri(s) for  classes with
h  1 l, and increasingrls)  for classes with pi > 1. If it is not feasible  to achieve p,; < l for all classes
by adjusting  the ri(s)'s,  the li(s)'s  are  increased  until p1 (  1 for all z. To minimize  the  number  of dropped
packets,  16(s)  is never  increased  to  a point where an ALC is violated.

6

Evaluation

We present  an evaluation  of the algorithms developed  in this paper  via simulation.  Our  goals  are (1) to
determine  if and how  well the desired service  differentiation  is achieved;  (2) to determine  how well  the
heuristic  algorithm from  Section 5 approximates the optimization from  Section  4; (3) to compare  our algo-
rithm with existing  proposals for proportional differentiated  services; and (4)  to examine  the  effect of JoBS
on end-to-end flows.

ln the  simulations,  we evaluate  the following four schemes.

o JoBS  (optimization)  refers to the optimization algorithm described  in Section  4,

o JoBS (heuristic) is the heuristic  algorithm discussed  in Section 5. Unless  there is a buffer overflow,

tests for  delay  violations are perfonned  once  for every  N :  100 packet arivals.

o WTP/PLR(oo)  [14]: The  dropping  and scheduling algorithm  WTP/PLR(M) and WTPiPLR(oo) from
[14]  are  discussed in Section  2. Since WTP/PLR(oo)  provides  a better  service  differentiation, we only
include  results for WTP/PLR(oo).  Note that WTP/PLR(m)  does  not  support  absolute  guarantees  to
traffic  classes.

o MDP[32]/Drop-Tail:  The MDP  scheduler  presented  in [32] was  discussed  in Section 2. Since  MDP
does  not provide mechanisms for  loss differentiation,  we assume  a simple  Drop-Tail  algorithm  for
discarding  packets.  As WTP/PLR(oo), MDP  does not support absolute  QoS  guarantees.

We present  three  simulation  experiments.  ln the first experiment,  we  compare  the relative differentiation
provided  by JoBS  (optimization),  JoBS  (heuristic),  WTP/PLR(oo),  and MDP/Drop-Tail  without  specifying
absolute  constraints,  at a single node. In the  second experiment, we augment  the set of constraints  by
absolute  loss  and delay constraints on the highest priority class,  and show  that JoBS  can effectively  provide
both relative and  absolute  differentiation  at a single node.  These first two experiments  do not take into
account  the possible effect  of the transporl  protocol  being  used,  nor the  effect  of JoBS  on  end-to-end  traffic.
In the third  experiment,  we  examine  the effect  of JoBS on end-to-end traffic  in a multi-node network,  with
a mix of TCP  and UDP  traffic.

t2

6

a5
fi4

(HJ
o
^1
E1

0

6

^5s4o

(*J

a)

cBr
JI

x
oo

1e5

le4

1e3

100

10

lL
0

le5

le4

1e3

100

10

d

oo

2  4  6 8 10 t2 14t6 1820

Simulation  Time (s)

4  6 8 10 12 t416 1820

Simulation  Tirne (s)

(a) JoBS (optimization).

(b) JoBS (heuristic).

L  IASS  I/L  I]
Class l/Cl
Class  4/Crl
., .- ."*)

H',lr

o

02

4  6 8 10 12 1416 1820

Simulation  Time (s)

ry"
0 2  4  6 8 10 12 1416 t820

0

Simulation  Time  (s)

(c)  WTP,PLR(oo).

(d)  MDP/Drop-Tai1.

2  4  6  8  10121416

Simulation Time  (s)
(e) JoBS (optimization).

lL
0 2  4  6  8  10121416

Simulation Time (s)

(f) JoBS (heuristic).

3
2
I

1!02 4  6  8  101214t6t820

0  2  4  6  8  101214t61820

Simulation Time (s)

(e)  WTPPLR(oo).

Simulation Time  (s)

(h)  MDP/Drop-Tail.

Figure  4: Experiment  1: Relatiye  Delay  Differentiation.  The  graphs show  the ratios of the delays  for
successive  classes (a)-(d) and the  absolute  delay values (")-(h).  The  target  value for the  ratios,  indicated  by
a dashed line, is k :  4.

6

4

-5

()

(HJ

.92
clll&I

0

6

-5xs4O

I o
a')

dr
d-t

1e5

le4

1e3

100

10

d
o
a

1e5

^  le4
a
le3
- 
d
E r00

!

10

I

13

a()
!
H
a
a
o
(H
o
o

cd

()
!
H

(H

o
o

&

^ 100

()

Ero

'1 

1

^ 100

o\
()
E10

'll

Simulation  Time (s)

(a) JoBS (optimization).

Simulation  Time  (s)

(b)  JoBS (heuristic).

Simulation  Time (s)

(c)  WTP,PLR(oo).

Simulation  Time  (s)

(d)  MDP,Drop-Tai1.

0.1

o  2  4  6  8  10 1214 161820

0.1

o2 4  6  8  10 1214 161820

Simulation  Time  (s)

(e) JoBS (optimization).

Simulation  Time (s)

(1) JoBS (heuristic).

Class  1 =

a
a)
cdk

qi

=

a()

c6
!
q

qi

o

^ 100

o\
()
E10

!ll

^ 100

\o

a)

Ero
o
Fl 

1

14

0.1

0  2  4  6  8  l0 1214 161820

0.1

o  2  4  6  8  10 1214 161820

Simulation  Time  (s)

(g)  wTP,PLR(oo).

Simulation  Time (s)

(h)  MDPiDrop-Tail.

Figure 5: Experiment  1: Relative Loss Differentiation.  The  graphs  show  the ratios of loss  rates  for
successive  classes (a)-(d)  and the  loss  rates (e)-(h).  The  target value  for the ratios, indicated  by a dashed
line, is kt :2.

6.1  Simulation  Experiment  1: Relative Differentiation  Only

The  first  experiment  focuses  on  relative  service differentiation, and  does not include  absolute  constraints.  '(
We considerasingle  outputlinkwithcapacity  C :7  Gbps  andabuffer sizeof 6.25  MB.  Weassume Q:4
classes.  The length  of each experiment  is 20 seconds  of simulated  time, starting with an empty  system.  In
all experiments,  the incoming traffic is composed of a superposition  of Pareto sources  with a :  7.2 and
average  interarival  time  of 300 ps. The  number  of sources  active  at a given time  oscillates  between  200
and  550, following a sinusoidal  pattern.  All sources  generate  packets  with a fixed size of 125 bytes.  6 The
resulting  offered  load  is plotted in Figure  3. At any  time, each class contributes  25o/o of the aggregate  load,
yielding  a symmetric  load. ln a realistic  environment,  one would  expect  to have  "less" high priority traffic
than  low priority  traffic.  Therefore,  a symmetric  load can  be regarded  as  a realistic  worst-case  that can occur
during  bursts  of high-priority  traffic.

The objectives  for the relative differentiation  are so  that  we want to have a ratio  of four  between  the
delays of two successive  classes, and a ratio of two between  the loss rates  of two successive  classes.  Thus,
for JoBS,  we set k,; :  4 and kl :  2 for all z. The  tolerance  levels  are set to (e,e/)  :  (0.001,0.05)  in
JoBS  (optimization),  and to e :  0.01 in JoBS (heuristic).  The results  of the experiment  are presented
in Figures  4 and 5, where  we graph the ratios of delays and loss rates,  respectively,  of successive  classes
for JoBS (optimization),  JoBS (heuristic),  WTP/PLR(oo),  and MDP/Drop-Tai1. The plotted delay  and loss
values  are  averages over  moving time windows of size 0.1 s.7

When the link load is above  90% of the link capacity,  that is, in time intervals  [0 s, 6 s] and [10 s, 15 s],
all methods provide the  desired service differentiation. The  oscillations around  the target values in JoBS
(optimization)  and JoBS  (heuristic) are mostly  due to the tolerance  values e and e' . The selection  of the
tolerance  values e and e/ in JoBS presents  a tradeoff: smaller  values for e arrd e' reduce oscillations, but
incur more  work  for  the  algorithms.  When  the  system  load  is low, that  is, in time  intervals [6 s, 10 s] and
[16  s,20 s], only JoBS  (optimization)  and WTP/PLR(oo)  manage to achieve some delay differentiation,
albeit  far from the  target values.  MDP/Drop-Tail,  plotted in Figure  4(d),  provides  some  differentiation, but
the  system  seems unstable,  particularly  after a transient  change in the  load.  However,  at an  underloaded
link, the absolute  values of the delays are very small  for all classes, regardless  of the scheduling  algorithm
used, as shown on Figures   (e)-(h). Figures  a(e)-(h) also show that  the absolute values for the delays are
comparable in all schemes.

In Figures  5(a)  and  5(c), we  observe  that both WTP/PLR(oo)  and JoBS  (optimization)  show some tran-
sient oscillations  with  respect  to loss differentiation when the link changes from  an overloaded to an under-
loaded  state,  while JoBS  (heuristic)  does  not  seem  to suffer from this problem  as much.  Without offering an
explanation,  we speculate  that during  a transition  between an overloaded and an underloaded system,  a per-
fect relative  loss  differentiation  is not achievable  without  violating  the  workconserving  propefiy  or without
dropping  packets  even if the buffer is not full. MDP,lDrop-Tail does not exhibit these transient  oscillations
since  it does not  provide  any loss  differentiation, as shown in Figure  5(d).

Finally,  the total loss  rate is of interest,  as a scheme  may  provide excellent  proportional  loss differen-
tiation,  but  have an overall high  loss  rate. Figures  5(e)-(g) prove  that  in the simulations,  the loss  rates of
WTP/PLR(oo)  and JoBS (optimization  and heuristic) are  very similar.  With  both  WTPiPLR(oo)  and  JoBS
(optimization  and heuristic), the average  of the  per-class loss  rates  is equal  to the loss rate obtained with  a
Drop-Tail policy, plotted  in Figure  5(h). This shows  that, in this experiment,  all schemes only drop packets
when  a buffer overflow  occurs.

5Thc  simulator  used for  Expcriments  I and 2 is described  at hLtp : / / qosbox  . c s . virgini  a  . edu/ snooplet . html.
6Packet sizes on the  Intemet  are  in fact subjcct  to a multimodal  distibution  [2],  and thus,  the  simulation  prcscnted  hcrc is only  a

simplified  model.

TThis  measurc  is adoptcd  from [14].

15

100

3,0
Er
a 0.1
0.01

0.001

100

-1

&

o
r.l

100
Ero

I0.,
0.01
0.00  i

Ero
g
&gt
oJ

0.1

ilril  I
6  8 10 t2t4t61820
Simulation  Time  (s)
(a) With  ADC, all RDCs

lilli. -.r,  Jt

0  2  4  6  8  10 1214161820

Simulation  Time  (s)

(b) With  ADC.  one RDC removed.

024681012ll4161

Simulation  Time  (s)
(c) No ADC, all RDCs

-CIass
-Class
-Class
-Cliss

d

3ro
h1
E 0.,
0.01

0.001

l,,, fl

L,

Figure  6: Experiment 2: Absolute  Delay Differentiation.  The graphs  show the delays of all packets. All
results  are for JoBS  (heuristic).

"'i  l':''  '
Class2-l'.-,1.

' 

Class  3 i' 
i 

l-  Class  4
-  clor,  1

Class  4-:  '""
Class  3 :
Class  2--:

ii

Class  1

t00

Ero

d
gl
o,l

Class  4 -
Class  3 -rr
Class2tl

Class  1

t:i:
'i
:i
,i
:i

:]

o'lo' 2  4  6  8  10t2t4t6182t) 

Simulation  Time  (s)

t)  2  4 6  8  101214161820

0.1

o  2  4  6  I  101214161820

Simulation  Time  (s)

(a) With  ADC, all RDCs.

(b)  With  ADC, one  RDC removed.

Simulation  Time  (s)
(c) No ADC, all  RDCs.

Figure  7: Experiment 2: Absolute  Loss Differentiation.  The graphs  show  the  loss rates of all classes. All
results are for JoBS  (heuristic).

6.2  Simulation  Experiment 2: Relative and  Absolute  Differentiation

In this second  experiment,  we evaluate  how well our algorithm  can satisfy  a mix of absolute and relative
constraints on both delays  and losses.  Here,  we only  present  results  for JoBS  (heuristic). WTP/PLR(oo) and
MDP/Drop-Tail  do not support  absolute  guarantees.  The main objective  ofthis second experiment is to show
that,  compared  to schemes  that  treat  dropping  and scheduling orthogonally,  using  a joint buffer  management
and rate  allocation  approach  such  as JoBS  allows  for  satisfying  both  absolute  and relative  conshaints  at the
same  time by dropping  traffic  when an  absolute  delay constraint  is on the  verge  of being violated.

We consider the same simulation setup  and the  same  relative  delay  constraints as in Experiment 1, but
add  an absolute  delay constraint (ADC)  for Class 1 such  that c\ :  I ms, and we replace  the relative
loss constraint  (RLC)  between  Classes  I and 2 by an absolute loss constraint  (ALC)  for Class I such  that
Lt :  lYo. We call  this  scenario "with ADC,  all RDCs". With the given  relative delay  constraints  from
Experiment  l, the other classes  have implicit absolute  delay constraints, which are  approximately8  4 ms for
Class  2, 16 ms for Class  3, and 64 ms for Class  4. Removing  the RDC between Class 1 and  Class  2, we
avoid  the 'implicit'  absolute constraints  for Classes 2,3, and 4, ar.d  call the resulting constraint  set "with
ADC, one RDC removed".  We also include the results for JoBS (heuristic)  from  Experiment  l, with  the
ALC  on Class I replacing  the RLC between  Classes  I and2,  and refer to this constraint  set  as "no  ADC,  all
RDCs". In Figure  6 we plot the absolute  delays of all packets, and  in Figure  7 we plot  the loss  rates of all
classes, averaged  over time intervals  of length  0.1 s. We discuss  the  results for each of the three constraint
sets proposed.

Concerning  the experiment  "with  ADC, all RDCs",  Figure 6(a)  shows  that  the heuristic  maintains  the
relative  delay differentiation between classes, thus, enforcing  the  'implicit'  delay  constraints for  Classes 2,
3, and 4. With  a large  number of absolute  delay constraints,  the system  of constraints  easily  becomes

8Due to the tolerancc value  e, thc cxact  valucs  arc not intcgcrs.

t6

GDOr\/\100 

100

GE

Figure  8: Experiment  3: Network Topology. The  numbers  on the links denote the  links  capacities  in Mb/s.

infeasible,  as pointed  out by the following two  observations.  First, Figure  7(a)  shows  that the loss  rates of
Classes 2, 3 and  4 are  similar. This result illushates  that  the heuristic  relaxes  relative  loss constraints  to meet
the absolute  delay constraints.  Second, Figure  6(a) shows  that the  absolute  delay constraint  d1 is sometimes
violated. However,  such  violations  are rare (over  95o/o of Class-  I packets  have  a delay  less than 900  ps),
and  Class-  I packet delays always remain reasonably close to the  delay bound  d1 . For the  experiment  "with
ADC, one  RDC removed",  Figure 6(b) shows  that,  without  an RDC between Classes  I and2, the ratio of
Class-2  delays  and Class-1  delays  can exceed a factor of 10 at high loads.  With this constraint  set, the
absolute delay  constraint  d1 is never violated,  and Figure 7(b) shows the RLCs  are consistently  enforced
during  periods  of packet drops.  Finally,  for the experiment  "no ADC, all RDCs",  Figure 6(c) shows  that,
without  the ADC,  the delays  for Class I are  as high as 5 ms.e

6.3  Experiment 3: Multiple Node  Simulation  with TCP  and UDP Traffic

Finally, we present  a multinode simulation,  to see  if our approach  is still able to provide  the desired  service,
in the context of  a mix  of TCP and UDP traffic, with multiple  hops and propagation  delays.  We also want to
examine  the level ofquality ofservice an end-to-end  flow can  receive  with the proposed  per-node  guarantees.
To that effect, we implemented  a variant  of JoBS  (heuristic) [i0] in the ns-2  network simulator  [1].

For  this third  experiment,  we simulate  a network with a topology  as shown in Figure B. We have  four
routers  connected  by three 45 Mbps links, and sources and sinks  connected  to the routers  by independent  1 00
Mbps  links.  Each 45  Mbps  link  has  a propagation  delay of 3 ms,  and each  100  Mbps  link  has  a propagation
delay of 1 rns.  There are four classes of traffic.  The composition  of the traffic  mix is given in Table i and
the  service guarantees  are given in Table  2.

Cross-traffic  flows  (denoted by A-1, ..., C-10)  start transmitting  at time I :  0 s. The  flows  TCP-I,
TCP-2,  TCP-3  and UDP-4 stafi transmitting  at time I :  10  s. All flows consists  of packets  with  a flxed size
of 500  B1.tes,  and the  experiment  lasts 70 seconds of simulated time.

From  Tables  1 arrd 2, Classes  7, 2 and 3 only  consist of TCP traffic,  and Class  4 only  consists  of UDP
traffic.  The  offered  load is asymmetric,  since  initially  Class  1 contributes  10% of the  aggregate cross-traffic,
eThc dclay values for Classes  2, 3,  and  4 in Figures  6(b)  and (c)  appear similar,  especially  since we usc a log-scale.  We

emphasize  that the valucs  arc not  idcntical,  and that  thc rcsults are  consistent.

t1

Flow

Class

TYpe

TCP-1
TCP-2
TCP-3
UDP-4

A-l

A-2,  A-3

A-4,  A-5, A-6

A-7, A-8, A-9, A-10

Protocol

TCP
TCP
TCP

TJDP

TCP
TCP
TCP
UDP

2

J

4

2

J

4

Tralic
Greedy
Greedy
Greedy

Pareto On-off

Exponential  On-off
Exponential  On-off
Exponential  On-off

Pareto On-off

On
N/A
N/A
N/A
l0 ms

1000 pkts
1000 pkts
1000 pkts
120 ms

off
NiA
N/A
N/A
10 ms
200  rrus
200  ms
200  ms
200  ms

Shape
N/A
N/A
NiA
1.9
N/A
N/A
N/A
t.9

Table l: Experiment 3: Traffic  mix. The  traffic  mix for  flows  B-1,  . . ., B-10 and C-1, . . ., C10 is identical
to the traffic  mix  described  here  for  flows  A-1,.  . .,A-10. TCP  sources run the TCP  Reno  congestion control
algorithms.  The "Shape"  parameters  characterizes  the  Pareto  distributions  used.

Class

Service  Guarantees

d1

L;

2 m,s

0.1%

l-
tui.

4

4

k';

4
4

N/A N/A

1

2

J
4

Table2:. Experiment 3: Service  guarantees. The guarantees  are  identical  at each  router.

Class  2 contributes  20o/o, Class  3 contributes  30o/o  and  Class-4 contributes  40 %. Thus,  there is more  UDP
traffic  in this simulation  experiment  than can  be expected  in an actual network, since  UDP traffic  accounts
for less  than  10%o  of the traffic on the  lnternet  [2].  We made this choice so that we could  examine  the  effects
of mixing  the two types (UDP and TCP)  of traffic  more easily.

Per-hop per-class  QoS We graph  the per-class  queueing  delays  and per-class  loss rates at each of the first
three  routers in Figure  9, starting  at time I :  0 s. Given that the  aggregate  arrival  rate  at Router 4 is always
less  than  the total  output  capacity of Router 4, there  is never  any backlog  at Router 4, and thus, the  queueing
delays  and  loss rates are constantly  equal to zero.  With the  exception  of Figure 9(c), (g) and (k), where
the  individual  packet  delays  are  represented, each  point  on Figure  9 represents  an average  over  a sliding
window  of size  0.5 s. Figure  9 shows  that the  proposed algorithm manages  to enforce all proposed service
guarantees  at each  node,  with  only a couple oftransient  violations ofthe absolute  delay  bound on  Class I at
Router  1, and that  the algorithm seems  to respond  appropriately  to transient  changes such as the introduction
of additional  traffic  at time t :  10 s.

End-to-end  per-flow QoS Finally, we present  end-to-end  measurements for the flows TCP-I  , TCP-2,
TCP-3 and UDP-4. Each of these  four flows traverses  the  four  routers,  each router  providing  an  absolute
delay guarantee  of 2 rns on Class  1. Adding to these  per-node  delay guarantees  the propagation  delays
between  each  node,  one can infer that the end-to-end  delays  of TCP-I  packets have to be  less  than  4 x
2+3x3+2x1:19rns.Wecall 
end-to-end loss rate  encountered  by TCP-I  should be less  than 1  (l -  L1)4 = 0.004,  that is,  O.4o/o.

thisboundan'implicit'end-to-enddelayguarantee.Similarly,the

l8

xd
o

t-..1

1or
8[
6f

o

&

,V
0r:
0

d
o
o

>,1
o

o
o

0-
8L
6[
4l
,,V

0

E

oo

I

>t6
o

o

6

E

G

oa

20  30  40  50
Simulation Time  (s)
(a)  Router I - Ratios of Dclays

0

0102030405060

Simulation Time (s)

(b) Router  1 - Ratios of Loss  Rates

Class  3/Class 2 
Class  4lclass  3

-

Simulation Time (s)

(c) Router  I - Class 1 Dclays

20  30  40  50
Simulation Time (s)

(e)  Router 2 - Ratios  of  Delays

10  20  30  40  50  60

Simulation Time (s)

(d) Router  1 - Class  1 Loss  Ratcs

, 

Class  3/Class 2 
Class  4/Class  3

-

10  20  30  40  50  60

Simulation Time  (s)

(fl Routcr  2 - Ratios  of  Loss  Rates

10  20  30  40  50

Simulation Time (s)

(g) Router 2 - Class  1 Dclays

70

10  20  30  40  s0  60

Simulation Time (s)

(h) Router 2 - Class  1 Loss  Rates

lass 3/Class 2 
Class,4/Class,3

-

i:

2030405
Simulation Time (s)

(i) Router 3 - Ratios  of  Delays

0102030405060

Simulation Time (s)

O Router 3 - Ratios  of  Loss  Rates

5

ts84
q.9 t

&Qt

\o

^  0.2
.g  0.1
30
Fl

5r
4l
3f
2l
IL
oL
0

0.2

0.1

0

o
6

J

5

,Efi4
3 p,3
'E  6)
dS r
0

o\

.a 0.2
I  0.1
G
&
3uJ

Sirnulation  Time (s)

(k) Router 3 - Class 1 Dclays

0i0203040506010

Simulation Time  (s)

(l) Router 3 - Class  1 Loss  Rates

Figure  9: Experiment 3: iVlultiple Node simulation  with TCP  and  UDP traffic.  The  graphs show the
delays and  loss  rates encountered  at each router  by Class 1 traffic,  and the ratios of delays and the  ratios  of
loss  rates  for Classes 2,3 and  4 at each router.  The  absolute  constraints  and  the target ratios  are  indicated
by straight  dashed lines.

t9

E 0.1
o

xd
o

l

I'o
El

10

S1
o
E
&
E o.r

-.1

Ero
-ia  ln
i:'  '"
bo
I
'tr l0

F

20  30  40  50 

60

Simulation Time (s)

(a)  End-to-End  Packet  Delays

30  40 
Simulation Time (s)

50

(b) Endto-End  Ratios of Dclays

UDP_4
.,t

tTCp-1r  TCP-2

0.01  Lr
l0

20  30  40  50 

60

Simulation Time (s)

(c) End-to-End  Packct  Loss  Rates

TCP:  1 +TCF_2+TCP_3+UDP_4

Simulation Time (s)

(d) End{o-End Ratios ofloss Rates

Simulation Time (s)

(e) Class-l Throughput

Figure  10: Experiment  3: End-to-end packet  delays.  The graphs represent  the individual,  end-to-end,
packet delays encountered by flows TCP 1, TCP-2, TCP-3,  UDP-4  (a),  the ratios of delays over  a sliding
window  of size 0.5  s for TCP-2, TCP-3, and UDP-4  (b), the loss rates (c), ratio of loss  rates (d), and the
throughput  obtained  by TCP-I, as well as the aggregate  throughput obtained  by all four flows  (e). The
'implicit'  end-to-end delay guarantee,  indicated  by a dashed line, on TCP-I  is a delay bound of 79 ms, the
'implicit'  end-to-end loss  guarantee  on  TCP-1,  also  indicated  by a dashed line, is 0.4%.

oi

8

7

6

5

4

J

2

1

8

1

.)

I

0

d
o

o
o:

â‚¬6
-5
E4o.
a5
'i 
&

20

In Figure 10(a), we present  the individual  end-to-end packet delays encountered  by each  flow.  Flow 1's
end-to-end  delays are indeed always below  19 ms, and  we  see  again  that the algorithm we propose uses a
conservative estimate  of the delays  for enforcing  delay  bounds, since  most Flow 1 packets  encounter  a total
delay  close to 15 ms. l0 Figure  i0(b)  also suggests  that  the proportional delay  differentiation  holds  with
respect  to the end-to-end delays  between  Classes 3 and 4, even ifthe relative  delay constraints are  enforced
only on  a per-node  basis. This  result  can be explained by the fact that the propagation  delays  are  negligible
compared to the  queueing  delays  encountered by TCP-3, and UDP-4.  Conversely,  the propagation  delay
cannot  be neglected  compared  to the  queueing delays in the  case  of the flow  TCP-Z, hence, the proportional
differentiation between  TCP-2  and TCP-3  is close  to a factor  of 3.3.

We  plot  the end-to-end packet loss rates  in Figure  10(c).  We see that the end-to-end  loss rate  bound  of
0.4o/o on flow  TCP-  1 is respected,  even  though the load is asymetric.  I 1 However, as shown in Figure I 0(d),
proportional guarantees  on  loss rates between classes do not translate into  proporlional  guarantees between
end-to-end  flows:  loss rates  ratios  between TCP-2, TCP-3,  and UDP-4  are  consistently  above  the  desired
ratios kL :  ki :  2. This result  is mostly due  to the fact that the different flows present  in the network do
not have the  same  probability  of suffering  packet drops, since some  of them are greedy  flows,  while  others
are  on-offflows.

Last, in Figure 10, we graph  the  throughput  received  by flow TCP-I, as well  as the  aggregate throughput
received by flows TCP-I,  TCP-Z,  TCP-3 and UDP-4.  There  is no throughput  guarantee  on any class,  but
we  see  that the flow TCP-I  consistently  gets an end-to-end throughput  greater  than 1.5 Mbps,  and  close  to
3 Mbps  in general.  This result shows  that the  strong  guarantees  on  the loss and delay  of Class  1 are  not
realized at the expense of a low throughput. For readability purposes,  we do  not  show the  throughput  plots
for  the  three other flows,  which present  values  close to that of TCP-1"

As a conclusion  to this third  experinient,  we  showed  that our algorithm was  able  to provide  the desired
per-class, per-node service  guarantees  in a multiple  node simulation, with a mix of TCP and  UDP traffic.
We also showed  how  these  per-class,  per-node service  guarantees  could  translate into end-to-end, per-flow
performance.

7  Conclusions

We proposed an algorithm,  called  JoBS  (Joint  Buffer  Management  and Scheduling),  for  relative  and  abso-
lute  per-class QoS guarantees  without  information  on traffic  arrivals.  At times  when  not all absolute QoS
guarantees  can be satisfied simultaneously,  JoBS  selectively  ignores some of the  QoS  guarantees.  The  JoBS
algorithm  reconciles  rate allocation and buffer  management into a single  scheme,  thereby  acknowledging
that scheduling  and dropping  decisions at an output  link are  not  ofihogonal issues, but should be  addressed
together.  JoBS  implements  the desired  service  differentiation  based on delay  predictions of backlogged
traffic.  The  predictions  are used  to update service  rate allocations  to classes and the  amount  of trafflc  to
be dropped.  We showed  in a set of simulation  experiments,  that JoBS  can provide relative and absolute
per-class QoS  guarantees  for  delay  and loss, thereby  demonstrating  the virtue  of an approach combining
scheduling  and dropping,  and examined  the effect  of the algorithm on  end-to-end flows.

ln future work,  we will extend the approach presented  in this paper to TCP congestion  control.  As a
point  of departure, we will attempt to express  existing  active  queue  management  schemes,  e.g.,  RED  [18],
loEven if we do not  take  into  account  the  queueing  delays  at  Router  4, which  are always  zcro due to the  topology, in the

computation  ofthc end-to-end  delay  guarantee,  the  end-to-end  delay guarantee  bccomes  16  rns,  and  is rcspected  as  well.

I I Duc  to thc topology  we chosc,  thc  loss ratc at Routcr 4 is always zcro. If we ignorc  thc guarantees  offered  at Routcr  4 in the
(1 -  Ir)'  = 0.003,  that is, 0.3%, which  is

computation  ofthc  end-to-end  loss  guarantee,  we get  an cnd-to-end loss bound of 1 
also  respected.

21

RIO [11],  or the proportional-integral  controller  of [20] within  the formal  framework  inhoduced in this
paper.  Additionally,  we are  currently  working  on router  implementations  of JoBS-style  algorithms  [9].

References

lll  ns-2 networksimulator.  ht.t.p: / /wvrw.  isi.edu/nsnam/ns/.
[2] Packet  sizes and  sequencing,  May 2001. http: / /www.caida.org/out.reach/resources/learn/

packeLsizes.

[3] G. Annitage,  A. Casati, J. Crowcroft,  J. Halpern,  B. Kumar,  and J. Schnizlein.  A delay bound  altemative  revision

ofRFC2598,  April 2001. IETF  draft (infonnational),  draft-ietf-diffserv-efresolve-01.txt.

[4] S. Athuraliya,  D. Lapsley,  and  S. Low. An enhanced  random  early marking  algorithm  for intemet flow control.

h Proceedings  of IEEE INFOCOM  2000,pages  1425 7434,Te!-Aviv,Israel,  April  2000.

[5] S. Blake, D. Black,  M. Carlson,  E. Davies,  Z.Wang, and  W.  Weiss. An architecture  for differentiated  services.

IETF  RFC  2475,December  1998.

[6] U. Bodin,  A. Jonsson, and O. Schelen.  On  creating  proportional  loss differentiation:  predictability  and perfor-

mance.  lnProceedings  of IWQoS  2001,  pages  372-j86,  Karlsruhe, Germany,  June  2001.

[7] R. Braden,  D. Clark,  and S. Shenker.  Integrated  services in the intemet  architecture:  an overview.  IETF RFC

1633,Itly 1994.

[8] C.  S. Chang.  Performance  Guarantees  in Communication  Networks.  Springer  Verlag,  London,  UK, 1999.
[9] N. Christin  and J. Liebeherr.  The QoSbox:  A PC-router for quantitative service  differentiation  in IP networks.

TechnicalReportCS-2001-28,UniversiryofMrginia,November200l. 
pub/Lechreports,/CS  - 2 0 01  - 2 8 . pdf  .

ftp://ftp.cs.virginia.edu/

[10] N. Christin,  J. Liebeherr, and T. F. Abdelzaher.  A quantitative assured  forwarding  service. ln Proceedings  of

IEEE INFOCOM  2002, New York, NY, June  2002. To appear.

[1 1] D. Clark and W Fang. Explicit  allocation  of best-effort  packet  delivery  service.  IEEE/ACM Transactions  on

Networking,  6(4):362 373, August  I 998.

[12] R. Cruz,  H. Sariowan, and G. Polyzos. Scheduling for quality of service  guarantees  via service  curyes.  In
Proceedings  of the Fourth  IEEE International  Conference on Computer  Communications  and  Networks  (ICCCN
'95),pages  512-520, Las Vegas,  NV,  September  1995.

[13]  C. Dovrolis.  Proportional  differentiated  services  for the Internet.  PhD  thesis,  University  of Wisconsin-Madison,

December  2000.

[14] C. Dovrolis  and  P. Ramanathan.  Proportional differentiated seruices,  part  II: Loss rate differentiation  and packet

dropping.  In Proceedings  of IWQoS  2000,  pages  52-61,  Pittsburgh,  PA., June  2000.

[15] C. Dovrolis, D. Stiliadis,  and  P. Ramanathan.  Proporlional  differentiated  services:  Delay  differentiation  and

packet  scheduling.  ln Proceedings  of ACM SIGCOMM '99, pages  109-120,  Boston,  MA., August  1999.

[16] B. Davie (editor), F. Baker,  J. Bennet,  K. Benson,  J.-Y. Le Boudec,  A. Charny, A. Chiu, W. Courtney,  S. Davari,
V. Firoiu, C. Kalmanek, K.K.  Ramakrishnam,  and  D. Stiliadis.  An expedited  forwading  PHB,  September 2001.
IETF  draft, draft-ietf-diffserv-rfc2598bis-02.txt.

[17] WFeng,D.KandluqD.Saha,andK.Shin.Blue:  Anewclassofactivequeuemanagementalgorithms.Technical

Report  CSE-TR-387-99,  University  of Michigan,  April  1999.

[18]  S. Floyd  and  V. Jacobson. Random early detection for  congestion avoidance. IEEE/ACMTransactions on

Netuvorking,  1 (4)  :397 413, July I 993.

[19]  S. Floyd and V. Jacobson.  Link-sharing  and resource  management  models for packet  networks.  IEEE/ACM

Transactions  on  Networking,  3(4):365-386,  August  1995.

22

[20]  C. V. Hollot,  V. Misra, D.  Towsley,  and W. Gong.  On designing  improved  controllers  for  AQM  routers  supporting
TCP  flows.  In Proceedings  of IEEE INFOCOM  2001,  volume  3, pages 1726-1734,  Anchorage,  AK,  April  2001.
[21] P. Hurley, J.-Y. Le  Boudec,  P. Thiran,  and M. Kara. ABE: providing  low delay  selice  within  best  effort.  IEEE

Networlts,l5(3):60-69,  May  2001.  See  also http: / /wvrw.  abeservice.  org.

122) y. Jacobson,  K. Nichols,  and  K. Poduri.  An expedited  forwarding  PHB. IETF RFC 2598,  June 1999.
l23l  L. Kleinrock.  Queueing  Systems.  Volume II: Computer  Applications.  John  Wiley  & Sons, New York, NY, 1976.
l24l  H. Kroner, G. Hebuterne,  P. Boyer,  and A. Gravey.  Priority  management  in AIM switching  nodes.  IEEE Joumal

in Selected  Areas  in Communications,  9(3):418427  , April 1991  .

[25] M. A. Labrador and  S. Banerjee.  Packet  dropping policies  for AIM  and IP networks.  IEEE Communications

Surveys,2(3),3rd  Quarter 1999. http  / /www.comsoc  .org/pubs/  surveys.

[26] T.V. Lakshman, A. Neidhardt,  and T. Ott. The  drop  from front  strategy  in TCP  and in TCP  over AIM.  In

Proceedings  of IEEE INFOCOM  '96,pages  7242-1250, San Francisco,  CA, March  1996.

[27] J. Liebeherr  and N. Christin.  Buffer  management  and scheduling  for enhanced  differentiated s ervices.  Technical

Report  CS-2000-24,  University  of Virginia,  August 2000.

[28] J. Liebeherr  and N. Christin.  JoBS: Joint buffer management  and scheduling for differentiated  services.  In

Proceedings  of IWQoS  2001,  pages 404418,  Karlsruhe, Germany,  June  2001.

[29] A.-M.  Lin and  J.A. Silvester.  Priority  queueing  strategies and  bufl'er  allocation protocols for traffic  control at  an
AIM integrated  broadband  switching  system.  IEEE Journal  on Selected  Areas  in Communications,  g(9):1524-
1536,  December  1991.

[30] D. Lin  and R. Morris. Dynamics  of random early  detection. In Proceedings  of ACM SIGCOMM  '97, pages

127-137, Cannes,  France,  September  1997.

[3 1] Y. Moret  and S. Fdida.  A proportional  queue control  mechanism  to provide  differentiated  services.  In.  Proceed-
ings of the International  Symposium on Computer  and Information  Systems (ISA9,pages  17-24,  Belek,  Turkey,
October 1998.

l32l  T. Nandagopal,  N. Venkitaraman,  R. Sivakumar,  and V. Barghavan.  Delay differentiation  and adaptation  in core

statelessnetworks. lnProceedingsof IEEEINFOCOM2000,pages421430,Tel-Aviv, 

Israel,April  2000.

[33] K. Nichols,  V. Jacobson,  andL.  Zhang. Two-bit  differentiated  services  architecture  for  the Intemet. IETF  RI'C

2638,  htly  1999.

[34] R. Pan,  B. Prabhakar, and  K. Psounis.  CHOKe:  A stateless  active  queue  management  scheme  for approximating
fair bandwidth  allocation.  In Proceedings of IEEE INFOCOM  2000,  pages 942-951,  Tel-Aviv, Israel, April
2000.

[35] A. K. Parekh  and R. G. Gallagher.  A generalized  processor sharing  approach  to flow control in integrated  ser/ices

networks:  The  single-node  case.  IEEE/ACM  Transactions  on  Networking,  l(3):344-357, June  1993.

[36]  S. Sahu, P. Nain,  D. Towsley,  C. Diot,  and V. Fioroiu. On achievable  service  differentiation  with token  bucket

marking  for TCP.  In Proceedings  of ACM SIGMETNCS  2000,  pages  23-33, Santa  Clara,  CA,  June  2000.

[37] K. Schittkowski.  NLPQL: A FORTRAN  subroutine  solving constrained  nonlinear  programming problems. ln-

nals  of Operations  Research, 5:485-500,  1986.  Edited  by Clyde L. Monma.

[38] I. Stoica andH. Zhang. Providing  guaranteed  services without per-flow  management.  7n Proceedings  of ACM

SIGCOMM'99,pages  81 94, Boston,  MA,  August  1999.

[39] A. Striegel and G. Manimaran.  Packet  scheduling  with  delay and loss differentiation.  Computer Communica-

t io ns,  25 (7)  ;2 I -3 l,  J antary  2002.

[40] B. Suter,  T.V. Lakshman,  D. Stiliadis,  and  A.K.  Choudhury. Buffer  management  schemes  for  supporting  TCP  in
gigabit  routers with per-flow  queueing.  IEEE Journal  on Selected  Areas  of Communications, 17(6):1159-1170,
September  1999.

[41] L. Zhang. Virtual  clock: A new  traffic control  algorithm  for packet  switched  networks.  ACM Trans.  Comput.

Sys t.,  9 (2):1 01 -125, May  199 1.

23

