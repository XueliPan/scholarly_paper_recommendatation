Generating Form-Based User Interfaces for XML 

Y. S. Kuo, N. C. Shih, Lendle Tseng, and Hsun-Cheng Hu 

Vocabularies 

Institute of Information Science 

Academia Sinica, Taiwan 

{ yskuo | ncshi | lendle | hchu}@iis.sinica.edu.tw 

ABSTRACT 
So far, many user interfaces for XML data (documents) have been 
constructed  from  scratch  for  specific  XML  vocabularies  and 
applications. The tool support for user interfaces for XML data is 
inadequate.  Forms-XML  is  an  interactive  component  invoked  by 
applications  for  generating  user  interfaces  for  prescribed  XML 
vocabularies  automatically.  Based  on  a  given  XML  schema,  the 
component  generates  a  hierarchy  of  HTML  forms  for  users  to 
interact  with  and  update  XML  data  compliant  with  the  given 
schema.  The  user  interface  Forms-XML  generates  is  very  simple 
with  an  abundance  of  guidance  and  hints  to  the  user,  and  can  be 
customized by user interface designers as well as developers.   

Categories and Subject Descriptors 
D.2.2 [Design Tools and Techniques]: User Interfaces 

General Terms: Design, Experimentation 

Keywords: XML, User Interface, XML Editing 

1. INTRODUCTION 
With the increasing number of emerging XML vocabularies, there 
is  apparently  a  need  to  construct  user  interfaces  for  XML  data 
(documents)  within  a  given  vocabulary  effectively.  Constructing 
user interfaces for XML data from scratch is simply too expensive. 
This has motivated our development of an interactive component, 
Forms-XML,  which  can  generate  user  interfaces  for  XML 
vocabularies  automatically.  XML  vocabularies  can  be  roughly 
classified as either document-centric or data-centric [3].  We have 
targeted Forms-XML mainly for data-centric XML vocabularies. 
As  a  generic  component,  Forms-XML  takes  an  XML  schema 
[11][12] as its input, and allows the user to enter and update XML 
data compliant with the input schema. In order for Forms-XML to 
produce a user interface tailored to a specific XML vocabulary, a 
user interface designer is responsible for specifying the layout and 
style  of  the  desired  user  interface.  The  component  can  then 
generate  an  HTML  form-based  user  interface  as  specified  by  the 
interface  designer  automatically.  A  part  of  the  generated  user 
interface  may need to be custom-made, which can be realized by 
invoking custom controls provided by the system or developed by 
a  programmer.  To  ease  the  task  of  interface  designers,  we  have 
also developed a visual tool for the specification of a desired user 
interface  Forms-XML  distinguishes  itself  from  other  related 
systems by the following novel features. First, it is a generic     
 
Permission  to  make  digital  or  hard  copies  of  all  or  part  of  this  work  for 
personal or classroom use is granted without fee provided that copies are 
not made or distributed for profit or commercial advantage and that copies 
bear this notice and the full citation on the first page. To copy otherwise, or 
republish,  to  post  on  servers  or  to  redistribute  to  lists,  requires  prior 
specific permission and/or a fee. 
DocEng’05, November 2–4, 2005, Bristol, United Kingdom. 
Copyright 2005 ACM 1-59593-240-2/05/0011...$5.00. 

component that can be used by a variety of applications. Second, 
the  component  generates  very  simple  user  interfaces  with  an 
abundance of guidance and hints to the user to guarantee schema 
compliance. Third, while an interface designer makes an interface 
specification,  s/he  does  not  specify  the  dynamic  behavior  of  the 
user  interface  to  be  generated.  Thus  an  interface  designer  can 
make  an  interface  specification  without  any  programming  skill  if 
custom controls are pre-constructed.   

2. THE FORMS-XML COMPONENT 
We  have  constructed  Forms-XML  as  an  ActiveX  control,  which 
can  be  invoked  by  a  Windows  desktop  application  or  an 
HTML/JavaScript  client  within  the  Internet  Explorer  browser. 
Forms-XML  accepts  4  inputs:  an  XML  schema,  an  XML 
document  compliant  with  the  XML  schema,  a  user  interface 
customization (UIC) file, and a CSS style sheet [10]. Based on the 
schema and the UIC file, the component generates a hierarchy of 
HTML  forms  for  the  user  to  edit  the  input  XML  document.  The 
presentation  style  of  the  generated  HTML  forms  is  specified  by 
the given CSS style sheet. A preliminary version of the component 
can be downloaded from   
http://sm173.iis.sinica.edu.tw/forms-xml/. 

Figure 1 shows a sample main HTML form Forms-XML generates 
together  with  a  child  form,  which  pops  up  when  the  user  clicks 
PostalAddress. A form displays a level-limited tree view where at 
most  levelsInForm  levels  of  XML  elements  are  displayed  in  the 
form. The descendant elements at levels beyond levelsInForm are 
hidden but can be displayed in separate child forms. A child form 
may  have  child  forms  again  so  that  child  forms  may  nest 
indefinitely.  In  a  form,  the  child  elements  of  an  element  may  be 
folded  (shown  as  a  hyperlink)  or  unfolded.  When  they  are 
unfolded,  they  may  be  displayed  in-line,  i.e. in  the  same  form  as 
their  parent  element,  or  in  a  separate  child  form.  An  interface 
designer  has  full  control  over  these  layout  options.  By  setting 
levelsInForm, an interface designer can tune how many elements a 
form  is  to  contain  and  how  deep  the  child  forms  are  nested.  In 
principle, levelsInForm is typically set to a small number so that a 
generated form exhibits more a form view than a tree view.  Also 
illustrated  in  Figure  1,  Forms-XML  supports  multiple-column 
form  layout.  An  interface  designer  may  specify  that  the  child 
elements of an element must be laid out in multiple columns. The 
component  then  generates  multiple-column  HTML  tables  to 
accommodate the child elements.   

Note that the form layout Forms-XML generates only depends on 
the structure of the data, not on the syntactic constraints imposed 
by the schema, thus resulting in very simple form layout. This is in 
sharp contrast with form systems [8] that rely on special controls 
in forms to guarantee schema compliance. Forms in these systems 
are  often  divided  into  many  sections  (corresponding  to  controls) 
with different behavior. 

58desired 
insertions. 

insertions  without 

locating 

the  exact  positions  for 

While an insertion command is issued at an element, Forms-XML 
allows the user to insert not only its sibling and child elements but 
also its “uncle/aunt” elements at higher levels of the document tree 
if  it  is  the  first  or  last  child  element  of  its  parent.  This  feature  is 
especially  useful  when  certain  non-leaf  elements  are  hidden  (to 
avoid redundant or excessive labels) and not locatable by the user. 

In  XML  editing,  structural  editing  is  harder  than  content  editing. 
Automatically generating elements and element slots is one way to 
minimize  structural  editing.  Forms-XML  allows  an  interface 
designer  to  create  element  templates  as  another  means  for 
minimizing structural editing. Each element type may be assigned 
an  element  template,  which  is  a  pre-built  schema-compliant 
element instance. Whenever a new instance of an element type is 
to be created, Forms-XML creates an element instance by copying 
the associated element template if one exists.   

3. CUSTOMIZATION MECHANISMS 
Forms-XML  supports  3  mechanisms  for  customizing  the  user 
interface it generates: layout customization specified by a UIC file, 
style customization specified by CSS files, and custom-made user 
interfaces  supported  by  custom  controls  in  JavaScript  (actually 
JScript).  An  interface  designer  without  any  programming  skill  is 
able  to  carry  out  the  first  two  alone,  and  needs  help  from  a 
programmer for the third. 

A  UIC  file  is  an  XML  document  compliant  with  the  schema 
UIC.xsd, which has a top-level content model: 

(namespace*,  global,  nonleafNode*,  leafNode*,  type*, 
customControl*). 

A  UIC  file  contains  layout  rules  to  be  applied  globally  (global) 
and  to  non-leaf  element  instances  (nonleafNode),  leaf  element 
instances  and  attributes  (leafNode),  and  all  elements  of  a  certain 
type (type). The many layout options UIC.xsd supports are beyond 
the scope of this paper.   

Forms-XML  generates  HTML  forms  as  its  user  interface.  Since 
HTML  pages  support  CSS  style  sheets  inherently,  we  obtain  the 
CSS  style  customization  for  free.  A  CSS  style  sheet  refers  to 
elements  in  HTML  pages  by  element  tags,  class  names,  and 
element ids. Since the HTML code Forms-XML generates is in a 
few  fixed  patterns,  it  is  not  hard  for  an  interface  designer  to  get 
familiar  with  the  generated  HTML  patterns  and  then  make  style 
design. Moreover, style design is supported by an interface design 
tool described in the next section. 

Forms-XML  supports  the  invocation  of  external  custom  controls 
in  a  generated  user  interface.  Associated  with  an  XML  element 
type can be a custom control type in JScript that constructs some 
HTML codes for display by the Forms-XML layout engine as the 
custom user interface  for the element type.  As  an example, the 3 
input  fields  for  the  telephone  element  shown  in  Figure  1  are 
generated by a simple custom control.   

A  custom  control  maintains  its  own  data  model.  Whenever  the 
user  updates  the  data  maintained  by  the  custom  control,  the 
element  content  in  the  working  document  associated  with  the 
custom control must be updated accordingly. Custom controls and 
the Forms-XML layout engine cooperate by supporting a fixed set 
of  functions  as  their  interfaces.  The  layout  engine  supports  the 
following major functions for updating the element content: 

Figure 1. A form-based user interface 

 

Forms-XML supports editing commands by providing a command 
menu  triggered  by  the  right  button  of  the  pointer  over  a  selected 
element. An insertion operation by the user is under the control of 
the  system,  which  provides  appropriate  insertion  options  for  the 
user to select from. Thus the component is able to always keep the 
working document schema-compliant, i.e. it is a subset of a valid 
document [6][7]. 

Upon the completion of an insertion, the component may generate 
required  elements  and  required  element  slots  when  the  working 
document is not yet valid. An element is required if it is present in 
all valid documents containing the working document. A required 
element slot is generated between two consecutive elements u and 
v  if  the  pair  (u,v)  is  not  valid  locally,  i.e.  v  cannot  follow  u 
immediately  for  any  valid  document  containing  the  working 
document. Required element slots appear as prominent hints to the 
user to insert elements in order to render the not-yet-valid working 
document  valid.  The  component generates  required  elements  and 
required element slots while the user fills up the required element 
slots.  This  process  can  be  iterated  until  the  component  generates 
no  more  required  element  slots,  which  then  results  in  a  valid 
working document [6][7]. 
It makes sense for Forms-XML to generate required elements and 
required  element  slots  upon  insertions  since  the  user  tends  to 
complete  a  valid  document  by  making  insertions  iteratively 
without making deletions. On the other hand, if the user deletes an 
existing  element,  the  component  does  not  generate  any  required 
element  at  the  place  of  deletion.  (Otherwise,  the  element  just 
deleted  could  be  generated  immediately.)  But  it  may  generate  a 
required element slot for the user to fill in options other than the 
element just deleted. 

Forms-XML supports neighborhood insertions as an enhancement 
of  the  conventional  insertion  operation.  A  conventional  insertion 
inserts an element at the position of insertion. With neighborhood 
insertions, an element may be inserted into a neighborhood around 
the  position  of  insertion.  The  component  determines  a  legal 
position  for  an  element  inserted  by  the  user  by  analyzing  the 
syntactic constraints. As a consequence, the user is able to make   

 

 

59insertBefore(pathExp, dataNode, dataUndo) 

appendChild(pathExp, dataNode, dataUndo) 
delete(pathExp, dataUndo) 
setData(pathExp, data, dataUndo) 

A custom control must implement the following major functions:   

init(dataNode)   
getView()   
undo(dataUndo)         

Initially, the layout engine invokes the function init to initialize the 
custom control and passes in dataNode, which refers to a copy of 
the  element  content  for  which  a  custom  user  interface  is 
constructed. After the control is initialized, the layout engine can 
invoke  the  function  getView,  which  returns  the  HTML/JScript 
codes representing the custom user interface to be displayed to the 
user. The user interacts with the custom user interface, which has 
event  handlers  for  handling  the  user’s  inputs.  When  an  event 
handler detects that the user has completed an editing command, it 
can  invoke  the  4  content-updating  functions  supported  by  the 
layout engine to update a specified portion of the element content 
associated with the custom  control. pathExp locates the place for 
content updating. dataNode (data) refers to the data to be inserted 
(updated).   

The layout engine assists custom controls for undo operations by 
maintaining  an  undo  stack.  dataUndo  refers  to  the  data  required 
for  a  custom  control  to  undo  an  editing  command.  The  layout 
engine simply stores dataUndo onto its undo stack. Whenever the 
user  executes  an  undo  operation,  the  layout  engine  invokes  the 
function  undo  of  the  custom  control  and  passes  in  the  dataUndo 
stored  previously.  The  custom  control  is  then  able  to  execute  an 
undo with little effort. 

The mechanism of custom controls in Forms-XML is indeed very 
powerful. A custom control can generate an HTML user interface 
with  embedded  components,  such  as  ActiveX  controls  and  Java 
applets,  thus  taking  advantage  of  the  large  amount  of  available 
interactive  components.  On  the  other  hand,  custom  controls  are 
easy to use. They are simply associated with XML element types. 
Thus once built, they can be used by interface designers who have 
no programming experience.   
4. SUPPORTING TOOL 
As described in previous sections, an interface designer can tailor 
the user interface of Forms-XML by creating UIC and CSS files. 
Even though this can be done by using generic XML editors and 
CSS  editors,  using  a  custom-made  tool  would  be  more  effective. 
We thus developed an interface specification tool, the Forms-XML 
Designer,  for  interface  designers  to  customize  the  user  interface 
Forms-XML generates.   

invoking 

The  Forms-XML  Designer,  by 
the  Forms-XML 
component, serves as a generic XML editor. In particular, it can be 
used to create and edit UIC files. It facilitates editing of CSS files 
by  automatically  generating  some  CSS  templates,  which  contain 
CSS rules with selectors being generated and property declarations 
to be added. When an interface designer tailors an interface design 
for  a  prescribed  XML  vocabulary,  the  effect  of  any  design 
modification  to  UIC  and  CSS  files  can  be  observed  immediately 
by  invoking  the  Forms-XML  component  on  sample  XML 
documents.   

few 

[1][2][4], 
exist. 

interactive  components 

5. RELATED WORK 
While  a  large  number  of  XML  interacting/editing  systems  have 
like 
been  available 
Forms-XML 
for 
document-centric  vocabularies,  known  as  structured  document 
editors,  have  been  studied  extensively  since  the  late  80’s  [5][9]. 
They  typically  adopt  a  WYSIWYG  user  interface  by  hiding 
markups.  On  the  other  hand,  data-centric  vocabularies  have 
emerged  much  later  than  document-centric  vocabularies.  User 
interface tools for them are less mature. 

Interacting/editing 

systems 

takes 

the  visual  design  approach 

Forms-XML  is  perhaps  most  related  to  InfoPath  [8].  They  both 
provide  HTML  form-based  user  interfaces  for  data-centric  XML 
is  a  desk-top 
vocabularies.  Unlike  Forms-XML,  InfoPath 
application.  It 
to  form 
development and is targeted for programmers. Thus it appears as a 
form development system with an XML data model. However, its 
support for sophisticated XML vocabularies could be questionable 
for it has its focus on single forms. 
6. CONCLUDING REMARKS 
An interacting/editing component for XML should be easy to use 
for  the  developer,  the  interface  designer  and  the  end  user. 
Forms-XML  satisfies  the  end  user  by  providing  a  simple  but 
customizable  user  interface  with  an  abundance  of  guidance  and 
hints  to  the  user.  The  component  takes  the  automatic  generation 
approach to satisfy the developer and the interface designer. Since 
the  behavior  of  the  user  interface  is  generated  automatically,  the 
developer  can  concentrate  on  the  application  while  the  interface 
designer only deals with the layout and style of the user interface.   

Even  though  the  component  and  tool  have  not  been  formally 
evaluated, they have been tested by two non-programmer interface 
designers  in  our  team.  The  interface  designers  have  used  the 
Forms-XML  Designer  to  create  user  interfaces  for  many  sample 
XML vocabularies without support from developers (except initial 
training). 
7. REFERENCES 
[1]  Altova, XMLSPY, http://www.xmlspy.com/ 
[2]  Arbortext, Epic Editor, http://www.arbortext.com/ 
[3] 

R. Bourret, “XML and databases”, July 2004, 
http://www.rpbourret.com/xml/XMLAndDatabases.htm 
Blast Radius, XMetal, http://www.softquad.com/ 
R. Furuta, V. Quint, and J. Andre, “Interactively editing 
structured documents”, Electronic Publishing, Vol. 1, No. 1, 
April 1988, pp. 19-44. 

[4] 
[5] 

[6]  Y. S. Kuo, Jaspher Wang, and N. C. Shih, “Handling syntactic 

constraints in a DTD-compliant XML editor”, Proc. ACM 
Symp. Document Engineering, Grenoble, France, Nov. 2003. 

[7]  Y. S. Kuo, N. C. Shih, Jaspher Wang, and Lendle Tseng, 
“Avoiding syntactic violations in Forms-XML”, Extreme 
Markup Languages, Montreal, Aug. 2004. 

[8]  Microsoft, Office InfoPath 2003, SP1, 

http://www.microsoft.com/office/infopath/prodinfo/default.msp
x 

[9]  V. Quint and I. Vatton, “Techniques for authoring complex 

XML documents”, Proc. ACM Symp. Document Engineering, 
Milwaukee, Oct. 2004. 

[10]  W3C, Cascading Style Sheets, Level 2, W3C Recommendation, 

May 12, 1998, http://www.w3.org/TR/REC-CSS2/ 

[11]  W3C, XML Schema Part 1: Structures, W3C Recommendation, 

May 2, 2001, http://www.w3.org/TR/xmlschema-1/ 

[12]  W3C, XML Schema Part 2: Datatypes, W3C Recommendation, 

May 2, 2001, http://www.w3.org/TR/xmlschema-2/

 

 

60