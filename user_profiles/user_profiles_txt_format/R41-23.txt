To appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

A Cost-Based Analysis of Overlay Routing

Geometries

Nicolas Christin and John Chuang

School of Information Management and Systems

University of California, Berkeley

102 South Hall

Berkeley, CA 94720-4600

Email: {christin, chuang}@sims.berkeley.edu

Abstract— In this paper, we propose a cost-based model to
evaluate the resources that each node has to contribute for
participating in an overlay network. Such a cost model allows
to gauge potential disincentives for nodes to collaborate, and
provides a measure of the “total cost” of a network, which is
a possible benchmark to distinguish between different network
architectures. We characterize the cost imposed on a node as a
parametrized function of the experienced load and of the node
connectivity, and express beneﬁts in terms of cost reductions.
We discuss the notions of social optimum and Nash equilibrium
with respect to the proposed cost model. We show that the social
optimum may signiﬁcantly deviate from a Nash equilibrium when
nodes value the resources they use to forward trafﬁc on behalf of
other nodes. Through analytical and numerical results, we then
use the proposed cost model to evaluate some of the topologies
recently proposed for overlay networks, and to exhibit some of the
challenges systems designers may face. We conclude by outlining
some of the open questions this research has raised.

I. INTRODUCTION

Overlay networks play an increasing role in modern data
communications. Examples of overlays include peer-to-peer
ﬁle-sharing systems [1], ad-hoc networks [2], distributed
lookup services [3], [4], application-layer multicast overlays
[5]–[7], virtual private networks [8], or content delivery net-
works [9], to name a few.

Despite the growing popularity of overlay networks, there is
no general consensus regarding how different overlay network
topologies compare with each other. System architects may
choose a particular overlay topology according to the graph-
theoretic properties of the topology. For instance, de Bruijn
graphs have recently received signiﬁcant attention in the dis-
tributed lookup community [10]–[12], due to their short aver-
age routing distance and high resiliency to node failures. Other
architectures, notably application layer multicast overlays, e.g.,
[6], [7], are usually designed so that the overlay topology
exhibits desirable properties with respect to the underlying,
physical, network.

This paper aims at providing a formal framework for eval-
uating and comparing overlay topologies. More precisely, the
ﬁrst contribution of this paper is a cost-based model to assess

This work is supported in part by the National Science Foundation through
grants ANI-0085879 and ANI-0331659. A preliminary version of some of the
material in this paper was presented at the Third International Workshop on
Peer-to-Peer Systems (IPTPS’04).

the resources that each overlay node has to contribute for being
part of the overlay. We express the beneﬁts of participating in
the overlay in terms of a cost reduction. Such a cost model
has several useful applications, among which, (1) providing a
benchmark that can be used to compare between different pro-
posals, (2) allowing for predicting disincentives, and designing
mechanisms that ensure a protocol is strategyproof [13], and
(3) facilitating the design of load balancing primitives.

Using the proposed cost model, our second contribution is
to characterize the topologies that yield the lowest resource
usage over the entire network (social optimum), as well as the
topologies that are likely to be formed if each node is let free to
select which links to maintain (Nash equilibrium). This study
is particularly useful to assess whether allowing each partici-
pant in the overlay to adopt a rational (i.e., selﬁsh) behavior
results in an outcome desirable for all participants. Our main
result is that the social optimum can signiﬁcantly deviate from
a Nash equilibrium when nodes value the resources they use
to forward trafﬁc on behalf of other nodes.

Our third contribution lies in the cost-based analysis of sev-
eral topologies recently proposed in the context of distributed
lookup services [3], [4], [10], [12], [14]. We provide analytical
and numerical results to compare the costs incurred by each
topology. We contrast these results with those obtained for the
social optima, and discuss the implications of the observed
costs on system design.

This work is not the ﬁrst attempt to provide a model for
the cost of participating in a network. Jackson and Wolinsky
[15] proposed cost models to analyze formation strategies in
social and economic networks. More recent studies [16], [17]
model network formation as a non-cooperative game, where
nodes have an incentive to participate in the network, but want
to minimize the price they pay for doing so. Our approach
extends these previously proposed cost models, by considering
the load imposed on each node in addition to the distance
to other nodes and degree of connectivity. Furthermore, we
not only use the proposed cost model to characterize social
optima and Nash equilibria, but also as a benchmark to
analyze existing overlay topologies. In that respect, our work
is complementary to recent graph-theoretic studies comparing
topological properties of various overlays [12], [18].

The remainder of this paper is organized as follows. In
Section II, we introduce our proposed cost model. In Sec-

c(cid:13)IEEE

1

To appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

tion III, we derive the social optima and Nash equilibria in the
proposed cost model. In Section IV, we apply the cost model to
several routing geometries used in recently proposed overlay
architectures and compare analytically the costs incurred by
each geometry. We illustrate and extend our analysis with
numerical results obtained by simulation in Section V. Finally,
we conclude the paper in Section VI, and discuss some open
problems this research has uncovered.

II. PROPOSED COST MODEL

We start with a formal description of the cost model we
propose. The cost model applies to any (overlay) network
where nodes request and serve items, or serve requests be-
tween other nodes. Let us deﬁne a routing geometry as in
[18], that is, as a collection of edges, or topology, associated
with a route selection mechanism. Unless otherwise noted,
we assume shortest path routing in the overlay topology,
and distinguish between different topologies; thus, we will
interchangeably use the terms “topology” and “geometry” in
the rest of this paper. Note that, a vast majority of overlay
architectures, e.g., [3], [4], [6], [7], [10]–[12], [14], [19]–
[21], do use shortest path routing in the overlay topology,
which is quite different from using shortest path routing in
the underlying physical network [6].

We deﬁne an overlay network by a quadruplet (V, E, K, F ),
where V , the set of nodes in the network, and E, the set of
directed edges, characterize the topology used in the overlay.
In addition, K is the set of items in the network, and F :
K → V is the function that assigns items to nodes. Each
node u ∈ V is assigned a unique identiﬁer (integer or string
of symbols), which, for the sake of simplicity, we will also
denote by u. We deﬁne by Ku = {k ∈ K : F (k) = u} the
set of items stored at node u ∈ V . We have K = S
u Ku, and
we assume, without loss of generality, that the sets Ku are
disjoint.1 We characterize each request with two independent
random variables, X ∈ V and Y ∈ K, which denote the
node X issuing the request, and the item Y being requested,
respectively.

Consider a given node u ∈ V . Every time an item k ∈ K
is requested in the entire network, node u is in one of four
situations:

Case 1: Idle. Node u does not hold or request k, and is not
on the routing path of the request. Node u is not subject to
any cost.

Case 2: Issuing the request. Node u requests item k. In our
model, we express the beneﬁts of participating in an overlay
network in terms of latency reduction, similar to related
proposals, e.g., [17]. In particular, we assume that the farther
the node v holding k is from u (in a topological sense), the
costlier the request is. If there is no path between nodes u and
v, the request cannot be carried out, which yields an inﬁnite
cost. More precisely, we model the cost incurred by node u
for requesting k as lu,ktu,v, where tu,v is the number of hops
between nodes u and v, and lu,k is a (positive) proportional

factor. We deﬁne the latency cost experienced by node u, Lu,
as the sum of the individual costs lu,ktu,v multiplied by the
probability k ∈ Kv is requested, that is

X

X

Lu =

v∈V

k∈Kv

lu,ktu,v Pr[Y = k] ,

(1)

with tu,v = ∞ if there is no path from node u to node v, and
tu,u = 0 for any u. With this deﬁnition, to avoid inﬁnite costs,
each node has an incentive to create links such that all other
nodes holding items of interest can be reached. An alternative
is to store or cache locally all items of interest so that the cost
of all requests reduces to lu,ktu,u = 0.

As a concrete example of the latency cost, consider the
Domain Name Service (DNS, [22]). DNS can be viewed as an
overlay network using a tree topology, where the leaf nodes
are the DNS clients, and all other nodes are DNS servers.
Consider that a client u wants to access a DNS record k so
unusual that the query has to be redirected all the way to a
DNS root server v. Here, we might have a relatively high value
for the number of hops between u and v, say tu,v = 5. After
the query is resolved, u’s primary DNS server, u0, will have
a copy of k, thereby reducing the latency for a request from
u for k from tu,v = 5 to tu,u0 = 1. Eqn. (1) simply captures
the notion of latency as observed by u in terms of a weighted
average over all possible queries u can make. The weights
lu,k are introduced to express the relative value of one record
compared to another. In our DNS example, if, from node u’s
perspective, the ability to resolve k = www.google.com is
considered 100 times more valuable than the ability to resolve
k0 = dogmatix.sims.berkeley.edu, we should have lu,k =
100 · lu,k0 .

Case 3: Serving the request. Node u holds item k, and pays
a price su,k for serving the request. For instance, in an overlay
ﬁle-sharing network, a node uses some of its upload capacity
to serve a ﬁle requested by other nodes. We deﬁne the service
cost Su incurred by u, as the expected value of su,k over all
possible requests. That is,
X

Su =

su,k Pr[Y = k] .

k∈Ku

Going back to our earlier DNS example, copying the record
k to the server u0 implies that u0 has to use some resources
to store the copy of the record k, which our cost model
characterizes by an increase in the service cost Su0 . In the
DNS example, for a given DNS server, the cost of serving a
DNS record k is the same for all k, so that we have for all
k, su0,k = su0 , which corresponds to the cost of storing one
record.

Case 4: Forwarding the request. Node u does not hold or
request k, but has to forward the request for k, thereby paying
a price ru,k. The overall routing cost Ru suffered by node u is
the average over all possible items k, of the values of ru,k such
that u is on the path of the request. That is, for (u, v, w) ∈ V 3,
we consider the binary function

1 if u is on the path from v to w,






1If an item is stored on several nodes (replication), the replicas can be
viewed as different items with the exact same probability of being requested.

χv,w(u) =

excluding v and w

0 otherwise,

c(cid:13)IEEE

2

To appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

and express Ru as

X

X

X

Ru =

v∈V

w∈V

k∈Kw

ru,k Pr[X = v] Pr[Y = k]χv,w(u) .

(2)
In our DNS example, the routing cost denotes the resources
used by a server which receives a query for k, cannot resolve
it, and has to redirect the query to a DNS server higher up in
the tree, averaged over all possible queries.

In addition to the latency, service and routing costs, each
node keeps some state information so that the protocol govern-
ing the overlay operates correctly. In most overlay protocols,
each node u has to maintain a neighborhood table and to
exchange messages with all of its neighbors, that is, the nodes
v for which an edge (u, v) exists. Denoting by N (u) the set
of neighbors of u, we characterize a maintenance cost Mu, as

X

Mu =

mu,v ,

v∈N (u)

where mu,v ≥ 0 characterizes the cost incurred by node u
for maintaining a link with its neighbor v ∈ N (u). Returning
to the DNS example, the maintenance cost characterizes the
resources used by the DNS server u to maintain information
about all the other servers u might contact (or refer to) when
a query cannot be answered locally.

Adding the latency, service, routing, and maintenance costs
for a node u, we can deﬁne the individual cost imposed on
node u, Cu, as

Cu = Lu + Su + Ru + Mu .

We can in turn use Cu to compute the total cost of the

network, C = P

u∈V Cu.

Last, the expression of Cu only makes sense if Su, Ru,
Mu, and Lu are all expressed using the same unit. Thus,
the coefﬁcients su,k, ru,k, lu,k and mu,v have to be selected
appropriately. For instance, lu,k is given in monetary units per
hop per item, while mu,v is expressed in monetary units. We
next rely on our deﬁnition of the individual cost at a node u
and of the total cost of the network to compute the social
optima and Nash equilibria.

and

outcome. Studying Nash equilibria and social optima appears
particularly useful in the context of self-forming networks,
such as ad-hoc networks, or in describing peering relationships
between Internet service providers, where individual nodes
choose which links to maintain.

We next discuss a few simpliﬁcations useful to facilitate our
analysis, before characterizing some possible social optima,
and describing how they relate to the Nash equilibria.

A. Assumptions

For the remainder of this paper, we consider a network of
N > 0 nodes, where, for all u ∈ V and k ∈ K, lu,k = l,
su,k = s, ru,k = r, and for all u ∈ V and v ∈ V , mu,v = m.
In other words, we assume that the costs associated with
incurring a one-hop latency, serving one request, routing one
request, or maintaining one link, are the same on all nodes,
irrespective of the item requested or served.2 We suppose that
the network is in a steady-state regime, i.e., nodes do not
join or leave the network, so that the values l, s, r and m
are constants. We also suppose that requests are uniformly
distributed over the set of nodes, that is, for any node u,
Pr[X = u] = 1/N . For the time being, we make a further
simpliﬁcation by choosing the mapping function F such that
all nodes have an equal probability of serving a request. In
other words, P

Pr[Y = k] = 1/N , which implies

k∈Ku

regardless of the geometry used. (This assumption will be
removed in Section V.) Moreover, if we use E[x] to denote
the expected value of a variable x, Eqs. (1) and (2) reduce to

Su =

s
N

,

Lu = lE[tu,v] ,

Ru = rE[χv,w(u)] ,

respectively. Also, because each node u has deg(u) neighbors,
we immediately obtain

Mu = m deg(u) .

Last, we assume that no node is acting maliciously.

III. SOCIAL OPTIMA AND NASH EQUILIBRIA

In this section, we characterize the geometries that constitute
a social optimum or a Nash equilibrium in the proposed cost
model. The social optimum is deﬁned as the routing geometry
that minimizes the total cost C. A (pure) Nash equilibrium
corresponds to a routing geometry where no node u can
decrease its individual cost Cu by (deterministically) creating
or removing a link. In other words, the social optimum is
the outcome a system designer is likely to desire, while the
Nash equilibrium describes the outcome that is likely to result
from each node acting in its best interest. Thus, from a system
designer’s perspective, an ideal situation occurs when the Nash
equilibrium and the social optimum correspond to the same
topology. Conversely, when the social optimum is not a Nash
equilibrium, one might need to devise mechanisms to realign
the incentives of each individual node with a desirable global

B. Full Mesh

In our investigation of possible social optima, let us ﬁrst
consider a full mesh, that is, a network where any pair of
nodes is connected by a bidirectional edge, i.e., tu,v = 1 for
any v 6= u. Nodes never any route any trafﬁc and deg(u) =
N − 1. Thus, for all u, Ru = 0, Lu = l(N − 1)/N , and
Mu = m(N − 1). With Su = s/N , we get Cu = s/N +
l(N − 1)/N + m(N − 1), and, summing over u,

C(full mesh) = s + l(N − 1) + mN (N − 1) .

(3)

Let us remove a link from the full mesh, for instance the link
0 → 1. The maintenance cost at node 0, M0, decreases by m.

2While very crude in general, this simpliﬁcation is relatively accurate in the
case of a network of homogeneous nodes and homogeneous links containing
ﬁxed-sized keys such as used in distributed hash tables.

c(cid:13)IEEE

3

To appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

However, to access the items held at node 1, node 0 now has
to send a request through another node (e.g.,3 node 2): as a
result, L0 increases by l/N , and the routing cost at node 2,
R2, increases by r/N 2. So, removing the link 0 → 1 causes a
change in the total cost ∆C = −m+l/N +r/N 2. If ∆C ≥ 0,
removing a link causes an increase of the total cost, and the
full mesh is the social optimum. In particular, the full mesh is
the social optimum if the maintenance cost is “small enough,”
that is, if

m ≤

+

l
N

r
N 2 .

(4)

Note that, as N → ∞, the condition in Eqn. (4) tends to
m = 0. In fact, we can also express ∆C ≥ 0 as a condition
on N that reduces to N ≤ bl/m + r/lc when m (cid:28) l2/r,
using a ﬁrst-order Taylor series expansion.

We can draw a parallel with the DNS example of Sec-
tion II to illustrate condition (4). As long as the number
of Internet hosts remained reasonably small, each host used
a large HOSTS.TXT ﬁle to directly resolve hostnames into
IP addresses, effectively creating a full mesh for the naming
overlay: each node knew about all the other nodes.4 DNS was
only introduced when the number of hosts on the Internet grew
large enough to render maintaining all information in a single,
distributed ﬁle impractical.

C. Star Network

Suppose now that Eqn. (4) does not hold, and consider a star
network. Let u = 0 denote the center of the star, which routes
all trafﬁc between peripheral nodes. That is, χv,w(0) = 1 for
any v 6= w (v, w > 0). One can easily show that R0 = r(N −
1)(N − 2)/N 2, L0 = l(N − 1)/N and M0 = m(N − 1), so
that the cost C0 incurred by the center of the star is

C0 = m(N − 1) +

+ l

+ r

s
N

N − 1

(N − 1)(N − 2)

N

N 2

. (5)

Peripheral nodes do not route any trafﬁc, i.e., Ru = 0 for all
u > 0, and are located at a distance of one from the center
of the star, and at a distance of two from the (N − 2) other
nodes, giving Lu = l(2N − 3)/N . Further, deg(u) = 1 for
all peripheral nodes. Hence, Mu = m, and the individual cost
imposed on nodes u > 0 is

Cu = m +

+ l

s
N

2N − 3

.

N

(6)

Proposition 1: C0 = Cu can only hold when N is a

constant, or when l = r = m = 0.

Proof: By identiﬁcation. (See [23].)

Since the difference C0 − Cu quantiﬁes the (dis)incentive to
be a priori in the center of the star, Proposition 1 tells us that
there is a (dis)incentive to be in the center of the star in a vast
majority of cases.

3The actual mechanism that informs node 0 of which node to contact to
send a request to node 1 is irrelevant to this discussion. One can for instance
assume without loss of generality that nodes periodically advertise their list
of neighbors.

4Note that we are here only concerned with name resolution. Updating and
disseminating the HOSTS.TXT ﬁle is a separate issue, and was actually done
in a centralized manner [22].

Next, we compute the total cost of the star, and determine
is a social optimum. Summing

under which condition it
Eqs. (5) and (6), we obtain

C(star) = 2m(N −1)+s+2l

+r

. (7)

(N − 1)2

(N − 1)(N − 2)

N

N 2

Proposition 2: For any number of nodes N ≥ 3, the star
is a social optimum, if (i) Eqn. (4) does not hold and (ii) all
links are bidirectional, i.e., for any u ∈ V and v ∈ V , if
(u → v) ∈ E then (v → u) ∈ E.

Proof: Let us start from a full mesh. Every time we
remove a (directed) link u → v, we reduce Mu, and thus the
total cost of the network, by m. However, at the same time,
removing the link u → v imposes that trafﬁc going from u to
v has to go through at least one intermediary node w. So, Lu
increases by at least l/N , and there is at least one node w for
which Rw increases by r/N 2. In other words, every time we
remove a link from a full mesh the change in cost is at least
∆C ≥ −m+l/N +r/N 2. (By hypothesis, the right term of the
inequality is negative, so that there is potentially an advantage
of removing a link from the full mesh.) Now, remark that all N
nodes must be connected for the total cost C to remain ﬁnite.
Further observe that one always need at least (N − 1) directed
links to ensure that all N nodes are connected. So, under the
assumption that all links must be bidirectional, we need at least
2(N − 1) directed links to ensure all N nodes are connected.
Differently stated, since the full mesh has N (N − 1) links, we
can at most remove (N − 2)(N − 1) links from the full mesh
and still have a connected network. Assume that we can select
the (N − 2)(N − 1) links to be removed so that we realize
the maximum savings ∆C = −m + l/N + r/N 2 < 0 for each
link we remove. Hence, we obtain the following lower bound
on the cost of the social optimum, C(s. opt.):

C(s. opt.) ≥ C(full mesh) − (N − 2)(N − 1)m
.

+ (N −2)(N −1)r

+ (N −2)(N −1)l

N

N 2

From Eqs. (3) and (7), it follows that the right term in the
above inequality is in fact equal to C(star). In other words,
we have shown the total cost of a star network is smaller than
or equal to the cost of the social optimum, from which we
conclude that the star is a social optimum.
Let us make two remarks regarding Proposition 2. First,
Proposition 2 does not guarantee that the star is a unique social
optimum. In fact, in the limit case where m = l/N + r/N 2,
adding any number of “shortcuts” between peripheral nodes of
a star still results in a social optimum. Second, the assumption
that the links are bidirectional is crucial for Proposition 2 to
hold for any N . For instance, if we allow for unidirectional
links, it can be shown that, if m is large enough and N remains
small,5 the unidirectional ring 0 → 1 → . . . → N → 1 has a
lower cost than the star network. However, while ﬁnding the
social optimum when unidirectional links are allowed is an
open problem, we conjecture that the star network still plays
a predominant role, and that geometries such as the unidirec-
tional ring may only appear under very stringent conditions.
More concisely, the above analysis tells us that, when the
number of links to maintain becomes too high to make a full

5More precisely, if m > 0.5(N − 1)(N − 2)(l/N + r/N 2).

c(cid:13)IEEE

4

To appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

mesh an attractive solution, a centralized network is generally
optimal from the point of view of resource consumption.

D. Nash Equilibria

Assume now that each node can choose which links it
maintains, but does not have any control over the items it
holds, and honors all routing requests. In other words, each
node is selﬁsh when it comes to link establishment, but
is obedient once links are established. When each node u
is (perfectly) rational, i.e., tries to minimize its individual
cost Cu given the behavior of all other nodes, the resulting
topology constitutes a Nash equilibrium. Even though the
existence or uniqueness of a Nash equilibrium is in general
not guaranteed, the following results yield some insight on
the possible equilibria that may occur in our proposed cost
model.

Proposition 3: If m < l/N , the full mesh is a unique (pure)

Nash equilibrium.

Proof: In a fully connected network, no node can create
additional links. If a given node u removes one of its links,
deg(u) decreases from (N − 1) to (N − 2), but, at the same
time, one of the nodes u0 6= u is now at a distance of 2 from
u. Thus, E[tu,v] increases from 1 to
2
N

E[tu,v] =

N − 1

= 1 +

1
N

N

+

,

and the difference in utility for node u, between the strategy of
removing one link and the strategy consisting in maintaining
all links, is m−l/N . To have a Nash equilibrium, we therefore
need to have m − l/N ≤ 0, which is true if and only if
m ≤ l/N .

Suppose now that we have m < l/N , and a network that is
not fully connected. In particular, consider that a node u can
decide whether to create a link to another node u0 6= u. Before
addition of the link u → u0, u0 is at a distance 2 ≤ tu,u0 ≤
N −1 of u. After creation of the link u → u0, u0 is at a distance
1 of u. Thus, by creating the link u → u0, E[tu,v] at least
decreases by (2 − 1)/N = 1/N . Adding the link u → u0 also
results in deg(u) increasing by one, so that that the addition of
the link u → u0 eventually results in a change in the node u’s
utility equal to −m + l/N , which, by hypothesis, is strictly
positive. Hence, node u always has an incentive to add links
to nodes it is not connected to. Using the same reasoning for
all nodes, we conclude that the fully connected network is the
unique Nash equilibrium if m < l/N .

Proposition 4: If m > l/N , the star network is a pure Nash

equilibrium.
Proof:

that

Suppose, without

loss of generality,

the
central node is node 0. Node 0 is fully connected to the rest
of the network, and therefore cannot create additional links.
If node 0 removes one of its links, one of the N − 1 other
nodes becomes unreachable, which implies E[t0,v] → ∞, and
u0 → −∞. Thus, node 0 has no incentive in modifying its set
of links. Likewise, peripheral nodes do not remove their (only)
link to the central node, to avoid having their cost Cu → −∞.
Suppose now that a peripheral node u creates an additional
link to another peripheral node u0 6= u. An argument identical
to that used in the proof of Proposition 3 shows that the

c(cid:13)IEEE

5

Fig. 1. Social optimum and Nash equilibrium. Incentives of individual nodes
are not aligned with the social optimum in the interval [l/N, l/N + r/N 2].

addition of the link u → u0 results in a change in the node u’s
utility equal to −m + l/N . Here, however, m > l/N , so that
−m+l/N < 0, and node u has no incentive in adding the link
u → u0. Thus, the star network is a pure Nash equilibrium.
Propositions 3 and 4, tell us that, if maintaining links is cheap,
or if the network is small, the only Nash equilibrium is the
full mesh. If maintaining links is more expensive, or if the
network is large, a star network is a possible Nash equilibrium;
we cannot guarantee unicity of the equilibrium, however. For
instance, in the limit case m = l/N , any network created by
adding an arbitrary number of links between peripheral nodes
of a star constitutes a Nash equilibrium.

E. Interpretation

We summarize our ﬁndings in Fig. 1, where we discriminate
between social optima and Nash equilibria according to the
value of m. For m < l/N , represented as a dark gray area
in the ﬁgure, the full mesh is both a Nash equilibrium and a
social optimum; for m > l/N + r/N 2 (white area), the star
network is both a Nash equilibrium and a social optimum. In
both cases, the incentives of each node are aligned with the
most efﬁcient overall usage of the resources in the network.
The most interesting region in Fig. 1 is perhaps the light
gray area, in which individual incentives and overall resource
usage are conﬂicting. This area corresponds to the parameter
range l/N < m < l/N + r/N 2, whose size solely depends
on r. Stated differently, under the assumption that all nodes
have an identical probability of serving a request, the social
optimum may signiﬁcantly deviate from a Nash equilibrium as
soon as nodes value the resources they use to forward trafﬁc
on behalf of other nodes.

As a corollary, a network where “forwarding comes for
free” (i.e., r = 0), e.g., where bandwidth and computational
power are extremely cheap, is ideal from the system designer’s
perspective, because individual incentives should produce a
socially optimal solution. Unfortunately, in most networks, the
price paid for forwarding data cannot be neglected, which
suggests that our cost model
is better suited at capturing
possible disincentives than previous models solely based on
node degree (i.e., maintenance costs) and hop count (i.e.,
latency costs).

IV. ANALYSIS OF SOME PROPOSED OVERLAY ROUTING

GEOMETRIES

In the discussion in the previous section, we have ignored
robustness against attacks, fault-tolerance, or potential perfor-
mance bottlenecks. All these factors pose practical challenges

Nash equilibriumSocial optimuml/Nl/N+r/N2Star networkFull meshStar network0mFull meshTo appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

in a centralized approach, as does providing an incentive to
occupy (or relinquish) the central position of a star. Using a
full mesh avoids most of these concerns, but, as we have seen,
is only a solution for a modest number of nodes.

Many research efforts have been directed at designing
overlay geometries that provide reasonable performance, while
addressing the aforementioned robustness concerns. In this
section, we use our cost model to evaluate a few of the rout-
ing geometries that have been recently proposed for overlay
networks in the networking literature. We focus on de Bruijn
graphs, D-dimensional tori, PRR trees, and Chord rings. We
derive analytically the various costs experienced by a node in
each geometry. We will later compare our results with those
obtained in our study of the social optima and Nash equilibria.

a given edge. In a de Bruijn graph, by construction, each node
maps to an identiﬁer string of length D, and each path of
length k hops maps to a string of length D + k, where each
substring of D consecutive symbols corresponds to a different
hop [12]. Thus, determining an upper bound on the number of
paths of length k that pass through a given node u is equivalent
to computing the maximum number, lk, of strings of length
D + k that include node u’s identiﬁer, σu = (u1, . . . , uD),
as a substring. In each string of length D + k corresponding
to a paths including u, where u is neither the source nor the
destination of the path, the substring σu can start at one of
(k − 1) positions (2, . . . , k). There are ∆ possible choices for
each of the k symbols in the string of length D + k that are
not part of the substring σu. As a result,

A. De Bruijn Graphs

De Bruijn graphs are used in algorithms such as Koorde
[10], Distance-Halving [11], or ODRI [12], and present very
desirable properties, such as short average routing distance and
high resiliency to node failures [12]. In a de Bruijn graph,
any node u is represented by an identiﬁer string (u1, . . . , uD)
of D symbols taken from an alphabet of size ∆. The node
represented by (u1, . . . , uD) links to each node represented
by (u2, . . . , uD, x) for all possible values of x in the alphabet.
The resulting directed graph has a ﬁxed out-degree ∆, and a
diameter D.

Denote by V 0 the set of nodes such that the identiﬁer of
each node in V 0 is of the form (h, h, . . . , h). Nodes in V 0
link to themselves, so that Mu = m(∆ − 1) for u ∈ V 0. For
nodes u /∈ V 0, the maintenance cost Mu is Mu = m∆. The
next two lemmas will allow us to show that the routing cost
at each node also depends on the position of the node in the
graph.

Lemma 1: With shortest-path routing, nodes u ∈ V 0 do not

route any trafﬁc, and Ru = 0.

Proof: (By contradiction.) Consider a node u ∈ V 0 with
identiﬁer (h, h, . . . , h), and suppose u routes trafﬁc from a
node v to a node w. The nodes linking to u are all the nodes
with an identiﬁer of the form (x, h, . . . , h), for all values of x
in the alphabet. The nodes linked from u are all the nodes of
the form (h, . . . , h, y) for all values of y in the alphabet. There-
fore, there exists x0 and y0 such that trafﬁc from node v to
node w follows a path P = (x0, h, . . . , h) → (h, h, . . . , h) →
(h, h, . . . , y0). But, because, in a de Bruijn graph, there is an
edge between (x0, h, . . . , h) and (h, h, . . . , y0), trafﬁc using
the path P between v and w does not follow the shortest
path. We arrive to a contradiction, which proves that u does
not route any trafﬁc.

Lemma 2: The number of routes ρu passing through a given

node u, or node loading, is bounded by ρu ≤ ρmax with

ρmax =

(D − 1)(∆D+2 − (∆ − 1)2) − D∆D+1 + ∆2

.

(∆ − 1)2

lk ≤ (k − 1)∆k .

With shortest path routing, the set of all paths going through
node u include all paths of length D + k with k ∈ [1, D]. So,

k=D
X

k=D
X

ρu ≤

lk ≤

(k − 1)∆k

k=1
(D − 1)∆D+2 − D∆D+1 + ∆2

k=1

≤

(∆ − 1)2

.

(8)

We improve the bound given in Eqn. (8) by considering the
strings of length 2D that are of the form σ∗σ∗, where σ∗
is a string of length D. Strings of the form σ∗σ∗ denote a
cycle σ∗ → σ∗, and therefore, never characterizes a shortest
path in a de Bruijn graph. Hence, we can subtract the number
of the strings σ∗σ∗ from the bound in Eqn. (8). Because
σu = (u1, . . . , uD) is a substring of σ∗σ∗ of length D, σ∗ has
to be one of the D circular permutations of σu, for instance
(uD−1, uD, u1, . . . , uD−2). Since u does not route any trafﬁc
when u is the source of trafﬁc, σ∗ 6= σu. Thus, there are
only (D − 1) possibilities for σ∗, and (D − 1) strings σ∗σ∗.
Subtracting (D − 1) from the bound in Eqn. (8) yields ρmax.

From Lemmas 1 and 2, we infer that, in a de Bruijn graph,
for any u, v and w, 0 ≤ Pr[χv,w(u) = 1] ≤ ρmax/N 2.
Because χv,w(u) is a binary function, Pr[χv,w(u) = 1] =
E[χv,w], and we ﬁnally obtain 0 ≤ Ri ≤ Rmax with

Rmax =

rρmax

N 2

.

We next compute upper and lower bounds on the latency
cost. To derive a tight upper bound on Lu, consider a node u ∈
V 0. Node u links to itself and has only (∆−1) neighbors. Each
neighbor of u has itself ∆ neighbors, so that there are ∆(∆−1)
nodes v such that tu,v = 2. By iteration and substitution in
Eqn. (1), we get, after simpliﬁcation, Lu ≤ Lmax, with

Lmax = l

D∆D+1 − (D + 1)∆D + 1

,

N (∆ − 1)

The bound is tight, since it can be reached when ∆ ≥ D for
the node (0, 1, 2, . . . , D − 1).

Proof: The proof follows the spirit of the proof used in
[24] to bound the maximum number of routes passing through

and Lu = Lmax for nodes in V 0.

Now, consider that each node u has at most ∆ neighbors.
Then, node u has at most ∆2 nodes at distance 2, at most
∆3 nodes at distance 3, and so forth. Hence, there are at least

c(cid:13)IEEE

6

To appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

∆D − PD−1
node u. We get

k=0 ∆k nodes at the maximum distance of D from

C. PRR Trees

Lu ≥

l
N

 D−1
X

k=1

 

!!

k∆k + D

∆D −

∆k

,

D−1
X

k=0

which reduces to Lu ≥ Lmin, with

Lmin =

D∆D +

(cid:18)

l
N

D

∆ − 1

−

∆(∆D − 1)
(∆ − 1)2

(cid:19)

.

It can be shown that Lu = Lmin for the node (0, 1, . . . , D −1)
when ∆ ≥ D.

Note that, the expressions for both Lmin and Lmax can be
further simpliﬁed for N = ∆D, that is, when the identiﬁer
space is fully populated.

B. D-dimensional Tori

We next consider D-dimensional tori, where each node is
represented by D Cartesian coordinates, and has 2D neigh-
bors, for a maintenance cost of Mu = 2mD for any u. This
type of routing geometry is for instance used in CAN [3].

Routing at each node is implemented by greedy forwarding
to the neighbor with the shortest Euclidean distance to the
destination. We assume here that each node is in charge of
an equal portion of the D-dimensional space. This constraint
could also be expressed using the slightly stronger assumption
that N 1/D is an integer, and that all possible sets of Cartesian
coordinates (u1, . . . , uD) (where each ui maps to an integer
in [0, N 1/D − 1]) map to a node. In other words, we assume
the identiﬁer space (u1, . . . , uD) is fully populated.

From [12], we know that the average length of a routing path
is (D/4)N 1/D hops for N even, and (D/4)N 1/D+D/4−o(1)
for N odd. Because we assume that the D-dimensional torus
is equally partitioned, by symmetry, we conclude that for all u,

Lu = l

DN 1/D

,

4

using the same approximation as in [3] that the average length
of a routing path is almost equal (D/4)N 1/D hops even for
N odd.

To determine the routing cost Ru, we compute the node
loading as a function ρu,D of the dimension D. With our
assumption that the D-torus is equally partitioned, ρu,D is
the same for all u by symmetry.

Lemma 3: In a D-torus completely populated with N

nodes, the node loading at any node u is given by

We next consider the variant of PRR trees [25] used
in Pastry [14] or Tapestry [19]. Nodes are represented by
a string (u1, . . . , uD) of D digits in base ∆. Each node
is connected to D(∆ − 1) distinct neighbors of the form
(u1, . . . , ui−1, x, yi+1, . . . , yD), for i = 1 . . . D, and x 6=
ui ∈ {0, . . . , ∆ − 1}. The resulting maintenance cost
is
Mu = mD(∆ − 1).

Among the different possibilities for the remaining coordi-
nates yi+1, . . . , yD, the protocols generally select a node that
is nearby according to a proximity metric. We here assume
that the spatial distribution of the nodes is uniform, and that
the identiﬁer space is fully populated, which enables us to
pick yi+1 = ui+1, . . . , yD = uD. Thus, two nodes u and v at
a distance of n hops differ in n digits. There are (cid:0)D
(cid:1) ways of
choosing which digits are different, and each such digit can
take any of (∆ − 1) values. So, for a given node u, there are
(cid:0)D
(cid:1)(∆ − 1)n nodes that are at distance n from u. Multiplying
n
by the total number of nodes N = ∆D, and dividing by the
total number of paths N 2, we infer that, for all u, v, and w,
we have

n

Pr[tu,v = n] =

(cid:0)D
n

(cid:1)(∆ − 1)n

.

N

(10)

Now, for any u and v such that tu,v = n, because routes are
unique, there are exactly (n − 1) different nodes on the path
between u and v. So, the probability that a node w picked at
random is on the path from u to v is

Pr[χu,v(w) = 1|tu,v = n] =

(11)

n − 1

N

.

The total probability theorem tells us that

Pr[χu,v(w) = 1]

= PD

n=1 Pr[χu,v(w) = 1|tu,v = n] · Pr[tu,v = n] .

Substituting with the expressions obtained for Pr[tu,v = n]
and Pr[χu,v(w) = 1|tu,v = n] in Eqs. (10) and (11) gives:

Pr[χu,v(w) = 1] =

(n − 1)

(∆ − 1)n ,

(12)

1
N 2

D
X

n=1

(cid:19)

(cid:18)D
n

which, expressing the right-hand side as a function of the
derivative of a series, and using the binomial theorem, reduces
to

Pr[χu,v(w) = 1] =

∆D−1(D(∆ − 1) − ∆) + 1

.

N 2

ρu,D = 1+ N

−N 1

D + D

N 1

D − 1

(cid:16)

Multiplying the above expression for Pr[χu,v(w) = 1] by r
eventually gives us the routing cost,

D−1

D

(cid:18)(cid:22)

(cid:16)

N

1
D
2

+

(cid:23)

(cid:19) (cid:18)(cid:24)

(cid:25)

(cid:19)(cid:19)(cid:19)

(9)

− 1

− 1

.

N

1
D
2

∆D−1(D(∆ − 1) − ∆) + 1

Ru = r

N 2

.

(13)

Proof: By induction on the dimension D. (See [23] for

details.)
For all u, Ru immediately follows from ρu,D with

To compute the access cost Lu, we use the relationship

Lu = lE[tu,v]. We have

Ru = r

ρu,D
N 2

.

E[tu,v] =

k Pr[tu,v = n] ,

D
X

n=1

c(cid:13)IEEE

7

To appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

(∆, D)

(2, 9)
(3, 6)
(4, 4)
(5, 4)
(6, 3)

Lmin
7.18
5.26
3.56
3.69
2.76

Lmax
8.00
5.50
3.67
3.75
2.80

Lmax
Lmin
1.11
1.04
1.03
1.02
1.01

R0

min Rmax
17.53
3.89
2.05
9.05
13.87
5.11
5.50
1.98
5.38
9.99

Rmax
R0
min
4.51
4.41
2.71
2.78
1.86

ASYMMETRY IN COSTS IN A DE BRUIJN GRAPH (l = 1, r = 1, 000)

TABLE I

which, using the expression for Pr[tu,v = n] given in
Eqn. (10), and relying, here again, on the binomial theorem,
leads us to

D∆D−1(∆ − 1)

E[tu,v] =

Multiplying by l to obtain Lu, we eventually get, for all u,

D∆D−1(∆ − 1)

Lu = l

(14)

N

N

.

.

(Note that, for N = ∆D, Eqn. (14) reduces to Lu = lD(∆ −
1)/∆.)

D. Chord Rings

In a Chord ring [4], nodes are represented using a binary
string (i.e., ∆ = 2). When the ring is fully populated, each
node u is connected to a set of D neighbors, with identiﬁers
((u+2p) mod 2D) for p = 0 . . . D−1. An analysis similar to
that carried out for PRR trees yields Ru and Lu as in Eqs. (13)
and (14) for ∆ = 2. Simulations conﬁrm this result [4].

E. Discussion

The analytical results we have derived in this section can
serve a number of purposes. First, they conﬁrm that all of the
routing geometries considered here have the same asymptotic
behavior: the routing costs decrease in log N , while the latency
costs grow with log N . Second, while these asymptotic results
are well known (see for instance [3], [4], [12], [18]), the main
advantage of the above analysis is to provide closed-form
equations that can be used for tuning conﬁguration parameters
such as ∆ or D in function of the relative importance of
each cost, e.g., routing cost vs. latency cost. Such a study
of the conﬁguration parameters is, however, outside the scope
of the present paper. Third, our analysis provides us with a
baseline we can use in a comparison with (1) the social optima
and/or Nash equilibria and (2) more realistic scenarii where
the identiﬁer space is sparsely populated or where some items
are more popular than others, which is the object of the next
section.

V. NUMERICAL RESULTS

We present here some simulation results to validate and
illustrate the analysis presented in Section IV. We complement
the analysis by investigating numerically the effect of relaxing
the assumptions that all items have identical popularity, and
that the identiﬁer space is fully populated.

c(cid:13)IEEE

8

A. Illustration of the Analysis

Let us ﬁrst illustrate numerically the analysis of Section IV.
In Table I, we consider ﬁve de Bruijn graphs with different
values for ∆ and D, and X and Y i.i.d. uniform random
variables. Table I shows that while the latency costs of all
nodes are comparable, the ratio between Rmax and the second
best case routing cost,6 R0
min, is in general signiﬁcant. Thus,
if r (cid:29) l,
there can be an incentive for the nodes with
Ru = Rmax to defect. For instance, these nodes may leave the
network and immediately come back, hoping to be assigned
a different identiﬁer u0
6= u with a lower cost. Additional
mechanisms, such as enforcing a cost of entry to the network,
may be required to prevent such defections.

We next simulate the costs incurred in the different ge-
ometries we discussed. We choose ∆ = 2, for which the
results for PRR trees and Chord rings are identical. We choose
D = {2, 6} for the D-dimensional tori, and D = log∆ N for
the other geometries. We point out that selecting a value for
D and ∆ common to all geometries may inadvertently bias
one geometry against another. We emphasize that we only
illustrate a speciﬁc example here, without making any general
comparison between different geometries.

We vary the number of nodes between N = 10 and
N = 1, 000, and, for each value of N run ten differently
seeded simulations, consisting of 100,000 requests each, with
X and Y i.i.d. uniform random variables. We plot the latency
and routing costs averaged over all nodes and all requests
in Fig. 2. The graphs show that our analysis is validated by
simulation, and that the star provides a lower average cost
than all the other geometries. This result is consistent with
our earlier ﬁnding that the star is, in many cases, a social
optimum, which may be more desirable to the community as
a whole than a distributed solution. Note however, that our cost
model does not take into account factors such as scalability
and resiliency, both of which are cause for serious concerns
in a completely centralized architecture. Additionally, while
we have shown that the star network was potentially a Nash
equilibrium, we nevertheless need incentive mechanisms (e.g.,
monetary rewards) to compensate for the asymmetry of a star
network, and to convince a node to occupy the central position
in the ﬁrst place.

B. Asymmetry in Item Popularity

We investigate next how relaxing the assumption that all
items have identical popularity impacts the results we have
obtained so far. To that effect, we run a set of experiments,
where items have a popularity that follows a Zipf-like distribu-
tion deﬁned as follows. Assume the existence of a (bijective)
function Rank : V → {1, . . . , N }, that orders the nodes u ∈ V
by decreasing probability that a given item k is held by u. For
instance, if Rank(u) = 1, the probability that node u holds
an arbitrary item k is strictly higher than the probability that
any node v 6= u holds k. Given Rank(u), we characterize the

6That is, the minimum value for Ru over all nodes but the ∆ nodes in V 0

for which Ru = 0.

To appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

(a) Latency cost (l = 1)

(b) Routing cost (r = 1, 000)

Fig. 2. Latency and routing costs. Curves marked “sim” present simulation results. The full mesh, for which the latency cost is constantly equal to 1, and
the routing cost is constantly equal to 0, is omitted for readability purposes.

Lmax
Lmin

Rmax
R0

min

3-torus
De Bruijn
PRR tree

1.2675 (±0.0442)
1.2453 (± 0.0265)
1.2591 (±0.0420)

5.2845 (±0.3516)
30.7275 (±9.5970)
9.2154 (±0.6590)

TABLE II

. We immediately obtain Su =

ASYMMETRY IN COSTS IN A NETWORK WHERE ITEM POPULARITY

FOLLOWS A ZIPF-LIKE DISTRIBUTION.

probability that u has to serve a given request as:

Pr[Y = k] =

Ω

(Rank(u))α ,

(15)

X

k∈Ku
(cid:16)PN

i=1 iα(cid:17)−1

where Ω =
sΩ/(Rank(u))α.

In the case α = 1, Eqn. (15) characterizes a Zipf distri-
bution. Our motivation for using the distribution in Eqn. (15)
stems from the observation that on the one hand, web caching,
and more generally, content delivery networks, are one of
the most deployed applications of network overlays;7 on the
other hand, measurement studies such as [27], show that web
pages requests follow the distribution given in Eqn. (15) for
0.6 ≤ α ≤ 0.9.

In this set of experiments, we use α = 0.75, and we simulate
a network of size N = 512 nodes. We select D = 3 for the
D-torus, and ∆ = 2 and D = 9 for the other geometries.
Because the function Rank(.) is a permutation of the node
indices, we should run N ! different experiments to exhaust
all possible experimental cases, which is impractical. Instead,
we pick 1,024 different orderings at random, and run one
simulation experiment for each ordering. Our hope is that the
sample size of 1,024 experiments is large enough to give a
relatively accurate overall picture of the results one can expect.
Each experiment consists of 100,000 requests. The source of
the request X is a uniform random variable, and the requested
item Y is determined according to Eqn. (15).

Because Y is not a uniform random variable anymore,
different nodes experience different latency and routing costs.
In each experiment, we collect the ratios between the highest
(Lmax and Rmax) and lowest (Lmin and R0
min) latency and
routing costs observed over all nodes. Since in de Bruijn
graphs, some nodes do not route any trafﬁc, we use again
R0
min = minu∈V {Ru > 0}. In Table II, we present the
average ratios Lmax/Lmin and Rmax/R0
min, averaged over

7In all fairness, a Zipf distribution may only be a very rough approximation
of the request distribution in a ﬁle-sharing network such as KaZaA [26]. We
conjecture however that the request patterns observed in ﬁle-sharing networks
is more of an anomaly than a rule that can be generalized to all overlays.

c(cid:13)IEEE

9

Corr(R, L)

Corr(R, S)

Corr(L, S)

3-torus
De Bruijn
PRR tree

-0.3133
-0.3299
-0.2278

-0.0166
-0.0112
-0.0128

-0.0960
-0.0981
-0.1027

CORRELATION BETWEEN ROUTING, LATENCY, AND SERVICE COSTS IN A

NETWORK WHERE ITEM POPULARITY FOLLOWS A ZIPF-LIKE

TABLE III

DISTRIBUTION.

all 1,024 experiments. Numbers in parentheses denote the
corresponding standard deviation. The results indicate that,
for all geometries, the latency costs of all nodes are relatively
similar, but, the routing costs present signiﬁcant differences.
We explain the higher degree of asymmetry of the de Bruijn
graph by the disparities in the node loadings (see Section IV),
that magnify inequalities in routing costs. As a comparison
to the social optima, we point out that in a star or a full
mesh, the routing and latency costs are similar regardless of
the popularity of the different items.

We next determine whether asymmetries in routing costs
compensate asymmetries in latency costs, or, more signif-
icantly,
in service costs. To that effect, we compute the
correlation coefﬁcient (denoted as Corr(x, y) for two variables
x and y) between R and L, R and S, and L and S, computed
over the 512 nodes × 1,024 experiments= 524,288 data points
available for the triplet (R, L, S), and present our ﬁndings in
Table III. For all three geometries, Table III indicates that

De Bruijn(upper bound)De Bruijn(sim, average)6−torus (model)Star (average)(lower bound)De BruijnPRR (sim)2−torus(sim)2−torus(model)PRR (model) 0 5 10 15 20 100 200 300 400 500 600 700 800 900 1000Latency costNumber of nodes2−torusStar (average)De Bruijn2−torus(sim)(model)(sim, avg)(upper bound)De BruijnPRR (model)6−torus (model)PRR(sim) 1 10 100 1000 100 200 300 400 500 600 700 800 900 1000Routing costNumber of nodesTo appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

there is almost no correlation8 between S and R or L. In
other words, the service cost S incurred by a node has almost
no incidence on R or L. The correlation between R and L
is also very weak, which indicates that different nodes may
have, in the end, completely different costs.

In other words, with all three routing geometries considered,
an asymmetry in the popularity of the items can cause a sig-
niﬁcant disparity in the costs incurred by different nodes. The
disparity in costs itself results in some nodes being overloaded,
or at least having strong incentives to leave and re-join the
network to get a “better spot.” This result emphasizes the
importance of efﬁcient load-balancing primitives for protocols
relying on any of these routing geometries.

C. Sparse Population of the Identiﬁer Space

So far, we have assumed that the identiﬁer space is fully
populated. For instance, a PRR tree with ∆ = 2 and D =
9 would necessarily contain N = 512 nodes. In practice
however, the identiﬁer space is likely to be relatively sparsely
populated, especially during the deployment phase of a new
overlay service or protocol. Here, we investigate the effects of
a sparse population of the identiﬁer space on the various costs
incurred by different nodes.

Because routing geometries generally assume that the iden-
tiﬁer space is fully populated, one has to address how to deal
with identiﬁers that do not map to any node. In general, dif-
ferent overlay protocols use different solutions to the problem
of handling a sparsely populated identiﬁer space. Since, in
this paper, we are interested in comparing geometries rather
than speciﬁc protocols, we use a common technique for all of
the routing geometries we study. The technique we use bears
some similarity to the solutions proposed in [3], [4], [12], [14].
Each identiﬁer v that does not map to a node is assigned to
the node with the identiﬁer u the closest to v according to an
arbitrary norm in the identiﬁer space. Thus, each node u may
be assigned more than one identiﬁer. In particular, if node u
is assigned the identiﬁer that would correspond to a node v
in a fully populated identiﬁer space, node u links to all the
nodes v would link to. As a result, different nodes may have
different maintenance costs Mu. In the computation of Mu,
we consider that there is at most one link from one node to
another, i.e., we discount duplicate links that may result from
nodes holding multiple identiﬁers.

We run the following simulations. For each geometry, we
consider a ﬁxed number of nodes N = 512. We start with a
fully populated identiﬁer space, with ∆ = 2 and D = 9 for
both de Bruijn graphs and PRR trees, and gradually increase
D up to D = 15. For the D-torus, we use D = 3, so that each
node u is represented by a set of coordinates (ux, uy, uz). We
allow each coordinate to take integer values between 0 and
n. Initially, we select n = 8, so that each possible set of
coordinates corresponds to a given node (because nD = N ),
and we then gradually increase n up to n = 32. In other words,

8The correlation coefﬁcient actually only tests for a linear correlation.
Additional tests, such as the η-test (or correlation ratio) are generally required
to conﬁrm the lack of correlation between two variables. We omit these tests
here, but point out that additional data (e.g., scatter plots) conﬁrm the lack of
correlation between the variables.

for all three topologies, we increase the identiﬁer space from
512 to 32,768 identiﬁers. Identiﬁers that initially do not map
to any node are selected using a uniform random variable.
For each value of D (resp. n) we run 100 experiments with
different random seeds, corresponding to 100 different ways
of populating the identiﬁer space. Each experiment consists of
100,000 requests, where X and Y are i.i.d. uniform random
variables.

min, Lmax/Lmin, and Mmax/M 0

In Fig. 3, for each geometry, we plot the average value of the
ratios Rmax/R0
min averaged
over the 100 experiments corresponding to a given number of
identiﬁers, as well as their worst-case (i.e., maximum) value
over the same 100 experiments. For all geometries, we observe
that the imbalance in latency costs remains relatively modest
in a sparsely populated identiﬁer space. The imbalance in
maintenance costs is more signiﬁcant, but the main observation
is that the imbalance in routing costs can become very large.
This observation emphasizes the urgent need for efﬁcient load
balancing algorithms.

Last, in Fig. 4, we plot the correlation coefﬁcients between
R and L, R and M , and L and M , as a function of the number
of identiﬁers. Our main ﬁnding is that a sparsely populated
identiﬁer space has the effect of making the different costs
correlated. This conﬁrms the intuition that the routing and
latency costs of a given node are largely dependent on how
well the node is connected to the rest of the network, which
is expressed by the maintenance cost.

VI. DISCUSSION AND CONCLUSIONS

We proposed a model, based on experienced load and node
connectivity, for the cost incurred by each node to participate
in an overlay network. We argue such a cost model is a
useful complement to topological performance metrics [12],
[18], in that it allows to predict disincentives to collaborate
(nodes refusing to serve requests to reduce their cost), discover
possible network instabilities (nodes leaving and re-joining in
hopes of lowering their cost), identify hot spots (nodes with
high routing load), and characterize the efﬁciency of a network
as a whole.

We believe our cost model can be used beyond the context
of overlay networks, and can in fact apply to most networked
systems with competing entities. Indeed, by adopting different
values for the parameters (l, s, r, m) the model can indif-
ferently apply to interconnections between Internet service
providers, peer-to-peer ﬁle sharing networks, or mobile ad-hoc
networks, to name a few examples. One of our main results is
that, if nodes value the resources they use to forward trafﬁc on
behalf of other nodes, letting nodes choose which links they
wish to maintain can yield a sub-optimal network with respect
to overall resource usage.

When individual incentives are not aligned with a desirable
social outcome, which is the case in the context of most
overlay networks, one may want to design rules to limit the
effects of individual selﬁshness. Among the different type of
rules that a designer can impose, we focused in this paper
on network topology. We showed that, when the number of
nodes is small, fully connected networks are generally the most

c(cid:13)IEEE

10

To appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

(a) Rmax/R0

min

(b) Lmax/Lmin

(c) Mmax/Mmin

Fig. 3. Ratios between maximum and minimum routing, latency, and maintenance costs experienced at a given node in function of the number of identiﬁers
used. Curves marked “avg.” indicate average results over all experiments in a given set, while curves marked “w.c.” denote the maximum ratio, or worst case,
observed over all experiments in a given set.

(a) Corr(R, L)

(b) Corr(R, M )

(c) Corr(L, M )

Fig. 4. Correlation between Ru, Mu, and Lu in function of the number of identiﬁers used.

cost-efﬁcient solution. When the number of nodes is large,
star networks are desirable from the point of view of overall
resource usage. This result leads us to conjecture that, when
feasible, centralized networks, where the “center” consists of
a few fully connected nodes can be an interesting alternative
to completely distributed solutions, provided that incentive
mechanisms to handle network asymmetries are in place.

Using analysis and simulations, we characterized the costs
incurred with some of the recently proposed topologies for
network overlays. The main ﬁnding is that, while very ap-
pealing from the point of view of resiliency and scalability,
all of the geometries we analyzed can potentially create large
imbalances in the load imposed on different nodes. We also
showed that, assuming that all nodes have approximately the
same degree of connectivity to the rest of the network, different
types of imbalance (e.g., routing load vs. experienced latency)
are generally independent. As a result, we concluded that
designing very efﬁcient load-balancing primitives is a must
to avoid favoring some nodes at the expense of others, which
can potentially create network instability. It is worth noting
that several papers have attempted to tackle the problem of
load-balancing, notably in the context of distributed hash
tables, e.g., [28], [29]. However, the load balancing algo-
rithms proposed in the literature usually try to compensate for
asymmetries in item popularity, while our study has shown
that asymmetries in node connectivity arising from a sparsely
populated identiﬁer space were also a potential source of large
imbalance.

We believe that this paper has sparked a number of avenues
for future work. In particular, we only analyzed a handful of
routing geometries, and even omitted interesting geometries
such as the butterﬂy [20], geometries based on the XOR
metric [21], or interconnected star networks, as used in ﬁle-
sharing networks such as FastTrack or eDonkey. We believe
that using the framework described in this paper will be useful

in determining which type of topology is more appropriate
for a speciﬁc application. A related open problem consists
in obtaining a meaningful set of values for the parameters
(l, s, r, m) for a given class of applications (e.g., ﬁle sharing
between PCs, ad-hoc routing between energy-constrained sen-
sor motes). To that effect, we plan on gathering measurement
data from deployed networks, such as ﬁle-sharing systems,
content delivery networks, or deployed ad-hoc and (central-
ized) wireless networks. Last, we point out that a possible
alternative to load balancing primitives is to devise incentive
mechanisms that make it desirable for nodes to forward as
much trafﬁc as possible. Incentive mechanisms have started
to receive attention from the systems community (e.g., [13],
[30], [31]) and one of our hopes for the present paper is to
foster more research in that direction.

ACKNOWLEDGMENTS

The authors would like to thank Paul Laskowski and the
anonymous reviewers for their insightful comments on earlier
versions of this paper.

REFERENCES

[1] T. Klingberg and R. Manfredi, “Gnutella 0.6,” June 2002, http://

rfc-gnutella.sourceforge.net/src/rfc-0 6-draft.html.

[2] C. Perkins (editor), Ad hoc networking. Boston, MA: Addison-Wesley,

2000.

[3] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker, “A
scalable content-addressable network,” in Proceedings of ACM SIG-
COMM’01, San Diego, CA, Aug. 2001, pp. 161–172.

[4] I. Stoica, R. Morris, D. Liben-Nowell, D. Karger, M. F. Kaashoek, and
H. Balakrishnan, “Chord: A scalable peer-to-peer lookup protocol for
Internet applications,” IEEE/ACM Transactions on Networking, vol. 11,
no. 1, pp. 17–32, Feb. 2003.

[5] S. Banerjee, B. Bhattacharjee, and C. Kommareddy, “Scalable applica-
tion layer multicast,” in Proceedings of ACM SIGCOMM’02, Pittsburgh,
PA, Aug. 2002, pp. 205–217.

c(cid:13)IEEE

11

max         minDe Bruijn (w.c.)PRR (avg.)3−torus (w.c.)3−torus (avg.)PRR (w.c.)De Bruijn (avg.) 0 200 400 600 800 1000 1200 1400 1600 1800 2000 512 1024 2048 4096 8192 16384 32768Number of identifiersR       /R’max        minPRR (w.c.)De Bruijn (w.c.)De Bruijn (avg.)3−torus (avg.)PRR (avg.)3−torus (w.case) 1 1.5 2 2.5 3 3.5 4 512 1024 2048 4096 8192 16384 32768Number of identifiersL       /Lmax         min 0 5 10 15 20 25 30 512 1024 2048 4096 8192 16384 32768Number of identifiersM       /MPRR (avg.)De Bruijn (w.c.)PRR (w.c.)De Bruijn (avg.)3−torus (w.c.)3−torus (avg.)PRR3−torusDe Bruijn 1024 2048 4096 8192 16384 32768Number of identifiers−0.9−0.85−0.8−0.75−0.7−0.65corr (R, L)PRR3−torusDe Bruijn 1024 2048 4096 8192 16384 32768Number of identifiers0.750.80.850.90.95corr (R, M)0.73−torusDe BruijnPRR 1024 2048 4096 8192 16384 32768Number of identifiers−0.9−0.85−0.8−0.75−0.7−0.65corr (L, M)To appear in Proceedings of IEEE INFOCOM’05. Miami, FL. March 13–17, 2005.

Workshop on Peer-to-Peer Systems (IPTPS’03), Berkeley, CA, Feb.
2003, pp. 80–87.

[29] B. Godfrey and I. Stoica, “Heterogeneity and load balance in distributed
hash tables,” in Proceedings of IEEE INFOCOM’05, Miami, FL, Mar.
2005.

[30] B. Cohen, “Incentives build robustness in BitTorrent,” in Proceedings of
the First Workshop on the Economics of Peer-to-Peer Systems, Berkeley,
CA, June 2003.

[31] M. Feldman, K. Lai, I. Stoica, and J. Chuang, “Robust

incentive
techniques for peer-to-peer networks,” in Proceedings of the Fifth ACM
Conference on Electronic Commerce (EC’04), New York, NY, June
2004, pp. 102–111.

[6] Y.-H. Chu, S. Rao, and H. Zhang, “A case for endsystem multicast,”
in Proceedings of ACM SIGMETRICS’00, Santa Clara, CA, June 2000,
pp. 1–12.

[7] J. Liebeherr, M. Nahas, and W. Si, “Application-layer multicast with
Delaunay triangulations,” IEEE Journal of Selected Areas in Communi-
cations, vol. 20, no. 8, pp. 1472–1488, Oct. 2002.

[8] W. Townsley, A. Valencia, A. Rubens, G. Pall, G. Zorn, and B. Palter,
“Layer two tunneling protocol “L2TP”,” IETF RFC 2661, August 1999.
[9] A. Vakali and G. Pallis, “Content delivery networks: Status and trends,”

IEEE Internet Computing, vol. 7, no. 6, pp. 68–74, Nov. 2003.

[10] F. Kaashoek and D. Karger, “Koorde: A simple degree-optimal dis-
tributed hash table,” in Proceedings of the 2nd International Workshop
on Peer-to-Peer Systems (IPTPS’03), Berkeley, CA, Feb. 2003, pp. 323–
336.

[11] M. Naor and U. Wieder, “Novel architectures for P2P applications: the
continuous-discrete approach,” in Proceedings of ACM SPAA’03, San
Diego, CA, June 2003, pp. 50–59.

[12] D. Loguinov, A. Kumar, V. Rai, and S. Ganesh, “Graph-theoretic
analysis of structured peer-to-peer systems: routing distances and fault
resilience,” in Proceedings of ACM SIGCOMM’03, Karlsruhe, Germany,
Aug. 2003, pp. 395–406.

[13] C. Ng, D. Parkes, and M. Seltzer, “Strategyproof computing: Systems
infrastructures for self-interested parties,” in Proceedings of the 1st
Workshop on the Economics of Peer-to-Peer Systems, Berkeley, CA,
June 2003.

[14] A. Rowston and P. Druschel, “Pastry: Scalable, decentralized object
location and routing for large scale peer-to-peer systems,” in Proceedings
of the 18th IFIP/ACM International Conference on Distributed Systems
Platform (Middleware’01), Heidelberg, Germany, Nov. 2001, pp. 329–
350.

[15] M. Jackson and A. Wolinsky, “A strategic model for social and economic
networks,” Journal of Economic Theory, vol. 71, no. 1, pp. 44–74, Oct.
1996.

[16] B.-G. Chun, R. Fonseca, I. Stoica, and J. Kubiatowicz, “Characterizing
selﬁshly constructed overlay networks,” in Proceedings of IEEE INFO-
COM’04, Hong Kong, Mar. 2004.

[17] A. Fabrikant, A. Luthra, E. Maneva, C. Papadimitriou, and S. Shenker,
“On a network creation game,” in Proceedings of ACM PODC’03,
Boston, MA, July 2003, pp. 347–351.

[18] K. Gummadi, R. Gummadi, S. Gribble, S. Ratnasamy, S. Shenker, and
I. Stoica, “The impact of DHT routing geometry on resilience and
proximity,” in Proceedings of ACM SIGCOMM’03, Karlsruhe, Germany,
Aug. 2003, pp. 381–394.

[19] B. Zhao, L. Huang, J. Stribling, S. Rhea, A. Joseph, and J. Kubiatowicz,
“Tapestry: A resilient global-scale overlay for service deployment,”
IEEE Journal on Selected Areas in Communications, vol. 22, no. 1,
pp. 41–53, Jan. 2004.

[20] D. Malkhi, M. Naor, and D. Ratajczak, “Viceroy: a scalable and dynamic
emulation of the butterﬂy,” in Proceedings of ACM PODC’02, Monterey,
CA, July 2002, pp. 183–192.

[21] P. Maymounkov and D. Mazi`eres, “Kademlia: A peer-to-peer informa-
tion system based on the XOR metric,” in Proceedings of the 1st In-
ternational Workshop on Peer-to-Peer Systems (IPTPS’02), Cambridge,
MA, Feb. 2002, pp. 53–65.

[22] P. Mockapetris and K. Dunlap, “Development of the domain name
system,” in Proceedings of ACM SIGCOMM’88, Stanford, California,
Aug. 1988, pp. 123–133.

[23] N. Christin and J. Chuang, “On the cost of participating in a peer-
to-peer network,” University of California, Berkeley, Tech. Rep., Dec.
2003, http://p2pecon.berkeley.edu/pub/TR-2003-12-CC.pdf. See also:
arXiv:cs.NI/0401010.

[24] K. Sivarajan and R. Ramaswami, “Lightwave networks based on de
Bruijn graphs,” IEEE/ACM Transactions on Networking, vol. 2, no. 1,
pp. 70–79, Feb. 1994.

[25] G. Plaxton, R. Rajamaran, and A. Richa, “Accessing nearby copies of
replicated objects in a distributed environment,” Theory of Computing
Systems, vol. 32, no. 3, pp. 241–280, June 1999.

[26] K. Gummadi, R. Dunn, S. Saroiu, S. Gribble, H. Levy, and J. Zahorjan,
“Measurement, modeling, and analysis of a peer-to-peer ﬁle-sharing
workload,” in Proceedings of ACM SOSP’03, Bolton Landing, NY, Oct.
2003, pp. 314–329.

[27] L. Breslau, P. Cao, L. Fan, G. Philips, and S. Shenker, “Web caching
and Zipf-like distributions: Evidence and implications,” in Proceedings
of IEEE INFOCOM’99, New York, NY, Mar. 1999, pp. 126–134.

[28] J. Byers, J. Considine, and M. Mitzenmacher, “Simple load balancing
for distributed hash tables,,” in Proceedings of the 2nd International

c(cid:13)IEEE

12

