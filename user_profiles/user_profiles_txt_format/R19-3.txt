Accessibility and Computer Science Education

Brian J. Rosmaita (Moderator)
Department of Computer Science

Hamilton College

198 College Hill Road
Clinton, NY, USA 13323

brosmait@hamilton.edu

Katherine Deibel

University of Washington

Box 352350

Seattle, WA, USA 98195

deibel@cs.washington.edu

Robert F. Cohen

Department of Computer Science
University of Massachusetts Boston

100 Morrissey Boulevard
Boston, MA, USA 02125

rfc@cs.umb.edu

Mary Anne L. Egan

Siena College

515 Loudon Road

Loudonville, NY, USA 12211

maegan@siena.edu

Dept. of Computer Science and Engineering

Department of Computer Science

Categories and Subject Descriptors
K.3.2 [Computers and Education]: Computer and In-
formation Science Education—computer science education,
curriculum; K.4.2 [Computers and Society]: Social Is-
sues—assistive technologies for persons with disabilities

General Terms
Human Factors, Legal Aspects

Keywords
accessibility, disabled computer users, ethics, pedagogy

SUMMARY
We consider the importance of accessibility with regard to
computer science, advance reasons for its inclusion in the
computer science curriculum, and discuss three distinct ways
in which accessibility can be naturally integrated into cur-
rent courses.

To situate the discussion, we deﬁne what we mean by
accessibility. The easiest way to do this is indirectly, by
marking a distinction between a disability and a handicap.1
A disability is a human condition which diﬀers from the
norm with regard to a particular human ability. It becomes
a handicap when it interferes with normal human function-
ing. For example, consider an individual with low (20/500)
vision. This visual disability is not a handicap since correc-
tive techniques (such as eyeglasses) exist. These allow a low
vision person to function in a wide range of contexts just
as well as someone with normal (20/20) vision. In its most
general form, then, accessibility is the practice of arrang-
ing things within some context so that a disability is not a
handicap.

1This distinction is common in the disability studies liter-
ature, though the exact terminology used varies. See, e.g.,
the essays in [1].

Copyright is held by the author/owner(s).
SIGCSE’06 March 1–5, 2006, Houston, Texas, USA.
ACM 1-59593-259-3/06/0003.

We see three ways in which accessibility interfaces with

the computer science curriculum:

Social aspects of computing: Our society has declared that
accessibility is important through the passage of speciﬁc
laws promoting it in various contexts (e.g., the Architec-
tural Barriers Act). It is therefore proper for us to consider
the extent to which accessibility is a concern to computer
scientists and its appropriate impact upon the profession.

Professional practice: Given that in at least some contexts
accessibility is desirable (e.g., where mandated by Section
508 of the Rehabilitation Act), it is appropriate for us to
develop and teach techniques for implementing accessible
software.

Accessible pedagogy: As there are persons with disabilities
who wish to learn computer science, it is appropriate for
us to develop pedagogical techniques that make computer
science courses accessible.

Our contention is that accessibility, in the three senses
articulated above, can be integrated early into the current
computer science curriculum. We discuss our experiences
in this regard and consider the impact the inclusion of ac-
cessibility has on the content of typical computer science
courses.

POSITION STATEMENTS
Robert Cohen
Hardware and software accessibility has been legally man-
dated by recent laws, e.g., section 508 of the Rehabilitation
Act, amended in 1998 and enacted in June of 2001. Be-
yond legal requirements, ensuring that systems are accessi-
ble to all users is a concern shared by all socially responsible
developers. We have an opportunity as Computer Science
educators and researchers to improve the communication
abilities for various disabled communities, provide access to
Computer Science education to more students, and provide
compelling research opportunities to our students.

Some examples to consider:
Research: Research needs to be done to improve the eﬃ-
ciency of communication for people with severe disabilities.
For example, imagine the freedom we could bring a teenager

with limited muscle control if they could instant message as
quickly and accurately as most teenagers.

CS Education: The widespread use of Java as a program-
ming language provides us with the opportunity to teach
this important topic in computer science programs. Because
of the simplicity of specifying accessibility factors to Swing
components, accessibility can be included in the CS1 cur-
riculum without taking much additional time or resources.
This requires a very small change to textbooks and curricu-
lum, while bringing awareness to computer science students
from the beginning. It is interesting to note that very few
computer science programs address accessibility issues. Cur-
ricula 2001 and the draft of Curricula 2005 include no direct
mention of accessibility or where it should be covered in the
undergraduate curriculum.

Accessible CS Education: During the last four months,
we have sponsored a team of undergraduates to address the
problem of communicating relational diagrams or graphs to
blind students in computer science education. So many fun-
damental concepts are taught by ﬁrst presenting an example
through a diagram and then moving to an algorithm and
code. The aim of this work is to allow blind students to ex-
plore and learn from the same diagrams as sighted students,
giving them better access to computer science education.

Katherine Deibel
Accessibility is foremost about real people living in a real
world. Technology often plays a role in accessibility, but
it is secondary to understanding the needs and wants of a
particular user population. This stands in sharp contrast to
how computer science is typically taught, where emphasis is
invariably placed on the underlying technologies, program-
ming languages, and computational models while the notion
of a user is often relegated to the background for later ex-
ploration in advanced courses (e.g., human-computer inter-
action). Including accessibility issues in a computer science
curriculum forces the notions of users and user needs back
into the foreground and at the same time provides numerous
opportunities to engage students in critical thinking.

One such opportunity involves the legal and ethical as-
pects of accessibility. The ACM Code of Ethics speciﬁes
that all individuals, regardless of ability, should have equal
opportunity to use and beneﬁt from computer technology.
Laws such as the Americans with Disabilities Act (USA)
and the Disability Discrimination Act (UK) include provi-
sions mandating accessible access to certain forms of infor-
mation and technology. Students can discuss how these rules
impact their obligations to society as computer specialists.
Does every piece of code or web page need to be accessible?
Is it possible to achieve universal accessibility? Is it okay
to limit your user population? Answering these questions
requires students to make and defend critical decisions.

Another opportunity is the intellectual challenge involved
in making technology accessible. A shift in focus is needed
in that the students can no longer just program for them-
selves. Attention to a user’s wants and needs is paramount.
Addressing these needs can also be problematic. Individu-
als with the same disability can display a wide variance in
needs, some of which might be contradictory. Priorities and
tradeoﬀs are inevitable; how to deal with them is an open
question for students to consider.

In summary, there are often no easy answers in accessible
technology. Critical decisions are needed on both ethical and

practical levels. Discussing accessibility provides a rare op-
portunity to challenge our students to think critically about
a socially-relevant topic.

Mary Anne Egan
With an increasing number of students with disabilities en-
tering higher education, it is important to understand par-
ticular aspects of a disability that will aﬀect classroom sit-
uations. Knowing characteristics of common disabilities en-
ables the professor to oﬀer techniques that will maximize
the student’s educational experience and also increase the
educational beneﬁt to all students in the classroom. Unfor-
tunately, very few computer science instructors receive train-
ing aimed at educating students with disabilities. Through
forums such as this SIGCSE panel, we are able to give peo-
ple the pedagogical tools needed to successfully integrate
students with disabilities into the higher education class-
room.

With the assumption that the students with disabilities
have already been identiﬁed to the professor using a cam-
pus speciﬁc process, we can discuss particular accommoda-
tions that may be made based on their disability. Because
Asperger’s Syndrome is one of the more common disabili-
ties seen in computer science, it would be beneﬁcial if more
CS professors had knowledge of classroom management is-
sues for teaching students with Asperger’s Syndrome. Class-
room management is an important issue not only to the stu-
dents with Asperger’s Syndrome, but for other students in
the classroom as students with Asperger’s Syndrome can be
disruptive. Therefore, it is in everyone’s interest that the
professor learns how to discourage problem behavior and
encourage cooperation in the classroom.

Brian Rosmaita
One reason to stress accessibility in CS courses is to enable
students to implement accessible software. But attention to
accessibility has eﬀects that extend beyond the disabled user
community. Presenting students with a non-standard user
model for web browsing (e.g., a visually impaired computer
user) makes it easier for students to separate content from
presentation, and subsequently code up websites in a much
more maintainable way. Further, this content/presentation
distinction can assist students in separating essential from
accidental characteristics in GUI design, which can be used
as a basis for a more thorough understanding of objects in
OOP or as a foundation for understanding ontologies. Sim-
ilarly, “bulletprooﬁng” GUIs for nonstandard users teaches
students the same skills required for anticipating patholog-
ical conditions in programs (e.g., the buﬀer overﬂow prob-
lems so popular nowadays). Finally, as technology develops,
the many ways to access data blur the distinction between
a “normal” computer user and a disabled user (e.g., some-
one surﬁng the web while driving a car is a visually impaired
computer user). So in addition to being socially responsible,
a stress on accessibility can enhance the learning of current
CS students.

REFERENCES
[1] Gary L. Albrecht, Katherine D. Seelman, and Michael
Bury, editors. Handbook of Disability Studies. Sage
Publications, Inc., Thousand Oaks, CA, 2001.

