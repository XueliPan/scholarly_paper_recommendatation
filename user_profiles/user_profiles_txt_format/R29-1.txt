A Framework for Opportunistic Routing in Multi-hop

Wireless Networks∗

Niki Gazoni
ICS-FORTH

P.O. Box 1385, 71110

Heraklion, Greece

ngazoni@ics.forth.gr

‡

Vasilios A. Siris

ICS-FORTH

P.O. Box 1385, 71110

Heraklion, Greece

vsiris@ics.forth.gr

†
Vangelis Angelakis

ITN Linköping University

SE-60174

Norrköping, Sweden
vanan@itn.liu.se
Raffaele Bruno

IIT - CNR

Via G. Moruzzi 1 - 56124

Pisa, Italy

r.bruno@iit.cnr.it

ABSTRACT
Opportunistic routing has recently been proposed to take
advantage of the broadcast nature and spatial diversity of
the wireless medium and cope with unreliable transmissions.
Within this “opportunistic routing hype”, complex routing
schemes with opportunistic features have been proposed, but
their performance gains can not be clearly attributed to their
opportunistic character, since they also include other strong
optimization features applicable to classical routing. A goal
of this work is to study how purely wireless primitives and
design characteristics aﬀect a routing scheme with oppor-
tunistic features and thus design a new such scheme. To this
end we introduced a simple framework under which, through
simulation, we deﬁned the key elements of an adaptive prob-
abilistic forwarding scheme. We show that it outperforms
the opportunistic elements of two well-known opportunis-
tic routing protocols: SOAR and Directed Transmission, in
terms of delay and resource utilization, under varying chan-
nel error and misinformation conditions and due to its sim-
plicity the gains can be clearly attributed to its core features.

Categories and Subject Descriptors
C.2.2 [Computer]: Communication Networks—network pro-
tocols, routing protocols

∗

‡

This work was partly supported by the EC in the 7th
Framework Program through project EU-MESH (Enhanced,
Ubiquitous, and Dependable Broadband Access using
MESH Networks), ICT-215320, http://www.eu-mesh.eu
†
During this work V. Angelakis was with ICS-FORTH

V. A. Siris is also with Athens University of Economics and
Business
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
PE-WASUN’10, October 17–18, 2010, Bodrum, Turkey.
Copyright 2010 ACM 978-1-4503-0276-0/10/10 ...$10.00.

General Terms
Algorithms, Measurement, Performance

Keywords
Probabilistic routing, Simulation

INTRODUCTION

1.
Routing in multi-hop wireless networks poses a challenge due
to the unreliability of wireless links and interference among
concurrent transmissions. Subsequently, traditional routing
schemes that select a best path and forward the packet to
a speciﬁc next hop, have proven ill-suited for wireless net-
works with lossy broadcast links. Recently, a new routing
paradigm, opportunistic routing, is proposed to cope with
unreliable transmissions by taking advantage of the broad-
cast nature and spatial diversity of the wireless medium.
Leveraging the nodes’ ability to overhear a broadcast packet,
it diﬀers from traditional routing in that forwarders are se-
lected among the packet recipients after its transmission,
hence not committing to a predetermined path. This char-
acteristic enables opportunistic routing to combine multiple
weak links to create a reliable one, as well as to exploit un-
expectedly long transmissions. The increase of forwarding
reliability reduces the retransmission cost, which in turn im-
proves throughput and energy eﬃciency.

Previously suggested opportunistic protocols demonstrate
a lack of concrete understanding of the way key wireless
networking primitives and design decisions aﬀect the per-
formance of an opportunistic routing scheme. As a result,
it is unclear to which extent the improved performance of
these protocols owes to their opportunistic design and to
which extent it is aﬀected by other features that can also
be applied to traditional routing. Opportunistic protocols
which decide on forwarders in a centralized manner, require
the exchange of node coordination messages, leading to high
overhead and increased resource consumption. Furthermore
they require global knowledge of the topology, making them
prone to poor performance in the event of misinformation.
On the other hand, localized forwarding decision protocols,
designed mostly for use in sensor networks, have to trade
high performance for robustness and simplicity.

50With the aid of a simulation platform, we investigated how
forwarding decisions and transmission timing aﬀect perfor-
mance and under which channel error conditions and topol-
ogy density it is beneﬁcial to use opportunistic routing in-
stead of traditional routing. With the insight gained, we de-
signed a probabilistic procedure which can be tuned to allow
for low resource consumption and high delay performance,
while being robust to misinformation. In order to evaluate
the suggested procedure, it is compared to single path rout-
ing and two distinguished opportunistic routing protocols.
Simulation results under various channel error and misinfor-
mation conditions, demonstrate that the suggested scheme
can outperform both SOAR, which uses a centralized for-
warding decision scheme and Directed Transmission, which
is localized and designed for sensor networks.

The remainder of this paper is organized as follows. Sec-
tion 2 reviews related work and states the purpose of this
work. The procedure’s design elements are presented in Sec-
tion 3, followed by a presentation of the simulation setup
which was used to evaluate the procedure and its results,
in Section 4. Finally, concluding remarks are presented in
Section 5.

2. RELATED WORK
In ExOR [2], a forwarding list is generated by the source,
for a batch of packets. Candidate forwarders are listed ac-
cording to their ETX cost to reach the destination. Due to
the centralized coordination and scheduling that is needed
between forwarders and the destination, ExOR incurs high
overhead when the batch of packets to transmit is small as in
bursty and short-lived ﬂows, or the number of candidate for-
warders is large. SOAR [7] is proposed as an improvement
to ExOR in order to support multiple ﬂows. It constrains
forwarders to be near or along the shortest path, to over-
hear each other, in order to avoid duplicate transmissions.
SOAR uses a complex acknowledgement scheme and ACK
compression to reduce its overhead. It also incorporates a
data rate control scheme [8], along which the destination
sends cumulative ACKS to the source, used to adjust the
source’s data rate, similarly to TCP’s congestion window.
However, there is no discrimination between loss due to de-
grading link quality and loss due to congestion, which may
increase retransmission delay. In [11], it is emphasized that
the throughput gain achieved by opportunistic routing pro-
tocols is not clearly attributed to the opportunistic selection
of next hops but also partly due to their acknowledgement
and scheduling features which can also be implemented by
traditional routing. It is also demonstrated that using ETX
can perform poorly when node coordination is imperfect.
Moreover, suﬃcient network density is proven to be required
in order to have signiﬁcant gain by using opportunistic rout-
ing.

OMR [4] uses probabilistic forwarding in addition to co-
ordination schemes similar to ExOR’s, with the diﬀerence
that the receiver decides on the transmission probability
rather than the sender, based on link quality and feedback
from neighboring nodes. This change is due to the fact
that OMR has been designed for WSNs; however, adopting
ExOR’s coordinated approach results in substantial over-
head. ROMER [9] uses a credit mechanism to build a for-
warding mesh centered on the minimum cost path. It favors
high quality links over poor ones by selecting higher ran-
dom forwarding probability. However, it does not account

for resource conservation and catering to multiple ﬂows. The
two probabilistic protocols of [1] forward a single packet with
varying retransmission probability through a network of sen-
sors, focusing on simplicity and robustness to error in dis-
tance estimation. Directed Transmission [1] improves per-
formance by favoring nodes that are on the shortest path,
yielding lower resource consumption. None of these two ac-
counts for packet loss due to low link quality, or even mul-
tiple packets, let alone ﬂows.

Summarily, probabilistic protocols, primarily designed for
WSNs, focus on calculational simplicity and robustness, at
the expense of delay performance and accounting for multi-
ple ﬂows [6]. Pure probabilistic forwarding is prone to per-
colation, leading to either network ﬂooding by redundant
copies of the same packet, or too few nodes receiving it [5].
On the other hand, centralized deterministic schemes, de-
signed for mesh networks with static nodes, incur high over-
head and are vulnerable to metric misinformation due to
use of forwarding lists, which propagate such errors. Thus,
resource conservation suﬀers in exchange for high perfor-
mance. We propose an adjustable scheme which can be
tuned to provide high delay performance or minimized re-
source consumption. It utilizes probabilistic forwarding with
the addition of certain forwarders, enabling nodes to decide
forwarding locally with minimal overhead, while ensuring
packet progress. Moreover, the proposed scheme is robust
to channel error and metric miscalculation.

3. SCHEME DESIGN
The overall protocol design is based on each node locally
calculating a value for each arriving packet, according to a
cost function, and assigning to it a forwarding probability
and deferral duration. Better forwarding candidates are fa-
vored by higher forwarding probability and lower deferral
durations. This diﬀerentiation of forwarding time between
candidate forwarders reduces collisions and redundant trans-
missions. Passive hop by hop acknowledgments are assumed
by overhearing neighboring broadcasts, to avoid additional
network load and mitigate delay over lossy links.

Apart from an initial neighbor discovery phase, forward-
ing decisions require minimal further explicit information ex-
change. This is done in order to minimize protocol overhead
in terms of computational load and bandwidth. Thus, can-
didate forwarders are self-volunteered in order to improve
the performance of the end-to-end ﬂow. Any cost metric
can be used by this scheme, provided that its values can
be bounded tightly. For the implementation presented in
this paper, as a proof of concept we used the Euclidian dis-
tance as our forwarding metric aiming for simplicity, since
we focus on the opportunistic design elements. Hence, the
nodes closest to the destination of a packet are considered
the best forwarding candidates for it and have the lowest
metric value.

3.1 Opportunistic elements

3.1.1 Forwarding probability function

This function is common between all nodes in the network
and is used to assign a probability to each node according
to the value of their cost metric. More speciﬁcally, this is
a decreasing function, meaning that higher probability is
assigned to nodes with lower routing cost values, and it is
bound, so that the minimum probability a node can assign

51is 0 and the maximum is 1. For this paper the forwarding
probability is assigned with respect to the distance of the
receiving node from the packet destination and its relative
position to the sender. Hence, when a node broadcasts a
packet, it has to include its distance from the destination
in its header, so that the nodes in range that receive this,
can calculate their forwarding probability for it. Obviously,
out of the nodes within range of its broadcast, the neigh-
bor closest to the destination will be assigned a probability
equal to 1, to ensure the progress of the packet towards the
destination.

Linear forwarding probability function: Initially, a
linear decreasing function with probability values from 1 to
0 would satisfy the above requirements. Formally, this for-
warding probability p is expressed by:

1

p =

dmin − dmax

[d·(Pmax−Pmin)+Pmin·dmin−Pmax·dmax]

(1)
where d is the distance between the candidate forwarder and
the destination, Pmax is the forwarding probability associ-
ated to the nearest possible candidate (i.e., for d = dmin),
and Pmin is the probability associated to the furthest pos-
sible candidate (i.e., for d = dmax). It is straightforward to
observe that 0 ≤ p ≤ 1 for dmin ≤ d ≤ dmax if and only if
0 ≤ Pmax ≤ 1 and 0 ≤ Pmin ≤ 1.

This function provides diﬀerentiation between the forward-
ing probabilities of nodes that receive the same packet in a
broadcast area. However, it assigns a probability equal to 1
to at most one node in each opportunistic broadcast area.
That will be the node in the broadcast area having d min dis-
tance from the destination. Therefore, the packet’s progress
relies heavily on that particular node.
If for some reason
that node is not to be found any longer at this particular
distance value in a topology, then there would be no “deﬁnite
forwarder” for that packet, in this broadcast area.

Piece-wise forwarding probability function: To deal
with the problem of not having deﬁnitive forwarders, the
previous forwarding probability function can be modiﬁed to
increase the number of potential forwarding candidates hav-
ing probability one to forward the received packet. This is
achieved by using a piecewise function composed of an ini-
tial ﬂat region saturated to probability one, followed by a
linear function. The shape of the function is demonstrated
in Figure 1. In this case, the forwarding probability is given
by p = min{1, P } where P is given by (1).

The piecewise function is produced by introducing Pmax >
1, hence introducing more than one certain forwarders. To
ensure the packet’s progressing to the destination, at least
one neighbor with forwarding probability equal to 1 is needed
and this is ensured by the ﬂat region. Ideally this would be
the neighbor on the shortest path to destination.

Step-wise forwarding probability function: Another
variant of the forwarding probability function is the step-
wise function. In this case, nodes are either assigned a for-
warding probability equal to 1 or a probability equal to zero,
that is they either forward the packet always or they never
do. There is a threshold value of the metric, which when
surpassed it is decided that the node should not forward.
As previously, the number of deﬁnite forwarders can be in-
creased or decreased by changing the position of the step
threshold. The formula describing this function would be

(cid:2)

p =

0 dthreshold < d ≤ dmax ,
1 dmin ≤ d ≤ dthreshold

(2)

Figure 1: Piece-wise forwarding probability function

3.1.2 Deferral window and back-off differentiation

Having calculated the probability to forward a received
packet, the node proceeds to decide when to do so. To this
end, a randomized back-oﬀ mechanism is used, where each
node calculates a deferral window and randomly selects a
packet back-oﬀ value from that range. When this back-oﬀ
timer expires, the node will proceed to forward the packet
with the probability it has been previously assigned. The
key is to diﬀerentiate the back-oﬀ times of diﬀerent nodes,
especially the ones with high forwarding probability to avoid
collisions. These deﬁnite and high probability forwarders
contribute much to the packet’s progress towards the desti-
nation, therefore it is important to avoid collisions between
their transmissions, so that the packet can actually move
closer to the destination while maintaining low delay.
It
is therefore natural to use back-oﬀ values inversely propor-
tional to a packet’s forwarding probability.

However, in the cases of the piece-wise and the step for-
warding probability, both include ﬂat regions, hence they
can assign equal probabilities to more than one nodes receiv-
ing a packet. That would result in those nodes calculating
the same back-oﬀ timers for the same packet, resulting in a
potentially corrupt reception. For this purpose, the linear
probability function (1) is used to calculate the denomina-
tor “base probability” for each node which is then used in
order to calculate its back-oﬀ window, regardless of the ac-
tual probability function used. So, the back-oﬀ window is
calculated as follows:

win = (winmax − winmin) · (1 − pbase) + winmin

(3)

Where pbase is the base probability for that node and winmin,
winmax the minimum and maximum back-oﬀ windows that
can be assigned, respectively.

3.2 Secondary elements

3.2.1 Passive acknowledgment scheme

In order to identify successful packet reception, the proce-
dure takes advantage of the broadcast nature of the wireless
medium. After broadcasting a packet, a node can learn if
at least one of its neighbor received it by overhearing their
transmissions for a sort amount of time, dependent on the
topology and expected forwarding deferral. If a transmis-
sion of the last sent packet is captured, then the initiating
node will drop this packet from its queue and continue to
transmit the next one. In case the speciﬁed amount of time
goes by without overhearing any transmission of the last
sent packet, the node will retransmit it immediately, as long

52as the maximum number of retransmissions has not been
reached. While overhearing for neighbor transmissions, a
node will be on receiver mode, so it will be unable to send.

ceives a packet with an expired TTL will discard it without
calculating any forwarding probability or back-oﬀ window.

3.2.2 Multiple packet ﬂow handling

Upon successful reception of a new non-expired packet,
the node has to calculate a forwarding probability and de-
ferral window for it and select a random back-oﬀ value from
the range of the latter. A windowed list with the packet and
ﬂow IDs of previously successfully forwarded packets must
be kept to ensure that a node will not forward the same
packet received from diﬀerent sources twice. After deter-
mining all of the above, a node will store individual packets
according to the back-oﬀ timer that it has calculated for
each of them and try to transmit them in time.

The manner in which the node will handle the various
packets it has stored can be described as a system of multiple
queues, each one containing packets for which the node has
selected the same back-oﬀ value. Each queue is organized
in FIFO fashion. After successfully transmitting a packet
and receiving its re-transmission by a neighboring node, the
node will look for the queue with the smallest back-oﬀ and
pick the head packet from it. This ensures that packets fol-
low the back-oﬀ priority scheme above. Taking into account
that the back-oﬀ assignment favors the most likely forward-
ing candidates for a packet, this queueing policy allows the
node to prioritize packets with higher transmission proba-
bility and therefore more impact on the end-to-end goal.

3.3 Adjustable parameters

Maximum probability (pmax): The forwarding proba-
bility function slope deﬁnes how great the diﬀerence in the
probability to forward the packet will be between the neigh-
bors of the node currently holding the packet. Speciﬁcally,
the steeper that slope is the more the neighbors closer to the
destination will be favored. By setting the maximum prob-
ability to a value higher than 1, the slope of the forwarding
probability function can be tilted, thus increasing the ﬂat
segment, which leads to more “certain” forwarders. This fea-
ture provides the forwarding function the ability to adapt in
situations where more forwarders with high probability are
needed and so it can be tuned online, when for example
communication conditions become worse due to losses.

Acknowledgment delay : After a node broadcasts a
packet, it will start overhearing its neighbors’ transmission
in order to verify that the packet it sent has been broad-
casted by one of them. The amount of time it can wait in
this overhearing mode without success, until it decides it
has to retransmit the packet, is called acknowledgment de-
lay. If this interval is too small, then the node might end
up retransmitting a packet that is successfully received by
the further hops, thus adding one redundant transmission.
On the other hand, if it is too long and no transmission is
overheard, then the packet’s progress will be delayed.

Time to live (TTL): To ensure that the packets will
not circulate in the network long after they have reached
the destination, a mechanism to remove them from play is
needed. For this purpose, each packet has a ﬁxed number
of credits which are spent each time it is broadcast. These
credits can be time units or number of hops traversed, un-
der the assumption that a time unit equals the time it takes
for the packet to move one hope further. A node that re-

4. EVALUATION

4.1 Simulation model

To simulate the events and conditions that occur when
packets are being broadcasted in a multi-hop wireless net-
work, some assumptions and simpliﬁcations had to be made,
regarding packet propagation and channel errors. Firstly,
the simulation was conducted in a Matlab time slotted model.
In the model, a timeslot refers to the time it takes for a ﬁxed
size packet to be broadcast and received. For simulation
simplicity, we made the assumption of a geometric propa-
gation model. A transmission from a source is received by
all nodes within a broadcast range, with an error probabil-
ity for each receiver. Concurrent transmissions occurring
within the broadcast range of a node are considered to be
in collision at that node and neither can be decoded. All
nodes in the network have the same error probability and
same broadcast radius. The nodes that lie within a node’s
broadcast radius are considered to be the neighbors of that
node. The simulated scenarios take place in a grid topology,
such that a node may have four, eight or twelve neighbors,
depending on the transmission radius. The nodes have ﬁxed
known positions as far as calculating metric values is con-
cerned. More randomized topologies are studied as well, by
removing nodes at random positions from the grid.

4.2 Simulation setup

In order to model the behavior of the proposed oppor-
tunistic routing scheme and optimize its parameters, we
used a MATLAB-based platform as a time-driven simula-
tor. Building from scratch allowed us to control simulation
parameters at low levels fully, so as to provide fair com-
parison between protocols. This ensures that there are no
additional model assumptions imposed by the simulator, as
is the case with the popular NS-2. Experiments were con-
ducted on a 40x40 node grid topology in order to measure
delay and resource consumption for varying network density
and channel error conditions. Each experiment with a given
set of parameters is repeated for 500 or 1000 runs and the
results are averaged over the number of runs. Delay mea-
surements were performed on the shortest path from source
to destination and single path routing has been simulated
and used as the comparison reference.

Single path routing model: Single path routing is
modelled as a stochastic procedure of packet forwarding,
rather than simulating nodes. Delay is increased by one
timeslot each time a packet manages to progress by one hop,
same as each time an acknowledgment is sent, until all ten
hops have been traversed. A packet’s retransmission also
costs one timeslot and the same TTL as in the proposed
opportunistic scheme is applied.

Modelling miscalculations in the metric value: For
the purpose of testing the performance of the suggested
procedure in more realistic conditions, the assumption that
there is full and accurate knowledge of nodes’ locations in
the topology should be relaxed. Regardless of the metric
used, the possibility of wrong estimations of the metric value
should be taken into consideration when testing the perfor-
mance of a routing scheme. To this end, “noise” in metric
calculation was introduced in the simulation environment.

53Figure 2: Tilting the slope leads to lower delays for
8 neighbor topologies.

“Noise” in metric calculations was modelled as a randomly
selected value from a uniform distribution, with mean equal
to the accurately calculated value of the metric. The width
of the interval from where values are chosen is equal to a
percentage of the correct value of the metric.

Modelling random topologies: The limitations of the
grid topology can be relaxed, by introducing “dead” nodes
to random positions in the grid. This is implemented by
randomly selecting nodes other than the source or destina-
tion of the packets and setting their correct packet reception
probability to zero. Hence these nodes are not involved in
the packet forwarding process and act as obstacles to the
packet’s progress.

4.3 Adjustable parameter tuning

4.3.1

Increasing forwarders to adapt to error

By setting the maximum probability to a value higher
than 1, we tilt the slope of the forwarding probability func-
tion, thus increasing the number of certain forwarders. It is
reasonable that values of maximum probability in the range
[1.4,2] contribute to the packet’s progress without diverg-
ing much from the shortest path. Furthermore, for a given
packet error rate (PER) value, having more than one certain
forwarders yields lower delay.

This is veriﬁed by Figure 2 which illustrates how tilting
the forwarding probability function’s slope leads to lower
delays, in the context of a 10 hop shortest path. It should
be noted that only the maximum forwarding probability
parameter is examined at this point;
lower delay can be
achieved by adjusting the maximum back-oﬀ window value
as well, which in this case is variable, dependent on the
forwarding probability, taking values in [1,8]. Nonetheless,
our probabilistic scheme outperforms single-path routing for
PER values higher than 0.25. In fact, this eﬀect can be ob-
served regardless of topology density, since the same trend
was observed in the denser 12 neighbor topology.

4.3.2 Back-off differentiation

There were two general approaches to deferral window
schemes with respect to the window range values.
In the
ﬁxed back-oﬀ window approach, all transmitting nodes ran-
domly select their back-oﬀ values from the same range of
window values. On the other hand, when diﬀerentiating,
each transmitting node randomly selects its back-oﬀ value
from a diﬀerent range of numbers. Speciﬁcally, the back-oﬀ

Figure 3: Delay for variable back-oﬀ schemes in 8-
neighbor topology.

window of a node will be randomly chosen between a smaller
set of numbers, the larger its forwarding probability is, so as
to reduce delays. Figure 3 illustrates the delay performance
of the diﬀerentiated back-oﬀ window scheme, for increasing
packet error rate values, in a scenario where the source is
10 hops away from the destination. There was a steeper
increase in delay for the ﬁxed back-oﬀ window scheme as
the width of the back-oﬀ window interval increases, which
renders ﬁxed back-oﬀ values larger than 2 ineﬃcient.

It can be observed that the lowest delay is measured for
a back-oﬀ window of 1, which raises the question, why dif-
ferentiate between nodes at all. The reason is that back-oﬀ
diﬀerentiation also yields lower resource consumption.

In order to capture the eﬀect a packet’s transmission has
on the network, we track the footprint its transmissions pro-
duce over time on the nodes as it is forwarded towards the
destination, until all transmissions cease. The times each
node has received the packet are averaged over the num-
ber of the diﬀerent runs of the experiment and displayed by
the color of that node. For all results referring to footprints
hereon the source node’s coordinates are (10,20) and the des-
tination is at (20,20). Figure 4(a) illustrates the footprint
for a ﬂow with back-oﬀ window equal to 1. As we increase
the width of the deferral window the ﬂooding is limited to
an area around the shortest path. This is shown by the
plot in Figure 4(b). There is a trade-oﬀ between low delay
performance and resource consumption which should be ad-
dressed by having each ﬂow’s speciﬁc requirements in mind.
For example, in a network where only one ﬂow is present
at a time, a deferral window set to 1 would yield the lowest
delay possible, whereas in the presence of multiple ﬂows, a
more conservative back-oﬀ scheme with the window interval
set to [1,8] should be used.

4.3.3 Robustness to metric miscalculation

In order to evaluate the robustness of our scheme to mis-
takes in metric estimations, we introduced the concept of
metric noise. To measure resource consumption for the lin-
ear probability function with maximum probability set to
2, we track the ﬂow’s course in a scenario where there is
no channel error and the source is 10 hops away from the
destination and use a balanced back-oﬀ window scheme in
the interval [1, 4]. Figure 5 illustrates how the linear for-
warding probability scheme reacts to increasing noise. It is
noteworthy that the linear forwarding probability scheme is
insensitive to metric noise up to 10% of the accurate met-
ric’s value and performs decently even at the presence of
noise equal to 30% of the accurate metric’s value. Having

54(a)

(b)

Figure 4: A deferral window of size 1 will yield
slightly lower delay than a variable one, but signiﬁ-
cantly higher resource consumption. Increasing the
deferral window interval to [1,8] leads to lower re-
source consumption.

(a)

(b)

Figure 5: Increasing the error in metric value esti-
mation from 0.05 to 0.3 aﬀects resource consumption
slightly in an 8 neighbor topology, for the piece-wise
probability function.

in mind that the metric values are randomly chosen from a
uniform distribution in so wide intervals, it is obvious that
metric noise equal to 0.3 presents a scenario of extremely
inaccurate metric estimation.

We also compared the performance of the linear probabil-
ity function in the presence of noise to that of the step-wise
probability function.

Figure 6 illustrates the step-wise function’s performance
under increasing metric noise. For the same values of met-
ric noise, the step-wise function consumes fewer resources
than the linear function and is also less aﬀected by metric
noise. This is justiﬁed by the fact that even when inaccurate
estimations are made, only a few nodes will calculate their
metric so that they fall below the threshold or go above it,
whereas the majority of nodes will get the same probability
as what they would get if there was no noise. Furthermore,
we measured the packet delay over the same 10 hop path

(a)

(b)

Figure 6: Increasing the error in metric value esti-
mation from 0.05 to 0.3 aﬀects resource consumption
even less, for the step-wise probability function.

for both the linear and the step-wise probability function,
for various packet error rate values and observed that met-
ric noise does not aﬀect delay performance signiﬁcantly for
neither the linear nor the step-wise probability function.

4.4 Relaxing the grid assumption

In order to verify that the suggested scheme can function
in more loose topologies, random topologies were generated
according to the model explained in section 4.2. A random
dense topology is generated by giving nodes in the grid a 5%
probability to be “dead”, whereas a random sparse topology
is generated when there is a 10% probability that a node
is “dead”. Both the piece-wise forwarding probability func-
tion and the step-wise probability function were tested. The
packet delay was once again measured over a 10 hop path
and averaged over 1000 runs.

Tables 1 and 2 demonstrate the delay performance of
the two forwarding functions in random topologies that in-
clude “dead” nodes in various positions in the grid. Delay is
slightly increased compared to what was experienced in Sec-
tion 4.3.1 which can be justiﬁed by the extra transmissions
that are needed to route around the “dead” nodes and the al-
ternative paths followed by the packet. It can be noted that
slightly higher delay is noted when the step-wise forwarding
function is used. This can be attributed to the hard-decision
that this function uses to determine which nodes will cer-
tainly forward and which will not forward at all. Such a rigid
decision scheme can leave out further nodes which could add
to the packet’s progress, and include some closer nodes that
are however “dead”. Contrary to this, the smoother proba-
bility assignment of the linear piece-wise function, may be
more beneﬁcial in such situations.

4.5 Multiple packets and ﬂows

The packet-based simulation model for the suggested op-
portunistic scheme was extended, so as to include the con-
cept of ﬂows consisting of a number of packets. To this
end, a module that generates packets at a conﬁgurable rate
was implemented. Moreover, the nodes were supplied with
queues that operate as explained in 3.2.2. These new ele-
ments added complexity thus making simulations more time
consuming and adding large variation to the results, which
in turn raised the need for an increase in the number of runs
per scenario. Due to these circumstances, it was necessary
to decrease the number of hops between the source and des-
tination, from 10 to 5.

The robustness of the opportunistic scheme to channel er-
ror is tested by using three diﬀerent uniform error conditions
for the experiments: low channel error (20%), medium chan-
nel error (30%) and high channel error (40%). The scenario
for the following experiments is one ﬂow consisting of 50
packets transmitted from a source that is 5 hops away from
the destination, or two ﬂows of 50 packets each, which start
from diﬀerent sources and end at the same destination which
is 5 hops away from both sources. The ﬂows generate pack-
ets at a steady rate of 1 packet every 16 timeslots. Packet
forwarding is decided according to the step-wise forwarding
probability function.

In order to study the behavior of our scheme in the pres-
ence of multiple packets which interact with one another, a
ﬂow consisting of 50 packets is established between a source
that is 5 hops away from the destination. Figure 7 demon-
strates how the scheme copes with increasing packet error

55Table 1: Random dense topology

Table 2: Random sparse topology

PER step-wise delay
20%
30%
40%

16.402545
18.479613
21.399183

piece-wise delay

16.312124
17.932832
20.484211

PER step-wise delay
20%
30%
40%

16.819345
19.102419
22.439709

piece-wise delay

16.775213
18.420050
21.428213

of resource usage, whereas Directed Transmission is a prob-
abilistic protocol designed for WSNs that focuses on robust-
ness and simplicity at the expense of performance. The pur-
pose of these comparisons is to demonstrate that a tunable
scheme can cater to the demands of both network types,
without suﬀering from the drawbacks of these two schemes.

4.6.1 Comparison to Directed Transmission

Directed Transmission is a parametric probabilistic rout-
ing protocol suggested in [1], which focuses on design sim-
plicity, distributed routing decisions and robustness to met-
ric miscalculation. When a node receives a packet it can be
retransmitted with probability given by:

P (Ri) = exp{k[d(S, D) − d(Ri, D) − i]},

(4)

Where d(S, D) is the distance between source and desti-
nation, i represents a number of time steps after ﬁrst packet
transmission and k is a tunable parameter which controls
the spread of the ﬂow.
It should be noted that Directed
Transmission does not account for losses due to poor link
quality, so the two protocols were compared in no-channel
error scenarios, where metric miscalculation was present.

When error in metric calculation increases, directed trans-
mission’s use of resources does not increase signiﬁcantly, as
is the case with our scheme. However, the spread of the ﬂow
on the grid is comparable to its equivalent in the proposed
scheme when the piece-wise probability function was used
and larger than its equivalent when the step-wise probabil-
ity function was used. Furthermore directed transmission
has a larger average number of transmissions needed to de-
liver a packet along the 10 hop path, regardless of metric
noise. These results demonstrate that a protocol can be sim-
ple enough and conserve resources to be applied in WSNs
without suﬀering from low delay performance.

The performance of both directed transmission and our
approach was not aﬀected by increase in metric miscalcula-
tion; however our approach yields signiﬁcantly smaller de-
lays.
In summary, as shown in Figure 9 our scheme out-
performs Directed Transmission both in terms of resource
consumption and delay, under increasing metric miscalcula-
tion.

4.6.2 Comparison to SOAR

For our comparative simulations, SOAR’s algorithm for
packet forwarding decisions was used, combined with the
proposed passive acknowledgment scheme, in order to test
the performance of its opportunistic features. SOAR ini-
tially uses ETX as a metric in order to decide on the cost
of forwarding, however, for comparison purposes, hop dis-
tance was used for both protocols. SOAR behaves similarly
to shortest path routing in no error conditions, constraining
the ﬂow along the shortest path from the source to the des-
tination, so our scheme can yield lowers delays than SOAR
for packet error probability over 0.25. When metric miscal-
culation is present, SOAR’s delay increases signiﬁcantly, as

Figure 7: Delay of a 50 packet ﬂow using step-wise
probability function to adapt to increasing packet
error probability

Figure 8: Delay of a 50 packet ﬂow while competing
with another ﬂow with the same destination

caused by lossy links. It should be noted that the trend that
was observed in the single packet scenario, is also present
here. As the step of the forwarding probability function in-
creases, so do the forwarders and the average packet delay is
reduced due to this eﬀect. In particular, in high error con-
ditions, the ﬂow beneﬁts more from this increase, similarly
to the single packet scenario presented in Section 4.3.1.
In
addition to verifying that the proposed scheme supports the
existence of ﬂows, we examined how two ﬂows interact in
the network and conﬁrm that our scheme can indeed sup-
port multiple ﬂows. The scenarios were chosen with respect
to the most common cases present in wireless mesh and sen-
sor networks. Figure 8 represents the scenario of two nodes
sending packets to the same “sink” node.

4.6 Comparison to other schemes

In order to evaluate our scheme, it is compared to SOAR
and Directed Transmission, which are some of the best per-
forming opportunistic protocols, designed for mesh and wire-
less sensor networks respectively. SOAR is a high overhead
protocol which focuses on minimizing delay at the expense

56to reduce resource consumption and reducing delay. Hence,
a variable back-oﬀ scheme that gives priority, by means of
smaller back-oﬀ windows, to best forwarders according to
their forwarding probability, is preferable to a ﬁxed back-
oﬀ window for all forwarders. It is also conﬁrmed that the
proposed scheme supports multiple ﬂows successfully. Com-
parison to Directed Transmission and SOAR under met-
ric miscalculation and channel loss conditions, shows that
SOAR’s use of forwarding lists exacerbates metric miscal-
culations, while our adjustable probabilistic scheme remains
unaﬀected, at the same time yielding signiﬁcantly lower de-
lay than Directed Transmission, in all cases.

6. REFERENCES
[1] C. L. Barrett, S. J. Eidenbenz, L. Kroc, M. Marathe,

and J. P. Smith. Parametric probabilistic sensor
network routing. In ACM WSNA, 2007.

[2] S. Biswas and R. Morris. Opportunistic routing in
multi-hop wireless networks. In SIGCOMM, 2005.

[3] D. C. D., M. R., A. D., and B. J. A high-throughput

path metric for multi-hop wireless routing. In
MobiCom, 2003.

[4] J. Du, H. Liu, and P. Chen. Omr: An opportunistic

multi-path reliable routing protocol in wireless sensor
networks. In ICPPW, 2007.

[5] H. Z. J, H. J. Y, and L. L. Gossip-based ad hoc
routing. In INFOCOM, pages 1707–1716, 2002.

[6] H. Liu, B. Zhang, M. H., X. Shen, and J. Ma.

Opportunistic routing for wireless ad hoc and sensor
networks: Present and future directions. IEEE
Communications Magazine, 47(12), 2009.

[7] E. Rozner, J. Seshadri, Y. Mehta, and L. Qiu. Simple

opportunistic. routing protocol for wireless mesh
networks. In WiMesh, pages 48–54, 2006.

[8] E. Rozner, J. Seshadri, Y. Mehta, and L. Qiu. Soar:

Simple opportunistic adaptive routing protocol for
wireless mesh networks. IEEE Transactions on Mobile
Computing, 8(12), 2009.

[9] Y. Yuan, H. Yang, S. Wong, S. Lu, and W. Arbaugh.

Romer: Resilient opportunistic mesh routing for
wireless mesh networks. In WiMesh workshop, IEEE
SECON, pages 146–158, 2005.

[10] K. Zeng, W. Lou, and H. Zhai. On end-to-end

throughput of opportunistic routing in multirate and
multihop wireless networks. In IEEE INFOCOM,
pages 99–100, 2008.

[11] Z. Zhong and S. Nelakuditi. On the eﬃcacy of

opportunistic routing. In SECON, pages 836–843,
2007.

Figure 9: Both Directed Transmission and the pro-
posed opportunistic scheme are robust to metric
miscalculation but the latter yields far lower delays.

(a)

(b)

Figure 10: Error in metric value estimation does not
aﬀect delay over a 10 hop distance signiﬁcantly when
piece-wise probability function is used.

opposed to the proposed scheme’s performance which is un-
aﬀected, as shown in Figure 10(b). This can be explained by
the deterministic forwarding scheme used by SOAR. When
metric miscalculation occurs at the source who creates the
list of forwarders, this error will propagate along with the
list, since it is included in the sent packets. Therefore con-
sequent calculations based on this list will be inﬂuenced by
this error.

5. CONCLUSIONS

Simulation results demonstrate that the suggested oppor-
tunistic scheme can outperform single path routing for error
values larger than 15%-20%, for an optimized slope of the
forwarding probability function, with restrained use of re-
sources. Furthermore, we showed that the optimal manner
of adapting to increasing error is to increase the number of
forwarders by increasing the slope of the forwarding prob-
ability function.
In particular, the number of certain for-
warders has the most impact on performance and they need
to be increased with respect to error conditions. To reduce
resource consumption, in terms of packet transmissions, uti-
lizing a step-wise function is a sound approach, which proved
robust to metric miscalculations. Finally, there is a trade-
oﬀ between diﬀerentiating each forwarder’s back-oﬀ value

57