An Independent-Connection Model for Trafﬁc Matrices

Dept. of Computer Science

Dept. of Computer Science

Vijay Erramilli

Boston University

evijay@cs.bu.edu

Mark Crovella

Boston University

Nina Taft

Intel Research
Berkeley, CA

crovella@cs.bu.edu

nina.taft@intel.com

Abstract
A common assumption made in traﬃc matrix (TM) mod-
eling and estimation is independence of a packet’s network
ingress and egress. We argue that in real IP networks, this
assumption should not and does not hold. The fact that
most traﬃc consists of two-way exchanges of packets means
that traﬃc streams ﬂowing in opposite directions at any
point in the network are not independent.
In this paper
we propose a model for traﬃc matrices based on indepen-
dence of connections rather than packets. We argue that the
independent-connection (IC) model is more intuitive, and
has a more direct connection to underlying network phenom-
ena than the gravity model. To validate the IC model, we
show that it ﬁts real data better than the gravity model and
that it works well as a prior in the TM estimation problem.
We study the model’s parameters empirically and identify
useful stability properties. This justiﬁes the use of the sim-
pler versions of the model for TM applications. To illustrate
the utility of the model we focus on two such applications:
synthetic TM generation and TM estimation. To the best
of our knowledge this is the ﬁrst traﬃc matrix model that
incorporates properties of bidirectional traﬃc.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network
Operations; C.4.3 [ Performance of Systems]: Modeling
Techniques
General Terms
Measurement
Keywords
Traﬃc Matrix, Modeling, Independent-Connection Model,
Gravity
1.

INTRODUCTION

The ﬂow of traﬃc through a network is a crucial aspect of
the network’s workload. The amount of traﬃc ﬂowing from
each ingress point (origin) to each egress point (destination)
is called the traﬃc matrix (TM). Given the importance of

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.

the traﬃc matrix for many aspects of network operations,
good models of traﬃc matrices are very useful.

Despite the importance of TM modeling, there has been
little work to date focusing on complete models for TMs.
By a complete model, we mean one that can be used to
generate or characterize a time-series of representative traf-
ﬁc matrices for a given network topology. Such a model
should ideally have a small number of physically meaningful
inputs. Examples of such inputs would be the size of user
populations served by each access point, or the nature of the
application mix in the network.

Although complete TM models do not yet exist, some
models for parts of the problem have been developed [16,
13]. One of the most popular models in connection with
traﬃc matrices is the ‘gravity’ model, which estimates OD
ﬂow counts from ingress and egress counts. The gravity
model has been used extensively in TM estimation and has
been proposed as a tool for synthetic TM generation[11].
The key assumption underlying the gravity model is that
the traﬃc entering the network at any given node exits the
network at a particular egress node in proportion to the total
traﬃc exiting at that egress. This can be thought of as a
model in which the ingress and egress points for any given
packet are independent.

This paper starts from a simple observation: in the Inter-
net, this independence assumption should not and does not
hold. The reason is that most network traﬃc consists of con-
nections – two-way conversations usually carried over TCP.
Each connection has an initiator (a host that requested the
connection) and a responder (a host that accepted the con-
nection request). The result is that the amount of traﬃc
ﬂowing from ingress i to egress j is not independent of the
amount of traﬃc ﬂowing from ingress j to egress i. Thus
while the gravity model is appealing for its simplicity, it is
divorced from key underlying phenomena that shape traﬃc
ﬂow in a real network.

To capture these phenomena, we propose the independent-
connection (IC) model. Rather than assuming that ingress
and egress of packets are independent, we assume that ini-
tiators and responders of connections are independent. The
key is that we think of an aggregate ﬂow (such as an OD
ﬂow) not as collections of packets, but as collections of con-
nections. We focus on connections rather than packets be-
cause of the bidirectional nature of connections that contain
packets ﬂowing in two directions.

The IC model is based on three intuitive notions: ﬁrst,
each aggregated traﬃc stream from a single origin to a sin-
gle destination consists of two kinds of traﬃc: forward traf-

ﬁc, ﬂowing from initiators to responders; and reverse traﬃc,
ﬂowing from responders to initiators. We assume that at a
high enough level of traﬃc aggregation, the ratio of forward
and reverse traﬃc may exhibit some stability in time and/or
space (i.e., at diﬀerent access points). The second notion is
that each network access point has an activity level, mean-
ing the rate at which bytes are ﬂowing through the network
due to connections initiated at that access point. Thus the
network activity for a given access point consists of a por-
tion of the traﬃc ﬂowing both to and from the access point.
Finally, the third notion is that each access point has an
associated preference. This is the fraction of all connections
whose responders are associated with that access point.

Each of these assumptions has a natural physical interpre-
tation. The ratio of forward to reverse traﬃc in a large set of
connections reﬂects the properties of the underlying appli-
cations, and the application mix. For example, Web traﬃc
will tend to have a much greater amount of traﬃc ﬂowing
in the reverse direction than in the forward direction, while
P2P traﬃc may show less asymmetry. The activity level of
a node corresponds to the number of users who access the
network at that node, and their current level of network use.
The preference of a node corresponds to the “desirability”
or ”popularity” of the services that are reached through that
node — i.e., a level of interest expressed as a likelihood that
any given user will seek to initiate a connection to any given
service via that node.

In the IC model, these concepts are composed in a straight-
forward way (in Sec. 2). Depending on the assumptions
one makes about the temporal or spatial stability of model
parameters, one can obtain versions of the model that are
useful for a number of network modeling tasks. Using real
traﬃc matrices we study the behavior of the three key no-
tions (parameters) of our model. We ﬁnd, for example, that
forward/reverse ratios and node preference show remarkable
stability over time. Our ﬁndings indicate that the simpler
versions of our models are suﬃcient for applications such
as synthetic traﬃc matrix construction and TM estimation.
We focus on these two applications and describe a method
for traﬃc generation based on our model.

We also use the model to construct inputs for the problem
of TM estimation. We show that although the IC model has
fewer inputs that the gravity model, it does a better job at
reproducing OD ﬂow counts than the gravity model. Our
purpose is not to propose another TM estimation method,
but rather to validate our model by illustrating that it can
work well in a known TM application, and do so with fewer
parameters.
2.

INDEPENDENT-CONNECTION MODEL
Consider a network with n access points. Traﬃc ﬂows
into and out of the network at each access point. During
any ﬁxed time interval, the amount of traﬃc in bytes that
enters the network at node i and leaves the network at node
j is denoted Xij . This is called an Origin-Destination (OD)
ﬂow from origin i to destination j. All the traﬃc ﬂowing
into the network at node i is Xi∗ (which we refer to as the
ingress traﬃc at i) and all the traﬃc ﬂowing out of the
network at node j is X∗j (the egress traﬃc at j). Finally,
X∗∗ denotes all the traﬃc in the network, i.e., the sum of
Xij for all i = 1, ..., n and j = 1, ..., n.

The ‘gravity’ model treats the ﬂow of traﬃc as a random
process. For any packet, we let I be the random variable
corresponding to the packet’s ingress and E be the random

2

2

B

2
2
100

100

1

1

100

2

100

A

1

2

1

C

100

100

1

1

Figure 1: Example Traﬃc in an IC Setting.

variable corresponding to the packet’s egress. The gravity
model states that I and E are independent, that is, P [E =
j|I = i] = P [E = j] and likewise, P [I = i|E = j] = P [I =
i], ∀i, j. Based on this ‘independent-packet’ assumption, the
gravity model predicts that Xij should be well approximated
by Xi∗X∗j /X∗∗, ∀i, j.

We start with the simple observation that the independent-
packet assumption is not accurate in the Internet. A typical
packet in the Internet is part of a connection — a two-way
exchange of packets, generally in the form of a single TCP
connection. Packets ﬂowing in opposite directions of a con-
nection are not well modeled as being independent.

To see why this is the case, consider the following example.
Let us assume that all connections consist of equal volumes
of traﬃc ﬂowing in the forward direction and the reverse
direction.
In actual practice forward and reverse volumes
are not likely to be equal, but it simpliﬁes the example.

Suppose some nodes initiate a larger traﬃc volume than
other nodes, as in the three-node network example in Fig. 1.
In the ﬁgure, directed arcs show the direction of traﬃc ﬂow
from origin to destination. Dotted arcs correspond to traﬃc
ﬂowing from initiator to responder (forward traﬃc) and solid
arcs correspond to traﬃc ﬂowing from responder to initiator
(reverse traﬃc). Self-looping arcs correspond to connections
between diﬀerent hosts having the same access point. The
total traﬃc ﬂowing into the network at any node consists of
all the arcs leaving that node, and traﬃc ﬂowing out consists
of all arcs pointing to that node.

Because we assume each connection contains the same
number of bytes in both directions, pairs of forward and
reverse arrows between an initiator and responder have the
In this case, node A initiates 3 connections,
same value.
each of 100 packets in each direction; node B initiates 3
connections, each of 2 packets in each direction; and node
C initiates 3 connections each of 1 packet in each direction.
The key point is that the initiator and responder of any given
connection are independent; that is, the probability that a
connection’s responder is any particular node is independent
of the connection’s initiator node.

However, we see that ingress-egress independence for pack-

ets is not a valid model. For example,

P [E = A|I = A] = 200/403 ≈ 0.50,
P [E = A|I = B] = 102/109 ≈ 0.93,
P [E = A|I = C] = 101/106 ≈ 0.95, and

P [E = A] = 403/618 ≈ 0.65.

These probabilities should be equal under gravity.

2.1 Model Deﬁnition

Rather than model connections individually, we note that
what is important about a connection is that it consists of
traﬃc in both the forward and reverse directions. Consider
the collection of all connections with initiator node i and a
responder node j. We use fij to denote the portion of the
total bidirectional traﬃc due to these connections that is in
the forward direction. That is, fij denotes bytes contained
in forward traﬃc divided by bytes in forward plus reverse
traﬃc, so 0 ≤ fij ≤ 1, ∀i, j

Next we consider the total traﬃc due to connections ini-
tiated at node i, i = 1, ..., n, which we denote Ai (for ‘activ-
ity’). This consists of some forward traﬃc ﬂowing into the
network at node i, and some reverse traﬃc ﬂowing out of
the network at node i.

Finally we consider how connection responders are cho-
sen. Since we assume an independent connection model,
the probability that a connection responder is at node i de-
pends only on i. We denote this by Pi, i = 1, ..., n (for
‘preference’). We do not assume that the Pi values sum to
one, but usually we will use them as probabilities and so will
normalize by

P

Pi.

Then if Xij is the amount of traﬃc between nodes i and

i=1,...,n

j, the general independent-connection model has:

Xij =

fij AiPjP
i=1 Pi

n

+

(1 − fji)AjPi

P

n

i=1 Pi

(1)

for i, j = 1, ..., n.

The ﬁrst term captures the forward traﬃc ﬂowing from i
to j – traﬃc generated by the activity of users at node i; the
second term captures the reverse traﬃc ﬂowing from i to j
– traﬃc generated by the activity of users at node j.

When considering only a single connection, f may vary
considerably. However in a backbone network carrying highly
aggregated traﬃc, we assume that f will show some degree
of stability across diﬀerent OD ﬂows. In this case we sim-
plify the general IC model and assume f is constant across
the network. This leads to the simpliﬁed IC model:

Xij =

f AiPjP
i=1 Pi

n

+

(1 − f )AjPi

P

n

i=1 Pi

(2)

for i, j = 1, ..., n.

The next aspect of the model to consider is stability of
parameters in time. In the most general case, all parameters
may vary at each time step. We term this version of the
model the time-varying IC model:

Xij (t) =

f (t)Ai(t)Pj(t)

P

n

i=1 Pi(t)

+

(1 − f (t))Aj(t)Pi(t)

P

n

i=1 Pi(t)

(3)

for i, j = 1, ..., n and t = 1, ..., T .

We consider two other variants of the model which incor-
porate increasingly restrictive assumptions about the tem-
poral stability of the parameters. At high levels of aggrega-
tion, one might expect f to show stability in time (shown in
Sec. 4). This assumption results in the stable-f IC model:

Xij (t) =

f Ai(t)Pj(t)
P
i=1 Pi(t)

n

+

(1 − f )Aj(t)Pi(t)

P

n

i=1 Pi(t)

(4)

for i, j = 1, ..., n and t = 1, ..., T .

Finally, we consider the case in which connection prefer-
ences are stable in time as well. This assumption may be
justiﬁed if connection preferences reﬂect a relatively stable

underlying ‘popularity’ of services available via each node.
This assumption yields the stable-f P IC model:

Xij (t) =

f Ai(t)Pj
P
i=1 Pi

n

+

(1 − f )Aj (t)Pi

P

n

i=1 Pi

(5)

for i, j = 1, ..., n and t = 1, ..., T .

There are a number of practical reasons for considering
these diﬀerent model variants. First, consider the problem
of constructing synthetic TMs. Using the gravity model,
one must somehow synthetically generate 2n values at each
timestep t, namely {Xi∗(t)} and {X∗i(t), i = 1, ..., n}. The
stable-f IC model requires the same number of input param-
eters at each timestep: {Ai(t)} and {Pi(t), i = 1, ..., n} and
hence presumably presents roughly the same level of mod-
eling diﬃculty. However, the IC model can do signiﬁcantly
better: the stable-f P model requires only n inputs {Ai(t)}
at each timestep.

The second reason for considering diﬀerent model vari-
ants relates to the TM estimation problem. These variants
reﬂect diﬀerent amounts of outside information that must
be brought into the estimation process. When the stable-
f P model as used for TM estimation, one assumes that the
stable values of f and P have previously been measured;
then only n inputs (namely {Ai(t)}) need to estimated from
data. In the case of the stable-f model, we assume that f
has been measured previously and can be reused; here both
{Ai(t)} and {Pi(t)} are estimated from data.
3. MEASUREMENT DATA

To explore the validity and utility of the IC model, we

used three data sets.

G´eant Data: G´eant [1] is a network of 22 PoPs connect-
ing research institutions and universities across continental
Europe. The sampling rate is 1 packet out of every 1000.
The methodology used to construct OD ﬂows from netﬂow
data is detailed in [7]. We use a time bin size of 5 minutes to
construct OD ﬂows, giving us 2016 sample points for each
week’s worth of data.

Totem Data: The publicly available Totem [14] data set
comes from the same G´eant network. The data set con-
sists of 4 months of TMs, constructed from sampled netﬂow
data using the method described in [14]. Our results for the
Totem TM are very similar to those obtained with the G´eant
data above, and are often omitted due to lack of space. We
do however present this data when we want to illustrate
multi-week long behavior.

Full Packet Header traces from Abilene Backbone:
We used two hour contiguous bidirectional packet header
traces collected at the Indianapolis router node (IPLS), in
the Abilene network[2]. The links instrumented are the ones
eastbound and westbound, towards Cleveland (CLEV) and
Kansas City (KSCY).
4. MODEL EVALAUTION

We now examine how well our model can ﬁt empirical
datasets. We expect the time-varying model to ﬁt the data
best, followed by the stable-f model, with the poorest ﬁt
coming from the stable-f P model. This is based on the
number of time-varying model parameters: 3n for the time-
varying model, 2n for the stable-f model, and n for the
stable-f P model. More precisely, if we are trying to ﬁt a
dataset of OD ﬂows from a network with n nodes over t
timesteps, the gravity model has 2nt − 1 degrees of freedom
(i.e., inputs), the time-varying IC model has 3nt degrees of

30

25

20

15

10

t

n
e
m
e
v
o
r
p
m

I
 
r
o
r
r

E

 
l

a
r
o
p
m
e
T
%

 

5

0
0

% Improvement
Mean

we can do is to measure f for two large OD ﬂows in the
Abilene network since in our packet trace data the packets
in the pairs (KSCY,IPLS) and (IPLS,KSCY) ﬂow over the
IPLS-KSCY link. Due to space limitations, we refer the
reader to [5] for a complete description of our procedure for
measuring f .

f:IPLS−>CLEV
f:CLEV−>IPLS

0.5

0.45

0.4

0.35

0.3

0.25

0.2

0.15

0.1

0.05

d
e
r
u
s
a
e
M

 
f

250

500

750

1000 1250 1500 1750 2000
Time

Figure 2: Temporal % Improvements of IC-Model over
Gravity; Geant data

freedom, the stable-f model has 2nt + 1 degrees of freedom,
and the stable-f P model has nt + n + 1 degrees of freedom.
To be most conservative in our conclusions, we focus on
our weakest model, the stable-f P model. The metric we
use for measuring accuracy of model prediction here and
throughout the paper is relative l2 temporal error (as in
[12]):

RelL2T (t) =

qP

P

n

n
i=1
qP
n
i=1

P

j=1(Xij (t) − ˆXij (t))2

n

j=1 Xij (t)2

(6)

We estimate the values of f , Pi, and Ai(t) via optimiza-

tion, using the following nonlinear program:

minimize

RelL2T (t)

TX

t=1

where ˆXij (t) = f Ai(t)Pj + (1 − f )Aj (t)Pi

subject to:

Ai(t) ≥ 0 ∀i, t

Pi ≥ 0 ∀i
Pi = 1

X

i

If we assume that errors have a Gaussian distribution, this
is equivalent to a maximum-likelihood estimation of model
parameters. We use the optimization toolbox provided by
Matlab [3] to ﬁnd the solution numerically.

We ﬁt both our model and the gravity model and compare
their accuracy in Fig. 2. We plot the improvement of the
IC model over the gravity using the RelL2T (t) metric. The
improvement typically lies between 18 to 24%. The absolute
improvements lie between 0.10 - 0.12. It is both surprising
and encouraging that our model can ﬁt the data well with
a single constant f for the entire network. This implies
that our simpler IC models may be suﬃcient for the TM
applications we consider.

Characterizing f . Since the stable-f P model can in-
deed ﬁt real traﬃc data quite well, we now examine which
values for f are reasonable and whether such a parameter
setting is stable in time.
Ideally, to perform a thorough
study of observed values of f , one would need unsampled
netﬂow traces, or unsampled (to properly determine the ini-
tiator) packet header traces of all traﬃc in the network. To
the best of our knowledge no such data sets exist. What

0
0

20

40
80
Time (5 Min Bins)

60

100

120

Figure 3: f values over time

In Fig. 3 we plot our measured values of f . We draw
three conclusions: (1) f lies consistently in the range 0.2 to
0.3; (2) f is quite stable across time; and (3) the values of
f
(CLEV,IPLS) and f(IPLS,CLEV) are similar - which pro-
vides preliminary support for assuming spatial stability of
fij over diﬀerent (i, j) pairs.

We extracted the values of f computed from our ﬁtting
procedure in Sec. 4. We found that over a seven week period
(Totem data) f did not vary outside the narrow range of
[0.17,0.21]. The stability of f is encouraging as it means that
if f could be measured once in a while, the obtained value for
f could subsequently be used in modeling tasks for possibly
multiple weeks. We believe that the particular values for
f we observe are reﬂective of the application mix in highly
aggregated traﬃc. While applications like Web browsing
would have values of f lower than 0.2, other applications
such as P2P could have higher f values.

Characterizing Preferences. Using our ﬁtted data, we
observed the values for {Pi} over seven weeks in the Totem
data. We make two observations from Fig. 4 (the values of
{Pi} for nodes i are in arbitrary order, and the {Pi} sum to
1). First, values of Pi for any given node i are remarkably
stable over time, even over seven weeks. Combining this
observation with that of the stable f behavior, lends support
for the use of the stable-f P model. Second, the {Pi} values
are highly variable across diﬀerent node (with some nodes
as much as ten times greater than the typical value). The
high variability of {Pi} values prompts us to examine their
distributional tail. We found that a long-tailed lognormal
distribution does a better job in ﬁtting the tail.[5]. However
the distributional ﬁts should not be relied on too heavily;
we have far too few data points (22 or 23) to reliably choose
a distributional model for this data.

Characterizing Activity Levels. Finally we examine
the nature of the timeseries of activity levels, {Ai(t)}, in
our data. The variation in these values is the source of all
time-variation in the stable-f P model. Intuitively, if {Ai(t)}
represents the rate at which traﬃc is being ‘initiated’ at node
i, we expect to see familiar patterns of daily variation.

In [5] we provide the details of our ﬁndings on activity

0.35

0.3

0.25

0.2

0.15

0.1

0.05

l

s
e
u
a
v
 
P

 
l

a
m

i
t

p
O

wk1
wk2
wk3
wk4
wk5
wk6
wk7

0
0

5

10

Nodes

15

20

Figure 4: Optimal P Values over Time Totem

levels. In summary, we did ﬁnd strong diurnal patterns in
these timeseries, corresponding to daily variation as well as
weekend variation.
5. TM GENERATION USING IC MODEL

Developing a comprehensive framework for synthetically
generaing traﬃc matrices is a non-trivial task [10]. However,
we claim that the IC model represents a relatively simple
and accurate starting point for TM generation.

Based on the characterization results we have presented
here, one can attempt to use the stable-f P IC model to gen-
erate synthetic traces by following these steps: (1) Choose
an f value. Our results suggest that a in the range 0.2
to 0.3 is reasonable, (2) Use a long-tailed distribution to
generate a set of preference values {Pi}. While we do not
advocate a particular choice of distribution, our results sug-
gest that a distribution like the lognormal is a reasonable
choice, (3) Generate activity time series {Ai(t), i = 1, ..., n}.
A model that explicitly incorporates daily variation, such as
the cyclo-stationary model in [13], would make sense. and
(4) Construct the timeseries of traﬃc matrices Xij (t) us-
ing equation (5). There are a number of advantages to this
approach for TM generation. First, the parameters have
an interpretation in terms of real network phenomena. For
example, if an analyst wishes to incorporate knowledge of
application mix, or explore the eﬀects of changes in applica-
tion mix, it is possible to do so by varying f . If an analyst
wishes to model network ‘hot spots’ or ‘ﬂash crowds’ this
is possible by varying {Pi}. Finally if an analyst wishes to
incorporate knowledge of user population levels, or explore
the eﬀects of varying such levels, it is possible to do so by
varying {Ai(t)}. Second, as noted in Sec. 2, the stable-f P
model requires relatively few inputs: nt+n+1 for a network
of size n over t timesteps.

Finally, the last strength of this approach is made clear by
contrast with the gravity model, which previously has been
suggested as a starting point for synthetic TM generation
[11]. In the gravity model, the set of inputs {Xi∗(t)} and
{X∗j (t)} are causally related. gravity models requires that
the sum of the Xi∗(t)s ∀i equal the sum of the X∗j(t)s ∀j.
This constraint is typically imposed per time slot t. Thus it
is not a simple matter to synthetically construct inputs to
the gravity model: the inputs at each timestep are causally
constrained, in a complex way. On the other hand, the set
of time-varying inputs {Ai(t)} to the stable-f P model are
not causally related. They may show strong correlations in
time (which can be modeled stochastically), but they do not

follow any constrained relationship that must be preserved.
Hence synthetic TM generation is considerably simpler un-
der the IC model than under using a method like the gravity
model.
6.

IC MODEL FOR TM ESTIMATION

In the last section we showed that the IC model estimates
real TM data better than the gravity model. This motivates
us to ask whether it forms a better starting point for TM es-
timation than the gravity model. The TM estimation prob-
lem has been well studied. The fundamental issue with this
inference problem is that it is a highly under-constrained,
or ill-posed, system [12, 16].

Although the speciﬁcs of particular solutions to TM esti-
mation diﬀer, many of the TM estimation solutions follow
this blueprint: Step (1) Choose a starting point xinit as a
prior to the estimation algorithm, Step (2) Run an estima-
tion algorithm using Y , R and xinit to get xest and Step (3)
Run an iterative proportional ﬁtting algorithm to make sure
the estimated TM xest adheres to link capacity constraints.
Most solutions to the TM estimation problem (such as [9,
4, 12, 16]) select diﬀerent methods to carry out steps 1 and
2, while step 3 remains the same across many solutions. The
studies in [8, 6] indicate that the quality of the initial prior
is quite important and thus a better initial prior can lead to
substantially better estimates.

A key question in using the IC model to generate the prior
in Step 1 is what sorts of measurements are used in to de-
termine the model parameters. When using the stable-f P
model, we assume that f and {Pi} have been previously
measured. To use the stable-f model, we only need to as-
sume that f is known or measurable. We will see that both
cases yield improvements over the gravity model.

One possibility for obtaining measurements for our pa-
rameters is that of the hybrid scenarios proposed in [12]
which combine direct TM measurement during a small set
of weeks with inference used during the other weeks. (This
was proposed to lighten the burden on ﬂow monitors.) In
this case old TMs can be used to calibrate our parameters.
For our study, we vary the prior in Step 1 keeping Steps 2
and 3 the same. For Step 2 of the TM estimation procedure
we use the least-squares estimation techniques proposed in
[15] (also known as the tomo-gravity approach).

We point out that we are using the simple gravity model
herein, and the authors of [16] have also proposed a gener-
alized gravity model, which takes into account side informa-
tion about link types (e.g., access or peering). It is known
that this extension to the gravity model improves upon the
simple gravity model. We did not compare our prior to the
generalize gravity model prior because such additional in-
formation was not available to us.
6.1 TM Prior with Stable-f P Model

In these experiments, we use two weeks of data. Week 1
data is used to compute f and {Pi}. The goal is to produce
TM estimates for week 2. But before producing a TM prior
for week 2, we need to produce estimates for {Ai(t)} during
week 2. We next explain how to estimate {Ai(t)} (called
{ ˜Ai(t)}) using only the ingress and egress node counts along
with the f and {Pi} values.

In what follows, we organize the values of {Ai(t)} into an
n × t matrix A, in which Ait corresponds to Ai(t). We also
reorganize Xij (t) into the n2 × t matrix X where we have
one (i, j) pair per row, and each row is a time series.

In the stable-f P model, Xij (t) is a linear function of
{Ai(t)} as given by Equation (5). Thus we can use f and
{Pi} to construct a matrix φ such that:

X = φA

(7)

We cannot use a pseudo-inverse solution on this equation
to estimate A from X because X is unavailable (indeed, this
is the traﬃc matrix itself). However, what is available are
the ingress and egress nodes counts, speciﬁcally {Xi∗} and
{X∗j }. We thus need to convert X in (7) to the ingress and
egress counts.To do so, we deﬁne a matrix H whose elements
Hij are 1 if TM ﬂow j contributes to the total ingress count
for node i, and 0 otherwise. In other words, if TM ﬂow j
originates at node i, then its traﬃc will be counted in that
nodes ingress count. Because there are n nodes and n2 OD
ﬂows in the network, the dimensions of H are n × n2. With
this deﬁnition of H we can now write, for a node i, Xi∗ =
H(i, ∗)X where H(i, ∗) is the i-th row of H. Let Xingress
denote the column vector of ingress counts for all nodes;
thus Xingress = HX , and the dimensions of Xingress are
n × t (i.e., we have the time series for each node). Similarly
we deﬁne the 0-1 matrix G such that Xegress = GX .

Next we deﬁne the block matrix Q that is composed by

stacking matrix H on top of G:

»

–

H
G

Q =

whose size is thus 2n × n2. Then

QX =

»

–

Xingress
Xegress

(8)

(9)

(10)

which is the data that is available to us.

After some simple manipulation, we get our IC-model

prior, ˜X, is now given by:

(Qφ)T QX
6.2 TM Prior with Stable-f Model

˜X = φ((Qφ)T Qφ)

−1

In our ﬁnal scenario, we assume that the only IC model
parameter that can be obtained directly from measurement
is f . Again, we assume we only have ingress and egress node
counts available to estimate {Ai} and {Pi}.
Simple algebraic manipulation can give us

˜Ai =

f Xi∗ − (1 − f )X∗i

2f − 1

We perform a similar exercise to obtain estimates for {Pi},

namely,

˜PiP

T
j=1

˜Pj

=

f X∗i − (1 − f )Xi∗
j=1 Aj
(2f − 1)

P
T

With these relationships, we construct a new prior for TM
estimation. For each time bin, the most recent ingress and
egress counts are used to estimate {Ai} and {Pi}, and these
estimates are combined with f according to the stable-f IC
model (4) to produce a TM prior.

We ﬁnd that the IC model yields substantial improve-
ments over the gravity model. Whether using measured φ
from the previous week or two weeks back [5], improvements
are in the range of 10-20%. We thus improve on the grav-
ity model, using only ingress/egress counts to estimate A,
and a previous week to estimate f and {Pi}.Similarly we see
improvements of around 8% with the stable-f IC prior as a
prior. Even when very little side information is available to
the analyst (just an estimate of f ), the IC model outper-
forms the gravity model as a prior for TM estimation. Refer
to [5] for detailed results.

7. CONCLUSIONS

In this paper we introduced a new model for traﬃc matrix
data that takes into consideration the bidirectional nature
of most Internet connections. We compared our model to
another popular traﬃc matrix model, namely the gravity
model. We found that our IC model better ﬁts actual traﬃc
matrix data. This was our ﬁrst validation of our model. We
considered the TM application of traﬃc matrix estimation,
and showed that when TM estimation uses the IC model as a
prior, it can do a better job, than with a gravity model prior.
This comparison serves as a second validation of our model.
In studying the application of our model to our data we
learned interesting things about our model parameters; (1)
the network-wide ratio of forward to reverse traﬃc is quite
stable over multiple days and weeks; (2) the preferences or
popularity of nodes is also stable over multiple weeks. These
two ﬁndings justify the use of the simplest version of our
model for the application of synthetic traﬃc generation.

This work was supported in part by NSF grants ANI-

9986397 and CCR-0325701, and by Intel.
8. REFERENCES
[1] Geant network http://www.geant.net.
[2] Internet Abilene Network http://www.internet2.org.
[3] Optimization Toolbox Matlab

http://www.matlab.com/products/optimization/.

[4] Cao, J., Weil, S. V., and Yu, B. Time-Varying Network

Tomography. Journal of the American Statistical Assoc. 2000
(2000).

[5] Erramilli, V., Crovella, M., and Taft, N. An Independent
Connection model for Traﬃc Matrices. Tech. Rep. 2006-022,
Computer Science Dept., Boston University, Boston, MA, USA,
2006.

[6] Gunnar, A., Johansson, M., and Telkamp, T. Traﬃc Matrix
Estimation on a Large IP Backbone - a Comparison on Real
Data. Proceedings of ACM/Usenix IMC 2004 (2004).

[7] Lakhina, A., Crovella, M., and Diot, C. Diagnosing

Network-wide Traﬃc anomalies. In In Proceedings of ACM
SIGCOMM (2004).

[8] Medina, A., Salamatian, K., Taft, N., Matta, I., , and Diot, C.
A Two Step Statistical Approach for Inferring Network Traﬃc
Demands. Tech. Rep. 2004-011, Boston University, Computer
Science Department, March 2004.

[9] Medina, A., Taft, N., Salamatian, K., Bhattacharyya, S., and
Diot, C. Traﬃc Matrix estimation: existing techniques and new
directions. In Proceedings of ACM Sigcomm 2002 (New York,
NY, USA, 2002).

[10] Nucci, A., Sridharan, A., and Taft, N. The problem of

synthetically generating IP Traﬃc Matrices: initial
recommendations. ACM Computer Communication Review
35, 3 (2005), 19–32.

[11] Roughan, M. Simplifying the synthesis of Internet Traﬃc

Matrices. SIGCOMM Comput. Commun. Rev. 35, 5 (2005),
93–96.

[12] Soule, A., Lakhina, A., Taft, N., Papagiannaki, K.,

Salamatian, K., Nucci, A., Crovella, M., and Diot, C. Traﬃc
Matrices: Balancing Measurements, Inference and Modeling. In
Proceedings of the ACM SIGMETRICS (2005).

[13] Soule, A., Nucci, A., Cruz, R., Leonardi, E., and Taft, N.

How to identify and estimate the largest Traﬃc Matrix
elements in a dynamic environment. Proceedings of ACM
SIGMETRICS (2004).

[14] Uhlig, S., Quoitin, B., Lepropre, J., and Balon, S. Providing
public intradomain traﬃc matrices to the research community.
SIGCOMM Comput. Commun. Rev. 36, 1 (2006), 83–86.

[15] Zhang, Y., Roughan, M., Duffield, N., and Greenberg, A. Fast

accurate computation of large-scale IP Traﬃc Matrices from
Link Loads. In Proceedings of the 2003 ACM SIGMETRICS
(New York, NY, USA, 2003), ACM Press, pp. 206–217.
[16] Zhang, Y., Roughan, M., Lund, C., and Donoho, D. L.

Estimating point-to-point and point-to-multipoint Traﬃc
Matrices: an Information-theoretic Approach. IEEE/ACM
Trans. Netw. 13, 5 (2005), 947–960.

