Automatic Query Recommendation using

Click-Through Data

Georges Dupret1 and Marcelo Mendoza2

1 Yahoo! Research Latin America

Blanco Encalada 2120, Santiago, Chile

gdupret@yahoo-inc.com

2 Department of Computer Science, Universidad de Valpara(cid:19)(cid:16)so,

Gran Breta~na 1091, Playa Ancha, Valpara(cid:19)(cid:16)so, Chile

marcelo.mendoza@uv.cl

Abstract. We present a method to help a user rede(cid:12)ne a query sug-
gesting a list of similar queries. The method proposed is based on click-
through data were sets of similar queries could be identi(cid:12)ed. Scienti(cid:12)c
literature shows that similar queries are useful for the identi(cid:12)cation of
di(cid:11)erent information needs behind a query. Unlike most previous work,
in this paper we are focused on the discovery of better queries rather
than related queries. We will show with experiments over real data that
the identi(cid:12)cation of better queries is useful for query disambiguation
and query specialization.

1 Introduction

Besides the practical di(cid:14)culties inherent to the manipulation of a large number
of pages, the di(cid:14)culty of ranking documents based on generally very short
queries and the fact that query needs are often imprecisely formulated, users
are also constrained by the query interface, and often have di(cid:14)culty articulating
a query that could lead to satisfactory results. It happens also that they do not
exactly know what they are searching for and select query terms in a trial and
error process.

Better formulation of vague queries are likely to appear in the query logs
because experienced users tend to avoid vague formulation and issue queries
speci(cid:12)c enough to discard irrelevant documents. Di(cid:11)erent studies sustain this
claim: [7] report that an independent survey of 40,000 web users found that
after a failed search, 76% of users try rephrasing their query on the same search
engine. Besides, the queries can be identical or articulated di(cid:11)erently with di(cid:11)er-
ent terms but they represent the same information needs as found and reported
in [6, 9].

We propose in this work a simple and novel query recommendation algo-
rithm. While most methods recommend queries related to the original query,
this method aims at improving it.

2

G. Dupret and M. Mendoza

1.1 Related Work

A well known query reformulation strategy is relevance feedback [1]. The main
idea is to present to a user a list of documents related to an initial query. Af-
ter examining them, the user selects those which are relevant. Using important
terms attached to the selected documents, it is possible to reformulate the orig-
inal query adding terms to it and reweighting the query representation in the
document vector model. Recent work also incorporate logs as a useful source
data for this strategy [2]. For example, in [5], large query logs are used to
construct a surrogate for each document consisting of the queries that were
a close match to that document. It is found that the queries that match a
document are a fair description of its content. They also investigate whether
query associations can play a role in query expansion. In this sense, in [8], a
somewhat similar approach of summarizing document with queries is proposed:
Query association is based on the notion that a query that is highly similar to
a document is a good descriptor of that document. One of the main di(cid:11)erences
of relevance feedback strategies with our approach is that relevance feedback is
focused on the improvement of the quality of the documents retrieved. We pro-
pose a more (cid:13)exible strategy, focused on the identi(cid:12)cation of alternate queries
allowing the specialization or generalization of the original query. Finally, we
are interested in the identi(cid:12)cation of better queries more than related queries.
The literature also shows related work based on clustering techniques. For
example, Wen et al. [10] suggest a method for recommend queries using cluster-
ing techniques over data generated from query logs. Given a particular query,
it utilizes the previous session logs of the same query to return pages that most
users visit. To get a statistically signi(cid:12)cant result, it is only applied on a small
set of popular queries. Because the engine is a commercial one, more details
on the method are uneasy to obtain. On the other hand, Baeza-Yates et al. [4]
recommend queries building a term-weight vector for each query. Each term is
weighted according to the number of document occurrences and the number of
selection of the documents in which the term appears. Then they use clustering
techniques to identify related queries. Unfortunately, the method is limited to
queries that appears in the log and is biased by the search engine.

Finally, some interesting applications such as Electronic Roads [3] use con-
cepts related to query specialization in order to o(cid:11)er to the user better navi-
gation choices. Considering user pro(cid:12)le information and meta-data, the appli-
cation creates dynamic links in each new navigation step to new information
units. One of the main di(cid:11)erences between Electronic Roads and our approach
is that the creation of the meta-data is performed by experts, so the proposed
method is semi-automatic. Also the system needs a user pro(cid:12)le to improve their
recommendations. Is our aim to propose an automatic query recommendation
method based only in the information registered in the logs, without the user
cooperation.

Automatic Query Recommendation

3

1.2 Contribution

The simple method we propose here aims at discovering alternate queries that
improve the search engine ranking of documents: We order the documents se-
lected during past sessions of a query according to the ranking of other past
queries. If the resulting ranking is better than the original one, we recommend
the associated query.

1.3 Outline

The remainder of this paper is organized as follows. In Sect. 2 we present our
query recommendation method. We apply this method in Sect. 3 on the query
logs of TodoCL, an important Chilean search engine. Finally we conclude in
Sect. 4.

2 Query Recommendation Framework

2.1 Preliminaries

First, we need to introduce some de(cid:12)nitions. We understand by keyword any
unbroken string that describes the query or document content. A query is a
set of one or more keywords that represent an information need formulated
to the search engine. The same query may be submitted several times. Each
submission induces a di(cid:11)erent query instance. A query session consists of
one query and the URLs the user clicked on, while a click is a Web page
selection belonging to a query session. We also de(cid:12)ne a notion of consistency
between a query and a document:

De(cid:12)nition 1 (Consistency). A document is consistent with a query if it
has been selected a signi(cid:12)cant number of times during the sessions of the query.

Consistency ensures that a query and a document bear a natural relation in
the opinion of users and discards documents that have been selected by mistake
once or a few time. Similarly, we say that a query and a set of documents are
consistent if each document in the set is consistent with the query.

2.2 Query Recommendation method

Many identical queries can represent di(cid:11)erent user information needs. Depend-
ing on the topic the user has in mind, he will tend to select a particular sub-
group of documents. Consequently, the set of selections in a session re(cid:13)ects a
sub-topic of the original query. We might attempt to assess the existing corre-
lations between the documents selected during sessions of a same query, create
clusters and identify queries relevant to each cluster, but we prefer a simpler,
more direct method where clustering is done at the level of query sessions.

4

G. Dupret and M. Mendoza

Let D(sq) be the set of documents selected during a session sq of a query
q. If we make the assumption that D(sq) represents the information need be-
hind q, we might wonder if other queries are consistent with D(sq) and better
rank the documents of D(sq). If these queries exist, they are potential query
recommendations. We then repeat the procedure for each session of the original
query, select the potentially recommendable queries that appear in a signi(cid:12)cant
number of sessions and propose them as recommendations to the user interested
in q.

We need to introduce a criteria in order to compare the ranking of a set of
documents for two di(cid:11)erent queries. Firstly, we de(cid:12)ne the rank of a document
in a query as follows:

De(cid:12)nition 2 (Rank of a Documents). The rank of document u in query q,
denoted r(u; q), is the position of document u in the answer list returned by the
search engine.

We extend this de(cid:12)nition to sets of documents:

De(cid:12)nition 3 (Rank of a Set of Documents). The rank of a set U of doc-
uments in a query q is de(cid:12)ned as:

r(U; q) = max
u2U

r(u; q) :

In other words, the document with the worst ranking determines the rank
of the set. Intuitively, if a set of documents achieves a better rank in a query
qa than in a query qb, then we say that qa ranks the documents better than qb.
We formalize this as follows:

De(cid:12)nition 4 (Ranking Comparison). A query qa ranks better a set U of
documents than a query qb if:

r(U; qa) < r(U; qb) :

This criteria is illustrated in Fig. 1 for a session containing two documents.
Now, it is possible to recommend queries comparing their rank sets. We can

formalize the method as follows:

De(cid:12)nition 5 (Recommendation). A query qa is a recommendation for a
query qb if a signi(cid:12)cant number of sessions of qa are consistent with qb and are
ranked better by qa than by qb.

The recommendation algorithm induces a directed graph between queries.
The original query is the root of a tree with the recommendations as leaves.
Each branch of the tree represents a di(cid:11)erent specialization or sub-topic of the
original query. The depth between a root and its leaves is always one, because we
require the recommendations to improve the associated document set ranking.
Finally, we observe that nothing prevents two queries from recommending

each other:

Automatic Query Recommendation

5

q
1

q

2

U
1

U
2

U
3

U
4

U
5

U
6

1

2

3

4

5

6

Fig. 1. Comparison of the ranking of two queries. A session of the original query q1
contains selections of documents U3 and U6 appearing at position 3 and 6 respectively.
The rank of this set of document is 6 by virtue of Def. 3. By contrast, query q2
achieves rank 4 for the same set of documents and therefore quali(cid:12)es as a candidate
recommendation.

De(cid:12)nition 6 (Quasi-synonyms). Two queries are quasi-synonyms when they
recommend each other.

We will see in the following section that this de(cid:12)nition leads to queries that

are indeed semantically very close.

3 Experimental Results

In this section we present the evaluation of the method introducing a brief
descriptive analysis of the results and showing a user evaluation experiment.
Firstly we will describe the data used for the experiments.

3.1 Data

The algorithm implied by Def. 5 was easy to implement using log data orga-
nized in a relational database. We used the logs of the TodoCL search engine
(www.todocl.cl) for a period of three months. TodoCL is a search engine that
mainly covers the .cl domain (Chilean web pages) and some pages included in
the .net domain that are related with Chilean ISP providers. It indexed over
3,100,000 Web pages and has currently over 50,000 requests per day.

Over three months the logs gathered 20,563,567 requests, most of them
with no selections: Meta search engines issue queries and re-use the answer of
TodoCL but do not return information on user selections. A total of 213,540
distinct queries lead to 892,425 registered selections corresponding to 387,427
di(cid:11)erent URLs. There are 390,932 query sessions. Thus, in average users clicked
2,28 pages per query session and 4,17 pages per query.

3.2 Descriptive Analysis of the Results

We intend to illustrate with two examples that the recommendation method
has the ability to identify sub-topics and suggest query re(cid:12)nement. Fig. 2 shows

(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
6

G. Dupret and M. Mendoza

the recommendation graphs for the queries Valparaiso and Fiat. The query
Valparaiso requires some contextual explanation. Valparaiso is an important
harbor city, with various universities. It is also the home for the Mercurio, the
most important Chilean newspaper. It also recommends some queries that are
typical of any city of some importance like city hall, municipality and so on.
The more potentially bene(cid:12)cial recommendations have a higher link number.
For example 9=33 ’ 27% of the users would have had access to a better ranking
of the documents they selected if they had searched for university instead of
Valparaiso. This also implicitly suggests to the user the query university
Valparaiso, although we are maybe presuming the user intentions. A more
complex recommendation graph is associated to the query Fiat. The user who
issued the query Fiat is recommended essentially to specify the car model he is
interested in, if he wants spare parts, or if he is interesting in selling or buying
a (cid:12)at. Note that such a graph also suggests to a user interested in { say { the
history or the pro(cid:12)tability of the company to issue a query more speci(cid:12)c to his
needs.

We already observed that two queries can recommend each other. We show
in Table 1 a list of such query pairs found in the logs. We reported also the
number of original query sessions and number of sessions enhanced by the rec-
ommendation so as to have an appreciation of the statistical signi(cid:12)cance of the
links. We excluded the mutual recommendation pairs with less than 2 links.
For example, in the (cid:12)rst row, out of the 13 sessions for ads, 3 would have been
better satis(cid:12)ed by advert, while 10 of the 20 sessions for advert would have
been better satis(cid:12)ed by ads.

 

! query
3/13 ads
3/105 cars
34/284 chat

query
advert
used cars
sports
advertisement

10/20
2/241
2/13
2/21 classi(cid:12)ed ads
2/20
4/12 code of penal proceedings code of penal procedure 2/9
2/5
3/10 courses of english
english courses
2/27 dvd
2/5
musical dvd
2/16
2/5
genealogy
2/11
3/9 hotels in santiago
hotels santiago
mail company of Chile
5/67 mail in Chile
2/3
7/15 penal code
code of penal procedure 2/9
2/14
houses to rent
8/43 rent houses
2/58 van
light truck
3/25

family name

Table 1. Examples of \Quasi-synonym" queries recommend each other.

We can see that the proposed method generates a clustering a posteriori
where di(cid:11)erent sessions consisting of sometimes completely di(cid:11)erent sets of

valparaiso

33

www.valparaiso.cl

(cid:12)at
32

9

(cid:12)at 600

9

9

8

7

7

2

harbour of valparaiso

university

electromecanics in valparaiso

municipality valparaiso

9

el mercurio

20

mercurio valparaiso

11

Automatic Query Recommendation

7

(cid:12)at uno

9

7

3

7

7

9

11

7

9

7

14

2

2

2

6

6

6

4

2

8

4

8

auto nissan centra

automobiles (cid:12)at

tire (cid:12)at 600

(cid:12)at 147

second hand (cid:12)at

(cid:12)at bravo

spare pieces (cid:12)at 600

(cid:12)at sale

9

(cid:12)at palio

Fig. 2. Queries Valparaiso, Fiat and associated recommendations. The node number
indicate the number of query session. The edge numbers count the sessions improved
by the pointed query.

documents end up recommending a same query. This query can then label this
group of session.

3.3 User Evaluation

We will analyze user evaluations of the quality of query recommendations. We
presented to a group of 19 persons of di(cid:11)erent backgrounds ten recommendation
trees similar to Fig. 2, selected randomly from all the trees we extracted from
the logs. Obviously we discarded queries with a small number of sessions and
queries with a too large number of recommendations. We asked two questions
to the participants:

1. What percentage of recommendations are relevant to the original query?

8

G. Dupret and M. Mendoza

0
6

0
4

0
2

0

0
3

0
1

0

0

20

40

60

80

100

0

20

40

60

80

100

Fig. 3. The (cid:12)gure on the left is related to the (cid:12)rst question raised to the participants.
It reports on abscissa the percentage of relevant recommendations and in ordinate the
number of participant votes. On the right (cid:12)gure, we plotted the results for improved
recommendations corresponding to the second question.

2. According to our intuition, what is the percentage of recommendations that

will improve a typical user query?

In (cid:12)gure 3 we show the distribution of the opinions for the both questions.
We used two factors analysis of variance with no interaction to test whether
there is a large variation between participants opinions and between queries.
For the (cid:12)rst question concerning the relevance of the recommendations, the
p (cid:0) values of the variation induced by the participants is 0.5671 and by the
queries is 0.1504, leading to accepting the hypothesis H0 that none of these
variations is statistically signi(cid:12)cative. The same conclusion holds for question
2 about whether the recommendations might improve the original query. The
p (cid:0) values in this case are 0.9991 and 0.2130. This shows that no participant
was over or under estimating the relevance and the improvement percentages
systematically, and that no query is particulary worse or better than the other.
The recommendations along with the mean of participants answer can be
found in Table 2. Some queries and recommendations in this table are speci(cid:12)c to
Chile: \El Mercurio" is an important national newspaper, \Colmena" is a pri-
vate health insurance company but the term \colmena" in Spanish also means
beehive. It seems that people searching for honey producers where fooled by a
link to the \Colmena" health insurance company. Some sessions of the query for
\health insurance company" contained links to \Colmena" that appear high in
the ranking for \honey bees". This problem should disappear if we (cid:12)x a higher
consistency threshold 1, which would be possible with larger logs. Folklore and
Biology are important activities in the \University of Chile" that users might
look for. \Wei" is a computer store.

Automatic Query Recommendation

9

Query

Relevance

Improvement

Recommended queries

people (cid:12)nders

52%

45%

dictionary

41%

34%

English dictionary

El Mercurio

62%

52%

El Mercurio of December

used trucks

70%

53%

naval battle of Iquique

78%

76%

computers

74%

61%

health insurance

58%

55%

companies

map of Santiago

81%

68%

Universidad de Chile

41%

25%

wedding dresses

61%

55%

Chilean (cid:12)nder

Argentinian (cid:12)nder

OLE search

Finder of Chilean people

cars o(cid:11)ers

used cars sales

used trucks rentals
trucks spare parts

Arturo Prat biography
J. Prieto government

treaty of Ancon

Chilean navy

sky Chile

Wei

motherboards

notebook

dictionary for technology

look up words in a dictionary

tutorials

currency converter

El Mercurio de Valparaiso
El Mercurio de Antofagasta

Banmedica

Colmena
honey bees

map of Chile
Santiago city

contralory of health services

city map of Santiago
street map of Santiago
Universidad Catolica

university

folklore
biology

dress rentals

wedding dress rentals

party dresses
bachelor party

Table 2. Queries used for the experiments and recommendations with strong levels
of consistency. Average relevance value is shown in column 2. Average improvement
value is shown in column 3. Wrong recommendations are in cursive fonts. Trademarks
are in bold fonts.

10

G. Dupret and M. Mendoza

4 Conclusion

We have proposed a method for query recommendation based on user logs that
is simple to implement and has low computational cost. The recommendation
method we propose are made only if users are expected to improve. Moreover,
the algorithm does not rely on the particular terms appearing in the query
and documents, making it robust to alternative formulations of an identical
information need. Our experiments show that query graphs induced by our
method identify information needs and relate queries without common terms.

Marcelo Mendoza was supported by CONICYT Chile, project FONDECYT
1061201.

Acknowledgements

References

1. J.J. Rochio (1971) Relevance feedback in information retrieval. The SMART
Retrieval System - Experiments in Automatic Document Processing, Prentice
Hall Inc.

2. Ian Ruthven and Mounia Lalmas and C. J. van Rijsbergen (2003) Incorporating

user search behavior into relevance feedback. JASIST 54(6):529-549.

3. Georgios Fakas and Antonis C. Kakas and Christos Schizas (2004) Electronic
Roads: Intelligent Navigation Through Multi-Contextual Information. Knowl-
edge Information Systems 6(1):103-124, Springer.

4. Baeza-Yates, R. and Hurtado, C. and Mendoza, M. (2004) Query Recommenda-
tion Using Query Logs in Search Engines. Current Trends in Database Technology
- EDBT 2004 Workshops, LNCS 3268:588-596, Heraklion, Greece.

5. Bodo Billerbeck and Falk Scholer and Hugh E. Williams and Justin Zobel (2003).
Query expansion using associated queries. CIKM 03, 2-9, ACM Press, New Or-
leans, LA, USA.

6. Jansen, M. and Spink, A. and Bateman, J. and Saracevic, T. (1998). Real life
information retrieval: a study of user queries on the web. ACM SIGIR Forum,
32(1):5-17.

7. NPD (2000). Search and Portal Site Survey, Published by NPD New Media Ser-

vices.

8. Falk Scholer and Hugh E. Williams (2002). Query association for e(cid:11)ective re-

trieval. CIKM 02, 324-331, ACM Press, McLean, Virginia, USA.

9. Silverstein, C. and Henzinger, M. and Hannes, M. and Moricz, M. (1999). Analysis

of a Very Large Alta Vista Query Log. SIGIR Forum 33(3):6-12, ACM Press.

10. Wen, J. and Nie, J. and Zhang, H. (2001). Clustering User Queries of a Search

Engine. Proc. of the 10th WWW Conference, Hong Kong.

