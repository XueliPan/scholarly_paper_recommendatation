Content-based Recommendation in Social Tagging Systems 

Iván Cantador, Alejandro Bellogín, David Vallet 

Departamento de Ingeniería Informática 

Universidad Autónoma de Madrid 

Campus de Cantoblanco 

28049, Madrid, Spain 

{ivan.cantador, alejandro.bellogin, david.vallet}@uam.es  

 

 
ABSTRACT 
We  present  and  evaluate  various  content-based  recommendation 
models that make use of user and item profiles defined in terms of 
weighted  lists  of  social  tags.  The  studied  approaches  are 
adaptations  of  the  Vector  Space  and  Okapi  BM25  information 
retrieval  models.  We  empirically  compare  the  recommenders 
using  two  datasets  obtained  from  Delicious  and  Last.fm  social 
systems, in order to analyse the performance of the approaches in 
scenarios with different domains and tagging behaviours. 

Categories and Subject Descriptors 
H.3.3 [Information Storage and Retrieval]: Information Search 
and Retrieval – information filtering, retrieval models. 

General Terms 
Algorithms, Experimentation, Performance. 

Keywords 
Recommender systems, personalization, social tagging, folksonomy. 

1.  INTRODUCTION 
In  recent  years,  we  have  witnessed  an  unexpected  success  and 
increasing proliferation of social tagging systems. In these systems, 
users  create  or  upload  content  (items),  annotate  it  with  freely 
chosen words (tags), and share it with other users. The whole set of 
tags constitutes an unstructured collaborative classification scheme 
that is commonly known as folksonomy. This implicit classification 
is then used to search for and discover items of interest. 
In such systems, users and items can be assigned profiles defined 
in terms of weighted lists of social tags. In general, users annotate 
items  that  are  relevant  for  them,  so  the  tags  they  provide  can  be 
assumed to describe their interests, tastes and needs. Moreover, it 
can be also assumed that the more a tag is used by a certain user, 
the more important that tag is for her. Analogously, tags assigned 
to items usually describe their contents. The more users annotate a 
certain item with a particular tag, the better that tag describes the 
item  contents.  The  previous  assumptions,  however,  have  to  be 
carefully  taken  into  account.  Tags  used  very  often  by  users  to 
annotate many items may not be useful to discern informative user 
preferences and items features [8]. We address this issue herein. 
Adomavicius  and  Tuzhilin  [1]  formulate  the  recommendation 

Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
RecSys’10, September 26–30, 2010, Barcelona, Spain. 
Copyright 2010 ACM  978-1-60558-906-0/10/09...$10.00. 

(cid:1)

(cid:1)

(cid:3)

…

…

problem as follows. Let U
I
totally  ordered  set,  be  a  utility  function  such  that 
measures the gain of usefulness of item 
 to user 
each  user  U,  we  want  to  choose  items  (cid:4)(cid:6)(cid:7),(cid:9)
to the user, which maximise the utility function 
: 

 be a set of users, and let 
  be  a  set  of  items.  Let  U I R,  where  R  is  a 
 
. Then, for 
(cid:4)
I,  unknown 

(cid:4) (cid:5)

(cid:2)

(cid:5)

U

(cid:4)(cid:6)(cid:7),(cid:10)

 

(cid:11)∈I

(

(cid:4)

In content-based recommendation approaches, 
 is formulated as: 
(cid:13)(cid:14)(cid:15)(cid:4), (cid:16)(cid:5)(cid:17) = (cid:19)(cid:16)(cid:20)(cid:14)(cid:21)(cid:22)(cid:23)(cid:24)(cid:25)(cid:23)(cid:24)(cid:26)(cid:27)(cid:19)(cid:25)(cid:28)(cid:29)(cid:19)(cid:25)(cid:30)(cid:31)(cid:30)(cid:22) (cid:16)!(cid:25)(cid:14)(cid:15)(cid:4)(cid:17), (cid:21)(cid:22)(cid:23)(cid:24)(cid:25)(cid:23)(cid:24)(cid:14)(cid:16)(cid:5)(cid:17)(cid:17) ∈ R 
where  (cid:21)(cid:22)(cid:23)(cid:24)(cid:25)(cid:23)(cid:24)(cid:26)(cid:27)(cid:19)(cid:25)(cid:28)(cid:29)(cid:19)(cid:25)(cid:30)(cid:31)(cid:30)(cid:22) (cid:16)!(cid:25)(cid:14)(cid:15)(cid:4)(cid:17) = "# = (cid:14)(cid:15)#,(cid:1),…,(cid:15)#.%(cid:17) ∈
ℝ'  is  the  content-based  preferences  of  user 
,  i.e.,  the  item 
content features that describe the interests, tastes and needs of the 
user,  and  (cid:21)(cid:22)(cid:23)(cid:24)(cid:25)(cid:23)(cid:24)(cid:14)(cid:16)((cid:17) = )( = (cid:14)(cid:16)(,(cid:1),…,(cid:16)(.%(cid:17) ∈ ℝ'  is  the  set  of 
content  features  characterising  item 
.  These  descriptions  are 
usually represented as vectors of real numbers (weights) in which 
each component measures the “importance” of the corresponding 
feature  in  the  user  and  item  representations.  The  function  sim 
computes the similarity between a user profile and an item profile 
in the content feature space. 
From the previous formulations, in this paper, we consider social 
tags  as  the  content  features  that  describe  both  user  and  item 
profiles,  and  we  investigate  two  issues.  First,  we  study  several 
weighting schemes to measure the “importance” of a given tag for 
each  user  and  item.  Some  of  these  weighting  schemes  are  based 
on  single  profiles,  while  others  make  use  of 
the  whole 
folksonomy. Second, for each tag weighting scheme, we propose 
and  evaluate  a  number  of  similarity  functions.  The  studied 
approaches  are  adaptations  of  the  well  known  Vector  Space  and 
Okapi  BM25  information  retrieval  models  [2].  By  using  two 
datasets  obtained  from  Delicious  and  Last.fm  social  systems,  we 
analyse  the  performance  of  the  approaches  in  scenarios  with 
different domains and tagging behaviours. 
The  rest  of  the  paper  has  the  following  structure.  Section  2 
introduces definitions and notation used in the studied profile and 
recommendation  approaches.  Sections  3  and  4  present  such 
approaches.  Section  5  describes  the  datasets  utilised  to  evaluate 
the  recommendation  models,  while  Section  6  explains  the 
conducted  experiments  and  obtained  results.  Finally,  Section  7 
ends with some conclusions and future research lines. 

2.  PRELIMINARIES 
A  folksonomy  F  can  be  defined  as  a  tuple  F
where  T
vocabulary  expressed  by  the  folksonomy,  U
I
that  annotate  and  are  annotated  with  the  tags  of  T,  and  A

T U I A , 
  is  the  set  of  tags  that  comprise  the 
  and 
 are respectively the set of users and the set of items 

+

,

(cid:1)

(cid:1)

(cid:1)

*

U T I is the set of assignments (annotations) 

# - (
of each tag 

-

 to an item 

 by a user 

(

. 

#

237#

Based  on  this  notation,  the  simplest  way  to  define  the  profile  of 
user 

  is  as  a  vector 

,  where 

#

#,(cid:1)

#,*

#,-

.

-

-

(

(

. 

(cid:4),

(,-

(,*

(,(cid:1)

- (

, where 

. Similarly, the profile of item 

A I   is  the  number  of  times  the  user  has 
 can be 

U   is  the  number  of  times  the  item  has  been  annotated 

annotated items with tag 
defined as a vector 
A
with tag 
In this work, we extend the previous definitions of user and item 
profiles  by  using  different  expressions  for  the  vector  component 
weights. These expressions are explained in Section 4. 
The  proposed  user  and  item  profiles  are  then  exploited  by  a 
number of different content-based recommendation models. These 
recommenders  are  adaptations  of  the  well  known  Vector  Space 
and Okapi BM25 ranking models [2], and are described in detail 
in Section 3. 
For a better understanding of both user/item profiles and content-
based  recommenders,  Table  1  gathers  the  definition  of  common 
elements appearing in the profile and recommendation models. 

Table  1.  Definition  of  elements  used  in  the  proposed  profile 
and recommendation models. 

Element 

Definition 

(cid:24) (cid:10)/(cid:14)(cid:24)-(cid:17) 

User-based                   
tag frequency 

Number of times user (cid:15)#
items with tag (cid:24)-

 

 has annotated 

Item-based                  

tag frequency 

Number of times item (cid:16)(
with tag (cid:24)-

 

(cid:24) (cid:11)0(cid:14)(cid:24)-(cid:17) 

 has been annotated 

User-based inverse          

tag frequency 

Item-based inverse          

tag frequency 

User profile size 

Item profile size 

(cid:16)(cid:15) (cid:14)(cid:24)-(cid:17) = log

(cid:23)(cid:10)(cid:14)(cid:24)-(cid:17) = 56(cid:15)# ∈ U|(cid:15)#,- > 0:5 

(cid:16)(cid:16) (cid:14)(cid:24)-(cid:17) = log

 (cid:23)(cid:11)(cid:14)(cid:24)-(cid:17) = 56(cid:16)( ∈ I|(cid:16)(,- > 0:5 

4

(cid:23)(cid:10)(cid:14)(cid:24)-(cid:17)

;

(cid:23)(cid:11)(cid:14)(cid:24)-(cid:17)

, 

, 

*

->(cid:1)
*

->(cid:1)

 

 

|(cid:15)#| = = (cid:15)#,-

|(cid:16)(| = = (cid:16)(,-

3.  USER AND ITEM PROFILES 
In  this  section,  we  present  different  schemes  to  weight  the 
components  of  tag-based  user  and  items  profiles.  Some  of  them 
are based on the information available in individual profiles, while 
others consider information from the whole folksonomy. 

3.1  TF Profile Model 
The simplest approach for assigning a weight to a particular tag in 
a user or item profile is by counting the number of times such tag 
has been used by the user or the number of times the tag has been 
used by the community to annotate the item. Thus, our first profile 
, 
model  for  user 
where 

  consists  of  a  vector 

#,(cid:1)

#,*

#

#

Similarly,  the  profile  of  item 

(,(cid:1)

(,*

, where 

#,-

(cid:10)/ -
  is  defined  as  a  vector 

(

(

 

 

(,-

(cid:11)0

-

3.2  TF-IDF Profile Model 
In  an  information  retrieval  environment,  common  keywords  that 
appear in many documents of a collection are not informative, and 
may  not  allow  distinguishing  relevant  documents  for  a  given 
query.  To  take  this  into  account,  TF-IDF  weighting  scheme  is 
usually applied to the document profiles [2]. 
We  adopt  that  principle,  and  adapt  it  to  social  tagging  systems, 
proposing a second profile model, defined as: 

(cid:20),!

(cid:23),!

(cid:10)/ -

(cid:10)/ -

(cid:11)0

-

(cid:11)0

-

, 

-
. 

-

3.3  BM25 Profile Model 
As  an  alternative  to  TF-IDF,  Okapi  BM25  weighting  scheme 
follows  a  probabilistic  approach  [2]  to  assign  a  document  with  a 
ranking score given a query. 
We  propose  an  adaptation  of  such  model  by  assigning  each  tag 
with  a  score  (weight)  given  a  certain  user  or  item.  Our  third 
profile model has the following expressions: 

 

J

 

#,-

(cid:10)/ -

(cid:10)/,?∙(cid:14)'AB(cid:1)(cid:17)
|(cid:10)/|

(cid:10)/,?B 'AC(cid:1)DEBE∙

I

FGH(cid:14)|(cid:10)/|(cid:17)

, 

-

(,-

(cid:11)0

-

(cid:11)0,?∙(cid:14)'AB(cid:1)(cid:17)
|(cid:11)0|

(cid:11)0,-B 'AC(cid:1)DEBE∙

I

FGH(cid:14)|(cid:11)0|(cid:17)

J

 , 

-

where   and 
respectively. 

(cid:1)

  are  set  to  the  standard  values  of  0.75  and  2, 

4.  CONTENT-BASED RECOMMENDERS 
In 
this  section,  we  describe  a  number  of  content-based 
recommendation  models  that  are  defined  as  similarity  measures 
between  user  and  item  profiles  introduced  in  Section  3.  Two  of 
these  models  are  state  of  the  art  approaches  [5][8],  and  others 
were  investigated  by  the  authors  in  the  context  of  personalised 
Web search [7]. 

4.1  TF-based Similarity 
To compute the preference of a user for an item, Noll and Meinel 
[5] propose a personalised similarity measure based on the user’s 
tag frequencies: 

               

# (

(cid:10) # (

∑

O:Q0,?RS

LMN/(cid:14)L?(cid:17)

 

(cid:4)(cid:6)(cid:7)N∈U,T∈T ULMN(cid:14)L(cid:17)V

The model utilises the user’s usage of tags appearing in the item 
profile,  but  does  not  take  into  account  their  weights  in  such 
profile.  In  the  formula,  we  introduce  a  normalisation  factor  that 
scales  the  utility  function  to  values  in  the  range  [0,1],  without 
altering the user’s item ranking. 
To  measure  the  impact  of  personalisation  in  Noll  and  Meinel’s 
approach,  we  propose  a  similarity  measure  based  on  the  tag 
frequencies in the item profiles: 

                

# (

(cid:11) # (

∑

O:N/,?RS

LMQ0(cid:14)L?(cid:17)
(cid:4)(cid:6)(cid:7)Q∈I,T∈T ULMQ(cid:14)L(cid:17)V

  

4.2  TF Cosine-based Similarity 
A direct extension of Noll and Meines’s approach is to exploit the 
weights  of  both  user  and  item  profiles  by  computing  the  cosine 
between their vectors as similarity measure: 

238# (

LM # (

.

(cid:10)/ -

(cid:11)0

-

W

 

W

.

(cid:10)/ -

.

(cid:11)0

-

4.3  TF-IDF Cosine-based Similarity 
Xu  et  al.  [8]  use  the  cosine  similarity  measure  to  compute  the 
similarity  between  user  and  item  profiles.  As  profile  component 
weighting  scheme,  they  use  TF-IDF1.  Following  our  notation, 
their approach can be defined as follows: 

# (

LM-(cid:11)YM # (

.

(cid:10)/ -

(cid:11)0

-

-

-

W

 

W

.

(cid:10)/ -

-

.

(cid:11)0

-

-

4.4  BM25-based Similarity 
Analogously to the similarity based on  tag frequencies described 
in Section 4.1, but using a BM25 weighting scheme, we propose a 
couple  of  similarity  functions  that  only  take  into  account  the 
weights  of  either  the  user  profile  or  the  item  profile.  These  two 
recommendation models are: 

 

 

# (

# (

(cid:10) # (

U-|(cid:11)0,?Z[V

(cid:10)/ -

(cid:11) # (

U-|(cid:10)/,?Z[V

(cid:11)0

-

   

 

4.5  BM25 Cosine-based Similarity 
Xu et al. [8] also investigate the cosine similarity measure with a 
BM25  weighting  scheme.  They  use  that  model  on  personalised 
Web Search. We adapt and define it for social tagging as follows: 

 

 

# (

E#W\ # (

-

(cid:10)/ -

(cid:11)0

-

W

 

W

-

(cid:10)/ -

-

(cid:11)0

-

5.  DATASETS 
In  order  to  evaluate  the  presented  tag-based  recommendation 
models  under  different  domain  and  tagging  conditions,  we  run 
them  using  datasets  obtained  from  two  different  social  systems: 
Delicious and Last.fm. Delicious is a social bookmarking site for 
Web pages. By the end of 2008, the service claimed more than 5.3 
million users and 180 million unique bookmarked URLs. On the 
other  hand,  Last.fm  is  an  on-line  radio  site  for  music.  By  the 
beginning of 2009, it claimed over 40 million active users and 7 
million tracks.  
As  collaborative  social  tagging  platforms,  Delicious  differs  from 
Last.fm  in  the  fact  that  it  contains  tagged  items  (Web  pages) 
belonging  to  practically  any  domain,  while  Last.fm  tagged  items 
(tracks) belong to the music domain. Moreover, the users’ tagging 
behaviour is also different in both systems. As shown in Table 2, 
in Delicious dataset, the average number of tags per user is greater 
than  in  Last.fm  dataset.  However,  taking  into  account  the  tags 
provided  by  the  entire  community  of  users,  a  track  in  Last.fm 
receives  more  tags  than  a  Web  page  in  Delicious.  This  apparent 
contradiction  can  be  explained  through  the  inverse  relation 
between the numbers of users and items registered in such systems. 
                                                                 
1  Xu  et  al.  do  not  specify  if  they  use  user-based  or  item-based 
inverse  tag  frequencies,  or  both.  We  chose  to  use  both,  since 
this configuration gave the best performance values. 

Table 2. Description of the used datasets. 

 

#users 
#items 
#tags 

Avg. #items/user 
Avg. #tags/user 

Avg. #tags/item (per user) 

Avg. #tags/item (in the community) 

Delicious 

Last.fm 

1,000 
84,005 
42,324 
95 
480 
5 
34 

1,000 
50,202 
16,687 
66 
149 
2 
49 

5.1  Delicious Dataset 
We created a dataset formed by 1,000 Delicious users. These users 
were chosen as follows. First, we randomly selected 50 users who 
bookmarked  the  top  Delicious  bookmarks  on  14th  May  2009  and 
had at least 20 bookmarks in their profiles. Then, we extended this 
set of users through their social network in Delicious. A maximum 
distance of 2 user contacts was allowed in such extension. Due to 
limitations  of  Delicious  API,  we  only  extracted  the  latest  100 
bookmarks  of  each  user.  The  final  dataset  contained  84,005 
different  bookmarks  and  42,324  distinct  tags.  On  average,  each 
user profile had 95 bookmarks and 480 distinct tags. 

5.2  Last.fm Dataset 
In the case of Last.fm dataset, we aimed to obtain a representative 
set  of  users,  covering  all  music  genres.  We  first  identified  the 
most popular tags related to the different music genres in Last.fm. 
Then, we used Last.fm API to get the top artists tagged with the 
previous tags. For each artist, we gathered his/her fans along with 
their direct friends. Finally, we retrieved all tags and tagged tracks 
of  the  user  profiles.  The  final  dataset  contained  50,202  different 
tracks and 16,687 distinct tags. On average, each user profile had 
66 tracks and 149 distinct tags. 

6.  EXPERIMENTS 
In  this  section,  we  explain  the  experiment  methodology  we 
followed  to  evaluate  the  described  recommendation  models,  and 
present the obtained results of that evaluation. 

6.1  Methodology 
Figure 1 depicts the followed experimental methodology. 

tagged items

u1
u2

u3

uM

1

. . .
80%

training

. . .
20%

test

3

tag-based user prof iles

u1
u2

u3

uM

iTr

i1
i2

i3

~80%

. . .
~80%

. . .

training

tag-based item prof iles

tag-based item prof iles

i1
i2

i3

~ 20%

. . .

iTe

test

4

5

tag-based 

recommender

2

user-item pair

recommender 
building process

Figure 1. Description of the followed experimental methodology. 

user-item relevance 

prediction

 

239Table  3.  Average  results  obtained  by  the  content-based  recommendation  approaches.  All  result  differences  are  statistically 
significant (Wilcoxon, p<0.05) except those among the results marked with †. 

 
 

 
(cid:24) (cid:10)
 
(cid:24) (cid:11)

 

](cid:22)(cid:19)LM

 

](cid:22)(cid:19)LM-(cid:11)YM
 
^(cid:20)25(cid:10)
 
^(cid:20)25(cid:11)
](cid:22)(cid:19)E#W\

 

 
 
 
 
 

 

 
 
 

P@5 
0.028 
0.001 

0.234 

0.292 

0.226 
0.062 
0.364 

P@10 
0.021 
0.001 

0.109 

0.212 

0.105 
0.047 
0.260 

Delicious 

P@20 
0.014 
0.000 

0.059 

0.144 

0.075 
0.035 
0.172 

MAP 
0.011 
0.001 

0.041 

0.115 

0.051 
0.020 
0.145 

 
 
 
 
 

 

 
 
 

NDCG 
0.085 
0.027 

0.202 

0.350 

0.216 
0.141 
0.390 

P@5 
0.063 
0.040 

0.104 

0.148 

0.098 
0.107 
0.166 

P@10 
0.048 
0.029 

0.076 

0.111 

0.076 
0.077 
0.126 

Last.fm 
P@20 
0.034 
0.020 

0.054 

0.079 

0.058 
0.054 
0.091 

MAP 
0.057 
0.037 

0.084 

0.118 

0.080 
0.088 
0.132 

NDCG 
0.163 
0.120 
0.225† 
0.278 
0.220† 
0.219† 
0.297 

 

We  randomly  split  the  set  of  items  tagged  by  the  users  in  the 
database  in  two  subsets.  The  first  subset  contained  80%  of  the 
items  for  each  user,  and  was  used  to  build  the  recommendation 
models (training). The second subset contained the remaining 20% 
of the items, and was used to evaluate the recommenders (test). 
Specifically,  we  built  the  recommendation  models  with  the  whole 
tag-based  profiles  of the training items,  and  with  those parts  of the 
users’  tag-based  profiles  formed  by  tags  annotating  the  training 
items. We evaluated the recommenders with the tag-based profiles of 
the  test  items.  In  the  evaluation,  we  computed  several  metrics  (see 
Section 6.2), and performed a 5-fold cross validation procedure. 

6.2  Metrics 
We assumed a content retrieval scenario where the system provides 
the user a list of N recommended items based on her content-based 
profile.  To  evaluate  the  performance  of  each  recommender,  we 
took  into  account  the  percentage  and  ranking  of  relevant  items 
appearing  in  the  provided  lists.  For  that  purpose,  we  computed 
three  metrics  often  used  to  evaluate  information  retrieval  systems 
[2]:  Precision  at  the  top  N  ranked  results  (P@N),  Mean  Average 
Precision (MAP), and Discounted Cumulative Gain (DCG). 
Precision is defined as the number of retrieved relevant documents 
divided  by  the  total  number  of  retrieved  documents.  MAP  is  a 
precision  metric  that  emphasises  ranking  relevant  documents 
higher. Finally, DCG measures the usefulness of a document based 
on its position in a result list. In our evaluation framework, retrieved 
documents were all the items belonging to each test set (see Section 
6.1). Thus, the whole test set contained items belonging to the active 
user’s  profile  (relevant  documents),  and  items  from  other  users’ 
profiles (assumed as non relevant documents for the active user). 

6.3  Results 
Table  2  shows  the  results  obtained  in  the  evaluation  of  the 
recommendation  models  using  Delicious  and  Last.fm  datasets.  In 
general, as expected, the models focused on user profiles (tfu, bm25u) 
outperformed the models oriented to item profiles (tfi, bm25i). This is 
not true with BM25 model in Last.fm. We believe this is due to the 
small size of user profiles in that dataset. 
Regarding cosine-based models, by performing a weighting scheme 
that  exploits  the  whole  folksonomy  (costf-idf,  cosbm25),  we  clearly 
enhance  the  classic  frequency  profile  representation  (costf).  Note 
that  even 
  in  Delicious  dataset.  Thus,  it 
seems that those tags appearing in many user and item profiles have 
to  be  penalised,  since  they  are  not  informative  to  discern  relevant 
user  preferences  and  item  characteristics.  In  the  same  context, 
BM25  was  better  than  TF-IDF  weighting  scheme.  This  could  be 
explained by the fact that, in social tagging systems, most popular 

  outperforms 

LM

(cid:10)

tags should be penalised more carefully as they usually describe the 
item contents more precisely (through community consensus). 
Comparing results from Delicious and Last.fm, we obtained higher 
precision values in the former. In Last.fm, users listen to music and 
do not always tag their favourite tracks. In contrast, the main use of 
Delicious is to bookmark and tag Web pages for organisational and 
searching purposes. Thus, user profiles in Delicious are larger than 
in Last.fm, and content-based recommendation performs better. 

7.  CONCLUSIONS 
In  this  paper,  we  have  evaluated  a  number  of  content-based 
recommendation  models  that  make  use  of  user  and  item  profiles 
described  in  terms  of  weighted  lists  of  social  tags.  The  studied 
approaches are adaptations of the Vector Space and Okapi BM25 
ranking  models  [2].  The  presented  work  is  only  the  beginning  of 
our  exploration  of  how  the  above  and  other  information  retrieval 
models could be applied in social recommender systems. We plan 
to  extend  our  analysis  in  two  directions.  First,  we  want  to  study 
alternative 
recommendation  models. 
Specifically, as proposed in [6], we shall investigate the application 
of  tag clustering techniques for user profiling. Second,  we do not 
want  to  restrict  our  research  to  content-based  recommenders.  We 
shall  investigate  adaptations  of  collaborative  filtering  and  hybrid 
recommendation strategies, as done for example in [3][4][9]. 

tag-based  profile  and 

8.  REFERENCES 
[1]  Adomavicius, G., Tuzhilin, A. 2005. Toward the Next Generation of 

Recommender Systems: A Survey and Possible Extensions. IEEE 
Transactions on Knowledge & Data Engineering, 17(6), 734-749. 

[2]  Baeza-Yates, R., Ribeiro-Neto, B. 1999. Modern Information 

Retrieval. Addison Wesley. 

[3]  Hotho, A., Jäschke, R., Schmitz, C., Stumme, G. 2006. Information 
Retrieval in Folksonomies: Search and Ranking. In Proceedings of 
ISWC 2006, 411-426.  

[4]  Niwa, S., Doi, T., Honiden, S. 2006 Web Page Recommender System 

based on Folksonomy Mining for ITNG’06 Submissions. In 
Proceedings of ITNG 2006, 388-393. 

[5]  Noll, M. G., Meinel, C. 2007. Web Search Personalization via Social 
Bookmarking and Tagging. In Proceedings of ISWC 2007, 367-380. 

[6]  Shepitsen, A., Gemmell, J., Mobasher, B., Burke, R. 2008. 

Personalized Recommendation in Social Tagging Systems using 
Hierarchical Clustering. In Proceedings of RecSys 2008, 259-266. 

[7]  Vallet, D., Cantador, I., Jose, J. M. 2010. Personalizing Web Search 

with Folksonomy-Based User and Item Profiles. In Proceedings of 
ECIR 2010, 420-431. 

[8]  Xu, S., Bao, S., Fei, B., Su, Z., Yu, Y. 2008. Exploring Folksonomy 

for Personalized Search. In Proceedings of SIGIR 2008, 155-162. 

[9]  Zanardi, V., Capra, L. 2008. Social Ranking: Uncovering Relevant 
Content using Tag-based Recommender Systems. In Proceedings of 
RecSys 2008, 51-58. 

 

240