JoBS: Joint Buffer Management and Scheduling for

Differentiated Services?

J¨org Liebeherr and Nicolas Christin

Computer Science Department, University of Virginia, Charlottesville, VA 22904, USA

jorg, nicolas

@cs.virginia.edu

f

g

Abstract. A novel algorithm for buffer management and packet scheduling is
presented for providing loss and delay differentiation for trafﬁc classes at a net-
work router. The algorithm, called JoBS (Joint Buffer Management and Schedul-
ing), provides delay and loss differentiation independently at each node, without
assuming admission control or policing. The novel capabilities of the proposed
algorithm are that (1) scheduling and buffer management decisions are performed
in a single step, and (2) both relative and (whenever possible) absolute QoS re-
quirements of classes are supported. Numerical simulation examples, including
results for a heuristic approximation, are presented to illustrate the effectiveness
of the approach and to compare the new algorithm to existing methods for loss
and delay differentiation.

1 Introduction

Quality-of-Service (QoS) guarantees in packet networks are often classiﬁed according
to two criteria. The ﬁrst criterion is whether guarantees are expressed for individual
end-to-end trafﬁc ﬂows (per-ﬂow QoS) or for groups of ﬂows with the same QoS re-
quirements (per-class QoS). The second criterion is whether guarantees are expressed
with reference to guarantees given to other ﬂows/ﬂow classes (relative QoS), or whether
guarantees are expressed as absolute bounds (absolute QoS).

Efforts to provision for QoS in the Internet in the early and mid-1990s, which re-
sulted in the Integrated Services (IntServ) service model [3], focused on per-ﬂow ab-
solute QoS guarantees. However, due to scalability issues and a lagging demand for
per-ﬂow absolute QoS, the interest in Internet QoS eventually shifted to relative per-
class guarantees. Since late 1997, the Differentiated Services (DiffServ) [2] working
group has discussed several proposals for per-class relative QoS guarantees, e.g., [4,
17].

With the exception of the Expedited Forwarding service [11], proposals for relative
per-class QoS discussed within the DiffServ context deﬁne the service differentiation
qualitatively, in the sense that some classes receive lower delays and a lower loss rate

? This work is supported in part by the National Science Foundation through grants NCR-

9624106 (CAREER), ANI-9730103, and ANI-0085955.

c

Springer-Verlag 2001

(cid:13)

2

J¨org Liebeherr and Nicolas Christin

than others, but without quantifying the differentiation. Recently, research studies have
tried to strengthen the guarantees of relative per-class QoS, and have proposed new
buffer management and scheduling algorithms which can support stronger notions of
relative QoS [6, 7, 15, 16]. Probably the best known such effort is the proportional ser-
vice differentiation model [6, 7], which attempts to enforce that the ratios of delays or
loss rates of successive priority classes be roughly constant. For two priority classes
such a service could specify that the delays of packets from the higher-priority class be
half of the delays from the lower-priority class, but without specifying an upper bound
on the delays.

In this paper, we express the provisioning of per-class QoS within a formalism in-
spired by the network calculus [5]. We present a rate allocation and dropping algorithm
for a single output link, called Joint Buffer Management and Scheduling (JoBS), which
is capable of supporting a wide range of relative, as well as absolute, per-class guaran-
tees for loss and delay, without assuming admission control or trafﬁc policing. The al-
gorithm operates as follows. Upon each arrival, a prediction is made on the delays of the
currently backlogged trafﬁc. Then, the service rates allocation to classes are adjusted to
meet delay requirements. If necessary, trafﬁc from certain classes is selectively dropped.
A unique feature of the presented algorithm is that rate allocation for link scheduling
and buffer management are approached together in a single step. The JoBS algorithm
provides delay and loss differentiation independently at each node. End-to-end delays
and end-to-end loss rates are thus dependent on the per-node guarantees of trafﬁc and
on the number of nodes traversed.

This paper is organized as follows. In Section 2 we give an overview of the cur-
rent work on relative per-class QoS guarantees. In Sections 3 and 4, we specify our
algorithm for buffer management and rate allocation. In Section 5 we propose a heuris-
tic approximation of the algorithm. In Section 6 we evaluate the effectiveness of our
algorithm via simulation. In Section 7 we present brief conclusions.

2 Related Work

Due to space considerations, we limit our discussions to the relevant work on scheduling
and buffer management algorithms for relative service differentiation.

Scheduling. The majority of work on per-class relative service differentiation sug-
gests to use well-known ﬁxed-priority, e.g., [17], or rate-based scheduling algorithms,
e.g., [9]. Only a few scheduling algorithms have been speciﬁcally designed for relative
delay differentiation. The Proportional Queue Control Mechanism (PQCM, [15]) and
Backlog-Proportional Rate scheduler (BPR, [6]) are variations of the GPS algorithm
[18]. Both schemes use the backlog of classes to determine the service rate allocation,
and bear similarity to the scheduling component of JoBS, in the sense that they dynam-
ically adjust service rate allocations to meet relative QoS requirements.

Different from the rate-based schedulers discussed above, the Waiting-Time Pri-
ority scheduler (WTP, [7]) implements a well-known scheduling algorithm with time-
dependent priorities ([12], Ch. 3.7). Likewise, the Mean-Delay Proportional scheduler
(MDP, [16]) uses a dynamic priority mechanism, but sets priorities based on the average
experienced delay of packets. Finally, the Hybrid Proportional Delay scheduler (HPD,

To appear in Proceedings of IWQoS 2001

3

[6]) uses a combination of time-dependent priorities and average experienced delay to
set the priority of a given packet.

The Alternative Best-Effort service (ABE, [10]) provides service differentiation for
two trafﬁc classes. The ﬁrst class is provided with absolute delay guarantees, and the
second class has guarantees for a lower loss rate. The delay guarantees for the ﬁrst class
are enforced by dropping all trafﬁc that has exceeded the delay bound.

In contrast to the schedulers presented in this section, the scheduling algorithm pre-
sented in this paper not only considers the current state and past history of the link,
but, in addition, makes predictions on future delays to improve the performance of its
scheduling decisions.
Buffer Management. For a discussion of buffer management algorithms, we refer to
a recent survey article [13]. Many proposals for buffer management in IP networks are
motivated with the need to improve TCP performance (e.g., RED [8], REM [1]). Tech-
niques speciﬁcally targeted for class-based service differentiation include RIO [4] and
multiclass RED [19]. Of these schemes, REM is closest in spirit to the dropping algo-
rithm presented in this paper, since REM treats the problem of marking (or dropping)
arrivals as an optimization problem.

The Proportional Loss Rate (PLR) dropper [7] is speciﬁcally designed to support
proportional differentiated services. PLR enforces that the ratio of the loss rates of two
successive classes remains roughly constant at a given value. There are two variants
of PLR. PLR(
packets for estimating the loss rate of a class,
whereas PLR(

) uses only the last
) has no such memory constraints.

M

M

1

With the possible exception of [10], the work on relative per-class service differ-
entiation generally considers delay and loss differentiation as orthogonal issues, which
are handled by separate algorithms.

3 An Approach to Joint Buffer Management and Scheduling

In this section, we introduce the key concepts of Joint Buffer Management and Schedul-
ing (JoBS). Before we provide a detailed description, we ﬁrst give an informal overview
of the operations.

3.1 Overview

We assume that each output link performs per-class buffering of arriving trafﬁc and that
trafﬁc is transmitted from the buffers using a rate-based scheduling algorithm [21] with
a dynamic, time-dependent service rate allocation for classes. Trafﬁc from the same
class is transmitted in a First-Come-First-Served order. There is no admission control
and no policing of trafﬁc. The set of performance requirements are speciﬁed to the
algorithm as a set of per-class QoS constraints. As an example, for three classes, the
QoS constraints could be of the form:

– Class-1 Delay
– Class-2 Loss Rate
– Class-3 Delay

(cid:25) 2 (cid:1)

(cid:20) 5

ms

.

Class-2 Delay,

(cid:0)

1

Class-3 Loss Rate, or

(cid:25) 10

(cid:1)

4

J¨org Liebeherr and Nicolas Christin

Here, the ﬁrst two constraints are relative constraints and the last one is an absolute con-
straint. The set of constraints can be any mix of relative and absolute constraints. Since
absolute constraints may render a system of constraints infeasible, some constraints
may need to be relaxed. We assume that all QoS constraints are prioritized, so that an
order is provided in which constraints are relaxed in case the system of constraints is
infeasible.

The time-dependent service rate allocation operates as follows. For every arrival, a
prediction is made on the delays of all backlogged trafﬁc. Then, the service rate alloca-
tion to trafﬁc classes is modiﬁed so that all QoS constraints will be met. If no feasible
rate allocation for meeting all constraints exists, trafﬁc is dropped, either from a new
arrival or from the current backlog.

We ﬁnd it convenient to view the service rate allocation in terms of an optimization
problem. The constraints of the optimization problem are relative or absolute bounds
on the loss and delay as given in the example above (QoS constraints) and constraints
on the link and buffer capacity (system constraints). The objective function of the op-
timization primarily aims at minimizing the amount of trafﬁc to be dropped, and, as a
secondary objective, aims at maintaining the current service rate allocation. The ﬁrst
objective prevents trafﬁc from being dropped unnecessarily, and the second objective
tries to avoid frequent ﬂuctuations of the service rate allocation. The solution of the op-
timization problem yields a service rate allocation of classes and determines how much
trafﬁc must be dropped.

To explore the principal properties of the optimization, we will, at ﬁrst, assume
that sufﬁcient computing resources are available to solve the optimization problem for
each arrival to the link. In a later section, we will approximate the optimization with a
heuristic which incurs less computational overhead.

3.2 Formal Description

C

B

Q

Q

Q

= 4

and total buffer space

trafﬁc classes. In general, we expect

Next we describe the basic operations of the service rate allocation and the dropping
. We assume that all trafﬁc
algorithms at a link with capacity
to be small, e.g.,
is marked to belong to one of
. Classes are marked by an index. We use a convention, whereby a class with a
to denote the trafﬁc
to denote the
only if there is a
otherwise), and we assume that
, if there is at least one backlogged

smaller index requires a better level of QoS. We use
arrivals and amount of dropped trafﬁc from class
service rate allocated to class
backlog of class-
scheduling is work-conserving, that is,
class at time
Remark. Throughout this paper, we take a ﬂuid-ﬂow interpretation of trafﬁc, that is,
the output link is regarded as serving simultaneously trafﬁc from several classes. Since
actual trafﬁc is sent in discrete-sized packets, a ﬂuid-ﬂow interpretation of trafﬁc is ide-
alistic. However, scheduling algorithms that closely approximate ﬂuid-ﬂow schedulers
with rate guarantees are available [18, 21].

at time
. We assume that

trafﬁc in the buffer (and

and
. We use

at time

.

) = 0

) =

P

>

C

a

0

r

r

r

r

(

)

(

)

(

)

(

)

(

(

t

t

t

t

t

t

t

t

t

i

i

i

l

i

i

i

i

i

i

i

We now introduce the notions of arrival curve, input curve, and output curve for a
of

and the input curve

in the time interval

. The arrival curve

trafﬁc class

in

i

[0

]

; t

A

i

R

i

To appear in Proceedings of IWQoS 2001

5

c
i
f
f
a
r
T

 
i
 
-
s
s
a
C

l

A i

Dropped

Bi(t)

Di(t)

Rin
i

Rout

i

c
i
f
f
a
r
T

 
i
- 
s
s
a
C

l

t1

t2

t3

t4

t

time

Rin~

i,s

~
Di,s(t6)

~
Di,s(t5)

Rout~

i,s

s

t6

t5
~
Ti,s

time

(a) Delay and backlog.

(b) Projected input curve, projected output curve, and pro-

jected delays.

Fig. 1. Delay, Backlog and Projections. In Figure 1(b), the projection is performed at time
the time interval

.

~

[

+

i;s ]

s; s

T

for

s

class

i

are deﬁned as

t

t

A

t

a

x

dx ; R

t

A

t

l

x

dx :

i

i

i

i

(

) =

(

)

(

) =

(

) (cid:0)

(

)

in

i

Z

Z

0

0

So, the difference between the arrival and input curve is the amount of dropped trafﬁc.
The output curve
, given by

is the transmitted trafﬁc in the interval

of class-

out

R

i

[0

]

; t

i

out

i

R

t

r

x

dx :

(

) =

(

)

i

t

Z

0

We refer to Figure 1(a) for an illustration. In the ﬁgure, the service rate is adjusted at
times

, and packet drops occur at times

, and

and

.

,

t

t

t

t

t

1

2

4

2

3

The vertical and the horizontal distance between the input and output curves from
. This is illustrated in Fig-
and the delay
is the delay of an arrival which is transmitted

, respectively, are the backlog

. The delay

at time

D

B

i

i

t

D

t

i

class
ure 1(a) for time
at time

t

. Backlog and delay at time

are deﬁned as

t

i

in

out

out

in

B

t

R

t

R

t

; D

t

x

R

t

R

t

x

:

(

) =

(

) (cid:0)

(

)

(

) = max

f

j

(

) (cid:21)

(

(cid:0)

)g

i

i

i

i

i

i

x<t

Upon a trafﬁc arrival, say at time

trafﬁc to be dropped
can be met at times greater than
then some QoS constraints are relaxed in a predetermined order.

and the amount of
for all classes are set such that all QoS and system constraints
. If all constraints cannot be satisﬁed at the same time,

, the new service rates

s

s

s

s

r

)

(

)

(

l

i

i

To determine the rate allocation, the scheduler makes a projection of the delays of
all backlogged trafﬁc. For the purpose of the projection, it is assumed that the current
state of the link will not change after time
. Speciﬁcally, indicating projected values
, we assume that (1) service rates remain as they are (i.e.,
by a tilde (˜), for times
), and (3) there are no

), (2) there are no further arrivals (i.e.,

t > s

s

r

t

r

s

~

(

) =

(

)

i

i

a

t

i

~

(

) = 0

further packet drops (i.e., ~

).

l

t

i

(

) = 0

(1)

(2)

(3)

6

J¨org Liebeherr and Nicolas Christin

With these assumptions, we now deﬁne the notions of projected input curve ~

,

in

R

i;s

projected output curve ~

, and projected backlog ~

, for

i;s

out

i;s

R

B

t > s

as follows:

in

in

out

out

in

out

~

~

~

~

~

R

t

R

s

;

R

t

R

s

t

s

r

s

;

B

t

R

t

R

t

:

(

) =

(

)

(

) =

(

) + (

(cid:0)

)

(

)

(

) =

(

) (cid:0)

(

)

i

i;s

i;s

i

i;s

i

We refer to the projected horizon for class
the projected backlog becomes zero, i.e., ~
this notation, we can make predictions for delays in the time interval
deﬁne the projected delay ~

, denoted as ~

at time

as

= min

x>

i;s

i;s

i;s

B

T

T

x

~

f

s

s

0

(

i

j

D

i;s

i;s

i;s

(4)
, as the time when
. With
. We

) = 0g

+

x

~

s; s

T

[

+

]

i;s

~

~

D

t

x

R

t

R

t

x

:

(

) = max

f

j

(

) (cid:21)

(

(cid:0)

)g

i;s

i;s

i

out

in

(cid:0)

t

s<x<t

(5)

If there are no arrivals after time
, the delay projections are correct. In Figure 1(b),
we illustrate the projected input curve, projected output curve, and projected delays for
are projections and are
projections made at time
indicated by dashed lines. The ﬁgure includes the projected delays for times
.

. In the ﬁgure, all values for

and

t > s

s

s

t

t

5

6

4 Service Rate Adaptation and Drop Algorithm

In this section we discuss an algorithm to perform the service rates allocation to classes
and the decision to drop trafﬁc in terms of an optimization problem.

s

Each time

at which an arrival occurs, a new optimization is performed. The op-
T ,
. The

and the amount of trafﬁc to be dropped

timization variable is a time-dependent vector x
which contains the service rates
optimization problem has the form

: : : r

: : : l

= (

))

Q

Q

s

s

s

s

s

s

r

r

1

1

(

)

)

)

(

(

(

)

(

)

(

s

l

l

i

i

Minimize
Subject to

F

(

)

s

x
x
x

g

; j

; : : : ; M

j

s

(

) = 0

= 1

h

; j

M

; : : : ; N ;

j

s

(

) (cid:21) 0

=

+ 1

(6)

:

j

j

(

)

g

h

F

’s and

is an objective function, and the

where
’s are constraints. The objective
function, which will be presented in Subsection 4.2, will be chosen so that the amount
of dropped trafﬁc and the changes to the current service rate allocation are minimized.
The constraints of the optimization problem are QoS constraints and system constraints.
,
The optimization at time
that is the optimizer knows
.
In the remainder of this section we discuss the constraints and the optimization
function. The optimization can be used as a reference system against which practical
scheduling and dropping algorithms can be compared.

is done with knowledge of the system state before time

for all times

for all times

, and

and

t < s

out

(cid:20)

in

R

R

A

s

s

s

t

i

i

i

4.1 System and QoS Constraints

There are two types of constraints. System constraints describe constraints and proper-
ties of the output link, and QoS constraints deﬁne the desired service differentiation.

To appear in Proceedings of IWQoS 2001

7

System Constraints. The system constraints specify physical limitations and prop-
erties at the output link. The ﬁrst such constraint states that the total backlog cannot
exceed the buffer size
. The second system
constraint enforces that scheduling at the output link is work-conserving. At a work-
conserving link,
. Other system
constraints enforce that transmission rates and loss rates are non-negative. Also, the
amount of trafﬁc that can be dropped is bounded by the current backlog. So we obtain

holds for all times

for all times

, that is,

where

) (cid:20)

) =

P

P

P

>

B

B

B

B

C

0

r

(

(

(

)

t

t

t

t

t

i

i

i

i

i

i

r

t

l

t

B

t

t

i

i

i

(

) (cid:21) 0

0 (cid:20)

(

) (cid:20)

(

)

and

for all times

.

QoS Constraints. We consider two types of QoS constraints, relative constraints and
absolute constraints. QoS constraints are either constraints on delays or constraints on
the loss rate. The number and type of QoS constraints is not limited. Since absolute QoS
constraints may result in an infeasible system of constraints, one or more constraints
may need to be relaxed at certain times. We assume that the set of QoS constraints is
assigned some total order, and that constraints are relaxed in the given order until the
system of constraints becomes feasible. In addition, QoS constraints for classes which
are not backlogged are simply ignored.

Absolute delay constraints (ADC) enforce that the projected delays of class
worst-case bound

. That is,

d

i

satisfy a

i

max

(

) (cid:20)

i;s

i

D

t

d

;

~

s<t<s

T

+

i;s

~

t

~

T

+

2 [

s; s

. If this condition holds for all

for all
violated.
Relative delay constraints (RDC) specify the proportional delay differentiation between
classes. As an example, for two classes

, the RDC enforces a relationship

, the delay bound

is never

and

i;s

d

s

i

]

1

2

Delay of Class 2
Delay of Class 1 (cid:25)

constant

:

Since, in general, there are several packets backlogged from a class, each likely to
have a different delay, the notion of ‘delay of class
’ needs to be further speciﬁed. For
example, the delay of class
could be speciﬁed as the delay of the packet at the head of
queue, the maximum projected delay as in Eqn. (7), or via other measures.
the class-
We choose a measure, called average projected delay
, which is the time average
of the projected delays from a class, averaged over the horizon ~

. We obtain

i;s

D

i

i

i

T

i;s

D

D

x

dx :

i;s

=

i;s

(

)

s

T

+

i;s

~

1

~

~

Z

T

s

i;s

To provide some ﬂexibility in the scheduling decision, we do not enforce relative delay
constraints strictly, but allow for some slack. Using the metric deﬁned in Eqn. (8), and
translating the notion of slack into a tolerance level, we can write the relative delay
constraints as

k

"

k

"

;

i

i

(1 (cid:0)

) (cid:20)

(cid:20)

(1 +

)

D

i

;s

+1

D

i;s

(7)

(8)

(9)

8

J¨org Liebeherr and Nicolas Christin

i

"

1

k

>

0 (cid:20)

(cid:20) 1

is a constant deﬁning the proportional differentiation desired, and

where
(
) indicates a tolerance level. If relative constraints are not speciﬁed for
some classes, the constraints are adjusted accordingly. Note that in the delay constraints
in Eqs. (7) and (9), all values with exception of the components of the optimization
variable x

are known at time

.

"

s

s

Next we discuss constraints on the loss rate. Similar to delays, there are several
sensible choices for deﬁning ‘loss’. Here, we select a loss measure, denoted by
,
which expresses the fraction of lost trafﬁc since the beginning of the current busy period
at time
expresses the fraction of trafﬁc that has been dropped in the time
interval

, that is,2

.1 So,

i;s

i;s

p

p

0

t

[

]

t

; s

0

l

x

dx

i

(

)

R

s

a

s

l

s

R

t

(

) + (

(

) (cid:0)

(

)) (cid:0)

(

)

i

i

0

i

i

in

in

(cid:0)

p

i;s

=

= 1 (cid:0)

:

a

x

dx

i

(

)

A

s

A

t

i

i

(

) (cid:0)

(

)

0

s

t

0

s

R

t

0

R

In the last equation, all values except
are known at time
now specify absolute and relative constraints on the loss rates.
An absolute loss constraint (ALC) speciﬁes that the loss rate of class
never exceeds a limit

, that is,

s

s

(

)

l

i

L

i

. With this deﬁnition we

, as deﬁned above,

i

Relative loss constraints (RLC) specify the desired proportional loss differentiation be-
tween classes. Similar to the RDCs, we provide a certain slack within these constraints.
The RLC for classes

has the form

and

(

+ 1)

i

i

p

L

:

i;s

i

(cid:20)

(10)

(11)

(12)

0

0

0

0

p

i

;s

+1

k

"

k

"

;

(1 (cid:0)

) (cid:20)

(cid:20)

(1 +

)

i

i

p

i;s

is the target differentiation factor, and

0 (

0

) indicates a level of

>

1

"

"

0 (cid:20)

(cid:20) 1

0

where
tolerance.

k

i

4.2 Objective Function

s

Provided that the QoS and system constraints can be satisﬁed, the objective function
will select a solution for x
. Even though the choice of the objective function is a policy
decision, we select two speciﬁc objectives, which, we believe, have general validity: (1)
avoid dropping trafﬁc , and (2) avoid changes to the current service rate allocation. The
ﬁrst objective ensures that trafﬁc is dropped only if there is no alternative way to satisfy
the constraints. The second objective tries to hold on to a feasible service rate allocation
as long as possible. We give the ﬁrst objective priority over the second objective.

The following formulation of an objective function expresses the above objectives

in terms of a cost function:

x

Q

Q

(cid:0)

2

2

F

r

s

r

s

C

l

s

;

(

) =

(

(

) (cid:0)

(

))

+

(

)

s

i

i

i

(13)

X

i

=1

X

i

=1

1 A busy period is a time interval with a positive backlog of trafﬁc. For time
.

, the beginning of the busy period is given by

B

y

0

sup

f

i (

) = 0g

with

y<x

i

P

2

(cid:0)

, where

is inﬁnitesimally small.

s

s

h

h >

=

(cid:0)

0

P

x

B

x

>

i (

)

i

To appear in Proceedings of IWQoS 2001

9

Packet Arrival

Yes

Buffer Overflow

Find       li(s)
subject  to:
- ALCs
- RLCs
- Eqn. (14)   (*)

Buffer

overflow ?

No

N packets

arrived since

last test?

No

ADCs

violated?

Yes

Yes

No

RDCs

violated?

Yes

ADC violation

Find       li(s), ri(s)
subject  to:
- ADCs
- ALCs
- ignore RDCs
  and RLCs

No

RDC violation

Find       ri(s)
subject  to:
- ADCs
- RDCs

(*) If necessary relax the RLCs (RDCs)  to
     obtain a feasible solution fo    r the  li(s) or ri(s)

Done

Fig. 2. Outline of the Heuristic Algorithm.

C

is the link capacity. The ﬁrst term expresses the changes to the service rate

where
allocation and the second term expresses the losses at time
is a known value. In Eqn. (13) we
is part of the optimization variable, while
for a work-
use the quadratic form
conserving link with a backlog at time
2 in front of the second
sum of Eqn. (13) ensures that trafﬁc drops are the dominating term in the objective
function.

2, since
. The scaling factor

. Note that, at time

,

)) = 0

) (cid:0)

) (cid:0)

P

))

C

(cid:0)

(cid:0)

(cid:0)

s

s

s

s

s

s

s

s

s

r

r

r

r

r

r

(

(

(

(

(

(

)

(

)

(

i

i

i

i

i

i

i

This concludes the description of the optimization process in JoBS. The structure of
constraints and objective function makes this a non-linear optimization problem, which
can be solved with available numerical algorithms [20].

5 Heuristic Approximation

We next present a heuristic that approximates the optimization presented in the previ-
ous section, with signiﬁcantly lower computational complexity. The presented heuristic
should be regarded as a ﬁrst step towards a router implementation.

Approximating a non-linear optimization problem such as the one presented in Sec-
tion 4 can be performed by well-known techniques such as fuzzy systems, or neural
networks. However, these techniques are computationally too expensive if a high accu-
racy in the approximation is desired. Therefore, we choose a different approach, which
decomposes the optimization problem into several computationally less intensive prob-
lems. The heuristic algorithm presented here maintains a feasible rate allocation until a
buffer overﬂow occurs or a delay violation is predicted. At that time, the heuristic picks
a new feasible rate allocation and/or drops trafﬁc. Unless there is a buffer overﬂow, the
tests for violations of ADCs and RDCs are not performed for every packet arrival, but
only periodically.

A set of constraints, which contains absolute constraints (ALCs or ADCs), may be
infeasible at certain times. Then, some constraints need to be relaxed. In our heuristic

10

J¨org Liebeherr and Nicolas Christin

algorithm, the constraints are prioritized in the following order: system constraints have
priority over absolute constraints, which in turn have priority over relative constraints.
If the system of constraints becomes infeasible, the heuristic relaxes the relative con-
straints (RLCs or RDCs). If this does not yield a feasible solution, the heuristic relaxes
one or more absolute constraints.

A high-level overview of the heuristic algorithm is presented in Figure 2. The algo-
rithm consists of a number of small computations, one for each situation which requires
to adjust the service rate allocation and/or to drop packets. We next present each of these
situations and the associated computation.

Buffer Overﬂow. If an arrival at time
causes a buffer overﬂow, one can either drop
the arriving packet or free enough buffer space to accommodate the arriving packets.
Both cases are satisﬁed if

s

l

s

a

s

:

i

i

(

) =

(

)

X

X

i

i

(14)

0

i

l

(

)

s

"

= 0

which satisﬁes Eqn. (14) and the RLCs in
The heuristic picks a solution for the
to obtain a unique solution. If the solution violates an
Eqn. (12), where we set
ALC, the RLCs are relaxed until all ALCs are satisﬁed. Once the
’s are determined
the algorithm continues with a test for delay constraint violations, as shown in Figure 2.
The algorithm only speciﬁes the amount of trafﬁc which should be dropped from a
particular class, however, the algorithm does not select the position in the queue from
which to drop trafﬁc. In the present paper, we assume a Drop-Tail dropping policy.

s

(

)

l

i

If there are no buffer overﬂows, the algorithm makes projections for delay violations
only once for every
represents a tradeoff between
the runtime complexity of the algorithm and performance of the scheduling with respect
to satisfying the constraints. Simulation experiments, as described in Section 6, show
that the value

packet arrivals. The selection of

provides good performance.

N

N

N

= 100

The tests use the current service rate allocation to predict future violations. For delay

constraint violations, the heuristic distinguishes three cases.
Case 1: No violation. In this case, the service rates are unchanged.
Case 2: RDC violation. If some RDC (but no ADC) is violated, the heuristic algorithm
determines new rate values. Here, the RDCs as deﬁned in Eqn. (9) are transformed into
equations by setting
. Together with the work-conserving property, one obtains a
system of equations, for which the algorithm picks a solution. If the solution violates
an ADC, the RDCs are relaxed until the ADCs are satisﬁed.
Case 3: ADC violation. Resolving an ADC violation is not entirely trivial as it requires
’s, and, if trafﬁc needs to be dropped to meet the ADCs, the
to recalculate the
’s. To simplify the task, our heuristic ignores all relative constraints when an ADC

= 0

s

"

r

(

)

i

l

s

(

)

i

violation occurs, and only tries to satisfy absolute constraints.

class-

i

backlog at time

The heuristic starts with a conservative estimate of the worst-case delay for the
,
, which can be veriﬁed by referring to Figures 1(a) and 1(b).
, we can write a sufﬁcient condition for

. For this, the heuristic uses the fact that for all

) (cid:20)

) +

s; s

2 [

i;s

D

+

(cid:0)

B

T

x

x

~

s

s

(

(

s

r

s

(

)

(

)

i

]

i

i

B

s

B

s

a

s

l

s

i

i

i

i

(

) =

(

) +

(

) (cid:0)

(

)

~

D

i;s

Then, using

To appear in Proceedings of IWQoS 2001

11

d
a
o
l
 

d
e
r
e
f
f

O

)
y
t
i
c
a
p
a
c
 

k
n
i
l
 
e
h
t
 
f
o
%
n
i
(

 

 

140
120
100
80
60
40
20
0

0

2

4

8

6
14
Simulation Time (s)

12

10

16

18

20

Fig. 3. Offered Load.

satisfying the ADC of class

with delay bound

at time

,

i

d

s

i

(cid:0)

1

(

) +

(

) (cid:0)

(

)

B

s

a

s

l

s

i

i

i

r

s

d

D

s

i

i

i

(

)

(cid:0)

(

)

(cid:20) 1

:

(15)

(cid:26)

i

i

i

l

i

)

(

)

(

r

|

}

s

s

{z

and
. Initially, rates and trafﬁc drops are set to

The heuristic algorithm will select the
such that Eqn. (15) is satisﬁed for
all
. Since at
least one ADC is violated, there is at least one class with
is deﬁned in
Eqn.(15). Now, we apply a greedy method which tries to redistribute the rate allocations
, and
until
for
increasing
all classes by adjusting the
. To
minimize the number of dropped packets,
is never increased to a point where an
ALC is violated.

for classes with
. If it is not feasible to achieve

for all classes. This is done by reducing

’s are increased until

and
, where

for classes with

for all

’s, the

) = 0

(cid:20) 1

(cid:20) 1

(cid:20) 1

) =

<

>

>

(cid:0)

(cid:26)

(cid:26)

(cid:26)

(cid:26)

(cid:26)

(cid:26)

(cid:26)

1

1

1

s

s

s

s

s

s

s

s

r

r

r

r

r

(

)

(

)

(

(

(

)

(

(

(

)

)

)

i

l

l

l

i

i

i

i

i

i

i

i

i

i

i

i

i

i

i

6 Evaluation

We present an evaluation of the algorithms developed in this paper via simulation. Our
goals are (1) to determine if and how well the desired service differentiation is achieved;
(2) to determine how well the heuristic algorithm from Section 5 approximates the
optimization from Section 4; and (3) to compare our algorithm with existing proposals
for proportional differentiated services.

We present two simulation experiments. In the ﬁrst experiment, we compare the
relative differentiation provided by the optimization algorithm described in Section 4,
JoBS (optimization), the heuristic approximation of Section 5, JoBS (heuristic), and
WTP/PLR(
) [7], which provided uniformly the best results among previously pro-
posed schemes for relative service differentiation. In the second experiment, we aug-
ment the set of constraints by absolute loss and delay constraints on the highest priority
class, and show that JoBS can effectively provide both relative and absolute differenti-
ation.

1

6.1 Experimental Setup

We consider a single output link with capacity
6.25 MB. We assume

Gbps and a buffer size of
classes. The length of each experiment is 20 seconds of

= 1

C

Q

= 4

s
y
a
l
e
d

 
f
o

 

o
i
t
a
R

6
5
4
3
2
1
0

5

4

3

2

1

s
e
t
a
r
 
s
s
o
l
 
f
o

 

o
i
t
a
R

s
y
a
l
e
d

 
f
o

 

o
i
t
a
R

6
5
4
3
2
1
0

5

4

3

2

1

s
e
t
a
r
 
s
s
o
l
 
f
o

 

o
i
t
a
R

s
y
a
l
e
d

 
f
o

 

o
i
t
a
R

6
5
4
3
2
1
0

5

4

3

2

1

s
e
t
a
r
 
s
s
o
l
 
f
o

 

o
i
t
a
R

12

J¨org Liebeherr and Nicolas Christin

Class 2/Class 1
Class 3/Class 2
Class 4/Class 3

Class 2/Class 1
Class 3/Class 2
Class 4/Class 3

Class 2/Class 1
Class 3/Class 2
Class 4/Class 3

0

2

4

6 8 10 12 14 16 18 20

0

2

4

6 8 10 12 14 16 18 20

0

2

4

6 8 10 12 14 16 18 20

Simulation Time (s)

(a) JoBS (optimization).

Simulation Time (s)

(b) JoBS (heuristic).

Simulation Time (s)

(c) WTP/PLR(1).

Fig. 4. Experiment 1: Relative Delay Differentiation. The graphs show the ratios of the delays
for successive classes. The target value is

.

k

= 4

Class 2/Class 1
Class 3/Class 2
Class 4/Class 3

Class 2/Class 1
Class 3/Class 2
Class 4/Class 3

Class 2/Class 1
Class 3/Class 2
Class 4/Class 3

0
0 2

6

4
Simulation Time (s)

12 14 16

10

8

18 20

0
0 2

6

4
Simulation Time (s)

12 14 16

10

8

18 20

0
0 2

6

4
Simulation Time (s)

12 14 16

10

8

18 20

(a) JoBS (optimization).

(b) JoBS (heuristic).

(c) WTP/PLR(1).

Fig. 5. Experiment 1: Relative Loss Differentiation. The graphs show the ratios of loss rates
for successive classes. The target value is

.

0

k

= 2

(cid:22)s

simulated time, starting with an empty system. In all experiments, the incoming trafﬁc
is composed of a superposition of Pareto sources with
and average interarrival
time of 300
. The number of sources active at a given time oscillates between 200
and 550, following a sinusoidal pattern. All sources generate packets with a ﬁxed size
of 125 bytes. The resulting offered load is plotted in Figure 3. At any time, each class
contributes 25% of the aggregate load, yielding a symmetric load. In a realistic envi-
ronment, one would expect to have “less” high priority trafﬁc than low priority trafﬁc.
Therefore, a symmetric load can be regarded as a realistic worst-case that can occur
during bursts of high-priority trafﬁc.

= 1

(cid:11)

2

:

6.2 Simulation Experiment 1: Relative Differentiation Only

The ﬁrst experiment focuses on relative service differentiation, and does not include
absolute constraints. The objectives for the relative differentiation are so that we want
to have a ratio of four between the delays of two successive classes, and a ratio of two
between the loss rates of two successive classes. Thus, for JoBS, we set

and

0

k

k

= 4

=

i

i

"

2

= 0

for all

. The tolerance levels are set to

in JoBS (optimization),
and to
in JoBS (heuristic). The results of the experiment are presented in
Figures 4 and 5, where we graph the ratios of delays and loss rates, respectively, of
successive classes for JoBS (optimization), JoBS (heuristic), and WTP/PLR(
). The
plotted delay and loss values are averages over moving time windows of size 0.1 s.

) = (0

001

05)

"; "

01

1

0

(

;

:

:

:

0

i

When the link load is above 90% of the link capacity, that is, in time intervals
, all methods provide the desired service differentiation. The
oscillations around the target values in JoBS (optimization) and JoBS (heuristic) are

and

[10

15

[0

s;

s;

6

s

s

]

]

)
s
m

(
 

y
a
l
e
D

1000
100
10
1
0.1
0.01
0.001

100

10

1

)

%

(
 
e
t
a
R
 
s
s
o
L

0.1
0

To appear in Proceedings of IWQoS 2001

13

Class 4
Class 3
Class 2
Class 1

)
s
m

(
 

y
a
l
e
D

1000
100
10
1
0.1
0.01
0.001

Class 4
Class 3
Class 2
Class 1

Class 4
Class 3
Class 2

Class 1

)
s
m

(
 

y
a
l
e
D

1000
100
10
1
0.1
0.01
0.001

100

10

1

)

%

(
 
e
t
a
R
 
s
s
o
L

0.1
0

420

6

8

10

12

14

16

18

20

420

6

8

10

12

14

16

18

20

420

6

8

10

12

14

16

18

20

Simulation Time (s)
(a) With ADC, all RDCs.

Simulation Time (s)

(b) With ADC, one RDC removed.

Simulation Time (s)
(c) No ADC, all RDCs.

Fig. 6. Experiment 2: Absolute Delay Differentiation. The graphs show the delays of all pack-
ets. All results are for JoBS (heuristic).

Class 2

Class 3

Class 4

Class 1

Class 4
Class 3
Class 2

Class 1

100

10

1

)

%

(
 
e
t
a
R
 
s
s
o
L

0.1
0

Class 4
Class 3
Class 2

Class 1

2

4

6

8

14
Simulation Time (s)

12

10

16

18

20

2

4

6

8

14
Simulation Time (s)

10

12

16

18

20

(a) With ADC, all RDCs.

(b) With ADC, one RDC removed.

4

6

2

8

10

12

14
Simulation Time (s)
(c) No ADC, all RDCs.

16

18

20

Fig. 7. Experiment 2: Absolute Loss Differentiation. The graphs show the loss rates of all
classes. All results are for JoBS (heuristic).

"

"

and

0. The selection of the tolerance values

and
mostly due to the tolerance values
0 in JoBS presents a tradeoff: smaller values for
0 reduce oscillations, but incur
more work for the algorithms. When the system load is low, that is, in time intervals
) manage to
achieve some delay differentiation, albeit far from the target values. However, at an
underloaded link, the absolute values of the delays are very small for all classes.

, only JoBS (optimization) and WTP/PLR(

and

and

[16

10

20

1

[6

s;

s;

"

"

s

"

"

s

]

]

Finally, one should note that the total loss rate is of interest, as a scheme may provide
excellent proportional loss differentiation, but have an overall high loss rate. Additional
plots provided in [14] show that the loss rates and the absolute values for the delays are
very similar in all schemes.

6.3 Simulation Experiment 2: Relative and Absolute Differentiation

In this second experiment, we evaluate how well our algorithm can satisfy a mix of
absolute and relative constraints on both delays and losses. Here, we only present results
for JoBS (heuristic). WTP/PLR(

) does not support absolute guarantees.

1

1

d

We consider the same simulation setup and the same relative delay constraints as
in Experiment 1, but add an absolute delay constraint (ADC) for Class 1 such that
=1 ms, and we replace the relative loss constraint (RLC) between Classes 1 and 2 by
an absolute loss constraint (ALC) for Class 1 such that
=1%. We call this scenario
“with ADC, all RDCs”. With the given relative delay constraints from Experiment 1,
the other classes have implicit absolute delay constraints, which are approximately3
4 ms for Class 2, 16 ms for Class 3, and 64 ms for Class 4. Removing the RDC between

L

1

3 Due to the tolerance value

, the exact values are not integers.

"

14

J¨org Liebeherr and Nicolas Christin

1

2

and Class

Class
, we avoid the ‘implicit’ absolute constraints for Classes 2, 3, and 4,
and call the resulting constraint set “with ADC, one RDC removed”. We also include the
results for JoBS (heuristic) from Experiment 1, with the ALC on Class 1 replacing the
RLC between Classes 1 and 2, and refer to this constraint set as “no ADC, all RDCs”.
In Figure 6 we plot the absolute delays of all packets, and in Figure 7 we plot the loss
rates of all classes, averaged over time intervals of length 0.1 s. We discuss the results
for each of the three constraint sets proposed.

d

Concerning the experiment “with ADC, all RDCs”, Figure 6(a) shows that the
heuristic maintains the relative delay differentiation between classes, thus, enforcing
the ‘implicit’ delay constraints for Classes 2, 3, and 4. With a large number of absolute
delay constraints, the system of constraints easily becomes infeasible, which brings two
observations. First, Figure 7(a) shows that the loss rates of Classes 2, 3 and 4 are sim-
ilar. This result illustrates that the heuristic relaxes relative loss constraints to meet the
absolute delay constraints. Second, Figure 6(a) shows that the absolute delay constraint
is sometimes violated. However, such violations are rare (over 95% of Class-1 pack-
), and Class-1 packet delays always remain reasonably
ets have a delay less than 900
close to the delay bound
. For the experiment “with ADC, one RDC removed”, Fig-
ure 6(b) shows that, without an RDC between Classes 1 and 2, the ratio of Class-2
delays and Class-1 delays can exceed a factor of 10 at high loads. With this constraint
set, the absolute delay constraint
is never violated, and Figure 7(b) shows the RLCs
are consistently enforced during periods of packet drops. Finally, for the experiment
“no ADC, all RDCs”, Figure 6(c) shows that, without the ADC, the delays for Class 1
are as high as 5 ms.4

(cid:22)s

d

d

1

1

1

7 Conclusions

We proposed an algorithm, called JoBS (Joint Buffer Management and Scheduling),
for relative and absolute per-class QoS guarantees without information on trafﬁc ar-
rivals. At times when not all absolute QoS guarantees can be satisﬁed simultaneously,
JoBS selectively ignores some of the QoS guarantees. The JoBS algorithm reconciles
rate allocation and buffer management into a single scheme, thereby acknowledging
that scheduling and dropping decisions at an output link are not orthogonal issues, but
should be addressed together. JoBS implements the desired service differentiation based
on delay predictions of backlogged trafﬁc. The predictions are used to update service
rate allocations to classes and the amount of trafﬁc to be dropped. We showed in a set
of simulation experiments, that JoBS can provide relative and absolute per-class QoS
guarantees for delay and loss.

In future work, we will extend the approach presented in this paper to TCP conges-
tion control. As a point of departure, we will attempt to express existing active queue
management schemes, e.g., RED [8] and RIO [4], within the formal framework intro-
duced in this paper.

4 The delay values for Classes 2, 3, and 4 in Figures 6(b) and (c) appear similar, especially since
we use a log-scale. We emphasize that the values are not identical, and that the results are
consistent.

To appear in Proceedings of IWQoS 2001

15

References

1. S. Athuraliya, D. Lapsley, and S. Low. An enhanced random early marking algorithm for
internet ﬂow control. In Proceedings of IEEE INFOCOM 2000, pages 1425–1434, Tel-Aviv,
Israel, April 2000.

2. S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss. An architecture for

differentiated services. IETF RFC 2475, December 1998.

3. R. Braden, D. Clark, and S. Shenker.
overview. IETF RFC 1633, July 1994.

Integrated services in the internet architecture: an

4. D. Clark and W. Fang. Explicit allocation of best-effort packet delivery service. IEEE/ACM

Transactions on Networking, 6(4):362–373, August 1998.

5. R. Cruz, H. Sariowan, and G. Polyzos. Scheduling for quality of service guarantees via ser-
vice curves. In Proceedings of the International Conference on Computer Communications
and Networks (ICCCN), pages 512–520, Las Vegas, NV., September 1995.

6. C. Dovrolis. Proportional Differentiated Services for the Internet. PhD thesis, University of

Wisconsin-Madison, December 2000.

7. C. Dovrolis and P. Ramanathan. Proportional differentiated services, part II: Loss rate dif-
ferentiation and packet dropping. In Proceedings of IWQoS 2000, pages 52–61, Pittsburgh,
PA., June 2000.

8. S. Floyd and V. Jacobson. Random early detection for congestion avoidance. IEEE/ACM

Transactions on Networking, 1(4):397–413, July 1993.

9. S. Floyd and V. Jacobson. Link-sharing and resource management models for packet net-

works. IEEE/ACM Transactions on Networking, 3(4):365–386, August 1995.

10. P. Hurley, M. Kara, J.-Y. Le Boudec, and P. Thiran. ABE: Providing a low delay service

within best-effort. Technical Report DSC/2000/34, EPFL-DI-ICA, September 2000.

11. V. Jacobson, K. Nichols, and K. Poduri. An expedited forwarding PHB. IETF RFC 2598,

June 1999.

New York, NY, 1976.

12. L. Kleinrock. Queueing Systems. Volume II: Computer Applications. John Wiley & Sons,

13. M. A. Labrador and S. Banerjee. Packet dropping policies for ATM and IP networks. IEEE

Communications Surveys, 2(3), 3rd Quarter 1999.

14. J. Liebeherr and N. Christin. Buffer management and scheduling for enhanced differentiated

services. Technical Report CS-2000-24, University of Virginia, August 2000.

15. Y. Moret and S. Fdida. A proportional queue control mechanism to provide differentiated
In Proceedings of the International Symposium on Computer and Information

services.
Systems (ISCIS), pages 17–24, Belek, Turkey, October 1998.

16. T. Nandagopal, N. Venkitaraman, R. Sivakumar, and V. Bharghavan. Delay differentiation
and adaptation in core stateless networks. In Proceedings of IEEE INFOCOM 2000, pages
421–430, Tel-Aviv, Israel, April 2000.

17. K. Nichols, V. Jacobson, and L. Zhang. Two-bit differentiated services architecture for the

Internet. IETF RFC 2638, July 1999.

18. A. K. Parekh and R. G. Gallagher. A generalized processor sharing approach to ﬂow control
in integrated services networks: the single-node case. IEEE/ACM Transactions on Network-
ing, 1(3):344–357, June 1993.

19. S. Sahu, P. Nain, D. Towsley, C. Diot, and V. Fioroiu. On achievable service differentiation
In Proceedings of ACM SIGMETRICS 2000, pages

with token bucket marking for TCP.
23–33, Santa Clara, CA, June 2000.

20. K. Schittkowski. NLPQL: A FORTRAN subroutine solving constrained nonlinear program-

ming problems. Annals of Operations Research, 5:485–500, 1986.

21. L. Zhang. Virtual clock: A new trafﬁc control algorithm for packet switched networks.

IEEE/ACM Trans. Comput. Syst., 9(2):101–125, May 1991.

