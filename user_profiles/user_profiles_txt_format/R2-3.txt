Combining SADIe and AxsJAX to Improve the Accessibility

of Web Content

Darren Lunn, Simon Harper and Sean Bechhofer

Information Management Group

School of Computer Science, University of Manchester

Kilburn Building, Oxford Road, Manchester, M13 9PL, UK

darren.lunn@cs.manchester.ac.uk

[simon.harper | sean.bechhofer]@manchester.ac.uk

ABSTRACT
The advent of Web 2.0 technologies has allowed once static
Web documents to be transformed into online interactive
applications. To facilitate the accessibility of this dynamic
content, Google have developed the AxsJAX framework that
can insert Accessible Rich Internet Applications (ARIA)
statements into the content dynamically. Such statements
allow assistive technologies to interact with dynamic content
and make it accessible to users. SADIe is an approach that
uses semantic annotations of a Website’s Cascading Style
Sheet (CSS) to drive a transformation process that can im-
prove access to Web pages for visually impaired users who
use a screen reader. Previously SADIe transcoded static
pages by refactoring the content into a format more suited
to the sequential audio output of a screen reader. In this pa-
per we present a prototype SADIe transcoder that uses CSS
annotations to generate AxsJAX framework code and insert
it into Web pages. Such an approach allows users to access
static content using a consistent set of key presses in a man-
ner akin to an online application. This demonstrates the
ﬂexibility of the SADIe approach as the same annotations
can be used to generate an alternative transcoding format.
It also supports the use of SADIe as a lightweight method
for allowing Web designers to make use of AxsJAX without
requiring knowledge of the underlying AxsJAX technologies.

Categories and Subject Descriptors
H.5.3 [Information Interfaces and Presentation]: Group
and Organization Interfaces – Web-based interaction; H.5.4
[Information Interfaces and Presentation]: Hypertext
/ Hypermedia – User Issues

General Terms
Experimentation, Human Factors
Keywords
Transcoding, SADIe, AxsJAX, Visually Impaired Users

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
W4A2009 - Communication, April 20-21, 2009, Madrid, Spain. Co-Located
with the 18th International World Wide Web Conference.
Copyright Copyright 2009 ACM 978-1-60558-561-1 ACM ...$5.00.

1.

INTRODUCTION

The advent of Web 2.0 technologies, such as Asynchronous
JavaScript and XML (AJAX), has allowed once static Web
documents to be transformed into online interactive appli-
cations. To enable these areas of dynamic content to be
accessible to people who use assistive technologies, the Web
Accessibility Initiative (WAI) has developed Accessible Rich
Internet Applications. ARIA is a working draft proposal
to enable assistive technologies, such as screen readers, to
access application-based components of Web 2.0 style Web
pages [1]. These components include user interface widgets,
such as sliders, and updating content areas such as news
tickers and create a page more akin to an application than
a document. To facilitate the use of ARIA, Google have de-
veloped the AxsJAX framework, a publicly available suite
of JavaScript code that inserts ARIA mark-up into pages
dynamically [2]. A key part of the framework is the gener-
ation of Content Navigation Rules (CNR) that use XPath
and XML statements to inform the framework where ARIA
statements should be inserted in the page.

SADIe is an approach that uses semantic annotations of
a Website’s Cascading Style Sheet (CSS) to drive a trans-
formation process that can improve access to content for
visually impaired users accessing Web pages with a screen
reader [3]. In previous experimental prototypes SADIe has
transcoded content by manipulating the Document Object
Model (DOM) of the page to produce a page format more
suited to the sequential audio output of the screen reader.
The CSS annotations describe the role that elements play
within the Web page and are independent of the transcoded
output that is produced by tools that can interpret and use
those annotations.

In this paper we present a re-engineered prototype of the
SADIe transcoder that uses CSS annotations to identify key
elements of the page in order to produce appropriate CNR
for the Websites that refer to a given Cascading Style Sheet.
The CNR is combined with the Google AxsJAX framework
to inject ARIA statements into the Web content. Such an
approach allows users to navigate and interact with static
Web content in a manner similar to an application using a
consistent set of key presses. This not only demonstrates
the ﬂexibility of the SADIe annotation approach but also
supports the use of SADIe as a lightweight method for en-
hancing the accessibility of Websites without Web designers
requiring knowledge of AxsJAX and ARIA technologies.

752. RELATED WORK

Eﬀorts exist that attempt to make traditional, static Web
pages accessible to people with visual impairments. A major
source of this is the Web Content Accessibility Guidelines
(WCAG) devised by the WAI [4]. These provide check-
points, such as separating the structure of the document
from its presentation, that seek to ensure that Web content
is accessible. While these guidelines go some way to provide
accessible content, they are not without problems. Petrie
et al.
conducted an evaluation of 100 Websites with 51
users who had a disability [5]. Experts observed the diﬃcul-
ties that the users encountered and of the 585 problems ob-
served, 45% were due to problems that were in no violation
of any checkpoint found within WCAG. It should be noted
that there has since been a revision of the guidelines, with
WCAG 2.0 being recently published [6]. Further research is
required to establish if 2.0 addresses the limitations of 1.0,
however, critiques of accessibility guidelines have led to the
use of alternative techniques, centred around transcoding,
to assist users with disabilities navigate the Web.

Transcoding is a way of transforming Web content so that
it can be accessed on a diverse range of devices [7]. One such
approach is SADIe [3]. The principle idea behind SADIe is
that the rendering of a Web page element is closely associ-
ated with the role designers intended the element to play.
For example, sighted users can infer that a list of links is a
menu due to the way it is rendered on screen. This rendering
information is deﬁned within the CSS and associated with
the XHTML via tag attributes such as class or id. A Web-
site typically has one style that all pages refer to, providing a
single point of annotation that propagates through to every
page. This reduces the annotation overhead as any annotat-
ing of the document occurs in a single location. However,
as the Website content is associated with the CSS, this too
is indirectly annotated. The CSS annotations provide ac-
curate transcoding as the role of each element is explicitly
stated. Additionally, high scalability is achieved as deﬁn-
ing the roles of CSS elements allows every page within the
Website to be transcoded without the requirement for every
page to be annotated. The current prototype of SADIe is
a proxy that sits between the user’s Web browser and the
server. This allows users to create and share annotations by
adding them to a repository that the transcoding tool can
use in conjunction with the styles that exist on the Website.
The Web has evolved form a series of static Web pages
into a dynamic and rich application environment. There
is no precise deﬁnition of what this new Web 2.0 is, but
there is an emphasis on interaction, community and open-
ness that users actively contribute to [8]. Assistive tech-
nologies such as screen readers, accessibility guidelines and
current transcoding techniques are targeted at traditional
static Web content where information can be accessed in
a linear fashion. However, Web 2.0 Websites include dy-
namically updating regions within the page that break this
linear assumption [9]. One solution, taken by the Hearsay-
Dynamo browser [10], is to identify and present users with
updated content on the page. While this approach beneﬁts
from not requiring any modiﬁcation to the page markup,
it does treat all updates as equal which may not necessar-
ily be the case. Furthermore it only provides users with
access to content changes whereas live regions can also con-
tain application style interfaces. Therefore to allow assistive
technologies to communicate with live regions, the WAI are

currently developing ARIA [1]. These guidelines allow devel-
opers to enhance the accessibility of rich content contained
within Websites by deﬁning the roles, states, and properties
of interactive elements contained within the page. These el-
ements include user interface widgets, such as sliders, and
updating content areas such as news tickers. By explicitly
stating what the role and purpose of each element is, as-
sistive technologies can interact with the content providing
users with access to the dynamic content.

ARIA requires designers to modify their existing Web con-
tent by inserting the additional semantic properties required
by assistive technologies to interact with Web 2.0 resources.
Designers therefore need to have ownership of the document
and have a full understanding of how ARIA markup aﬀects
assistive technology. For example, ARIA allows updates to
be given a priority of when the assistive technology should
inform the user an update occurred. Announcing all up-
dates immediately can be overwhelming for the user [9]. To
aid Web 2.0 developers, Google have developed the AxsJAX
Framework [2]. This is an open source framework that allows
developers to use high level patterns developed from the un-
derlying ARIA markup. The framework provides JavaScript
code that already contains the necessary elements required
to insert ARIA into Web content. Designers merely deﬁne
a series of CNRs that use XPath and XML statements to
inform the framework where ARIA statements should be
inserted in the page. The framework not only ensures that
valid markup is inserted into the Web page, but it also al-
lows for ARIA to be inserted into the page dynamically. This
allows for developers and other community contributors to
enhance the accessibility of Web 2.0 based pages without
the need for document ownership.

3. COMBINING CSS ANNOTATIONS AND

AXSJAX

As previously discussed, SADIe makes use of CSS anno-
tations to describe the roles that elements play within the
Website. CSS elements are annotated by extending the key-
words used within the Cascading Style Sheet. These ex-
tensions are ignored by user agents that cannot interpret
the keyword. However, for tools that can interpret the ad-
ditional values, such as SADIe, they provide a mechanism
for understanding the role of the element in order to apply
suitable transcoding. For example, to declare that a CSS
element is a menu, -uom-structural-role: LinkMenu can
be added to the CSS deﬁnition.

The original prototype of SADIe used these annotations to
restructure the Document Object Model (DOM) of the page,
creating a format more suited to the sequential audio output
of the screen reader. However, the CSS annotations and the
Web content manipulation were de-coupled. That is, the
annotations only informed the tool the role that the element
played. The tool’s interpretation of those roles determined
how the content was manipulated. SADIe was therefore
modiﬁed so that the CSS roles could be used in conjunction
with AxsJAX. Rather than manipulate the DOM, ARIA
statements were inserted into Web page allowing users to
navigate and interact with static Web content in a manner
similar to an application using a consistent set of key presses.
As an initial experiment, four key commands were incor-
porated into the SADIe transcoding engine that were appli-
cable to most Websites. The ﬁrst two key presses were ‘n’ to

76(a) Standard CNN story. The menu ( 1(cid:13)), page summary
( 2(cid:13)), and main information ( 3(cid:13)) are indicated.

(b) CNN Story combined with AxsJAX. The main infor-
mation (highlighted in blue) has been reached by the user
pressing the ‘n’ key.

Figure 1: Comparison of the standard CNN news story page and The AxsJAX transcoded version. The Story was last visited
on 23th January 2009 at http://edition.cnn.com/2009/POLITICS/01/23/obama.abortion/index.html

navigate to the next most important chunk of information
on the page and ‘p’ to navigate to the previous most impor-
tant chunk of information. These commands were analogous
to the original SADIe transformation of ‘Reorder’ whereby
content was rearranged so that the most important content
was placed at the top of the page, followed by the next most
important and ﬁnally the least most important. However,
rather than understand and become familiar with the layout
of restructured content, with the AxsJAX transcoding users
pressed two keys to move forward and backwards through
the main information contained within he page.

The third key press was ‘m’ that jumped the focus of the
assistive technology to the main menu of the page. This
command was analogous to the original SADIe transforma-
tion of ‘Menu’ that placed the menu at the bottom of the
page. Again users no longer required an understanding of
the modiﬁed layout as pressing a single key moved the focus
directly to the menu to allow for easier navigation to other
areas of the Website.

The fourth key press was ‘s’ to provide a summary of the
page. The original SADIe transformations had no notion
of a summary. Summaries can be generated by a speciﬁc
chunk of text within the page that provide an overview, as is
the case with CNN (see Section 4). Alternatively, the <meta
name="Description" content="..." /> tag, located in the
<head> element of a HTML document, can be used. This
tag is typically hidden from the user utilised here to inform
the user what the page is about without them having to
interact with the content.

A key part of the AxsJAX framework is the generation
of CNR. This is JavaScript code that incorporates XPath
and XML statements to inform the framework where ARIA
statements should be inserted in the page and to which key
press the ARIA statements should be mapped. XPath is a
language that can be used to reach parts of an HTML docu-
ment. XPath expressions can either point to explicit nodes,
such as /html/head/meta[1] that selects the ﬁrst <meta>
tag of the <head> element of a HTML document. Alterna-

tively, XPath can identify elements with speciﬁc elements,
such as //ul[@class=’nav’] to select all unordered list ele-
ments with a class value of ‘nav’. As class=’nav’ is a CSS
element that can be annotated using the SADIe method,
these are the typical XPath expressions that SADIe creates
when generating the CNR ﬁle. As we have a limited set of
key presses that can be matched with values in the CSS an-
notation, the remainder of the CNR ﬁle remains constant.
SADIe merely creates a suitable XPath expression from a
given CSS annotation and inserts that into the CNR ﬁle
with the speciﬁed key press.

The process of inserting AxsJAX code into Web pages
using SADIe was a two stage process. The ﬁrst stage re-
quired the annotated CSS ﬁle to be uploaded to the SADIe
transcoder. This allowed SADIe to generate the appropri-
ate CNR ﬁle based on the CSS annotations present within
the CSS ﬁle. At the same time the CSS ﬁle was also as-
signed to a particular set of URL addresses. This could be
explicit, for example http://www.cnn.com. This informed
the transcoder that any page on the http://www.cnn.com
domain was transcodable with a given CSS ﬁle and gener-
ated CNR ﬁle. Alternatively wild cards could be used, such
as http://*.blogspot.com. This informed SADIe that any
Website with .blogspot.com as the ﬁnal domain name was
transcodable with a given CSS ﬁle and generated CNR ﬁle.
After uploading the CSS and associating it with a URL pat-
tern, users browsed the Web as usual albeit via the SADIe
proxy. Whenever a Website was accessed that was associ-
ated with a SADIe generated CNR ﬁle, the AxsJAX code
was dynamically inserted into the page allowing users to
access the content using the key presses.

4. CNN EXAMPLE

Figure 1a shows a news story from CNN. The areas in-
dicated as 1(cid:13), 2(cid:13) and 3(cid:13) show the menu, page summary
and main information respectively. By inspecting the Cas-
cading Style Sheet we can see that the style for the menu
is deﬁned using the element name class=‘cnnNavigation’,

12377the style for the summary is deﬁned using the element name
id=‘cnnHeaderRightCol’ and the style for the main content
is deﬁned using the element name id=‘cnnHeaderLeftCol’.
These CSS elements are annotated using a suitable value.
For example the menu element would be given the value
-uom-structural-role: LinkMenu.

Having annotated the CSS, the ﬁle is uploaded to the
SADIe transcoder. This generates a CNR ﬁle that can be
used with the AxsJAX framework to insert ARIA state-
ments into the page that assistive technologies can interact
with. The menu, for example, has the JavaScript state-
ment var xpath = "//*[@id=‘cnnNavigation’]"; gener-
ated and associated with key press 109, which maps to ‘m’.
From the perspective of the designer this is created behind
the scenes. All the designer is concerned with is that the
CSS element that describes how the menu should be ren-
dered is annotated as a LinkMenu. The code that calls the
AxsJAX framework and assigns the appropriate key press is
created by SADIe.

Figure 1b demonstrates a user interacting with the CNN
page. The page looks identical to the original page shown
in Figure 1a, with the exception that the title is highlighted
with a blue lens. The user has navigated to the Web page
through the SADIe transcoder and the appropriate AxsJAX
CNR ﬁle has been used with the page, injecting suitable
ARIA statements. Pressing the ‘n’ key has taken the focus
of the assistive technology directly to the start of the main
story of the page. Further presses of the ‘n’ key would allow
the user to skim through the story paragraph by paragraph,
allowing for easy skim reading. The user does not have to
navigate through the elements of the page that they are not
interested in, such as the banner and advertisements that
surround the main story. A single key press allows them to
directly access the content of the page that they are most
likely to be interested in.

5. CONCLUSION AND FUTURE WORK

The Google AxsJAX framework is a method that allows
Web 2.0 developers to inject Accessible Rich Internet Ap-
plications statements into the content dynamically. A key
element of this platform is the generation of Content Navi-
gation Rules that use XPath and XML statements to inform
the framework where ARIA statements should be inserted
in the page.

SADIe is an approach that uses semantic annotations of
a Website’s CSS to drive a transformation process that can
improve access to Web pages for visually impaired users who
use a screen reader. Previously SADIe transcoded static
pages by refactoring the content into a format more suited
to the sequential audio output of a screen reader. However,
the CSS annotations that describe the role that elements
play within the Web page are independent of the transcoded
output that SADIe produces. By modifying the transcoding
process so that the CSS annotations form the basis of the
generation of CNR, SADIe can use the AxsJAX framework
to inject ARIA statements into Web content to allow users
to navigate and interact with static Web content in a manner
similar to an application using a consistent set of key presses.
While the experimental prototype described above has
demonstrated the technical feasibility of using SADIe as a
vehicle for inserting ARIA into Web content, further re-
search is still required. The four key presses chosen were
limited to concepts that most Websites employ, such as hav-

ing a navigation menu and deﬁning the area where the main
information resides. Future investigations should focus on
key presses that may beneﬁt users but may not necessarily
be appropriate for every page. For example a list of the
current most popular stories common on many news Web-
sites but not on all Websites. Furthermore, while a technical
prototype has been demonstrated, the ability to enhance ac-
cessibility still remains unclear. User studies are required to
establish if the key presses added by SADIe using the Axs-
JAX framework are of beneﬁt to users.

However, while there remains outstanding work, by com-
bining AxsJAX with CSS annotations, we have demonstrated
the ﬂexibility of the SADIe annotation approach. In addi-
tion we have also highlighted the potential use of SADIe as
a lightweight method for enhancing the accessibility of Web-
sites without Web designers requiring knowledge of AxsJAX
and ARIA.

6. REFERENCES
[1] Cooper, M., Schwerdtfeger, R., Seeman, L., and

Pappas, L. W3C Working Draft, World Wide Web
Consortium (W3C), August (2008). http:
//www.w3.org/TR/2008/WD-wai-aria-20080806/ Last
Accessed 3 October 2008.

[2] Chen, C. L. and Ramen, T. V. In W4A ’08:

Proceedings of the 2008 International
Cross-Disciplinary Conference on Web Accessibility
(W4A), 54–56. ACM Press, May (2008).

[3] Lunn, D., Bechhofer, S., and Harper, S. In ASSETS

’08: Proceedings of the 10th International ACM
SIGACCESS Conference on Computers and
Accessibility, 137–144. ACM Press, October (2008).

[4] Chisholm, W., Vanderheiden, G., and Jacobs, I. W3C

Recommendation 1.0, World Wide Web Consortium
(W3C), Web Accessibility Initiative, MIT/CSAIL,
Building 32-G530, 32 Vassar St, Cambridge, MA
02139, USA, May (1999).

[5] Petrie, H., Hamilton, F., and King, N. In W4A ’04:

Proceedings Of The 2004 International
Cross-Disciplinary Workshop On Web Accessibility
(W4A), 13–18. ACM Press, (2004).

[6] Caldwell, B., Cooper, M., Reid, L. G., and

Vanderheiden, G. W3C Recommendation 2.0, World
Wide Web Consortium (W3C), December (2008).
http://www.w3.org/TR/WCAG20/. Last Accessed 17th
January 2009.

[7] Ihde, S. C., Maglio, P., Meyer, J., and Barrett, R.

IBM Systems Journal 40(1), 179–192 (2001).

[8] Millard, D. E. and Ross, M. In HYPERTEXT ’06:

Proceedings of the Seventeenth Conference on
Hypertext and Hypermedia, 27–30. ACM Press, (2006).
[9] Thiessen, P. and Chen, C. In W4A ’07: Proceedings of

the 2007 International Cross-Disciplinary Conference
on Web Accessibility (W4A), 7–14. ACM Press, May
(2007).

[10] Borodin, Y., Bigham, J. P., Raman, R., and

Ramakrishnan, I. V. In ASSETS ’08: Proceedings of
the 10th International ACM SIGACCESS Conference
on Computers and Accessibility, 145–152. ACM,
October (2008).

78