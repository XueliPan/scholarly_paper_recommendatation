Load-Store Reordering for Low-Power Multimedia 

Data Transfers 

 

School of Computer Science & Engineering 

School of Computer Science & Engineering 

Woongki Baek 

Seoul National University 

Seoul, Korea 

wkb@davinci.snu.ac.kr 

Jihong Kim 

Seoul National University 

Seoul, Korea 

jihong@davinci.snu.ac.kr 

 
 

Abstract—We  present  a  load-store  reordering  technique  for 
low-power multimedia data transfers. The proposed technique 
is based on two common characteristics of multimedia applica-
tions:    (1)  Many  multimedia  streams  have  a  strong  spatial  lo-
cality  and  (2)  output  data  generated  by  many  multimedia  op-
erations are significantly different from the input data. In this 
paper, we propose a compiler-level technique which combines 
loop unrolling and load-store scheduling to minimize both the 
self and coupled transition power on a data bus. Experimental 
results show that the total amount of the transition activities is 
reduced on average by 21.3% over the original code for many 
image processing applications. 

I. 

INTRODUCTION 

As  computation  and  communication  have  been  steadily 
moving  toward  mobile  and  embedded  platforms,  realizing 
low  power  consumption  has  become  a  critical  concern  in 
designing modern embedded systems. It has been shown that 
a significant portion of the total power in digital CMOS cir-
cuits is dissipated on buses [1]. Thus, a considerable reduc-
tion in power dissipation of a whole system can be expected 
by  optimizing  power  consumption  on  buses  efficiently.  In 
this paper, we attempt to reduce power dissipation in multi-
media  applications  by  exploiting  inherent  characteristics  of 
multimedia streams and operations so as to minimize transi-
tion activity on a data bus. 

According  to  [2],  power dissipation  on  buses  can  be di-
vided  into  two  major  types  which  are  self  transition  power 
and  the  coupled  transition  power,  respectively.  Self  transi-
tion  power  is  referred  to  the  dynamic  power  consumption 
which is proportional to the frequency of transition (i.e., self 
transition activity) on the each single line. On the other hand, 
with  the  smaller  feature  size,  power  dissipated  by  coupling 
capacitance  becomes  more  important.  For  example,  the  lat-
eral (i.e., coupling) component of capacitance in the metal 3 
layer  in  a  0.35-µm  CMOS  process  reaches  five  times  the 
sum of fringing and vertical components when the substrate 
serves  as  a  bottom  plane  [3].  Coupled  transition  power  is 
defined as the power dissipation by coupling capacitance. 

In  this  paper,  we  describe  a  load-store  reordering  algo-
rithm  for  low-power  multimedia  transfers  by  reducing  both 
self and coupled transition power on a data bus. Many mul-
timedia applications have two common characteristics. First, 
many multimedia data streams have a strong spatial locality. 
Second, output data processed by many multimedia process-
ing  operations  is  very  different  from  the  input  data.  Due  to 
these  two  characteristics,  the  amount  of  transition  activities 
on  a  data  bus  can  be  changed  significantly  with  different 
sequences  of  load-store  instructions.  We  propose  a  low-
power  load-store  reordering  technique  combined  with  loop 
unrolling which reduces both the self and coupled transition 
activity.  Our  experimental  results  show  that  the  significant 
amount  of  the  power  dissipation  on  a  data  bus  can  be  re-
duced by using the proposed technique. 

The rest of the paper is organized as follows. Section II 
summarizes previous research efforts related to our work. In 
section III, we explain our power model and give a motiva-
tional  example  of  the  proposed  technique.  Section  IV  pre-
sents  the  proposed  load-store  reordering  problem  to  mini-
mize both the self and coupled transition power on a data bus. 
We show experimental results using image processing appli-
cations in Section V. Section VI concludes with a summary. 

II.  PREVIOUS WORK 

There have been many investigations which attempted to 
minimize the power dissipation on buses at the various lev-
els of the design abstraction from the gate level to the sys-
tem level. 

Panda  and  Dutt  [4]  focused  on  the  reduction  of  power 
dissipation  in  memory  intensive  applications  by  reducing 
the number of transitions on the memory address bus. They 
exploited  regularity  and  spatial  locality  in  the  memory  ac-
cess and determined the mapping of behavioral array refer-
ences  to  physical  memory  locations  to  minimize  address 
bus  transitions.  Dasgupta  and  Karri  [5]  presented  algo-
rithms to minimize on-chip data bus transitions by suitably 
binding and scheduling the data transfers of a Control Data 
Flow Graph (CDFG). Kim et al. [6] proposed a low-power 
bus  encoding  scheme  to  minimize  the  coupled  transition 

power. 

The  aforementioned  approaches  [4]-[6]  are  designed  to 
minimize  either  the  self  transition  power  or  the  coupled 
transition power, but not both. On the other hand, Lyuh et 
al.  [2]  presented  an  on-chip  bus  synthesis  algorithm  to 
minimize  the  total  sum  of  the  self  and  coupled  transition 
power in the micro-architecture synthesis. Unlike the previ-
ous  approaches,  they  minimized  both  the  self  and  coupled 
transition power in an integrated fashion.  

In  this  paper,  we  propose  the  compiler  and  application 
level  technique  to  minimize  the  total  sum  of  the  self  and 
coupled transition power on a data bus. The aforementioned 
approaches [2], [4]-[5] can be applied only to the hardware 
synthesis  level  while  our  method  can  be  still  applicable 
when  the  hardware  design  is  already  determined.  Bus  en-
coding schemes (e.g., [6]) need extra hardware units such as 
bus  encoder  and  decoder.  However,  our  technique  can  be 
used to conventional embedded processors without any ex-
tra hardware. 

III.  BASIC IDEA 

A.  Power Model 

According to [6], the dynamic power consumption by in-
terconnects and drivers for the period of execution of T clock 
steps is given by 

2

⋅

(

(

=

X

P
dyn

CC

              (1) 
where Cs and Cl are self capacitances, Cc is coupling capaci-
tance, and Vdd is the supply voltage. The capacitance ratio is 
defined as γ = (Cc)/(Cs+ Cl). 

VCY
T

+

+

dd

)

)

⋅

⋅

T

c

s

l

As  for  the  coupled  transition  activities,  there  are  four 
types of possible coupled transitions, as illustrated in Fig. 1. 
Type 1 and 3 result in Cc not being charged while Type 2 and 
4 cause Cc being charged up to αCcVdd and βCcVdd , respec-
tively [2]. [α  and β are set to 1 and 2 in [2]]. 

Assuming that no Dynamic Voltage Scaling (DVS) tech-
niques  are  applied  (i.e., Vdd   is  constant.),  optimizing  power 
dissipation  on  a  data  bus  is  equivalent  to  minimizing  the 
weighted sum of the self and coupled transition activities ZT 
which is given by 

Z

T

=

X

T

⋅+
γ

Y
.T

                               (2) 

B.  Motivational Example 

We  show  a  motivational  example  which  illustrates  how 
load-store  ordering  affects  both  the  self  and  coupled  transi-
tion activities on a data bus in Fig. 2. Two 8-bit image pixels 
which 
respectively  have  values  of  01110111(2)  and 
01110110(2)  will  be  inverted  in  bit-wise.  We  suppose  that 
image pixels will be transferred via an 8-bit on-chip data bus. 
In  Fig.  2(a),  two  pixels  will  be  inverted  by  following  the 
load-store sequence,  which is load pixel0, store inverted 
pixel0, load pixel1, and store inverted pixel1. A different 
load-store  scheduling,  which  is  load  pixel0,  load  pixel1, 
store inverted pixel0, and store inverted pixel1, is given 
in Fig. 2(b).  

In  Fig.  1(a),  the  amount  of  the  self  transition  activities 
(marked  with  rectangular  boxes  in  Fig.  2(a))  is  10  and  the 
amount of the coupled transition activities is 21, respectively. 

Figure 1. Four different types of coupled transition activities. 

Figure 2. The total amount of the transition activity on a data bus while 
inverting  two  image  pixels  by  following  two  different  load-store 
sequences.  (a)  a  load-store-load-store  sequence.  (b)  a  load-load-store-
store sequence. 

Assuming  the  capacitance  ratio  γ  is  3,  the  total  amount  of 
transition activities ZT will be 10 + 3 ⋅ 21 = 73. On the other 
hand, the amounts of the self and coupled transition activities 
are 3 and 7, respectively, in Fig. 2(b). Thus the total amount 
of transition activities becomes 24. 

We  can  explain  why  the  amount  of  transition  activities 
occurred  by  two  load-store  sequences  in  Fig.  2(a)  and  Fig. 
2(b) are significantly different by the following two reasons. 
First,  there  is  a  strong  spatial  locality  in  two  input  image 
pixels (only 1 bit is different.). Strong spatial locality usually 
can  be  found  on  many  multimedia  streams.  If  data  which 
have  very  similar  values  are  transferred  consecutively  via  a 
data  bus,  small  amount  of  transition  activities  can  be  ex-
pected.  Second,  the  values  of  output  data  are  very  different 
from the values of the corresponding input data because the 
image  processing  operation  in  our  motivational  example  is 
image inverting. This characteristic can be found many other 
multimedia processing operations. If the input data are trans-
ferred consecutively via a data bus, it will usually cause the 
large  amount  of  transition  activities.  This  motivational  ex-
ample clearly shows how important load-store scheduling is 
to minimize the power dissipation on a data bus. 

IV.  LOW-POWER LOAD-STORE REORDERING PROBLEM 

To address the low-power load-store reordering problem 
formally,  we  need  to  consider  two  sub-problems.  First,  we 
should  determine  the  optimal  number  of  loop  unrolling  to 
reduce  the  power  dissipation  on  a  data  bus  under  the  given 
register  budget.  Second,  we  need  to  find  the  load-store 
scheduling  which  minimizes  the  transition  activities  on  a 

2. 
3. 

d                                                                                                              f
1. 

Find  the  optimal  load-store  scheduling  of  the  current  loop  by 
using the method described in Section IV-B. 
Calculate the transition activities caused by step (1). 
Unroll  the  loop  once  more.  If  extra  register  spills  are  occurred, 
set the optimal number of loop unrolling to the current number 
of loop unrolling and exit. 
Find the optimal scheduling of the loop of step (3). 
Calculate the transition activities caused by step (4). 
If (amount of step (2) > amount of step (5)) 

4. 
5. 
6. 

goto step (3); 

else { 
 
 
} 

optimal # of loop unrolling = current # of loop unrolling; 
exit; 

d                                                                                                              f

Figure 3. A greedy loop unrolling algorithm 

data bus. We will discuss two sub-problems in Section IV-A 
and IV-B, respectively.  

A.  Loop Unrolling Problem 

Many multimedia applications have two important char-
acteristics. (1) Many multimedia streams have a strong spa-
tial  locality.  (2)  Most  of  multimedia  operations  change  the 
value of input data value drastically. As we have seen in the 
motivational  example,  loop  unrolling  generally  helps  us  to 
have more chances to exploit these characteristics to reduce 
the transition activities. To find the optimal number of loop 
unrolling, we take a greedy approach. We show the proposed 
algorithm  in  Fig.  3.  Since  no  extra  register  spills  will  be 
caused  by  the  proposed  algorithm,  there  will  be  no  side  ef-
fect on both of the performance and the power dissipation on 
a data bus. 

B.  Load-Store Reordering Problem 

To  find  a  load-store  scheduling  which  minimizes  the 
transition activities on a data bus, we formulate the problem 
using a Load-Store Transition Activity Graph (LSTAG) G = 
(V, E). LSTAG is a directed and weighted graph with a ver-
tex  set  V  =  {v1,…,vn}.  Each  vertex  vi  ∈  V  corresponds  to  a 
load or store instruction in the given multimedia application. 
Each edge eij indicates the data dependency from vertex vi to 
vj.  The  weight  wij  of  the  edge  represents  the  amount  of  the 
transition activities when instruction vj is executed right after 
instruction  vi.  Edge  weights  can  be  determined  by  profiling 
the  amount  of  transition  activities  for  the  given  multimedia 
data and operation. Fig. 4 shows an example of the LSTAG 
for an image inverting application. 

Once the LSTAG graph G is constructed, we can find the 
optimal load-store scheduling by finding a Hamiltonian path 
on G which visits all the vertices exactly once with a mini-
mum-cost. However, due to the data dependency, each load 
instruction  should  be  ahead  of  the  corresponding  store  in-
struction for the correctness of the program. Considering this 
constraint, the low-power load-store reordering problem can 
be reduced to solving a variant of the Asymmetric Traveling 
Salesman Problem (ATSP). 

Although ATSP is an NP-complete problem, we can op-
timally  solve  the  load-store  reordering  problem  using  a 
branch-and-bound-based  approach.  The  reason  is  that  the 

Figure 4. An example of the load-store transition activity graph. 

 

Figure 5. Overall flowchart for the load-store reordering problem.

number  of  load-store  instructions  in  a  typical  multimedia 
application  is  not  quite  large  (i.e.,  relatively  small  solution 
search space) because the number of loop unrolling is bound 
by the available register budget with which loop can be un-
rolled without extra register spills. 

V.  EXPERIMENTAL RESULTS 

We  implemented  all  the  components  of  the  proposed 
load-store  reordering  algorithm  in  C  and  executed  them  on 
an  Intel  Xeon  Pentium  IV  computer  with  2.4GHz  clock 
speed.  The  load-store  scheduling  solver  which  was  imple-
mented using a branch-and-bound-based algorithm found the 
optimal  solution  within  a  reasonable  time  (<  1s).  We  as-
sumed  two  types  of  embedded  micro-processors  which  re-
spectively  have  8-bit  and 32-bit  on-chip data  buses with  32 
general-purpose registers. To validate the effectiveness of the 
proposed algorithm, we performed experiments for a number 
of  image  processing  applications  such  as  inverting,  thresh-
olding,  bit-plane  slicing  (BPS),  high-pass  filtering  (HPF), 
and histogram equalization [7] on 256 × 256 8-bit images. 

Table.  1(a)  and  (b)  summarize  the  reduction  in  the 
amount  of  the  total  transition  activities.  We  set  the  capaci-
tance  ratio  (γ)  to  3  and  normalized  all  the  results  to  the 
amount  of  total  transition  activities  caused  by  the  original 
code. As shown in Table. 1(a) and (b), the proposed scheme 
works  well  for  the  image  inverting  and  thresholding  pro-

application 

inverting 

thresholding 

BPS 
HPF 

histogram 
average 

application 

inverting 

thresholding 

BPS 
HPF 

histogram 
average 

s
e
i
t
i
v
i
t
c
a
 

n
o
i
t
i
s
n
a
r
t
 

d
e
z
i
l
a
m
r
o
n

1

0.8

0.6

0.4

0.2

0

the number of loop 

unrolling 

reduction in transi-
tion activities (%) 

the number of loop 

unrolling 

reduction in transi-
tion activities (%) 

4 
4 
4 
4 
2 
 

4 
4 
2 
2 
1 
 

(a) 

 

 

 

(b) 

54.9 
34.0 
31.6 
16.7 
14.6 
30.4 

48.6 
23.1 
17.8 
9.9 
7.1 
21.3 

Table 1. Reduction in the total transition activities (γ = 3). (a) on an 
8-bit data bus. (b) on a 32-bit data bus 

inverting

thresholding
BPS

HPF
histogram

0

1

2

3

4

capacitance ratio (r)

grams. This is because the image inverting and thresholding 
make output data significantly different from the input data, 
giving  more  rooms  for  an  improvement  by  load-store  reor-
dering. On the other hand, the proposed approach is less effi-
cient for the histogram equalization because the output data 
are less different from the input data than the former image 
processing  applications  and  loop  can  be  unrolled  only  once 
due  to  the  small  budget  of  registers.  On  average,  the  pro-
posed  reordering  reduces  the  amount  of  the  total  transition 
activities by 21.3% on a 32-bit data bus. 

To study the effect of the size of data buses on the total 
transition  activities,  we  performed  experiments  with  two 
different  micro-processors  which  have  8-bit  and  32-bit  data 
buses, respectively. As shown in Table. 1(a) and (b), reduc-
tion  in  the  total  transition  activities  on  a  32-bit  data  bus  is 
generally less than the one on an 8-bit data bus. We can ex-
plain this phenomenon by following two reasons. First, due 
to the interference between different pixels which are loaded 
and  stored  simultaneously  on  a  32-bit  data  bus,  additional 
transition activities have been occurred as a side-effect. Sec-
ond,  with  a  32-bit  data  bus,  less  number  of  loop  unrolling 

can  be  done  than  with  an  8-bit  data  bus  due  to  the  insuffi-
cient  register  budget.  However,  the  amount  of  reduction  in 
the total transition activities is still considerable as shown in 
Table. 1(b). Thus we can expect that the proposed technique 
will  work  well  with  modern  embedded  micro-processors 
which have large size of data buses. 

We  also  performed  an  experiment  to  study  the  effect  of 
the capacitance ratio on reducing the power dissipation (refer 
to  Fig.  6).  We  changed  the  capacitance  ratio  from  0  (i.e., 
only  the  self  transition  activities  are  considered.)  to  4.  The 
proposed  method  works  less  efficiently  with  thresholding 
and bit-plane slicing as the capacitance ratio increases, while 
the  other  multimedia  applications  remained  almost  unaf-
fected.  However,  even  with  the  high  capacitance  ratio,  our 
method still reduces the amount of the total transition activi-
ties  considerably  (21.3%  with  γ=3  and  22.5%  with  γ=4). 
According to [2] the capacitance ratio will be increasing with 
the  smaller  feature  size.  From  the  experimental  result,  we 
can expect that the proposed method will be still quite effec-
tive as the scale of process technology shrinks. 

VI.  CONCLUSION 

We  presented  a  load-store  reordering  technique  for  re-
ducing the amount of transition activities on a data bus. Our 
method  is  based  on  the  observation  that  many  multimedia 
streams have a strong spatial locality and most of multimedia 
operations  generate  the  output  data  which  is  significantly 
different from the input data. To exploit these characteristics, 
we combined loop unrolling and load-store instruction reor-
dering  to  reduce  the  transition  activities  on  a  data  bus.  Ex-
perimental  results  show  that  the  proposed  approach  is  quite 
effective, achieving about 21.3% reduction in the amount of 
transition  activities  on  average  for  many  image  processing 
applications. 

This work was supported by University IT Research Cen-

ter Project. 

REFERENCES 

[1]  A.  P.  Chandrakasan,  S.  Shung,  and  R.  Brodersen,  “Low-Power 
CMOS Digital Design,” IEEE Journal of Solid-State Circuits, vol.27, 
No.4, pages 473-484, April 1992. 

[2]  C.  Lyuh,  T.  Kim,  and  K.  Kim,  “Coupling-Aware  High-Level 
Interconnect  Synthesis,”  IEEE  Trans.  Computer-Aided  Design,  vol. 
23, pp. 157-164, Jan. 2004. 

[3]  Y.  Shin and T. Sakurai, “Coupling-driven bus design for low-power 
application-specific  systems,”  in  Proc.  Design  Automation  Conf., 
2001, pp. 750-753. 

[4]  P. R. Panda and  N. D.  Dutt, “Low-power  memory  mapping through 
reducing  address  bus  activity,”  IEEE  Trans.  VLSI  Syst.,  vol.  7,  pp. 
309-320, Sept. 1999. 

[5]  A. Dasgupta and R. Karri, “Simultaneous scheduling and binding for 
power minimization during microarchitecture synthesis,” in Proc. Int. 
Symp. Low Power Design, Apr. 1995, pp. 69-74. 

[6]  K. Kim, K. Baek, N. Shanbhag, C. L. Liu, and S. Kang, “Coupling-
driven  signal  encoding  scheme  for  low-power  interface  design,”  in 
Proc. Int. Conf. Computer-Aided Design, 2000, pp. 318-321. 

[7]  R. C. Gonzalez and R. E. Woods, Digital Image Processing, Addison-

Wesley, 1992, pp. 161-249. 

Figure 6. Effect of the capacitiance ratio on the total transition activities 
on a 32-bit data bus 

ACKNOWLEDGMENT 

