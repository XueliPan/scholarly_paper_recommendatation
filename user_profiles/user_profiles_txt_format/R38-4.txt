Characterizing Botnets from Email Spam Records

Li Zhuang
UC Berkeley

John Dunagan Daniel R. Simon Helen J. Wang

Ivan Osipkov Geoff Hulten

Microsoft Research

J. D. Tygar
UC Berkeley

Abstract

We develop new techniques to map botnet membership
using traces of spam email. To group bots into botnets we
look for multiple bots participating in the same spam email
campaign. We have applied our technique against a trace
of spam email from Hotmail Web mail services. In this
trace, we have successfully identi(cid:2)ed hundreds of botnets.
We present new (cid:2)ndings about botnet sizes and behavior
while also con(cid:2)rming other researcherâ€™s observations de-
rived by different methods [1, 15].

1 Introduction

In recent years, malware has become a widespread prob-
lem. Compromised machines on the Internet are generally
referred to as bots, and the set of bots controlled by a single
entity is called a botnet. Botnet controllers use techniques
such as IRC channels and customized peer-to-peer proto-
cols to control and operate these bots.

Botnets have multiple nefarious uses: mounting DDoS
attacks, stealing user passwords and identities, generat-
ing click fraud [9], and sending spam email [16]. There
is anecdotal evidence that spam is a driving force in the
economics of botnets: a common strategy for monetizing
botnets is sending spam email, where spam is de(cid:2)ned lib-
erally to include traditional advertisement email messages,
as well as phishing email messages, email messages with
viruses, and other unwanted email messages.

In this paper, we develop new techniques to map bot-
net membership and other characteristics of botnets using
spam traces. Our primary data source is a large trace of
spam email from Hotmail Web mail service. Using this
trace, we both identify individual bots and analyze bot-
net membership (which bots belong to the same botnet).
The primary indicator we use to guide assigning multiple
bots to membership in a single botnet is participation in
spam campaigns, coordinated mass emailing of spam. The
basic assumption is that spam email messages with simi-
lar content are often sent from the same controlling entity,
because these email messages share a common economic

interest. Therefore, the sending machines of these spam
email messages are likely also controlled and operated by
a single entity (though this may be a different entity than
the (cid:2)rst). By grouping similar email messages and related
spam campaigns, we identify a set of botnets.

Our focus on spam is in contrast with much previous
work studying botnets. Previous studies have used or pro-
posed such techniques as monitoring remote compromises
related to botnet propagation [6], actively deploying hon-
eypots and intrusion detection systems [13], in(cid:2)ltrating
and monitoring IRC channel communication [3, 6, 11, 14],
redirecting DNS traf(cid:2)c [8] and using passive analysis of
DNS lookup information [15, 17]. Focusing on spam in-
stead has at least a couple of major bene(cid:2)ts. First it sup-
ports a greatly simpli(cid:2)ed deployment story: the analysis
can be done on an existing email trace from one of the
small number of large Web mail providers (e.g., GMail,
Hotmail, Yahoo Mail). Second, by focusing on spam, the
factor directly related to the economic motivation behind
many botnets, it is harder for botnet owners to evade de-
tection compared to previous approaches (cid:150) in particular,
stopping sending spam email destroys the purpose of these
botnets. Lastly, grouping bots into botnets by analyzing
spam is potentially a less ad-hoc and easier task than an-
alyzing IRC/DNS logs, because IRC messages or DNS
queries vary greatly from one botnet implementation to an-
other [3, 6, 8, 11, 14, 15, 17].

Our approach is not without caveats and challenges.
One obvious caveat is that we are not able to uncover bot-
nets not involved in email spamming. However, as we will
show later, the number and sizes of botnets we discover are
similar to previous (cid:2)ndings with other methods, suggest-
ing that our method covers a large portion of all botnets.
To name a few challenges, (cid:2)rst, it is not trivial to iden-
tify spam email messages from the same campaign as they
are often slightly different. The presence of hosts with dy-
namic IP addresses makes counting number of machines
in a botnet hard. Lastly, the logs we analyze is large in size
(>1TB in our experiment). A useful method has to scale
to datasets of this and potentially larger sizes. Our work

answers all these challenges.

The primary contributions of our work are:

(cid:15) We are the (cid:2)rst to analyze entire botnets (in contrast to
individual bot) behavior from spam email messages.
We propose and evaluate methods to identify bots and
cluster bots into botnets using spam email traces.

(cid:15) Our work is the (cid:2)rst to study botnet traces based on
economic motivation and monetizing activities. Our
approach analyzes botnets regardless of their inter-
nal organization and communication. Our approach is
not thwarted by encrypted traf(cid:2)c or customized bot-
net protocols, unlike previous work using IRC track-
ers [6, 11] or DNS lookup [14, 15, 17].

(cid:15) We report new (cid:2)ndings about botnets involved in
email spamming. For example, we report on the re-
lationship between botnets usage and basic properties
such as size. We also con(cid:2)rm previous reports on ca-
pabilities of botnet controllers and botnet usage pat-
terns.

We successfully found hundreds of botnets by examin-
ing a subset of the spam email messages received by Hot-
mail Web mail service. The sizes of the botnets we found
range from tens of hosts to more than ten thousand hosts.
Our measurement results will be useful in several ways.
First, knowing the size and membership gives us a bet-
ter understanding on the threat posed by botnets. Second,
the membership and geographic locations are useful infor-
mation for deployment of countermeasurement infrastruc-
tures, such as (cid:2)rewall placement, traf(cid:2)c (cid:2)ltering policies,
etc. Third, characterizing botnets behavior in monetiz-
ing activities may help in (cid:2)ghting against botnets in these
businesses, perhaps reduce their pro(cid:2)ts in sending spam,
generating click fraud, and other nefarious activities. Fi-
nally, such information about botnets may also give law
enforcement help in combating illegal activities from bot-
nets. We believe that the techniques presented here may
also be applicable to related domains, such as identify-
ing botnet membership through click fraud (analogous to
spam) identi(cid:2)ed in search engine click logs (analogous to
email traces).

The rest of the paper is organized as follows. We com-
pare our work with related work in Section 2. We present
our approach of extracting bots and botnets by mining
spam emails in Section 3 and 4. We describe the results
of our analysis in Section 5. Finally, we conclude in Sec-
tion 6.

2 Related Work

Techniques to gather botnets for study fall mainly into
two categories [15]. The (cid:2)rst category of techniques col-
lect botnets traf(cid:2)c from the (cid:147)inside(cid:148), using IRC channel
in(cid:2)ltration[3, 6, 11] or traf(cid:2)c redirection [8]. The second
category of techniques track botnets from external traces,

for example, using DNS lookup information [14, 17], or
(cid:3)ow data across a large Tier 1 ISP network [12]. Our work
falls into the second category, using spam email messages
as the external trace of botnets. This data source is interest-
ing because it is relatively easy to collect and comprehen-
sive in nature. In comparison, DNS probing [14, 15, 17]
requires extra queries to DNS servers. The tracking capa-
bility could be limited by the querying rate to DNS servers.
While previous work focuses on traf(cid:2)c generated by bot-
nets, our work is the (cid:2)rst to study botnet traces based on
economic motivation and monetizing activities. Along this
direction, we expect a new category of traces can be used to
characterize botnets from different perspectives (see Sec-
tion 6). Our work takes activities from individual bots and
aggregates them into botnets. The aggregation techniques
proposed in this paper may generally bene(cid:2)t analysis of
other traces in this category.

Several previous studies [2, 16] use spam email mes-
sages collected at a single or small number of points to gain
insight into different aspects of the Internet. SpamScat-
ter [2] clusters spam email based on the destination website
linked to from the spam email messages, mainly for study-
ing the machines hosting these landing page. In contrast,
we cluster email based on content and study the source (i.e.
sending) infrastructure. Ramachandran and Feamster [16]
also studies the interaction between spam email messages
and botnets. However, they do not infer botnet member-
ships from spam email data. Their work is more about
characteristics of bots in general and studies network-level
characteristics among all email messages and sender ad-
dresses (or bots).

3 Overview

Our technique takes as input a large dataset of spam email
messages, collected at Hotmail over a period of days to
weeks, and outputs a list of probable botnets involved in
generating these spam messages and their corresponding
statistics (such as sizes, activity over time and the geo-
graphic distribution of participating hosts).

The major steps involved in identifying the botnets are
brie(cid:3)y described below. The next section presents them in
detail.

1. Cluster email messages into spam campaigns. We
assume that spam email messages with identical or
similar content are sent from the same controlling en-
tity. Our (cid:2)rst step is to identify these groups of mes-
sages, which we will refer to as spam campaigns. A
lot of spam messages from the same campaign are
similar but not identical, to evade detection. We use
shingling [4] to ef(cid:2)ciently group them. The basic idea
is to compute a number of (cid:2)ngerprints (e.g. 10) for
each message, and messages sharing more than a few
common (cid:2)ngerprints are those identical or very close
in content.

2. Assess IP dynamics. Hosts with dynamic IP ad-
dresses will affect our results by raising the estima-
tion of hosts involved over a period of time. We use a
model to reverse this effect by computing parameters
of IP dynamics for different parts of the IP address
space. Concretely, for each C-subnet, we extract 1)
the average time until an IP address gets reassigned;
2) the IP reassignment range. Using these parameters,
we propose a way to estimate the probability whether
two spam messages sent at different times are initi-
ated from the same machine. This approach bears re-
semblance to [18].

3. Merge spam campaigns into botnets. Multiple
spam campaigns can come from the same botnet.
Based on the (cid:2)rst two steps, we merge individual
spam campaigns together into a set of spam cam-
paigns initiated by the same botnet if the sending
hosts signi(cid:2)cantly overlap. For each spam message in
a spam campaign, we estimate the likelihood that the
sending host also participates in another spam cam-
paign, taking IP dynamics into account. Then, if a
large number of senders participate in both spam cam-
paigns, we merge the two together.

As we work with large datasets (>1TB), the steps above
poses formidable computational challenges for a single
computer. We design most of our algorithms to use the
MapReduce [10] model and run them on a cluster of
120 computers, such that the experiments have acceptable
turnaround times. Due to space limitation, however, we do
not cover these implementation details in this paper.

4 Methodology

In this section, we discuss in detail our approach to extract-
ing botnet membership by analyzing spam email data. We
(cid:2)rst de(cid:2)ne a set of terms used in the discussion below.

(cid:15) A spam email message is an unsolicited bulk email
message, often sent to many people with little or no
change in content.

(cid:15) A spam campaign is a set of email messages with the
same or almost the same content, or content that is
closely related(cid:150)e.g. linking to the same target URL.

(cid:15) A botnet is a set of machines that collaborate together

to run one or more spam campaigns.

4.1 Datasets and Initial Processing

We work with an email dataset collected from the Hotmail
Web mail service, referred to hereafter as the (cid:147)Junk Mail
Samples (JMS)(cid:148) dataset. It is a randomly-sampled collec-
tion of messages reported by users or automatical identi-
(cid:2)ed as spam, containing about 5 million spam messages
collected over a 9-day period from May 21, 2007 to May
29, 2007. The sample rate of JMS dataset is 0.001. The

size of the dataset is about the same as the one used in [16]
(collected over 1.5 years however), and one order of mag-
nitude larger than that used in [2] (collected in 7 days). We
think the 9-day duration is reasonable given the fact that
spam campaigns change fast over time [2].

We do some initial processing of the raw-format mes-
sages before the next step. The (cid:2)rst is to extract a reli-
able sender IP address heuristically for each message. Al-
though the message format dictates a chain of relaying IP
addresses in each message, a malicious relay can easily al-
ter that. Therefore we cannot simply take the (cid:2)rst IP in
the chain. Instead, our method is as follows (similar to the
one in [5]). First we trust the sender IP reported by Hot-
mail in the Received headers, and if the previous relay IP
address (before any server from Hotmail) is on our trust
list (e.g. other well-known mail services), we continue to
follow the previous Received line, till we reach the (cid:2)rst un-
recognized IP address in the email header. This IP address
is then taken as the email source. We also parse the body
parts to get both HTML and text from each email message.
In the end, we have for each message the sending time and
content (HTML/plaintext) along with sender IP address.

4.2 Identifying Spam Campaigns

A spam campaign consists of many related email mes-
sages. The messages in a spam campaign share a set of
common features, such as similar content, or links (with or
without redirection) to the same target URL. By exploit-
ing this feature, we can cluster spam email messages with
same or near-duplicate content together as a single spam
campaign.

Spammers often obfuscate the message content such
that each email message in a spam campaign has slightly
different text from the others. One common obfuscating
technique is misspelling commonly (cid:2)ltered words or in-
serting extra characters. HTML-based email offers addi-
tional ways to obfuscate similarities in messages, such as
inserting comments, including invisible text, using escape
sequences to specify characters, and presenting text con-
tent in image form, with randomized image elements.

The algorithm to cluster together spam email messages
with the same or near-duplicate content must be robust
enough to overcome most of the obfuscation. Fortunately,
most obfuscation does not signi(cid:2)cantly change the main
content of the email message after being rendered, because
it still needs to be readable and deliver the same informa-
tion. Thus, we (cid:2)rst use ad hoc approaches to pre-clean the
raw content and get only the rendered content, and then
use the shingling [4] algorithm to cluster near-duplicate
content together. The basic idea is to generate a set of
(cid:2)ngerprints that represent the pre-cleaned content of each
message. If two messages share signi(cid:2)cant number of (cid:2)n-
gerprints, they will be marked as (cid:147)connected(cid:148) in content.

Now, we consider each email message as a node in a

graph, and draw an edge between two nodes if the corre-
sponding two messages are connected in content, or share
the same embedded links. We then de(cid:2)ne each connected
component in the graph as a spam campaign. Using the
Union-Find algorithm [7], we can label all connected com-
ponents on the graph, with each label representing a spam
campaign. We can thus generate a list of detected spam
campaigns. To assign labels, we associate each spam cam-
paign with the list f(IPi; ti)g of IP events consisting of
the IP address IPi and sending time ti extracted from each
email message in the campaign.

Text shingling is only one possible approach to group
emails into spam campaigns. Other ways to do so is com-
plementary to our overall approach. For example, one
could use the target URL-based approach proposed in [2]
to (cid:2)nd spam campaigns. Different approaches have differ-
ent pros and cons. For example, text shingling certainly
cannot handle spam messages that are completely images,
while the URL-based approach will miss spam campaigns
that contain different URLs in messages and then redirect
to the same website.

4.3 Skipping Spam from Non-bots

Many spam messages are not sent from botnets. We use a
set of heuristics to (cid:2)lter out these messages.

(cid:15) We build a list of known relaying IP addresses, which
includes SMTP servers from email service providers,
ISP MTA servers, popular proxies, open relays, etc. If
the sender IP address of a message (extracted in Sec-
tion 4.1) is on this list, we exclude that email from fur-
ther analysis, as these servers are only relaying oth-
ersâ€™ messages.

(cid:15) We also remove campaigns whose senders are all
within a single C-subnet, which is likely to be owned
by the spammer himself instead of bot machines.

(cid:15) Some more powerful spammers may employ multiple
connections at the same physical location to directly
send spam. Therefore we employ another rule that
removes campaigns with senders from less than three
geographic locations (cities).

Admittedly, the above list cannot remove all non-botnet
spam campaigns. We try to strike a balance between letting
too many non-botnet campaigns in and removing wrongly
too many botnet-originating campaigns. Hotmail already
blocks most spam messages from spammer servers and
many open relays using volume-based and other policies.
Moreover, we are con(cid:2)dent that spam campaigns originat-
ing from hundreds or even thousands of geographic lo-
cations are operated by botnets. Finding ways to clearly
characterize the nature of campaigns coming from smaller
numbers of geographic locations is future work.

4.4 Assessing IP Dynamics

Many home computer users currently connect to the Inter-
net through dial-up, ADSL, cable or other services that as-
sign them new IP addresses constantly (cid:151) anywhere from
every couple of hours to every couple of days. This af-
fects our estimation of number of hosts involved in each
spam campaign. We correct this by estimating how (cid:147)dy-
namic(cid:148) each IP address is, and compensate by (cid:147)merging(cid:148)
some dynamic IP addresses with other IP addresses in the
same spam campaign.

The problem of IP dynamics was (cid:2)rst presented and
studied in [18]. However, we are not able to directly use
their results because our application requires a different set
of parameters. We design a similar but different approach
of estimating IP dynamics:

We begin by assuming that within any particular C-
subnet, the IP address reassignment strategy is uniform.
We also assume that IP address reassignment is a Poisson
process and measure two IP address reassignment param-
eters in each C-subnet: the average lifetime Jt of an IP
address on a particular host, and the maximum distance Jr
between IP addresses assigned to the same host.

The dataset from which Jt and Jr are measured is the
log of 7 daysâ€™ user login/logout events (June 6-12, 2007)
from the MSN Messenger instant messaging service. For
each login/logout event, we obtain an anonymized user-
name and IP address for that session. We then associate
login/logout events for the same username to construct a
sequence:

username :

(IP1; [login-time1; logout-time1]);
(IP2; [login-time2; logout-time2]);
(IP3; [login-time3; logout-time3]);
: : :

We assume that each user connects to the MSN Messen-
ger service from a small, (cid:2)xed set of machines (e.g. an
of(cid:2)ce computer and a home computer), and detect cases
where multiple IP addresses are associated with a particu-
lar username. We label each such change as an IP address
reassignment if the IP addresses are suf(cid:2)ciently (cid:147)close(cid:148):
we de(cid:2)ne (cid:147)close(cid:148) as within a couple of consecutive B-
subnets; otherwise, we assume that two different machines
are involved. We then aggregate our detection among all
IP addresses in the same C-subnet and remove anomalous
events. We then calculate, based on the Poisson process
assumption, Jt and Jr for each individual C-subnet.

Thus, given two IPs at two different times, (IP1; t1) and
(IP2; t2), if either IP1 or IP2 is out of the distance range
(Jr) of another, we regard these two events as from two
different machines. If both IP1 and IP2 are within the dis-
tance range (Jr) of each other, we make the computation
below.

P[IP1 = IP2j actually the same machine]

=

Jr (cid:0) 1

Jr

exp

(cid:18)

(cid:0)(t2 (cid:0) t1)

Jt

(cid:19)

+ 1=Jr = w(t1; t2):

This is the probability that a machine has kept the same IP
address after an interval of duration t2 (cid:0) t1.

P[IP1 6= IP2j actually the same machine]

=

Jr (cid:0) 1

Jr

(cid:20)

1 (cid:0) exp

(cid:0)(t2 (cid:0) t1)

(cid:18)

Jt

(cid:19)(cid:21)

= 1 (cid:0) w(t1; t2):

This is the probability that a machine changes its IP ad-
dress (cid:150) that is, that an IP reassignment happens (cid:150) during
an interval of duration t2 (cid:0) t1.

Figure 1 shows the Probability Density Function (PDF)
of IP reassignment time among all C-subnets (about 25%
of C-subnets never see IP reassignment in the 7 day log).
According to the (cid:2)gure, a large portion of IP addresses get
reassigned almost every day.

4.5 Identifying Botnets

Each spam campaign is represented as a sequence of events
(IP; t), where each event is a spam email message that be-
longs to the spam campaign. The question is, given two
spam campaigns SC1 and SC2, how do we know whether
they share the same controller (i.e.
they are part of the
same botnet)? We put two spam campaigns in the same
botnet if their spam events are signi(cid:2)cantly connected. We
now de(cid:2)ne the connection between two spam campaigns.
Given a event (IP1; t1) from spam campaign SC1 and
a event (IP2; t2) from spam campaign SC2, we assign a
connection weight between them. The connection weight
is the probability that these two events would be seen if
they were actually from the same machine. We have de-
(cid:2)ned this probability in Section 4.4, i.e. w(t1; t2) if two
IP addresses are equal, or 1 (cid:0) w(t1; t2) if two IP addresses
are not equal but within distance range of each other, or 0
otherwise. For all events in a spam campaign SC1, we use

i maxj[w(ti; tj) or (1 (cid:0) w(ti; tj)) or 0]

W =

P

jSC1j

to measure the fraction of events in SC1 that are connected
to some events in SC2, where i and j represents IP events
in SC1 and SC2. W , called as connectivity degree, ranges
from 0 to 1. If this W is large, it means a signi(cid:2)cant portion
of the events in SC1 are connected to events in SC2, and
thus, we should merge SC1 into SC2.

We use the connectivity degree W to decide whether we
should merge a spam campaign into another as they are
in the same botnet. We expect a bimodal pattern in the
distribution of W : a large portion of W values are small,
which correspond to pairs of non-connected spam cam-
paigns; while a small portion of W values are relatively
large, which correspond to pairs of spam campaigns from
the same botnet; there are few W values in the middle. The
W value in the middle is a reasonable threshold to merge

spam campaigns. The PDF of W in Figure 2 meets our
expectation. Based on this, we select 0.2 as a reasonable
threshold to decide whether a spam campaign should be
merged to another. In our experiments, we also test thresh-
olds from 0.05 to 0.35, and we found that this change had
very little effects to the botnet detection results. Because
the detection is not sensitive to the threshold, it gives us
more con(cid:2)dence in the validity of the clustering.

The connectivity degree W is also related to the way
that botnet controllers use their botnets. If a botnet con-
troller always use all its bots to run each spam campaign,
we will observe that each spam campaign has W = 1 to
other spam campaigns from this botnet. However, as we
will show in Section 5.2 botnet controllers use only a sub-
set of available bots each time.

4.6 Estimating Botnet Size

Now, each botnet contains a sequence of events (IP; t) that
correspond to all spam sent by this botnet. We want to
identify distinct machines that generate these events.
In
Section 4.4, we have already de(cid:2)ned the probability that
two events are from the same machine. We use this de(cid:2)ni-
tion to examine events in a botnet: when an event (IP2; t2)
is from the same machine of a previous event (IP1; t1), IP2
is a reoccurrence of IP1. So, we can estimate the probabil-
ity that an IP address is a reoccurrence of any previous IP
address:

c = 1 (cid:0)

P[IP is not a reoccurrence of IPi];

Yi

where i ranges over all events that happen before this IP
event. The value of c equals 1 if the IP address is a re-
occurrence, 0 if the IP address is not a reoccurrence. We
can count the number of distinct machines appeared in the
downsampled dataset (JMS) in this way.

Furthermore, we want to estimate the total size of bot-
nets from the downsampled dataset (JMS). We assume bots
in the same botnet behave similarly (cid:151) each bot sends ap-
proximately equal number of spam messages.

We de(cid:2)ne the following quantities:
(cid:15) r: downsample rate of the dataset
(cid:15) N : number of spam email messages observed
(cid:15) N1: number of bots observed with only one spam

email in the dataset

We want to measure botnets size and number of spam

email messages sent per bot:

(cid:15) s: the mean number of spam messages sent per bot
(cid:15) b: number of bots (i.e. botnet size)

The estimated number of spam email messages from a
botnet is N=r = sb. The expected number of bots ob-
served with only one spam email message is

N1 = b

r(1 (cid:0) r)s(cid:0)1
(cid:20)

(cid:18)

s
1(cid:19)(cid:21)

= N (1 (cid:0) r)s(cid:0)1

F
D
P

 4e-06
 3.5e-06
 3e-06
 2.5e-06
 2e-06
 1.5e-06
 1e-06
 5e-07
 0

l

)
e
a
c
S
-
g
o
L
(
 
F
D
P

 64
 32
 16
 8
 4
 2
 1
 0.5
 0.25
 0.125

 0

 1

 2

 3

 4

 5

 6

 7

 0

 0.2

 0.4

 0.6

 0.8

 1

Duration (Days)

Connectivity Degree

Figure 1: PDF of IP Reassign Duration

Figure 2: PDF of the Campaign Merge Weight

Thus, we get the average number of spam email messages
sent per bot (s) and botnet size (b):

we can see that short-lived spam campaigns actually have
larger volume. In particular, more than 70% of spam mes-
sages are sent by spam campaigns lasting less than 8 hours.

s =

log(N1=N )
log(1 (cid:0) r)

+ 1; b =

N
rs

5 Metrics and Findings

In this section, we present results on metrics and character-
istics of botnets, and their behavior in sending spam mes-
sages. These metrics are measured on spam campaigns and
botnets detected as described in Section 4.

5.1 Spam Campaign Duration

The duration of spam campaigns, de(cid:2)ned as the time be-
tween the (cid:2)rst email and the last email seen from a cam-
paign, is an important metric about behavior of botnets.
Here we present measurement of this in the JMS dataset.
Note that this is often different from the lifetime of the bot-
nets themselves, as spammers often rent the same botnets
to launch multiple spam campaigns over time.

We get our results using the following method. We look
at those spam campaigns that happen to appear (cid:2)rst on the
second day in our dataset and count how many days they
last. We do not look at those appearing on the (cid:2)rst day
because they may well be already running before that day.
And as most campaigns run continuously, starting from the
second day is likely enough to ensure that these campaigns
do indeed start on that day. Additionally, we remove 7%
of the spam email in the JMS dataset because there are
not enough similar spam messages for these campaigns to
give reliable results (cid:151) these email messages might be user
introduced or automatical detected false positives.

Figure 3 shows the Cumulative Distribution Function
(CDF) of spam campaign durations. We can see that over
50% of spam campaigns actually (cid:2)nish within 12 hours.
After that the durations distributed rather evenly between
12 hours to 8 days, and about 20% of campaigns persist
more than 8 days.

Figure 4 shows the CDF of each spam campaign,
weighted by email volume. Comparing this to Figure 3,

5.2 Botnet Sizes

The capability of botnet controllers and level of activity of
botnets are two important metrics for understanding bot-
nets. To measure the capability, we need to estimate the
total size of each botnet based on our 9 days of observa-
tion. To measure the level of activity, we estimate the ac-
tive working set of each botnet in a short time window,
such as one hour. As botnet population is dynamic over
time, we use (cid:147)botnet size(cid:148) to refer to the estimated number
of bots actually used for activities during our time window.
This size is estimated as explained in Section 4.6. Infected
machines are often not cleaned for several weeks. During
the period of infection, machines have activities at least ev-
ery few days. Thus, bots actually used during an observa-
tion window of nine days give a good approximation of the
number of machines controlled by a botnet controller. If
we do not consider the IP dynamics, the number of distinct
IP addresses appeared in JMS dataset could be two times
larger than the number of distinct machines estimated.

We detected 294 botnets in the JMS dataset and the fol-
lowing measurements are based on these 294 botnets. The
estimated total sizes of botnets indicates of an upper bound
on the capabilities of spammers or botnet controllers (cid:150) they
likely have only compromised this many machines total.
Issues such as proxy and NAT could affect the accuracy of
the botnet size estimation. This is a topic for future study.
Figure 5 shows the CDF of estimated botnet size1. In our
dataset, the estimated total sizes of botnets ranges from a
couple of machines to more than ten thousands machines;
about 50% of botnets contain over 1000 bots each, which
is consistent with a similar metric in [15]. The number
of spam email messages sent per bot ranges from tens to
a couple of thousands during the 9-day observation win-
dow (Figure 6). Some botnet controllers are conservative
in limiting number of spam email messages sent per bot.

1This is the estimation of the number of bots actually used, not just

those seen in our dataset.

F
D
C

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

 1

 0.8

 0.6

 0.4

 0.2

F
D
C

F
D
C
d
e

 

t

i

h
g
e
W

F
D
C

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

 1

 0.8

 0.6

 0.4

 0.2

 0

 10

 24

 48

 72

 96

 120

 144

 168

 24

 48

 72

 96

 120

 144

 168

Last Time (Hours)

Last Time (Hours)

JMR

JMR

Figure 3: CDF of spam campaign duration

Figure 4: CDF of spam campaign duration weighted by
email volume

 0

 1

 10

Total Size
Active Size

Overtime
In Active Window

 100
 1000
Size (Log-Scale)

 10000

 100000

 100
 1000
Spams per Bot (Log-Scale)

 10000

Figure 5: CDF of botnet size

Figure 6: CDF of spam email messages sent per bot

5.2.1 Active Size vs. Level of Activity

In a time window t (1 hour in our experiments):

(cid:15) (cid:147)Active size(cid:148) of a botnet is de(cid:2)ned as the number of
machines/IPs used for sending spam email messages
by this botnet during this time window t.

(cid:15) (cid:147)Spam sent per active bot(cid:148) in a botnet is de(cid:2)ned as
number of spam email messages sent from each bot
in a botnet during this time window t.

In the experiment, we study events of a botnet in each
time window t during the 9-day duration. Since we limit t
to one or a couple of hours, we can reasonably assume that
IP reassignment does not happen. To measure the active
size and number of spam email sent per active bot during
all time windows (1 hour each), we calculate characteris-
tics in each time window and then average results over all
time windows during the 9-day period.

The active size of a botnet and the number of spam
email messages sent per active bot has strong impact on the
ef(cid:2)ciency and effectiveness of IP blacklisting or volume-
based (cid:2)lters in (cid:2)ltering spam sent by botnets. Spammers
generally use two method to evade IP based (cid:2)ltering: 1)
they send fewer spam messages per bot (which looks like
legitimate use); 2) they use a small portion of machines
at one time and round-robin among all machines in their
control.

Figure 7 shows the relationship between the average ac-
tive size of a botnet and the number of spam email mes-
sages sent per active bot. We see that large-size botnets
tend to send less spam per bot, small-size botnets tend
to send more spam per bot, while mid-size botnets be-

have both ways. This suggests that spam controllers may
have clear plans about the number of spam messages to
be sent, and then stop after these goals are met. Alterna-
tively, the number of email addresses that spammers pos-
sess may limit the total number of spam messages sent
from their botnets. We also (cid:2)nd that there is no signi(cid:2)cant
relationship between active botnet duration and the num-
ber of spam messages sent per bot. Taken together with
Figure 7, we conclude that botnet size is the primary factor
that determines the number of spam messages sent per bot.

5.2.2 Activity Ratio

The activity ratio is de(cid:2)ned as the ratio of active size to es-
timated total size of a botnet. The activity ratio in each time
window (one hour) is calculated and then averaged over 9
days. The average activity ratio ranges in (0, 1]. The value
of 1 means the botnet uses all machines it controls; while
0 means a botnet uses none of its machine. The average
activity ratio indicates whether botnets controllers use all
machines they have, or use a small fraction of machines
and round robin among these machines.

Figure 8 is the CDF of activity ratio of botnets. About
80% of botnets use less than half of bots at a time in their
network. We (cid:2)nd that the activity ratio and the total size
are not related. That is, in general, a botnet controller
might use any portion of bots in his or her control regard-
less of the total number controlled.

l

)
e
a
c
S
-
g
o
L
(
 
t

o
B

 
.
t
c
A

 
/
 
s
m
a
p
S

 
f

o

 

#

 
.

g
v
A

 10000

 1000

 100

 10

 1

 1

F
D
C

 1

 0.8

 0.6

 0.4

 0.2

 0

 10

 100

 1000

 10000

 100000

 0

 0.1

 0.2

 0.3

 0.4

 0.5

 0.6

 0.7

 0.8

 0.9

 1

Avg. Act. Size of Botnets (Log-Scale)

Average Relative Size

Figure 7: Average active size of botnets vs. average num-
ber of spam email messages sent per active bot

Figure 8: CDF of activity ratio of botnets

5.3 Per-day Aspect: Life Span of Botnets

and Spam Campaigns

If we look at all spam email messages received in a day by
an email server (or an end user), how much spam is from
long-lived botnets or spam campaigns? If a new botnet is
being used every day for a new spam campaign, monitor-
ing botnets might not be helpful to anti-spam (cid:2)lters. How-
ever, if some botnets are devoted to the spamming busi-
ness, identifying these botnets is more promising.

We study the duration of botnets and spam campaigns
on a per-day basis. We look at spam email messages re-
ceived on a particular day, identify botnets or spam cam-
paigns these spam messages belong to, and compute the
distribution of botnets and spam campaigns with activity
on that particular day.

In our experiment, we study botnets with activity on the
last day of our 9-day observation window, and then look
backward to their (cid:2)rst activities. Each botnet is at least ac-
tive for x (1 (cid:20) x (cid:20) 9) days. Figure 9 shows that about
60% of spam received from botnets each day are sent from
long-lived botnets. This is a good indication that moni-
toring botnet behavior, membership, and other properties
using the approaches proposed in this paper can help to re-
duce signi(cid:2)cantly the amount of spam received on a daily
basis.

5.4 Geographic Distribution of Botnets

The geographic distribution of botnets is an important met-
ric about the ability of botnet controllers in compromising
and taking over machines. Figure 10 shows that about half
of botnets detected from the JMS dataset control machines
in over 30 countries. Some botnets even control machines
in over 100 countries. This shows that currently botnets
are very widely distributed, in part because of the wide
distribution of malwares, viruses, etc.
It could also be-
cause malicious people have developed more sophisticated
means to control widely distributed machines ef(cid:2)ciently.
Others have observed that a botnet typically sends spam
messages with the same topic from all over the world, es-
pecially from those IP ranges assigned to dial-up, ADSL or
cable services [1]. The wide geographic distribution in our

results is consistent with their observations. Using the es-
timation method proposed in Section 4.6, the total number
of bots involved in sending spam email all over the world
during the 9-day observation period of the JMS dataset is
about 460,000 machines.

6 Conclusion and Future Work

Our work is a (cid:2)rst step to study botnets from their eco-
nomic motivations. By directly tracing the actual oper-
ation of bots using one of their primary revenue sources
(spam email), we get a picture of bot activity: one that con-
(cid:2)rms and deepens the understanding suggested by previ-
ous work. By identifying common characteristics of spam
email, we associated email messages with botnets. This
allows us to make estimates about the size of a botnet, be-
havioral characteristics (such as the amount of spam sent
per bot), and the geographical distribution of botnets.

We hope our work opens new directions in understand-
ing botnet activities. We think there are at least a couple
of interesting future directions. First, we want to validate
the results detected from spam email by cross-referencing
with results inferred using other techniques such as IRC
in(cid:2)ltrating. Comparing with other detection results will
also let us know the portion of botnets that do not spam at
all, which are missed from our approach. Second, we want
to use detection results in this paper as an extra source of
information to (cid:2)lter spam email. For example, we assign
different volume thresholds to senders belong to different
botnets given their previous behavior. We may also check
the existence of same botnets in query log or ad click log.
Third, certain techniques such as image shingles can to be
used together to cluster image-based spam email messages.
Finally, we want to further study possible countermeasure-
ments from botnet controllers in order avoid being detected
by our approach.

7 Acknowledgements

The (cid:2)rst author did this work while she was a summer
intern at Microsoft Research. This work was also sup-
ported in part by TRUST (Team for Research in Ubiq-

 1

 0.8

 0.6

 0.4

 0.2

F
D
C

 0
>=9d

F
D
C

 1

 0.8

 0.6

 0.4

 0.2

 0

 0

Botnet
Spam Campaign

>=8d

>=7d

>=6d

>=5d

>=4d

>=3d

>=2d

>=1d

>=0d

 20

 40

 60

 80

 100

 120

Duration (Days)

# of Countries Participated

Figure 9: CDF of botnets and spam campaign duration
from a per-day-activity aspect

Figure 10: Number of countries in botnets

[11] FREILING, F. C., HOLZ, T., AND WICHERSKI, G.
Botnet tracking: Exploring a root-cause methodol-
ogy to prevent distributed denial-of-service attacks.
In ESORICSâ€™05.

[12] KARASARIDIS, A., REXROAD, B., AND HOEFLIN,
D. Wide-scale botnet detection and characterization.
In HotBotsâ€™07.

[13] KRASSER, S., CONTI, G., GRIZZARD, J., GRIB-
SCHAW, J., AND OWEN, H. Real-time and foren-
sic network data analysis using animated and coordi-
nated visualization. In IAWâ€™05.

[14] RAJAB, M. A., ZARFOSS, J., MONROSE, F., AND
TERZIS, A. A multifaceted approach to understand-
ing the botnet phenomenon. In IMCâ€™06.

[15] RAJAB, M. A., ZARFOSS, J., MONROSE, F., AND
TERZIS, A. My botnet is bigger than yours (maybe,
better than yours). In HotBotsâ€™07.

[16] RAMACHANDRAN, A., AND FEAMSTER, N. Under-
standing the network-level behavior of spammers. In
SIGCOMMâ€™06.

[17] RAMACHANDRAN, A., FEAMSTER, N., AND
DAGON, D. Revealing botnet membership using
dnsbl counter-intelligence. In SRUTIâ€™06.

[18] XIE, Y., YU, F., ACHAN, K., GILLUM, E., GOLD-
SZMIDT, M., AND WOBBER, T. How dynamic are
ip addresses? In SIGCOMMâ€™07.

uitous Secure Technology), which receives support from
the National Science Foundation (NSF award number
CCF-0424422) and the following organizations: AFOSR
(#FA9550-06-1-0244), Cisco, British Telecom, ESCHER,
HP, IBM, iCAST, Intel, Microsoft, ORNL, Pirelli, Qual-
comm, Sun, Symantec, Telecom Italia, and United Tech-
nologies. The opinions in this paper are those of the au-
thors and do not necessarily re(cid:3)ect the views of their em-
ployers or funding sponsors.

References

org/.

[1] Shadow server. http://www.shadowserver.

[2] ANDERSON, D. S., FLEIZACH, C., SAVAGE, S.,
AND VOELKER, G. M. Spamscatter: Characteriz-
ing internet scam hosting infrastructure. In USENIX
Securityâ€™07.

[3] BINKLEY, J. R., AND SINGH, S. An algorithm for

anomaly-based botnet detection. In SRUTIâ€™06.

[4] BRODER, A. Z., GLASSMAN, S. C., MANASSE,
M. S., AND ZWEIG, G. Syntactic clustering of the
web. In WWWâ€™97.

[5] BRODSKY, A., AND BRODSKY, D. A distributed
content independent method for spam detection. In
HotBotsâ€™07.

[6] COOKE, E., JAHANIAN, F., AND MCPHERSON, D.
The zombie roundup: understanding, detecting, and
disrupting botnets. In SRUTIâ€™05.

[7] CORMEN, T. H., LEISERSON, C. E., RIVEST,
R. L., AND STEIN, C. Introduction to Algorithms,
Second Edition. The MIT Press, September 2001.

[8] DAGON, D., ZOU, C., AND LEE, W. Modeling bot-

net propagation using time zones. In NDSSâ€™06.

[9] DASWANI, N., STOPPELMAN, M., AND THE
GOOGLE CLICK QUALITY AND SECURITY TEAMS.
The anatomy of clickbot.a. In HotBotsâ€™07.

[10] DEAN, J., AND GHEMAWAT, S. Mapreduce: sim-
pli(cid:2)ed data processing on large clusters. Commun.
ACM 51, 1 (January 2008), 107(cid:150)113.

