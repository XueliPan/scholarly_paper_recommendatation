Algorithm Visualization: A Report on the State of the Field

Clifford A. Shaffer

Department of Computer

Matthew Cooper

Department of Computer

Stephen H. Edwards
Department of Computer

Science

Virginia Tech

Blacksburg, VA 24061
shaffer@cs.vt.edu

Science

Virginia Tech

Science

Virginia Tech

Blacksburg, VA 24061

macooper@cs.vt.edu

Blacksburg, VA 24061
edwards@cs.vt.edu

ABSTRACT
We present our ﬁndings on the state of the ﬁeld of algo-
rithm visualization, based on extensive search and analysis
of links to hundreds of visualizations. We seek to answer
questions such as how content is distributed among topics,
who created algorithm visualizations and when, the overall
quality of available visualizations, and how visualizations
are disseminated. We have built a wiki that currently cat-
alogs over 350 algorithm visualizations, contains the begin-
nings of an annotated bibliography on algorithm visualiza-
tion literature, and provides information about researchers
and projects. Unfortunately, we found that most existing
algorithm visualizations are of low quality, and the content
coverage is skewed heavily toward easier topics. There are
no eﬀective repositories or organized collections of algorithm
visualizations currently available. Thus, the ﬁeld appears in
need of improvement in dissemination of materials, inform-
ing potential developers about what is needed, and propa-
gating known best practices for creating new visualizations.

Categories and Subject Descriptors
E.1 [Data Structures]; E.2 [Data Storage Represen-
tations]; K.3.2 [Computers and Education]: Computer
and Information Science Education

General Terms
Algorithms, Measurement, Design

Keywords
Data Structure and Algorithm Visualizations, Algorithm
Animation, Courseware

1.

INTRODUCTION

Data structure and algorithm visualizations and anima-
tions (hereafter referred to generically as algorithm visu-
alizations) have a long history in computer science educa-
tion. While the 1981 video “Sorting out Sorting” by Ronald

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCSE’07, March 7–10, 2007, Covington, Kentucky, USA.
Copyright 2007 ACM 1-59593-361-1/07/0003 ...$5.00.

Baeker was the ﬁrst well-known visualization, ad hoc visu-
alizations existed long before. The ﬁrst recognized system
for creating algorithm animations was BALSA [2] in 1984.
Since then, hundreds of algorithm visualizations have been
implemented and provided freely to educators, and scores
(or hundreds) of papers have been written about them.

It is widely perceived that algorithm visualizations can
provide a powerful alternative to static written presentations
(from textbooks) or verbal descriptions supported by illus-
trations (from lectures). There has been some debate in the
literature as to whether algorithm visualizations are eﬀective
in practice. Some studies have shown the classic dismissal
that is the downfall of most technological interventions in
education: “no signiﬁcant diﬀerence” [6, 9, 11]. Other stud-
ies have shown that algorithm visualizations can indeed im-
prove understanding of the fundamental data structures and
algorithms that are part of a traditional computer science
curriculum [13, 3, 7]. Certainly, many visualizations exist
and are widely (and freely) available via the Internet. Un-
fortunately, the vast majority of those currently available
serve no useful pedagogical purpose.

So we see that (a) many algorithm visualizations exist,
yet relatively few are of true value, and (b) algorithm visu-
alizations can be demonstrated to have pedagogical value,
yet it is also quite possible to use them in ways that have no
pedagogical eﬀect. These facts seem to imply that creating
and deploying eﬀective algorithm visualizations is diﬃcult.
There is a small body of literature that investigates how to
create pedagogically useful algorithm visualizations (for ex-
ample, [10, 15]). Yet, there is still much to be done before we
are at the point where good quality visualizations on most
topics of interest are widely available.

The purpose of this paper is to provide a summary of
preliminary ﬁndings resulting from our eﬀorts to survey the
state of the ﬁeld of algorithm visualization. To bound the
content area, we focused our attention on topics commonly
taught in undergraduate courses on data structures and al-
gorithms. We seek an understanding of the overall health
of the ﬁeld, and present a number of open research ques-
tions that we and others can work on in the future. Some
examples of the questions we seek to address are:

• What visualizations are available?
• What is their general quality?
• Is there adequate coverage of the major topic areas

covered in data structures and algorithms courses?

• How do educators ﬁnd eﬀective visualizations?
• Is the ﬁeld active, and improving?
• Is there adequate infrastructure for storing and dis-

seminating visualizations?

2. WHAT’S OUT THERE?

Since Spring 2006, we have made a signiﬁcant eﬀort to
catalog as many existing algorithm animations as we could.
The results can be found at our Data Structure and Algo-
rithm Visualization Wiki [18].
In this time, we have de-
veloped the most extensive collection of links to algorithm
visualizations currently available. While it is by no means
complete, it does serve as a representative sample of the
total population of visualizations accessible from the Inter-
net. We are still collecting visualizations, and many of the
following assessments are based on preliminary data.

2.1 How did we ﬁnd them?

We used a number of techniques to locate algorithm visu-
alizations. We began with a list of all visualization systems
that we were aware of from our general knowledge of the
ﬁeld. We developed a topic list based on our experiences
teaching relevant courses. We considered what search terms
would be most productive for locating visualizations via In-
ternet searches (this is discussed further in Section 3). Based
on our topic list, we then performed searches using Google
to ﬁnd whatever we could. Once we had generated a base
of visualization links, we then examined these pages to try
to locate other visualizations, since developers of a given vi-
sualization often have others available. Sometimes we could
ﬁnd these other visualizations from direct references on the
pages we already had, and other times we could deconstruct
the URLs to ﬁnd more visualizations. Whenever we stum-
bled across a page that had links to collections of visualiza-
tions, we would follow those links to capture any new ones
not yet in our collection.

2.2 How many are available?

We have collected links to over 350 visualizations. Many
of these are individual applets or programs, but a signiﬁ-
cant fraction appear as parts of integrated visualization col-
lections (typically, individual applications that include 5-20
distinct visualizations, or toolkits that distribute a collection
of 5-20 distinct visualizations as a unit). If a given program
contains multiple visualizations (for example, a single Java
applet that embodies separate visualizations for both stacks
and queues), then we count it multiple times, once for each
distinct visualization. We speculate that we have so far cap-
tured roughly half of what is publicly available, and most
likely we have captured the vast majority of the visualiza-
tions that are easily found and better known. We are still
actively collecting new links.

2.3 How are they implemented?

Since Java’s introduction in the mid-1990s, virtually all
algorithm visualizations and algorithm visualization tool-
kits have been implemented in Java. Probably over half
of available visualizations are provided as applets directly
from web pages. However, a noticeable minority are Java
applications that must be downloaded and opened locally.
These numbers are somewhat biased. There is a tendency
for us to search for applets, since this turns out to be easier
to do (as explained in Section 3). Visualizations that are
directly available in web pages will typically get more at-
tention from potential users, since they need not go through
the additional step of downloading and unpacking a visual-
ization or visualization system. We do a signiﬁcant amount
of cross checking by capturing links from visualization link

Figure 1: Histogram of major categories in Table 1

collections that we ﬁnd (as described in Section 2.1) to in-
sure that our data collection process does not focus unfairly
on individual applets.

2.4 How are they disseminated?

Almost none of the visualizations that we have found are
available from large, organized repositories. We discuss the
status and eﬀect of various courseware repositories on the
algorithm visualization community in Section 3. Many visu-
alizations are cataloged by link sites, meaning sites that (like
our wiki) attempt to link to collections of visualizations that
the site managers have considered worthy. However, most
of these link sites are small in scale, perhaps linking to 20
favorite visualizations for some course or textbook. There
have been a small number of eﬀorts to produce comprehen-
sive catalogs of visualizations (for example, the Hope College
collection [8] in 2001), but our own wiki appears to be the
only eﬀort to do this that is currently active.

2.5 Who makes them?

While these numbers are quite preliminary, we have de-
veloped a picture of who is providing visualizations. Per-
haps 10-20% of algorithm visualizations are essentially sin-
gle eﬀorts by their respective authors. Perhaps 30-40% are
provided by “small shops” that have created typically 5-15
visualizations, mostly by hand as individual Java applets.
These might have each been created by the same individual
over some number of years (typically a faculty member who
is teaching relevant courses), or they might have been de-
veloped by a small number of students working for a given
faculty member. Perhaps 50% of visualizations are provided
by teams that have also created visualization systems of one
sort or another (and the visualizations are related to the
system). We catalog such systems in addition to cataloging
the individual visualizations.

2.6 What is the content distribution?

We have restricted our study to topics that are typically
covered in undergraduate courses in data structures and al-
gorithms. While this concerns mostly lower division materi-
als, we also considered some upper division topics like com-
putational geometry, algorithms for N P-complete problems,
dynamic programming, and string matching. Our top-level
categories for grouping visualizations, along with their cur-
rent population counts, are shown in Table 1.

As Figure 1 shows, there is wide variation in coverage.

134604638291413124020406080100120140Sorting AlgorithmsSearch StructuresLinear StructuresGraph AlgorithmsOther AlgorithmsOther Data StructuresCompression AlgsSearch AlgorithmsMemory Management Linear Structures

Lists
Stacks & Queues

Search Structures

Binary Search Trees
AVL Trees
Splay Trees
Red-Black Trees
B-Trees and variants
Skiplist

Other Data Structures

Heap/Priority Queue

Search Algorithms

Linear/Binary Search
Hashing

Sorting Algorithms

Sorting Overviews
Insertion Sort
Selection Sort
Quicksort
Mergesort
Heapsort
Radix Sort

Graph Algorithms

Traversals
Shortest Paths
Spanning Trees
Network Flow

Compression Algorithms

Huﬀman Coding

Memory Management
Other Algorithms

Computational Geometry
N P-complete Problems
Algorithmic Techniques
String Matching
Mathematical Algorithms

46
13
32
60
13
7
9
8
10
3
14
8
12
2
10
134
6
18
18
23
28
9
10
38
10
11
9
3
13
10
4
28
6
3
7
8
4

Table 1: Major categories for visualizations and
their counts for 352 visualizations collected. Each
major category shows its total, and signiﬁcant sub-
categories are also shown.

Nearly 15% of all visualizations are on linear structures such
as stacks and queues, even though these probably present
less diﬃculty to students than many other topics. Over a
third of all visualizations that we have found are on sorting
algorithms. Sorting is an important topic for undergraduate
data structures and algorithms courses, but it is certainly
being given too much attention by creators of visualizations.
Further, many of the sorting visualizations are variations on
the classic “Sorting out Sorting” video, and just show bars
being swapped. In contrast, most specialized and advanced
topics are poorly covered. There is certainly room for new
visualizations.

2.7 What is their quality?

A majority of the visualizations that we have encountered
either cannot be made to work easily, or appear to have
no pedagogical value. When we say “have no pedagogical
value,” we mean that they give the user no understanding
whatsoever of how the data structure or algorithm being “vi-
sualized” works, and so will be of little use in the classroom.

Figure 2: Last-change dates for sorting visualiza-
tions. Counts are by project.

Only a small fraction (certainly less than a quarter) would
we feel comfortable recommending for use, either as a lecture
aid, as the basis for a lab exercise, or for self-study of a topic.
Another quarter of visualizations fall in between: they are
potentially useful but severely limited. Even the better vi-
sualizations tend to have serious deﬁciencies. Roughly half
of all algorithm visualizations are actually animations. For
many of these, users are relegated to being passive observers
with no control over pacing (aside from animation speed),
the data being processed, or the operations being conducted.
A diﬀerent type of deﬁciency often occurs with visualizations
of tree structures, which are popular subjects for visualiza-
tion. Typically, these will show the tree that results from a
user-selected insert or delete operation. But rarely do they
illustrate at all, let alone eﬀectively, how the insert or delete
operation actually works. Similar deﬁciencies occur in many
visualizations for simple structures such as lists, stacks and
queues. Only the outcome of an insertion or deletion is dis-
played, with no explanation of how the result was obtained.

2.8 When were they made?

A signiﬁcant number of systems were developed in the
early 1990s for creating algorithm animations and visualiza-
tions. However, most of these are now no longer available,
or so diﬃcult to install and run due to changes in computer
operating systems, that they are not currently a factor in
education. If we consider the development of visualizations
since the mid 1990s (i.e., Java), we have observed a decline
over time in the creation of new visualizations, particularly
after 2002. Figure 2 shows a histogram of the last-change
dates for the sorting visualizations currently in our collec-
tion. These counts are “by project” rather than by individ-
ual visualization, in that if a given visualization or visual-
ization system provided visualizations for multiple sorting
algorithms, then we only count it once in the histogram.
We can see that, while there are still active projects, overall
activity does not appear to be as extensive today as it was
previously. Since we are measuring the “last change” date
for the various visualizations, the better numbers at the end
of the histogram merely indicate that there still exist active
projects, as opposed to a recent rise in activity.

As discussed above, the recent decline in the creation of
new visualizations certainly cannot be explained by satura-
tion of either topic coverage or content quality, since both
are sadly lacking. Ongoing projects appear no more attuned
to the topical gaps in coverage. We speculate that students
were readily available to create visualizations during the
Java boom of the mid to late 1990s, when Java and applets

73851850054012345678919961997199819992000200120022003200420052006 were new and the “in thing” for students to learn. But now
there are other “in things” competing for students’ atten-
tion, and Java is considered old hat. The nation-wide drop
in computer science enrollments might also mean that there
are fewer students available who want to do such projects.

2.9 Will we ﬁnd them again?

Like everything on the Internet that is maintained by in-
dividuals, algorithm visualizations have a high turnover rate
in their accessibility. To get some measure of this, we have
been tracking the status of the visualization links on our
wiki. Each week, we take a snapshot of how many links on
any of our wiki pages are still accessible. As of May 29,
2006, we had 46 active (working) links in our wiki. Of those
46, after three months we had one whose host machine was
no longer on the Internet, three which returned “page not
found” (two of these three were at the same site), and two
with permanent redirection pages (indicating that our links
need to be updated in the wiki or eventually we will lose
them). In other words, over a span of three months, 6 out
of 46 links were either lost to us or moved. One was sub-
sequently found at a new location. On July 31, 2006, we
had 219 unique working links. Of these, 15 were no longer
available on October 31, 2006.

3. SEARCHING FOR VISUALIZATIONS

There are essentially two distinct ways to go about ﬁnd-
ing an algorithm visualization on a given topic. One is to
“google for it”—that is, use your favorite Internet search
engine to search for whatever keywords you believe will best
ﬁnd a useful visualization on the topic you need. The other
is to look in an algorithm visualization collection, a course-
ware repository, or a curated link collection of which you
might be aware.

Let us assume that there exists on the Internet a suitable
visualization on a speciﬁc topic. In that case, we can hope
that standard Internet search technology will allow educa-
tors to ﬁnd it. If so, this might alleviate the need to cre-
ate and maintain specialized repositories or link collections
for courseware in general, and visualizations in particular.
Unfortunately, whether any given instructor will be able to
ﬁnd an existing artifact depends a lot on the instructor’s
ability to supply the right keywords to yield successful re-
sults. Like any Internet search, keywords need both to cap-
ture the desired artifacts, and to avoid burying the user in
overwhelming numbers of false-positive responses. There-
fore, keywords must identify both the type of material de-
sired (visualizations as opposed to explanations), and the
topic or content area desired. Some keywords, while techni-
cally speciﬁc, might lead to a wealth of non-related informa-
tion. For example, looking for “Huﬀman Trees” is likely to
give results related to the data structure, while looking for
“lists” or “queues” is likely to return information unrelated
to computer science. Unfortunately, some data structures
have common, everyday names.

Visualizations constitute only a small part of the course-
ware materials available on the web. Far more artifacts exist
that can be described as content presentations (lecture ma-
terials or tutorials) or projects or exercises (assignments).
Thus, to ﬁnd a given visualization, some sort of restrictive
keywords are necessary for searches on most topics. Un-
fortunately, the providers of algorithm “visualizations” and
“animations” often do not label them as either, so these

search terms will not ﬁnd them. Nor is there any standard
alternative synonym that we know of that can capture the
typical visualization. Since it turns out that the vast major-
ity of visualizations written since the mid 1990s were written
in Java, and many of these are delivered as applets, “applet”
is often a successful choice of keyword. Unfortunately, this
will tend to leave out those visualizations that exist within a
visualization system, since they are not typically presented
to the world labeled as “applets.” Using “applet” as a key-
word also results in generating a self-fulﬁlling prophecy that
if you search for applets, then the only presentation mech-
anism you will ﬁnd will be applets.
Initially, this skewed
the balance of the materials found in our wiki away from
projects with integrated applications, since non-applets were
intrinsically harder for us to ﬁnd. But we have since made
a conscious eﬀort to catalog non-applets, and found that
these make up a signiﬁcant fraction of the total (they are
still written in Java, however).

The main alternative to keyword-based Internet search is
to look in visualization or courseware repositories or link
collections. Unfortunately, there currently is little in the
way of good repositories for data structures and algorithm
visualizations. Within the computer science community,
the most likely candidates are the collection of materials
submitted to JERIC [12], and the CITIDEL repository [4].
JERIC and its contributed courseware are indexed as part
of the ACM Digital Library [1]. While the ACM DL and
CITIDEL are both huge collections, neither appears to have
large amounts of courseware in general or visualizations in
particular. Equally important, neither provides good search
tools for courseware or visualizations. The bulk of their
materials are papers, and they tend to organize by content
topic (CITIDEL) or publication venue (ACM DL). Neither
supports browsing for courseware separate from the (over-
whelming) body of non-courseware content. SIGCSE main-
tains a collection of courseware links which includes a small
number of visualizations [16]. Broader courseware reposi-
tories include SMETE [17], and Connexions [5]. None of
these are well known within the CS education community,
and none have large collections of visualizations. Further,
none of the repositories mentioned here have much “web
presence” with respect to algorithm visualization. In all the
hours that we have spent conducting google searches for var-
ious visualizations, not a single visualization within any of
these repositories was discovered by that means.

Courseware repositories have the potential to be far su-
perior to a basic Internet search when looking for visualiza-
tions, for at least four reasons.

• Internet-based keyword searches do not help the in-
structor who is searching for good ideas. By browsing a
list of visualizations and courseware for lower-division
data structures and algorithms topics, the instructor
might come upon diﬀerent treatments and approaches
than she might have found by listing topics and search-
ing explicitly for them. She might even discover visu-
alizations that encourage her to present new topics.

• Visualizations maintained by individuals are prone to
loss of access. The Internet is well known for high
turnover of material, either because URLs change, or
because the material is no longer made available. Both
keyword-based search of the Internet and collections
of visualization links are susceptible to this problem.
Only curated repositories hosted by stable providers

can give any assurance for long-term sustainability.

• A large fraction of existing visualizations are unusable,
either because they simply do not work, or because
they are poorly conceived and implemented. A repos-
itory, or a curated site of visualization links, could
provide editorial guidance to educators regarding the
quality of the visualizations. Such sites might pick and
choose which visualizations to provide, or they might
supply ratings information.

• A repository or curated site that developed its web
presence could allow educators to actively participate
in the site, using social bookmarking schemes,
like
del.icio.us, or user ratings, like Amazon.com, or fea-
tures of other social networking tools. By allowing
users to comment on, rate, and cross-link resources,
educators would be able to add value to the entire col-
lection over time just by using it. MERLOT [14] is
one repository moving in this direction.

4. CONCLUSIONS AND FUTURE PLANS

While many good algorithm visualizations are available,
the need for more and higher quality visualizations contin-
ues. There are many topics for which no satisfactory visual-
izations are available. Yet, there seems to be less activity in
terms of creating new visualizations now than at any time
within the past ten years. On the other hand, the theoreti-
cal foundations for creating eﬀective visualizations appear to
be steadily improving. More papers are appearing regarding
eﬀective use of visualization in courses, and a body of work
has begun to form regarding how to develop eﬀective visu-
alizations in the ﬁrst place. Collectively, the community is
learning how to improve. While more fundamental research
on how to develop and use algorithm visualizations is nec-
essary, we also simply need more implementors to produce
more quality visualizations. And we need to encourage them
to provide visualizations on under-represented topics.

Given the existence of eﬀective visualizations, there is still
a major gap in terms of a credible national or international
repository for visualizations and other courseware. Some
repositories exist now (CITIDEL and the JERIC/ACM DL,
for example), but they need to mature before they can claim
to provide an adequate solution to this problem. Thus, a
major concern for computer science educators should be how
the gains made in knowledge and artifacts can be dissemi-
nated eﬀectively so as to insure continued improvements.

Our own future plans include developing our wiki into a
resource that can provide value to the community. We con-
tinue to expand our collection of links to visualizations. We
are developing a bibliography of the research literature, a
catalog of projects and algorithm visualization systems, and
a directory of researchers. Much of the data reported here
was hand generated. We are creating data collection tools to
allow us and the CSE community to data mine our database.
We have developed evaluation forms and a mechanism for
collecting them, and tools for capturing public comments
and ratings. If we can enlist signiﬁcant community help, we
plan to provide evaluations of existing visualizations, and
thereby better pinpoint what is available and what is lack-
ing, both in terms of quantity and quality. In these ways, we
can make progress toward the day when computer science
educators have a rich collection of high-quality visualizations
that span all the traditional topics that we teach.

5. REFERENCES
[1] Association for Computing Machinery. The ACM digi-

tal library. http://portal.acm.org, 2006.

[2] M. H. Brown and R. Sedgewick. A system for algori-

thm animation. In SIGGRAPH ’84: Proceedings of the
11th Annual Conference on Computer Graphics and
Interactive Techniques, pages 177–186, New York, NY,
USA, 1984. ACM Press.

[3] M. D. Byrne, R. Catrambone, and J. T. Stasko. Do

algorithm animations aid learning? Technical Report
GIT-GVU-96-18, Georgia Institute of Technology,
1996.

[4] CITIDEL: Computing and information technology

interactive digital educational library. http://
www.citdel.org, 2006.

[5] Connexions scholarly content repository. http://

cnx.org, 2006.

[6] J. S. Gurka and W. Citrin. Testing eﬀectiveness of

algorithm animation. In Proceedings, IEEE
Symposium on Visual Languages, pages 182–189, 1996.

[7] S. R. Hansen, N. H. Narayanan, and D. Schrimpsher.

Helping learners visualize and comprehend algorithms.
Interactive Multimedia Electronic Journal of
Computer-Enhanced Learning, 2, 2000.

[8] Hope College. Complete collection of algorithm

visualizations. http://www.cs.hope.edu/
∼dershem/ccaa/ccaa, 2006.

[9] C. Hundhausen and S. Douglas. Using visualizations
to learn algorithms: should students construct their
own, or view an expert’s? In Proceedings, IEEE
Symposium on Visual Languages, pages 21–28, 2000.
[10] C. Hundhausen, S. A. Douglas, and J. T. Stasko. A
meta-study of algorithm visualization eﬀectiveness.
Journal of Visual Languages and Computing, 2002.

[11] D. J. Jarc, M. B. Feldman, and R. S. Heller. Assessing

the beneﬁts of interactive prediction using web-based
algorithm animation courseware. In SIGCSE ’00:
Proceedings of the Thirty-First SIGCSE Technical
Symposium on Computer Science Education, pages
377–381, New York, NY, USA, 2000. ACM Press.

[12] JERIC: Journal on Educational Resources in

Computing. http://www.acm.org/pubs/jeric, 2006.

[13] A. W. Lawrence, J. Stasko, and A. Badre. Empirically

evaluating the use of animations to teach algorithms.
In Proceedings, IEEE Symposium on Visual Languages
1994, pages 48–54. IEEE Computer Society, 1994.

[14] Multimedia Educational Resource for Learning and

Online Teaching. http://www.merlot.org, 2006.

[15] P. Saraiya, C. Shaﬀer, D. McCrickard, and C. North.

Eﬀective features of algorithm visualizations. In
SIGCSE ’04: Proceedings of the 35th SIGCSE
Technical Symposium on Computer Science Education,
pages 382–386, Norfolk, VA, March 2004.

[16] SIGCSE educational links. http://sigcse.org/

topics, 2006.

[17] SMETE digital library. http://www.smete.org, 2006.
[18] Virginia Tech Data Structures and Algorithm

Visualization Research Group. Data structures and
algorithm visualization wiki.
http://web-cat.cs.vt.edu/AlgovizWiki, 2006.

