Diversity of Forwarding Paths in Pocket Switched

Networks

Vijay Erramilli

Dept. of Computer Science

Boston University

Boston, USA

evijay@cs.bu.edu

Augustin Chaintreau

Thomson Paris
Paris, France

augustin.chaintreau@thomson.net

Mark Crovella

Dept. of Computer Science

Boston University

Boston, USA

crovella@cs.bu.edu

Christophe Diot

Thomson Paris
Paris, France

christophe.diot@thomson.net

ABSTRACT
Forwarding in Delay Tolerant Networks(DTNs) is a chal-
lenging problem. We focus on the speciﬁc issue of forward-
ing in an environment where mobile devices are carried by
people in a restricted physical space (a conference) and con-
tact patterns are not predictable. We show for the ﬁrst time
a path explosion phenomenon between most pairs of nodes.
This means that, once the ﬁrst path reaches the destination,
the number of subsequent paths grows rapidly with time, so
there usually exist many near-optimal paths. We study the
path explosion phenomenon both analytically and empiri-
cally. Our results highlight the importance of unequal con-
tact rates across nodes for understanding the performance
of forwarding algorithms. We also ﬁnd that a variety of
well-known forwarding algorithms show surprisingly similar
performance in our setting and we interpret this fact in light
of the path explosion phenomenon.

Categories and Subject Descriptors
H.1 [Information Systems Applications]: Models and
Principles

General Terms
Algorithms, Measurement, Performance

Keywords
Pocket Switched Networks, DTN, Forwarding, Path Diver-
sity

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’07, October 24–26, 2007, San Diego, California, USA.
Copyright 2007 ACM 978-1-59593-908-1/07/0010 ...$5.00.

1.

INTRODUCTION

Eﬀective forwarding in a delay tolerant network (DTN) is
strongly dependent on particular aspects of the setting, such
as the size of the physical space involved, and the degree to
which node-to-node contact and node mobility patterns are
predictable. We are concerned with understanding forward-
ing in a setting that has not been extensively studied to date:
human-carried mobiles moving in a restricted space with
high node and contact density. This situation corresponds
to individuals at conferences, around oﬃce spaces, and in so-
cial settings. Networks in these environments are examples
of Pocket Switched Networks (PSNs) [3, 9], in which both
mobility and multihop forwarding can be used to support
communication.

We believe that in order to design eﬀective forwarding
algorithms for PSNs, it is necessary to start by understand-
ing the opportunities for forwarding that exist. While some
work has already studied the performance of various for-
warding algorithms in PSNs, there is little understanding to
date on the nature of the forwarding problem in such set-
tings. In particular, little is known about the kinds of paths
(making use of both mobility and multiple hops) that exist
in PSNs.

In this paper we study the paths that are available for
forwarding in PSNs. We use as examples of the PSN set-
ting measurements of contacts between Bluetooth-enabled
Intel iMotes at recent Infocom and CoNext conferences. We
develop an eﬃcient method to enumerate all paths of inter-
est between nodes (iMotes) and apply it to these traces to
capture all paths of interest for a set of randomly generated
messages.

The most striking property of the collection of paths we
obtain is the presence of a phenomenon we term path explo-
sion. Path explosion refers to the case in which, once the
ﬁrst path reaches the destination the number of subsequent
paths grows rapidly with time, so there exist many near-
optimal paths. We ﬁnd that path explosion occurs for the
large majority of messages in our datasets.

To explore this eﬀect we build an analytic model describ-
ing how paths are created in a homogeneously mixing pop-
ulation and we use it to show how path explosion arises.
However our homogeneous model does not explain all as-
pects of the phenomena observed in our data. In order to

understand the nature of forwarding paths more accurately,
we show that it is critically necessary to take into account
the diﬀerent contact rates exhibited by diﬀerent nodes in
the population. We ﬁnd that it is useful to characterize
the source and destination as either high contact rate (‘in’)
nodes or low contact rate (‘out’) nodes. We show that when
the contact rates of the source and destination nodes are
taken into account, that the empirical properties of paths
and the path explosion process can be understood more com-
pletely.

Once we understand the nature of paths available for for-
warding, it is easier to interpret the behavior of forwarding
algorithms. Using our traces, we evaluate a range of diﬀerent
forwarding algorithms that are appropriate for DTNs. We
ﬁnd the surprising result that forwarding algorithms with
very diﬀerent strategies nonetheless show remarkably sim-
ilar performance in terms of message delivery success rate
and average message delivery delay.
In fact we ﬁnd that
the particular choice of routing algorithm does not have a
strong impact on delay or success rate for our data. We show
that these results can be understood in the context of the
path explosion phenomenon. Furthermore, understanding
the presence of path explosion, and the particular details of
how it occurs between combinations of ‘in’ and ‘out’ nodes,
allows us to understand how eﬃcient message delivery can
take place in these settings.

2. RELATED WORK

Our work studies the set of paths available for forwarding
in Pocket Switched Networks. While little work to date
has studied the forwarding paths themselves, researchers are
beginning to recognize that the movements of individuals
carrying mobile nodes create contact patterns that are not
well modeled using uniform or homogeneous assumptions [1,
15].

Nonetheless, to date most forwarding algorithms have
been analyzed under the assumption that contact rates be-
tween nodes are homogeneous [6, 7, 17, 18]. Likewise, the
most common mobility model used for forwarding evalua-
tion is random waypoint [2] in which all nodes’ speeds and
directions are drawn from the same distributions. In con-
trast, our work shows that it is the diﬀerences in behavior
of nodes in the network that is key to understanding the
performance of forwarding in our setting. The closest work
to our paper deals with the heterogeneity of inter-contact
time distributions and its implications for routing [5]. The
authors show that if the distributions of inter-contact times
are homogenous and exponential then no forwarding scheme
will be able to make practical use of past contact informa-
tion. However if the rates are heterogenous, then past infor-
mation can help in predicting future behavior and can thus
help improve the performance of forwarding algorithms.

One of the main results in our work is that for our
datasets, a wide variety of forwarding algorithms perform
equally well in terms of success rate and delay. Among the
forwarding algorithms we consider, we use epidemic forward-
ing [19] to study the path explosion phenomenon as well as
to obtain upper bounds on performance. Among the fac-
tors we consider in comparing other forwarding algorithms
are the use of past contact history, as proposed in [11, 10,
13, 8]. Another factor we consider is whether the algorithm
bases decisions on single-hop performance or multi-hop per-
formance. The authors of [11] propose basing forwarding

decisions on Minimum Estimated Expected Delay (MEED)
where the delay between nodes is calculated using past con-
tact history over a sliding window. In contrast, Grossglauser
et al [6] use only the last encounter time between nodes as
a basis for forwarding decisions. We consider both these
alternatives in our evaluation.

Many papers have looked at the performance of forward-
ing algorithms based on wireless measurements, but few
have looked at forwarding in a dense environment with hard-
to-predict contact patterns. Exceptions are [9, 4], which use
data similar to ours. However those papers are concerned
with studying forwarding algorithms rather than the nature
of forwarding paths themselves, which is the focus of our
work.

3. DATA

As described in our introduction our study is based on em-
pirically collected data sets. These data sets were collected
using short-range Bluetooth enabled devices (iMotes [4])
carried by individuals. These devices perform an inquiry-
scan every 120 secs and log each response to the inquiry as
a contact. A contact record includes the MAC address of
the device that responded, as well as the start time and the
end time of the contact. More details about the devices and
the datasets, including synchronization issues can be found
in [16].

Initial analysis of the data showed that contact activity
varied considerably over the course of each day. The analyses
in our paper are based on the assumption of approximately
constant contact rates over time. Therefore we selected 3
hour periods for which visual inspection indicated that con-
tact rates were relatively stable. Although a contact event
need not be symmetric, we assume they are and modify the
datasets accordingly. We note that contacts are not synchro-
nized over the entire network, so even though the scanning
rate of nodes is set to 120 secs, we observe contact activity
every 10 sec.

We also note that most contacts observed in our datasets
are very short and we do not consider contact durations in
this work. We leave this to future work.

Empirical results in this paper are based on the following

data sets:

Infocom 2006: This data set consists of logs taken dur-
ing during the conference Infocom 2006. There are 98 nodes
in total; with 20 nodes are stationary nodes distributed
within the conference venue and the remaining nodes are
distributed to conference participants who carried them for
4 days from 24th April 2006 to 28th April 2006. The speciﬁc
time periods we study are 25 April (Tuesday) 9AM-12PM
and 3PM-6PM on the same day.

Conext 2006: We collected similar data sets at Conext
2006 which was held from 4 Dec 2006 to 7 Dec 2006. 78
nodes were distributed to conference participants and the re-
maining 20 nodes were placed around the conference venue.
The data sets we use are 4 Dec(Monday), 9AM-12PM and
3PM-6PM.

We replicated portions of our analyses on datasets taken
at Infocom 2005 [4]. All of our results in this paper were
consistent with the analyses. However we omit details for
lack of space.

4. PATH EXPLOSION

A forwarding algorithm solves a decentralized search
problem—it searches for a short path between a source and
destination node, starting at a given point in time. This path
exists in space and time, and its duration is the amount of
time between message generation and message delivery. In
order to understand how hard the search problem is for PSN
settings, we start by studying the solution space.

Given a set of nodes M with |M| = N , and a continuous
time index 0 ≤ t < tmax, we deﬁne a path as a sequence of
tuples:

((x1, t1), (x2, t2), . . . , (xk, tk))

where for all i, ti ≤ ti+1, xi ∈ M, and

. . . , (xi, ti), (xi+1, ti+1), . . .

may be present only if xi is in contact with node xi+1 at time
ti+1. Each tuple in the sequence is a hop and the length of
a path is the number of hops it contains.

We assume that communication occurs via messages
which are transmitted in whole from node to node in zero
elapsed time. Messages travel along paths, i.e., they are
only transmitted between nodes that are in contact. For
any source σ ∈ M and destination δ ∈ M a successful mes-
sage delivery beginning at time t1 can occur if there is a
path

((σ, t1), (x2, t2), . . . , (δ, tk)).

The most basic goals of a forwarding algorithm are, given
σ, t1, and δ: (a) to ﬁnd such a path if it exists; and (b) to
ﬁnd the path with shortest-achievable duration if more than
one path exists. We use PA(σ, δ, t1) to denote the fact that
forwarding algorithm A can ﬁnd a path from (σ, t1) to (δ, tk)
for some tk < tmax. If forwarding algorithm A ﬁnds at least
one path, we denote the duration of the shortest-found path
(tk − t1) as TA(σ, δ, t1).

Our concern centers on the performance of forwarding al-
gorithms in the PSN setting. We deﬁne the performance of
forwarding algorithm A as the average delay

DA = E [TA(σ, δ, t1) | PA(σ, δ, t1)]

and the success rate

ˆ

˜

SA = E

I{PA(σ,δ,t1)}

when σ and δ are chosen uniformly at random over M and
t1 is chosen uniformly at random over [0, tmax).

Note that our formulation of the problem does not con-
sider the costs of forwarding: for example, power or storage
consumption. Reasonable secondary goals of a forwarding
algorithm might be to minimize costs. However our focus
is on understanding what alternatives in terms of paths are
available for use by a forwarding algorithm. After obtaining
an understanding of what paths are available, it is easier to
concentrate on minimizing costs.

4.1 Path Enumeration

As discussed in Section 2, many previous studies of for-
warding algorithms have looked at forwarding performance
in speciﬁc settings. However, our work takes a diﬀerent ap-
proach by ﬁrst empirically characterizing the set of paths
that are available for use by forwarding algorithms. To ac-
complish this properly, there are a number of speciﬁc con-
siderations.

First, it is important to specify the characteristics that are
expected of all forwarding algorithms, because these deﬁne
the set of paths of interest. We assume that under any
reasonable forwarding algorithm, a node holding a message
for a destination node will deliver that message whenever it
encounters the destination. We call this the assumption of
minimal progress.

We also restrict our attention only to loop-free paths, i.e.,
paths in which no node appears more than once. We make
this restriction because if looping paths are considered, then
an arbitrarily large number of paths may be generated sim-
ply by following a loop a varying number of times. One
can imagine a scenario where due to high mobility a node
is encountered more than once over time and hence can po-
tentially show up in a path multiple times. Enumerating
such cases does not expose truly distinct forwarding paths.
While looping paths may occur in practice this is not a con-
cern, because disregarding such looping paths means that
our counting results are conservative—so in fact even more
paths may be present than our results indicate. For a similar
reason, we assume nodes have inﬁnite buﬀers and we do not
consider paths that may be created because a node is forced
to drop a message. Thus, once a node receives a message it
holds the message forever.

A path respects minimal progress and loop avoidance if
it does not contain more than one instance of any node,
and the destination appears only at the end of the path (if
at all). Furthermore, the assumption of minimal progress
combined with unlimited message holding implies a more
subtle condition, which we call ﬁrst preference. Consider a
path

P = ((σ, t1), . . . , (xi, ti), . . . , (xj, tj ), (δ, tk)).

If it also happens that xi encounters the destination δ at
time t(cid:2) < tk, then the following is also a path:
)).

= ((σ, t1), . . . , (xi, ti), (δ, t(cid:2)

P (cid:2)

Note that no forwarding algorithm respecting minimal
progress would take path P rather than path P (cid:2). Thus path
P is not a ﬁrst preference path. Any path respecting loop
avoidance and minimal progress (including ﬁrst preference)
is a valid path.

Second, in moderately-large datasets (such as those we
work with) a complete enumeration of all valid paths with
a given (σ, δ, t1) is prohibitively expensive. Therefore a key
element of our approach is eﬃcient enumeration of the most
important paths. Our strategy for tackling this problem has
two steps:

1. Deﬁne the problem as one of path enumeration on a

space-time graph (deﬁned below) and

2. at each time step, use dynamic programming to main-
tain the (up to) k shortest valid paths reaching each
node. By ‘shortest’ we mean the path with the least
number of hops.

This strategy allows us to determine the optimal path
reaching the destination, that is, the path with shortest
achievable duration under any forwarding algorithm. We
denote the duration of the optimal path T (σ, δ, t1) and note
that it is the minimum duration path found by epidemic
forwarding, i.e.,

T (σ, δ, t1) = min
A

TA(σ, δ, t1) = TEpidemic(σ, δ, t1).

t=0

1

t=1

1

2

2

3

3

Figure 1: Example space-time graph.

This strategy also allows us to determine each subsequent
valid path that reaches the destination, up until the point
at which k or more valid paths reach the destination in a
single timestep.

To recap we want to answer the following questions: How
many paths exist between a source-destination node pair?
What are the properties of these paths? To organize the
search process, we convert the sequence of node contacts
into a space-time graph, which is a special kind of directed
weighted graph. Our use of the space-time graph is based
on [14].

Time is discretized in increments of Δ. In all our work
we use Δ = 10 sec. Vertices in the space-time graph
are pairs (xi, T ) with xi ∈ M and T = cΔ for c ∈
{1, 2, . . . , (cid:4)tmax/Δ(cid:5)}. Edges in the space-time graph come
in two kinds:

1. There is an edge from vertex (xi, T ) to (xj, T ) iﬀ node
xi was in contact with node xj at any time during
[T − Δ, T ). Such an edge has weight zero.

2. There is an edge from vertex (xi, T ) to (xi, T + Δ) for

all xi ∈ M. Such edges have unit weight.

For example, consider a network with three nodes. Nodes
1 and 2 are in contact during the ﬁrst timestep, while all
three nodes are in contact with each of the others during
the second timestep. Then the corresponding space-time
graph is as shown in Figure 1. The horizontal edges have
weight zero and the vertical ones have weight 1.

Given a space-time graph discretized by Δ and a message
deﬁned as (σ, δ, t1), we enumerate shortest paths using dy-
namic programming. The algorithm uses as its data struc-
ture an N × k array of paths, denoted P . It maintains the
following invariant: at any given timestep T = cΔ the entry
Pij is the jth shortest path reaching from (σ, t1) to (xi, t(cid:2))
for some t(cid:2) ∈ [T − Δ, T ). The algorithm is given in Figure 2.

4.2 Observations

Using the algorithm described in the previous subsection
we are able to enumerate paths for a given message with
(σ, δ, t1) up to the time when k paths reach the destination
in a single timestep. For any given message, we will use
Tn to denote the time at which the nth path reaches the
destination, in order of increasing delivery time.

Our results show that for many messages, the duration of
the optimal path can be quite long (thousands of seconds).
However the most striking aspect of our results is that in
the vast majority of cases, once the ﬁrst path reaches the
destination a very large number of additional paths reach the
destination soon thereafter – typically tens or a few hundreds
of seconds later. We refer to this phenomenon generically as
path explosion.

1. Let T = cΔ such that t1 ∈ [T − Δ, T ).
2. Let s = i such that xi = σ.
3. Let Pij = ∅ for all i, j.
4. Let Ps1 = ((σ, T )).
5. While (true)

(a) Let X = ∅.
(b) For i = 1, . . . , N

i. For j = 1, . . . , k
• If Pij (cid:6)= ∅:
A. Let X (cid:2) = all distinct extensions
of path Pij to vertices reachable
from (xi, T + Δ) via paths of zero
weight.

B. Let X = X ∪ X (cid:2).

(c) Remove the invalid paths from X.
(d) Output all paths in X reaching δ.
(e) If there are k or more paths in X reaching

δ, stop.

(f) For i = 1, . . . , N

i. Select the (up to) k shortest paths from
X that terminate at node xi and place
them in Pij , j = 1, . . . , k.

(g) Let T = T + Δ.

Figure 2: Algorithm for k shortest paths enumera-
tion.

To make the notion concrete, we deﬁne the time that path
explosion occurs to be the time by which 2000 paths in total
have reached the destination, i.e., T2000. We would like to
point out that there is nothing sacrosanct about the number
2000; we believe that by enumerating 2000 paths (; a large
number of paths) we can develop a concrete picture of the
set of paths available. Note that we can always identify
this time accurately (to within an error of Δ) as long as
we set k in our algorithm to be 2000 or greater. We refer
to the ‘time to explosion’ (TE) as the elapsed time between
the arrival of the ﬁrst path and the arrival of the 2000th
path, i.e., TE = T2000 − T1. We would also like to point
out that there is a possibility that some messages might not
have 2000 paths, but may still have a fairly large number of
paths between them. We do not consider such messages.

In Figure 3(a) we show the CDFs for optimal path dura-
tion in datasets Infocom ’06 9-12 and Infocom ’06 3-6. The
ﬁgure shows that optimal path duration can be quite long;
in fact, a large fraction of messages (over 25%) require over
1000 seconds before the ﬁrst path reaches the destination.
On the other hand, Figure 3(b) shows CDFs for the time to
explosion. Here the story is quite diﬀerent: almost half the
messages see an explosion with little or no delay, and 97%
of them have TE less than or equal to 150 secs.

These ﬁgures show the surprising fact that optimal path
duration can be an order of magnitude or more greater than
time to explosion. That is, in many cases, the ﬁrst path
takes a long time to reach the destination, after which many
paths reach the destination in relatively short order.

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

 
]
x
<
X
P

[

500

450

400

350

300

250

200

150

100

50

)
s
(
 

l

i

n
o
s
o
p
x
E
o

 

t
 

e
m
T

i

 

 

 

 
]
x
<
X
P

[

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0
 
0

9−12

3−6

0
 
0

1000

3000

2000
6000
Optimal Path Duration (s)

5000

4000

7000

8000

(a)

100

200

300

400

500

Time to Explosion (s)

(b)

9−12
3−6

Figure 3: (a) CDFs of optimal path duration Infocom 06 9-12 and 3-6 (b) CDFs of time to explosion Infocom
06 9-12 and 3-6

ﬁgure shows that the number of paths arriving over time
grows in an approximately exponential fashion.

In summary, we ﬁnd that once paths are enumerated, a
number of surprising properties emerge. While the optimal
path duration can be long, there is a path explosion eﬀect
that occurs relatively quickly after the ﬁrst path reaches the
destination. However, there is no clear relationship between
optimal path duration and time to explosion. Finally, it
appears that the explosion process is roughly exponential in
time. We seek to explain these observations in the following
sections, and we study the implications of these observations
in later sections of the paper.

5. PROPERTIES OF PATHS

In this section we use models and data analysis to under-
stand the questions raised in Section 4.2. In particular the
next two subsections ask: (1) How and why does path explo-
sion occur? and (2) What determines the relationship be-
tween optimal path duration and time to explosion? To an-
swer the ﬁrst question we develop an analytic model making
the assumption of homogeneity – equal contact rates among
all nodes. To answer the second question we incorporate
considerations of unequal contact rates (inhomogeneity).

5.1 A Homogeneous Model for Path

Explosion

As a ﬁrst step in trying to understand the path explosion
phenomenon, we use a highly simpliﬁed model. We consider
a setting in which nodes contact other nodes randomly and
at constant rate. For a given message, we count the number
of paths arriving at each node over time. The model is not
restricted to counting just valid paths (which would add con-
siderable complexity) but we seek qualitative results which
are presumably insensitive to such details. The main result
we show in this section is that the number of paths arriving
at any node (such as the destination) grows exponentially
in time, with rate given by the (homogeneous) contact rate
between nodes.

Our results use known techniques from the study of epi-
demic process [12, 20]; however we extend those tools to
study the set of all forwarding paths, instead of just the
ﬁrst path obtained to each destination.

0

0

500

1000

1500

2500
Optimal Path Duration (s)

2000

3000

3500

Figure 4: Optimal path duration vs. Time to Explo-
sion, Infocom ’06 9-12.

In a phrase, path explosion means that shortly after the
optimal path reaches the destination, there are a large num-
ber of nearly-optimal paths to the destination.

A closer look at the path explosion phenomenon is shown
in Figure 4, which is also based on dataset Infocom ’06 9-12.
Each point in the ﬁgure corresponds to (T1, TE) for a single
message (σ, δ, t1) (note the diﬀerence in scale on the x and
y axes). The ﬁgure shows that there is no clear relationship
between optimal path duration and time to explosion; there
are many cases in which the optimal path reaches the desti-
nation quickly but the path explosion occurs comparatively
late, and there are many cases in which the optimal path
reaches the destination late while the path explosion occurs
quickly thereafter.

It is diﬃcult to characterize how the number of successful
paths grows in time, in part because path explosion gener-
ally occurs quite rapidly and our time measures are rather
coarsely discretized. However we can get a rough sense of
how the explosion occurs if we look at the slowest cases. In
Figure 5 we examine all paths of the messages for which the
time to explosion TE was 150 seconds or greater, again us-
ing dataset Infocom ’06 9-12. Note that although for each
of these messages, the 2000th message arrives at least 150
seconds after the optimal time, nonetheless many messages
still arrived during the period between T1 and T2000. The

t

s
h
a
P
#

 

6000

5000

4000

3000

2000

1000

0

0

50

100

150

200

250

Time Since T
 (s)
1

Figure 5: Histogram of number of paths for pairs
with time to explosion ≥ 150 sec, Infocom ’06 9-12.

5.1.1 Assumptions

uniformity of the setting.

Our model makes two assumptions, which derive from the

• Poisson contacts: We associate with each node xn a
process of contact opportunities with all other nodes
that is a homogeneous Poisson process with intensity
λ.

• Homogeneity: whenever a contact opportunity occurs
for node xi, the contacted node xj is chosen indepen-
dently from the past, and uniformly among the N
nodes in M. Note that this model does not include
variability of contact rates among pairs, an issue we
take up in Section 5.2.

Without loss of generality we study forwarding paths for
a message created by a source (denoted by σ) at time t = 0.

5.1.2 Evolution and limit for large networks

Our model is adapted from the analysis of population dy-
namics. The state Sn(t) of a node xn at time t is the number
of paths from the source that reach xn before t. When xn
has an opportunity to contact xm, the following transition
occurs at xm:

Sm(t) ← Sm(t) + Sn(t) .

For any k ≥ 0, we denote

Uk(t) = # { xn ∈ M | Sn(t) = k } ,

for the number of nodes with state k. To focus on the evo-
lution of the population of nodes as a whole we study the
evolution of the collection of variables

U (t) ∈ NN , U (t) = { Uk(t) | k ≥ 0 } .

P

k≥0 Uk(t) = N , so U (t)/N represents
Note that we have
the empirical density of nodes in each states.
If one does
not diﬀerentiate between nodes in the same state, then U (t)
entirely characterizes the system at time t.

Note that when node xn having state i (cid:6)= 0 contacts node
xm having state j, the collection of variables U is modiﬁed
as follows.

Ui+j ← Ui+j + 1 ; and Uj ← Uj − 1 .

We denote by λn,m the intensity of the contacts from node
xn to node xm. For any ﬁxed i > 0 and j ≥ 0, transitions
of the type (i, j) as deﬁned above occur with the following
intensity:

X

βi,j =

{ λn,m | n (cid:6)= m s.t. Sn(t) = i , Sm(t) = j } .

Proposition 1. The rate of transition βi,j is a function

of the density of nodes in each state U (t)/N .

βi,j = N · λ

Ui(t)

N

Uj(t)
N = N ˜βi,j

U (t)
N

„

«

Proof. Let us ﬁx an n such that Sn = i. Then we have

X

λn,m = λ

Uj(t)

,

N

{ xm | Sm(t)=j }

since we have assumed that the contact process for each
node xn has rate λ and is homogeneous with regard to other
nodes.

Summing for all nodes xn having state i we obtain

βi,j = Ui(t)λ

Uj(t)
N = N · λ

Ui(t)

Uj (t)

N

N

We can describe the process U (t) taking on values in
NN as a Markov jump process, with transitions indexed by
{ (i, j) | i > 0 , j ≥ 0 }.

The rate of transition (i, j) is a function ˜βi,j only of the
density U (t)/N of nodes having states i and states j, multi-
plied by N . In other words, the process U (t) may be written
as

U (0) +

(ei+j − ej) ·

Ni,j

N ˜βi,j

Z t

0

„

„

««

U (s)
N

ds

X

i>0,j≥0

where, for all i > 0, j ≥ 0, Ni,j denotes a Poisson counting
process with intensity 1, and ek denotes the inﬁnite vector
with all entries null except for 1 at position k.

When one considers the density process U (t)/N in the
case where N is large, Kurtz’s limit theorem [12] shows that
one can replace the Poisson counting process in the above
expression by the process mean. This means that the tra-
jectory of the density process for large N closely approaches
the solution of a deterministic ordinary diﬀerential equation.

Proposition 2. As N goes to inﬁnity, if we assume that

U (0)/N → u(0) > 0, then we have for all K ≥ 0:

sup

0≤s≤t , 0≤k≤K

˛
˛
˛
˛

Uk(s)

N

˛
˛
˛
˛ → 0 a.s.

− uk(s)

where u : [0; ∞[→ RN is the solution of the ODE

u(t) = u(0) +

(ei+j − ej) ·

˜βi,j (u(s)) ds

X

i>0,j≥0

Z t

0

Proof. A priori the process U (t)/N evolves in a space
with an inﬁnite number of dimensions NN, hence Kurtz’s
limit theorem [12] does not immediately apply to it. How-
ever, one can consider for any K > 0 a threshold process
where all nodes in states { k | k > K } are collapsed into a
collection of nodes in a single sink state. This threshold pro-
cess has a ﬁnite number of dimensions, and satisﬁes all the

assumptions of the Kurtz limit theorem. To complete the
proof we note that the threshold process deﬁnes exactly the
same dynamics for states in { 0, · · · , K } as in the inﬁnite
process.

Proposition 3. For any k ≥ 0, we have

uk(t) = uk(0) + λ

ui(s)uk−i(s) − uk(s)ds

(1)

Z t

kX

0

i=0

Proof. From the deﬁnition of u found in Proposition 2,
we obtain that uk(t) − u0(t) may be written for all k ≥ 0 as:

X

Z t

i>0,j≥0,i+j=k

0

˜βi,j (u(s)) ds −

˜βi,j (u(s)) ds

X

Z t

i>0,j=k

0

which may be rewritten as:

˜βi,k−i (u(s)) ds −

˜βi,k (u(s)) ds

kX

Z t

i=1

0

kX

Z t

i=1

0

X

Z t

i>0

0

X

Z t

i>0

0

λui(s)uk−i(s)ds −

λui(s)uk(s)ds

After adding λu0(s)uk(s) to each of the above terms and
using

i≥0 ui(s) = 1 the proposition is proved.

P

In other words, from a non trivial initial condition, the
average number of nodes with exactly n paths in a large
network evolves according to a deterministic equation.

5.1.3 Solution for ODEs, moments
P

We introduce for all x ∈ R the series φx :
(cid:12)→
k≥0 xkuk(t). After multiplying each equation in (1) by

t

xk and summing all of them we obtain

dφx
dt = λ(φ2

x − φx) .

Note that this equation may be rewritten as:

λ · dt =

dφx

dφx

φx(φx − 1)

φx − 1

=

+

dφx
φx

.

This ordinary diﬀerential equation can be solved for all
x ∈ R. One needs to distinguish between two cases, depend-
ing on the initial value taken by φx.

• Assume 0 < φx(0) < 1 (for instance, by choosing x in
[0; 1]). We know that φx and 1 − φx remains positive.
The previous equation may then be written as:

ln(1 − φx(t)) − ln(φx(t)) − λt is constant.

Hence, φx(t) =

φx(0) + (1 − φx(0))eλt

.

(2)

φx(0)

• On the other hand, assume φx(0) > 1 (for instance, by
choosing x > 1). We know that φx and φx − 1 remains
positive. The previous equation may then be written
as:

ln(φx(t) − 1) − ln(φx(t)) − λt is constant.

Hence, φx(t) =

φx(0) − (φx(0) − 1)eλt

.

(3)

φx(0)

The ﬁrst case above allows us to derive closed form expres-
sion for the evolution with time of the mean number of paths
per node (see below), as well as the other moments. In the
second case, for any x > 1 the series φx becomes inﬁnite in
ﬁnite time TC (x) = 1
. In other words, if the
initial distribution for the number of paths per node is light-
tailed for a given coeﬃcient, it loses this property within a
ﬁnite time.

φx(0)−1

p ln

φx(0)

“

”

Mean number of paths:.

According to the deﬁnition of φx we can compute the ex-

pected number of paths for a node as follows.

E [Sn(t)] = E

Sm(t)

=

k · uk(t)

"

1
N

X

m∈M

#

X

k≥0

thus E [Sn(t)] =

= E [Sn(0)] eλt .

(4)

∂φx(t)

∂x

˛
˛
˛
˛
x=1

The last equation is obtained from (2) since

∂φx(t)

∂x (x) =

∂φx(0)

∂x (x)
D(x, t)

−

φx(0) · ∂φx(0)

∂x (x) · (1 − eλt)
D(x, t)2

,

with D(x, t) = φx(0) + (1 − φx(0)) · eλt, so D(1, t) = 1 for
all t.

5.2 The Effects of Inhomogeneity

The analysis developed in Section 5.1 sheds considerable
light, but does not explain all the phenomena noted in Sec-
tion 4.2. The analytic results conﬁrm that path explosion
can occur and that it should be exponential in nature. How-
ever, the analysis in Section 5.1 would also predict that op-
timal paths should be short, and that path explosion should
occur immediately after the ﬁrst path reaches the destina-
tion. These two predictions are not borne out in the data, as
already shown in Section 4.2. To explain these phenomena,
we need to examine the model assumptions.

The most unrealistic aspect of our analytic model is the
assumption that all nodes contact each other at the same
rate. In fact, prior work has shown that per-node contact
rates in datasets like ours can be highly variable across dif-
ferent nodes. For example, the authors in [9] show that the
distributional tails of inter-contact times for such data sets
approximately follow a power law.

In Fig. 6 we plot the CDF for the total number of contacts
each node has over each three hour period (Infocom ’06 9-
12, 3-6, Conext 9-12, and 3-6). We refer to the number of
contacts a node makes per unit time as the node’s contact
rate or just rate. The CDFs suggest that the distribution of
contact rates can be approximated as uniform over the range
(0, max) where max varies depending on the dataset. The
key observation is that some nodes have rates quite close to
zero, yielding extremely large average intercontact times. In
fact, it is clear that the population consists of some nodes
that are quite frequently in contact with a large number
of other nodes, while there are also some nodes that rarely
encounter other nodes at all.

Our analytic results suggest that for a message generated
at time 0, the number of paths reaching node i will grow
proportional to eλt for a population in which all nodes have
the same rate λ.

To discuss the case where nodes have diﬀerent rates, we
introduce some notation. We deﬁne the random variable

]
x
<
X
P

[

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0
 
0

 

 

9−12
3−6

]
x
<
X
P

[

9−12
3−6

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0
 
0

50

100

150

200

250

300

350

400

450

500

50

100

150

200

250

Number of Contacts

(a)

Number of Contacts

(b)

Figure 6: Cumulative Distribution of Number of Contacts (a) Infocom 2006 (b) Conext 2006

T (σ, δ) to be equal to T (σ, δ, t1) when t1 is chosen uniformly
at random in [0, tmax). Furthermore we no longer assume
equal contact rates, so we deﬁne λi to be the contact rate of
xi ∈ M, i.e., λi =
k λi,k. Finally we deﬁne the expected
time for the ﬁrst path as

P

H = E [t | Si(t) = 1] .

In the case of the homogeneous model in Section 5.1,

H = (t | E [Si(0)] eλt

= 1) =

ln N
λ

since E [Si(0)] = 1/N .

To understand the case when nodes have diﬀerent rates,
we reason as follows. Assume that at time t0 a message is
held by a node xi having contact rate λi. Then at minimum,
we expect a path explosion to occur starting at t0 with rate
λi among the subset of nodes with contact rates greater than
or equal to λi. That is, we can infer a lower bound on
E [Sj (t − t0)] proportional to eλi(t−t0) for all j such that
λj ≥ λi. This subset path explosion means that the number
of paths arriving at nodes with rate λi or greater grows at
least as fast as eλit.

Now if λi is relatively small compared to typical contact
rates, then initially the subset path explosion may proceed
very slowly. However if at time t1 > t0, xi encounters a node
xj with contact rate λj > λi, then a more rapid path ex-
plosion beginning at t1 will occur with rate λj among nodes
with contact rates λj or greater.

Thus if the source is a low-rate node, then there will be
some initial time before it encounters a high-rate node, at
which point a high-rate path explosion occurs. This initial
time is related to H and so we argue that the time until high-
rate path explosion occurs is on the order of 1/λi. Thus in
this case, T1 will tend to be larger than is typical.

Furthermore, if the destination is a low-rate node, then
path explosion may not be able to reach a high rate. Thus
in this case, TE will tend to be large.

This model suggests that a critically important role is
played by the contact rates of the source and destination
nodes. Then we can make the following hypotheses con-
cerning the relative sizes of T1 and TE for four situations:

• First, when λσ is high and λδ is high, then path ex-
plosion begins immediately and at high rate. So both
T1 and TE will tend to be small.

• Next, when λσ is high and λδ is low, then path explo-
sion begins immediately but at a low rate. So T1 will
tend to be small but TE will tend to be large.

• Next, when λσ is low and λδ is high, then there is
a signiﬁcant period before path explosion begins (on
the order of 1/λσ) but, once begun, path explosion
proceeds at high rate. So T1 will tend to be large but
TE will tend to be small.

• Finally, when λσ is low and λδ is low, then both T1

and TE will tend to be large.

To explore whether these hypotheses hold in our data, we
separated nodes in each dataset into two equal-sized groups.
The in set are those nodes with contact rates greater than
the median rate. The out set are those nodes with contact
rates lower than the median rate. Since rate distribution is
approximately uniform (as shown in Figure 6), the median
rate in each case is approximately half of the maximum rate.
Then each message (σ, δ, t1) can be placed into one of four
cases: in-in, where λσ and λδ are both high; in-out, where
λσ is high and λδ is low; out-in, where λσ is low and λδ is
high; and out-out, where λσ and λδ are both low.

Using this labeling, we separate the points in Figure 4 into
four groups, which are plotted separately in Figure 7. Each
plot has the same format as Figure 4, except that only a
subset of points are included.

The ﬁgures suggest that our hypotheses hold to a certain

extent. In particular,

• For all the in-in messages, the optimal path duration
T1 is very low and the time to explosion TE is less than
150 seconds.

• For the in-out messages, the optimal path duration T1
is similar to the in-in messages, i.e., small. However
the time to explosion TE is much more variable and
can take on relatively large values.

• For the out-in case, the optimal path duration T1 tends
to be larger than in the ﬁrst two cases, while the time
to explosion TE is relatively small (as in the in-in case).

• Finally, for the out-out case, both T1 and TE can take

on large values.

500

450

400

350

300

250

200

150

100

50

500

450

400

350

300

250

200

150

100

50

)
s
(
 

l

i

n
o
s
o
p
x
E
o

 

t
 

e
m
T

i

i

)
s
(
 
n
o
s
o
p
x
E
 
o

l

t
 

e
m
T

i

500

450

400

350

300

250

200

150

100

50

500

450

400

350

300

250

200

150

100

50

)
s
(
 

i

l

n
o
s
o
p
x
E
o

 

t
 

e
m
T

i

i

)
s
(
 
n
o
s
o
p
x
E
 
o

l

t
 

e
m
T

i

0

0

500

1000

1500

2500
Optimal Path Duration (s)

2000

3000

3500

0

0

500

1000

1500

2500
Optimal Path Duration (s)

2000

3000

3500

(a)

(b)

0

0

500

1000

1500

2500
Optimal Path Duration (s)

2000

3000

3500

0

0

500

1000

1500

2500
Optimal Path Duration (s)

2000

3000

3500

(c)

(d)

Figure 7: Path Explosion Plots Info 06 9-12 (a) in-in (b) in-out (c) out-in (d) out-out.

Results for other datasets are not shown due to lack of space,
but generally showed similar behavior.

In summary, we have shown two key results in this section.
First, we have used an homogeneous analytical model to
show how path explosion occurs. We have shown that path
explosion is an exponential function of both elapsed time and
the rate λ at which nodes come into contact. This addresses
the ﬁrst question about our empirical results, namely, how
and why does path explosion occur? Second we have shed
light on the other set of questions arising from our empirical
results by considering the eﬀects of inhomogeneity in rates.
We have shown that by looking at the contact rates of the
source and destination nodes, one can gain insight into why
the optimal path duration and the time to explosion vary,
and one can relate these quantities to the relative magni-
tudes of the two contact rates.

6.

IMPLICATIONS FOR FORWARDING

In the previous sections we have developed insight into
what sorts of paths are available for use by routing algo-
rithms in settings such as ours. This has laid the ground-
work for an understanding of how various forwarding algo-
rithms perform in our setting. In this section we study the
performance of a wide range of forwarding algorithms and
relate their performance to the results developed in previous
sections.

6.1 Experiments

to our simulator the contact traces described in Section 3.
Each simulation therefore ran for simulated time of 3 hours.
However, to avoid end-eﬀects, only results from the ﬁrst two
hours are used.

For each trace and forwarding algorithm, we generate a
set of messages (σ, δ, t1) uniformly at random. We generate
messages according to a Poisson process with rate one mes-
sage per 4 seconds. As discussed in Section 4.1 we model
nodes as having inﬁnite buﬀers and nodes carry all the mes-
sages they receive till the end of the simulation. All our
results are averaged over 10 simulation runs. Our metrics
are success rate S and average delay D as deﬁned in Sec-
tion 4.1.

Our goal in this section is not to determine which forward-
ing algorithm is “best” but to compare the performance of
a wide range of algorithms and gain insight into what prop-
erties of a forwarding algorithm yield good performance.
Hence we choose a set of algorithms designed to span a range
of design choices. The design choices include:

• Destination aware vs. Destination unaware. Destina-
tion aware algorithms take the choice of δ into consid-
eration in forwarding, while destination unaware algo-
rithms do not.

• Single hop vs. Multi hop. Single hop algorithms use
information about the most recent contact or next ex-
pected contact; multi hop algorithms take into account
sequences of past or expected future contacts.

We study forwarding by implementing diﬀerent forward-
ing algorithms in a trace-driven simulator. We use as input

• Complete history vs. Recent history vs. Future knowl-
edge. Complete history algorithms take into account

0

 
0

0.1

0.2

0.3

0.7

0.8

0.9

1

0.1

0.2

0.3

0.7

0.8

0.9

1

0.5

0.4
0.6
Success Rate
(a)

0.5

0.4
0.6
Success Rate
(b)

Epidemic
Fresh
Greedy
Grd Onl
Dynamic Programming
Greedy Total

 

2000

1800

1600

1400

1200

1000

800

600

400

200

2000

1800

1600

1400

1200

1000

800

600

400

200

)
s
(
 
y
a
e
D

l

 
.

g
v
A

l

)
s
(
 
y
a
e
D
g
v
A

 

 

)
s
(
 
y
a
e
D

l

 
.

g
v
A

)
s
(
 
y
a
e
D

l

 
.

g
v
A

0

0

2000

1800

1600

1400

1200

1000

800

600

400

200

2000

1800

1600

1400

1200

1000

800

600

400

200

0

0

0

0

0.1

0.2

0.3

0.7

0.8

0.9

1

0.1

0.2

0.3

0.7

0.8

0.9

1

0.5

0.4
0.6
Success Rate

(c)

0.5

0.4
0.6
Success Rate
(d)

Figure 8: Average Delay (sec) vs Success Rate (a) Infocom 06 9-12 (b) Infocom 06 3-6 (c) Conext 9-12 (d)
Conext 3-6

the entire past history of other nodes when forward-
ing. Recent history algorithms taken into account only
a limited amount of history (e.g., only the most recent
encounter with the destination). Future knowledge al-
gorithms make use of oracles that provide knowledge of
future behavior of the nodes. Future knowledge algo-
rithms are not practical but provide useful comparison
cases.

To span these design choices we use the following forward-
ing algorithms. Some of these algorithms are known from
the literature and others are modiﬁcations or extensions.

Epidemic Forwarding (Flooding): A node forwards all
the packets it has to any node it meets, unless that
node already has a copy of the packet [19]. As already
noted, Epidemic Forwarding achieves the best possible
performance, so this algorithm yields upper bounds on
success rate and average delay.

FRESH : Node xi forwards a message to xj upon contact

if xj has contacted δ more recently than has xi [6].

Greedy : Node xi forwards a message to xj upon contact
if xj has contacted δ more times since the start of the
simulation than has xi. Greedy uses the entire history
of contacts in contrast to FRESH which uses only the
most recent contact history.

Greedy Total : Node xi forwards a message to xj upon
contact if xj has more total contacts (with all other
nodes) than xi. Thus Greedy Total
is destination

unaware, while FRESH and Greedy are destination
aware. Greedy Total uses both past and future knowl-
edge of internode contacts.

Greedy Online : Node xi forwards a message to xj upon
contact if xj has more contacts with δ since the start of
simulation than does xi. Greedy Online is destination
aware but uses only past knowledge, unlike Greedy.

Dynamic Programming : Node xi calculates the average
delay between all pairs of nodes then ﬁnds the optimal
path. This is based on the Minimum Expected Delay
algorithm [10]. Dynamic Programming is based on
both past and future knowledge of internode contacts.

6.2 Observations

6.2.1 Similarity of Performance

The most striking aspect of our results is the similarity in
performance of the various diﬀerent forwarding algorithms.
This is illustrated in Figure 8. For each data set and for-
warding algorithm we plot the average delay vs success rate.
The ﬁgure shows that almost all forwarding algorithms
show virtually identical performance. The exception is epi-
demic routing (shown using square symbols in the plots)
which shows somewhat better performance than the others,
since it always ﬁnds the optimal path if one exists.

While the plots in Figure 8 show the similarity of average
delay, a more detailed view is given in Figure 9. This ﬁgure
shows the entire distribution of delay. The ﬁgure shows that

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

i

)
s
(
e
m
T
<
d
e
r
e
v

 

 

i
l

e
D
 
s
e
g
a
s
s
e
M
%

 

0
0

5
x 10

16

14

12

10

8

6

4

2

s
e
g
a
s
s
e
M

 
f
o
 
#

0
9 AM

Epidemic
Ease
Greedy
Greedy Online
Dynamic Programming
Greedy Total

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

i

)
s
(
e
m
T
<
d
e
r
e
v

 

 

i
l

e
D
 
s
e
g
a
s
s
e
M
%

 

0
0

Epidemic
Fresh
Greedy
Greedy Online
Dynamic Programming
Greedy Total

1000

2000

3000

4000

5000

6000

7000

1000

2000

3000

4000

5000

6000

7000

8000

Time (s)

(a)

Time (s)

(b)

Figure 9: Delay Distributions (a) Infocom 06 9-12 (b) Conext 9-12

paths are being taken by the diﬀerent algorithms. Some
typical results are shown in Figure 11. Each plot in the ﬁg-
ure corresponds to a particular message (σ, δ, t1). The x axis
measures the time since T1 for this particular message, and
the y axis shows the number of paths that reach the destina-
tion over time. Furthermore, for each algorithm, its symbol
is superimposed on the bar corresponding to the path chosen
by the algorithm.

The two cases in the ﬁgure show the typical path explo-
sion phenomenon — the number of paths arriving at the
destination grows approximately exponentially with time.
Furthermore, the plots show that the paths used by all the
forwarding algorithms reach the destination early in the path
explosion process.

For example, the left hand plot shows that for this par-
ticular message, FRESH and Greedy are able to ﬁnd paths
arriving at time T1 (i.e., optimal paths) while Greedy On-
line and Greedy Total ﬁnd paths arriving in the next burst,
20 sec after T1. Finally Dynamic Programming ﬁnds a path
arriving in the third burst at 90 seconds after T1. The situ-
ation is similar for the case of the message in the right hand
plot.

This ﬁgure suggests that diﬀerent algorithms may have
similar (though non-optimal) performance because of the
large number of paths that reach the destination shortly af-
ter T1. When there are a large number of nearly-optimal
paths, a forwarding algorithm may be able to ﬁnd one of
those paths relatively easily. That is, the existence of path
explosion may be a factor that allows many algorithms to
achieve somewhat similar performance.

If this hypothesis is correct, then the performance of for-
warding algorithms should be strongly inﬂuenced by the way
in which path explosion occurs. In Section 5.2 we found that
path explosion occurs in diﬀerent ways for diﬀerent types of
source-destination pairs, i.e., in-in, in-out, out-in, and out-
out. Here we can put that insight to use.

If the path explosion eﬀect is a major reason why diﬀerent
forwarding algorithms have similar performance, then algo-
rithm performance should be fairly similar within pair types
and quite diﬀerent between pair types. For example, algo-
rithm performance should be similar across all in-in pairs,
but performance on in-in pairs should be quite diﬀerent from
that on in-out pairs.

10 AM
Time 

11 AM

Figure 10: Message Reception Times Infocom 9-12

the diﬀerent algorithms show quite similar distributions of
delay as well.

To explore reasons behind the similar performance of the
diﬀerent algorithms, we ﬁrst verify that message delivery is
not ‘bursty’. That is, we conﬁrm that the phenomenon is
not simply due to many nodes all making contact at rel-
atively infrequent times. An example scenario in the con-
ference could be that participants convened at a common
area after a session and it was during this time period that
many packets were delivered. To conﬁrm that this is not
the case, we plot the cumulative totals of in Figure. 10. We
plot the cumulative totals of delivery times of all optimal
and near-optimal paths. As can be seen the delivery rate is
fairly uniform in time. This shows that there are no special
periods of time in which most messages are delivered.

Likewise, the fact that epidemic routing does noticeably
better than the other algorithms means that similarity in
performance among algorithms does not occur because they
are all ﬁnding the same, optimal paths. That is, in many
cases there are better paths to be found than those chosen by
most forwarding algorithms. However algorithms generally
seem to ﬁnd paths that are close to, though not exactly,
optimal.

To understand the remarkably similar performance of the
many diﬀerent forwarding algorithms we examine which

 
s
h
t
a
P

 
f
o
 
m
u
N

2000

1800

1600

1400

1200

1000

800

600

400

200

0

Paths
Fresh
Greedy Onl
Grd Tot
Greedy
Dynamic Programming

Paths
Fresh
Greedy Onl
Grd Tot
Greedy
Dynamic Programming

 
s
h

t

a
P

 
f

 

o
m
u
N

900

800

700

600

500

400

300

200

100

0

0

20
Path Arrival Time (s) 

90

0

20

90100

60 70
Path Arrival Time (s) 

180

(a)

(b)

Figure 11: Paths taken by forwarding algorithms for two messages in Infocom ’06 9-12 (a) Msg 88-82 (b)
Msg 86-26

To see whether this is the case, we separate our simulation
results by pair type. The results are shown in Figure 12. The
ﬁgure shows the average delay and success rate across the
four pair types for each of the six forwarding algorithms.

The ﬁgure shows that success and delay depend primarily
on the type of the source-destination pair as opposed to the
type of algorithms used. All forwarding algorithms, with the
exception of epidemic, again show similar performance.

However the ﬁgure also shows that, once messages are bro-
ken down by pair type, diﬀerences between forwarding algo-
rithms start to emerge. In particular, we note a diﬀerence
for algorithms making use of maximum information about
contact patterns – i.e., Greedy Total and Dynamic Program-
ming, which use both past and future information. These
algorithms outperform others, but only in the case where one
node is an ‘out’ node. That is, in the case where both nodes
are ‘in’ nodes, then information about contact patterns is
not particularly helpful. However, when one or both nodes
are ‘out’ nodes, then maximum information about contact
patterns is helpful.

Digging deeper, we see that Greedy Total performs partic-
ularly well when the source node is an ‘out’ node. Recalling
the discussion in Section 5.2, when a source node has low
rate λσ, then rapid path explosion does not occur until the
message has been moved to a high rate node with λi > λσ.
This is consistent with the strategy of Greedy Total. Note
that Greedy Total is a destination-unaware strategy — it
only seeks to move the message toward nodes with higher
contact rates, i.e., those with λi > λσ.

These results suggest some heuristics for eﬀective forward-
ing in settings like pocket switched networks. In particular,
they suggest that a forwarding algorithm will be successful
if it causes path explosion to take place as quickly as pos-
sible. This is a somewhat diﬀerent principle for forwarding
than has typically been used in past proposals. That is,
rather than seeking to ﬁnd a short path to the destination
directly, a forwarding algorithm may instead work to cause
path explosion to occur as quickly as possible. This suggests
forwarding toward high rate nodes preferentially, regardless
of their relationship to the destination.

The picture that emerges from the results in this paper
gives a better view of the nature of node mobility, contact

patterns, and forwarding performance in a conference type
setting. In broad terms, the picture is as follows. Connec-
tion patterns between nodes lead to an exponential path
explosion eﬀect whose rate depends on the contact rates of
nodes. Since contact rate varies considerably across nodes,
path explosion occurs much faster among the higher rate
nodes than the lower rate nodes. In this setting successful
forwarding relies on moving the message toward high con-
tact rate nodes so that path explosion can occur quickly.
Once path explosion occurs among high contact rate nodes,
contact between one of them and the destination leads to
message delivery.

7. CONCLUSION

Forwarding in pocket switched networks is challenging be-
cause of the irregular and unpredictable contact patterns
between nodes.
In order to understand the nature of the
forwarding problem, this paper has taken the novel ap-
proach of enumerating and characterizing the set of forward-
ing paths that are available in such settings. More speciﬁ-
cally we study the setting where there is high node and con-
tact density and movement is in a restricted physical space.
Our main result is the observation that for most messages
there is a path explosion eﬀect, meaning that while the op-
timal path may be long, there are usually a large number
of nearly-optimal paths to the destination. We support this
result both analytically and empirically. We present a sim-
ple model of homogeneous inter-node contact and show that
path explosion is to be expected in that case. And we show
empirically that path explosion does occur in our data, al-
though in a more complicated manner due to varying contact
rates across nodes. Our empirical results focus attention on
the diﬀerence between high contact rate (‘in’) nodes and low
contact rate (‘out’) nodes.

These results help us understand why diﬀerent forwarding
algorithms show quite similar performance. As a result of
path explosion, diﬀerent forwarding algorithms often ﬁnd
paths to the destination of nearly-equal duration.

Our study leaves open a number of important questions.
Our understanding of the inhomogeneous case is not as pre-
cise as that of the homogeneous case; more sophisticated an-

Epidemic
Fresh
Greedy
Greedy Total
Greedy Online
Dynamic Programming

 

 

Epidemic
Fresh
Greedy
Greedy Total
Greedy Online
Dynamic Programming

 
)
s
(
 
s
y
a
e
D

l

 
.

g
v
A

2500

2000

1500

1000

500

0

 

 
e
t
a
R
 
s
s
e
c
c
u
S

 
.
g
v
A

0.4

0.35

0.3

0.25

0.2

0.15

0.1

0.05

0

 

in−in

in−out

out−in

out−out

in−in

in−out

out−in

out−out

(a)

(b)

Figure 12: Performance of Forwarding Algorithms on Diﬀerent Types of Source-Destination Pairs: (a) Av-
erage Delay (b) Success Rate.

alytic models would be useful in that regard. Furthermore,
we have not considered the cost of forwarding, and so there
may be good reasons to prefer one algorithm over another
even if they show similar performance. It is possible that an
understanding of the path explosion phenomenon may help
in understanding the relative costs of diﬀerent forwarding
algorithms.

Acknowledgments
The authors thank members of Web and Internetworking
Group (WING) at Boston University for valuable feedback
on early stages of this work, and Mostafa Ammar for helpful
conversations at Thomson Paris during summer 2006. We
would also like to thank Laurent Massouli`e for helpful advice
on the analytical section. This work was supported by NSF
grants CCR-0325701 and ANI-0322990, and by funding from
the HAGGLE FET project.

8. REFERENCES
[1] V. Borrel, M. D. de Amorim, and S. Fdida. A

preferential attachment gathering mobility model.
IEEE Communications Letters, 9(10):900–902, 2005.

[2] T. Camp, J. Boleng, and V. Davies. A survey of

mobility models for ad hoc network research. WCMC:
Special issue on Mobile Ad Hoc Networking: Research,
Trends and Applications, 2(5):483–502, 2002.

[3] A. Chaintreau, P. Hui, J. Crowcroft, C. Diot, R. Gass,

and J. Scott. Pocket Switched Networks: Real-world
mobility and its consequences for Opportunistic
Forwarding. Technical Report UCAM-CL-TR-617,
University of Cambridge, 2005.

[4] A. Chaintreau, P. Hui, J. Scott, R. Gass, J. Crowcroft,

and C. Diot. Impact of human mobility on the
performance of opportunistic forwarding algorithms.
In Proceedings of IEEE INFOCOM, 2006.

[5] V. Conan, J. Leguay, and T. Friedman. The

heterogeneity of inter-contact time distributions: its
importance for routing in delay tolerant networks.
ArXiv Computer Science e-prints, Sept. 2006.

[6] H. Dubois-Ferriere, M. Grossglauser, and M. Vetterli.

Age matters: eﬃcient route discovery in mobile ad hoc
networks using encounter ages. In ACM MobiHoc ’03,
pages 257–266, 2003.

[7] M. Grossglauser and D. N. C. Tse. Mobility increases
the capacity of ad hoc wireless networks. IEEE/ACM
Trans. Netw., 10(4):477–486, 2002.

[8] M. Grossglauser and M. Vetterli. Locating mobile

nodes with ease: learning eﬃcient routes from
encounter histories alone. IEEE/ACM Trans. Netw.,
14(3):457–469, 2006.

[9] P. Hui, A. Chaintreau, J. Scott, R. Gass, J. Crowcroft,

and C. Diot. Pocket switched networks and human
mobility in conference environments. In WDTN ’05.

[10] S. Jain, K. Fall, and R. Patra. Routing in a Delay

Tolerant Network. In ACM SIGCOMM ’04.

[11] E. P. C. Jones, L. Li, and P. A. S. Ward. Practical
routing in delay-tolerant networks. In WDTN ’05.
[12] T. G. Kurtz. Limit theorems for sequence of jump

markov processes approximating ordinary diﬀerential
processes. Journal of Applied Probability, pages
344–356, 1971.

[13] A. Lindgren, A. Doria, and O. Schelen. Probabilistic

routing in intermittently connected networks.
SIGMOBILE Mob. Comput. Commun. Rev.,
7(3):19–20, 2003.

[14] S. Merugu, M. Ammar, and E. Zegura. Routing in

space and time in networks with predictable mobility.
Technical Report GIT-CC-04-7, Georgia Institute of
Technology, 2004.

[15] M. Musolesi and C. Mascolo. A community based

mobility model for ad hoc network research. In
REALMAN ’06, pages 31–38, 2006.

[16] E. Nordstrom, C. Diot, R. Gass, and P. Gunningberg.

Experiences from measuring human mobility using
bluetooth inquiring devices. In MobiEval 2007: System
Evaluation for Mobile Platforms, 2007.

[17] T. Spyropoulos, K. Psounis, and C. Raghavendra.

Single-copy routing in intermittently connected mobile
networks. In IEEE SECON ’04, pages 145–158, 2004.
[18] T. Spyropoulos, K. Psounis, and C. S. Raghavendra.

Spray and wait: an eﬃcient routing scheme for
intermittently connected mobile networks. In ACM
WDTN ’05, pages 252–259, 2005.

[19] A. Vahdat and D. Becker. Epidemic routing for

partially connected ad hoc networks. Technical Report
CS-200006, Duke University, 2000.

[20] X. Zhang, G. Neglia, J. Kurose, and D. Towsley.

Performance modeling of epidemic routing. In
Proceedings of IFIP Networking, 2006.

