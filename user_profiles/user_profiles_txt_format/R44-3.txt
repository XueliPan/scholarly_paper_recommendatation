Answering Control Flow Questions about Code 

Institute for Software Research, School of Computer Science, Carnegie Mellon University 

Thomas D. LaToza 

tlatoza@cs.cmu.edu 

Abstract 

 

Empirical observations of developers editing code revealed 
that  difficulties  following  control  flow  relationships  led  to 
poor  changes,  wasted  time,  and  bugs.  I  am  designing  a 
static  analysis  to  compute  interprocedural  path-sensitive 
control  flow  to  help  developers  more  quickly  and  accu-
rately visually answer these common questions about code.  

Categories and Subject Descriptors  D.2.6 [Software En-
gineering]:  Programming  Environments;  D.2.7  [Software 
Engineering]:  Distribution,  Maintenance,  and  Enhance-
ment. 

General Terms  Human Factors, Verification 

Keywords Program  comprehension,  empirical 
dataflow analysis 

study, 

1. Introduction 
Before successfully editing code to make a change, devel-
opers  try  to  understand  relevant  unfamiliar  code.  Tools 
have used many different approaches to support this activ-
ity. Tools have been built to traverse dependencies [7], rec-
ommend  relevant  code  [8],  check  method  specifications 
[3], and reverse engineer diagrams from code [6]. To iden-
tify  new  requirements  for  tools,  I  used  modern  human 
computer interaction approaches to study challenges devel-
opers  face  understanding  unfamiliar  code.  A  central  tenet 
of  modern  human  computer  interaction  is  that  gathering 
data about the context and nature of user activity is essen-
tial for designing useful tools [2]. 

I  observed  13  developers  during  3-hour  code  editing 
tasks and analyzed breakdowns (e.g., questions participants 
took  a  long  time  to  answer,  and  bugs  they  inserted).  The 
tasks  were  designed  to  be  challenging  and  require  reverse 
engineering  the  design  from  the  code.  A  key  observation 
was  that  many  of  the  problems  developers  experienced 
arose from specific challenges answering update path ques-
tions  with  existing  tools,  refining  an  earlier  finding  that 
developers  ask  control  flow  questions  [5].  An  update  path 
is control flow connecting a trigger, a user input event gen-
erating  control  flow  into  user  code,  with  changes  in  pro-
gram  state  through  field  writes  and  framework  calls.  For 
example,  opening  a  file  triggered  repeated  updates  to  the 

 

Copyright is held by the author/owner(s). 
OOPSLA’08, October 19–23, 2008, Nashville, Tennessee, USA. 
ACM  978-1-60558-220-7/08/10. 

 

status  bar.  Based  on  this  finding,  I  have  been  designing  a 
tool to automatically answer these questions. 

2. Update path questions 
Developers followed update paths from methods to under-
stand  when  they  were  called,  what  they  did,  and  how  a 
path’s functionality was related to similar paths. Tools such 
as Eclipse’s call hierarchy provide a tree control for explor-
ing  chains  of  method  calls.  However,  these  views  include 
both  feasible  paths  and  infeasible  paths,  often  making  it 
difficult for developers to identify the feasible paths. Event 
dispatch  caused  huge  fanouts  even  though  most  of  these 
paths  were  infeasible.  Infeasible  paths  also  resulted  from 
instanceof tests that could never succeed along a path that 
allocated  an  object  of  an  incompatible  type,  and  code 
guarded by flags, often stored in fields. 

Developers  also  could  not  follow  paths  to  specific  trig-
ger methods. Using the call hierarchy to traverse backwards 
from  effects  to  triggers  requires  traversing  all  paths  until 
either the trigger or the beginning of the path is found. For 
nontrivial programs, traversing all paths is usually imprac-
tical.  Given  this,  developers  were  forced  to  guess  which 
paths came from the trigger, often leading to incorrect be-
liefs.  Developers  often  could  not  understand  how  multiple 
update  paths  interacted  with  each  other.  Some  developers 
proposed changes with unchecked assumptions about paths 
they had not investigated. 

Some  developers  tried  to  use  the  debugger  to  avoid 
navigating infeasible paths. For some questions, it was pos-
sible  to  answer  them  using  the  debugger,  but  the  time  to 
step lead developers to the call hierarchy even though they 
followed  infeasible  paths.  Other  questions  could  not  be 
answered using the debugger. Developers could not inspect 
the callstack to find other triggers. 

Instead,  most  developers  made  false  assumptions,  often 
arising  from  false  inferences  from  identifiers.  These  in-
cluded believing that a method would be called after a data 
update, that no slow or expensive effects were downstream 
from a method, that any downstream effects were superflu-
ous,  or  that  an  object  was  not  owned  and  could  be  passed 
downstream.  Changes  to  the  code  relying  on  these  false 
assumptions led to bugs. Other developers only constructed 
a  very  local  understanding  of  the  problem  and  proposed 
changes that could never work.  

Existing  program  analyses  for  program  understanding 
have  been  dominated  by  slicing  tools  for  traversing  de-
pendencies. A slice is the set of program points affected by 
or affecting (backwards slice) a statement [6]. Slicing tools 
do  not  compute  feasible  paths.  Model  checkers  compute 
feasible  paths,  but  current  model  checkers  (e.g.,  [1])  are 
specialized for finding low frequency bugs and therefore 

EditPane

+setBuffer

+loadCaretInfo

JEDitTextArea

+setBuffer

EditBus

+send

JEditTextArea

+setCaretPosition

+setSelection

+setFirstPhysicalLine

+setBuffer

-ﬁreScrollEvent

+selectNone

+moveCaretPosition

-ﬁnishCaretUpdate

+setFirstPhysicalLine

+setSelection

-ﬁnishCaretUpdate

queuedCaretUpdate

#_ﬁnishCaretUpdate

...

...

-ﬁnishCaretUpdate

-ﬁnishCaretUpdate

caretLine

#_ﬁnishCaretUpdate

#_ﬁnishCaretUpdate

+setSelection

+moveCaretPosition

#_ﬁnishCaretUpdate

-ﬁreScrollEvent

-ﬁreCaretEvent

-ﬁreCaretEvent

-ﬁreCaretEvent

-ﬁreCaretEvent

...

...

View

...

...

+handleMessage

+caretUpdate

+scrolledVertically

+handleEditPaneUpdate

+caretUpdate

+caretUpdate

+caretUpdate

+scrolledVertically

+updateCaretStatus

+updateCaretStatus

+updateCaretStatus

+updateCaretStatus

+updateCaretStatus

+updateCaretStatus

+updateCaretStatus

StatusBar

Figure 1.  A visualization mockup.  Method contexts (white boxes) are shown in containing classes (grey boxes) laid out in 
the  in-order  execution  tree.  Calls  (lines)  either  may  (dashed)  or  must  (solid)  happen  or  occur  in  a  loop  (two  lines).  Fields 
(text) are read (up arrow) and written (down arrow), depicting problems such as stale data (first read of caretLine). Editing 
code may cause methods contexts to no longer be on feasible paths (crossed out), revealing unexpected changes. 

compute very precise abstractions. Paths are generated too 
slowly  to  be  used  in  an  interactive  tool.  Interprocedural 
dataflow  analyses  compute  dataflow  facts  that  hold  at  a 
program  point  but  do  not  eliminate  most  infeasible  paths. 
Dynamic  analysis  based  visualizations  (e.g.,  [8])  depict  a 
single  concrete  trace  or  set  of  traces  but  not  all  feasible 
traces. 

3. Analysis and Visualization 
I am designing an analysis and tool to allow developers to 
accurately ask and answer update path questions.  In  phase 
1, a modular path-sensitive intraprocedural dataflow analy-
sis propagates facts. In phase 2, this information is used to 
construct  per  method  summaries  of  feasible  paths.  After  a 
user  asks  a  question,  phase  3  computes  an  interprocedural 
abstract  execution  trace  from  a  trigger  method.  Phase  4 
filters the trace to answer user questions.  

In phase 1, a dataflow analysis propagates literals, inter-
procedural “sources”, and “fork” constraint facts. Interpro-
cedural  sources  –  parameters,  field  reads,  return  values  – 
are  propagated  symbolically.  Whenever  a  flag  or  object’s 
type is tested, facts are used to attempt to resolve the test. If 
not  possible,  the  path  is  forked  and  constraints  for  both 
possibilities are created and analyzed on separate paths. To 
reduce the exponential path blowup from uncorrelated tests, 
constraints  on  dead  variables  are  removed  and  paths  with 
identical facts joined. The analysis tracks dataflow through 
classes field-sensitively but not instance-sensitively. Unlike 
model  checkers,  it  intentionally  does  not  track  arithmetic 
constraints.  This  greatly  reduces  path  blowup.  Examples 
from  our  tasks  contain  few  calls  control  dependent  on 
arithmetic  constraints,  and  I  will  measure  how  generally 
this holds.  

Phase 2 uses this information to construct method sum-
maries.  Method  summaries  consist  of  nodes  listing  inter-
procedural 
read/write,  method 
invoke/return).  Later  operations  reference  earlier  opera-
tions. Summary nodes end with tests on operations and link 

operations 

(field 

to  true  and  false  successor  nodes.  Paths  through  the  sum-
mary join when subsequent operations do not differ. 

In  phase  3,  an  abstract  interpretation  using  the  summa-
ries computes the abstract trace rooted at a trigger method. 
Phase  4  uses  the  traces  to  answer  questions.  Developers 
select  methods  and  ask  questions  such  as  “what  does  this 
do?” or “when does this happen?” I am investigating inter-
actions for asking these questions and designing visualiza-
tions  for  depicting  answers.  A  preliminary  mockup  is 
shown in figure 1. 

4. Summary 
Observations  of  developers  have  revealed  control  flow 
questions  developers  ask  that  are  hard  and  error  prone  to 
answer  using  existing  tools.  My  analysis  and  visualization 
tool  will  help  developers  more  quickly  and  accurately  an-
swer control flow questions about code. 

References 

 

[1]   T.  Ball  and  S.  K.  Rajamani.  Automatically  Validating  Temporal 
Safety  Properties  of  Interfaces.  In  SPIN  2001,  Workshop  on  Model 
Checking of Software, LNCS 2057, 2001. 

[2]   H.  Beyer  and  K.  Holtzblatt.  Contextual  Design.  Academic  Press, 

1998. 

[3]   L. Burdy, Y. Cheon, D. Cok, M. D. Ernst, J. Kiniry, G. T. Leavens, 
K. Leino, and E. Poll. An overview of JML tools and applications. In 
Software Tools for Technology Transfer, 7(3), 2005. 

[4]   D.  F.  Jerding,  J.  T.  Stasko,  and  T.  Ball.  Visualizing  interactions  in 

program execution. ICSE 1997. 

[5]  J. Sillito, G. C. Murphy, and K. De Volder.  Questions programmers 

ask during software evolution tasks. FSE, 2006.  

[6]   M.-A.  D.  Storey  and  H.  A.  Müller.  Manipulating  and  documenting 

software structures using shrimp views. ICSM, 1995. 

[7]   M. Weiser. Program slicing. ICSE, 1981.  

[8]  T.  Zimmermann,  P.  Weißgerber,  S.  Diehl,  and  A.  Zeller.  Mining 

Version Histories to Guide Software Changes. TSE, June 2005. 

