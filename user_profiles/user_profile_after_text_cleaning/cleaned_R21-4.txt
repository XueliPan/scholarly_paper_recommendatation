symposium symposium time analysis mix computer information science university computer tu lee embed operate multiple mode switch time well time analysis system operate single mode well study always difficult piece together result different order deduce time system result often certain restrictive make restrict time mode change might occur problem become complex time mode change allow complex describe traditional event model ie event stream model multiple largely open problem paper propose model associate analysis describe embed process multiple stream mode change compare previous study model general capture wide variety analysis use determine different performance metrics maximum different buffer delay suffer stream process system main novelty analysis lie piece together result different order obtain performance metrics full system towards propose exact expensive well safe approximation utility model analysis illustrate use detail case study introduction increase complexity cost modern embed require operate multiple mode among may characterize different set task different data arrival rat different schedule policy mode switch may well former consist service interrupt latter might mode switch trigger like incoming call mobile phone buffer system fill beyond certain level model analyze therefore topic great interest within embed community main challenge compose analysis result individual order derive overall system order simplify problem often restrictive make example language one require task interrupt mode switch activation rat source well target result restriction time overall system guarantee system feasible operate individual hence sufficient verify feasibility individual much easier problem change need explicitly account perform time analysis analysis become substantially complex time mode change allow system question describe use complex model ie beyond classical event model model analyze mode change currently largely unexplored problem paper propose model describe process multiple stream mode change may time well wide variety embed example consider use play stream well make receive phone call depend operate mode system ie whether incoming call receive video application run different task may change certain task might put sleep even terminate give arrival pattern data well high variability execution often overly pessimistic use standard event model hence mode change need model conjunction general event model better suit capture stream towards rely calculus framework describe flexible manner arrival pattern process different stream process system framework introduce two three subsequently extend number paper see four five rely abstraction model time input stream well availability general classical model study assume consist multiple task get trigger incoming stream arrival pattern stream well process mention describe use framework detail follow later paper arrive stream wait process store input buffer process stream output buffer read output mode system define set active task arrival rat stream trigger task schedule policy accord task serve mode change already mention time well example certain task activate time task might change hence mode change depend different buffer system set ask question form maximum fill level give buffer delay suffer individual stream delay suffer stream particular mode question answer within framework see two unimodal know extend case main novelty analysis propose paper lie piece together result individual derive entire system towards combine analysis framework exploration use analyze model time automata besides compute delay buffer metrics exactly turn expensive also propose safe metrics set finally illustrate model analysis use realistic case study show explicitly model multiple rather approximate system behavior unimodal system result estimate different performance metrics relate work number previous attempt extend model time analysis literature accommodate complex example framework present six allow certain task intentionally change execution type mode change associate schedule technique adapt task within allowable limit order maintain system similarly model propose seven allow system multiple mode consist set task possibly overlap system use rate monotonic schedule problem select suitable task system different mode change study eight nine ten system consist multiple mode consist set task mode change trigger mode change request transition old new mode take nonzero time transition system task old new might produce temporal overload however arrive transition period goal develop ensure violate transition consist suitable mode change restrict mode change time allow synchronous mode change well analysis verify feasibility system different transition contrast approach make simplistic assumption instantaneous mode change however model specify task activation pattern different use framework moreover unlike study also accommodate mix mode change analysis seamlessly handle mix time embed study past see eleven twelve either context bus like context synchronous program integrate urgent require synchronous program environment hand focus time performance analysis mode change time rather formulate mode change finally may note recently propose extension framework thirteen different model compare study paper arrival pattern stream availability pattern model automata whose state annotate function denote rat arrival service automata thirteen aim model independently complex arrival pattern event stream resource availability pattern however follow relatively simple process semantics interest system whole thereby single model system reduce analysis complexity also provide better intuition system behavior concept mode current paper natural one operate system pattern consider simpler study thirteen allow process semantics different task schedule explicitly capture adapt dynamic event stream organization paper next section describe model follow analysis section finally present case study section v conclude discussion possible work due space proof may find fourteen system basic model system consist finite set task map processor n n n one task ti process input data stream si item item basis upon arrive system incoming data si store input buffer process ti process data write output buffer b fig one show system consist three task ti associate input buffer output buffer b backlog buffer time denote number buffer time shall refer name buffer well variable whose value give current buffer task set b correspond automaton one five twenty b five b nine thirty two ten three fifteen two one one five eleven three twelve two two two zero one three three zero two one fig one example task set automaton task model assume dispatch model task instance task immediately trigger data item arrive correspond input buffer task ti fix relative deadline time fix maximum execution demand di processor cycle fig one di relative deadline execution demand ti respectively one three data stream model arrival function arrival pattern data stream specify cumulative function give number arrive interval zero set arrival pattern stream capture arrival function l l specify maximum minimum number data arrive stream time interval length word arrival pattern data stream model simply l zero resource availability model service function service pattern processor capture cumulative function c c denote number processor cycle available time interval zero set service pattern processor model service function l l give maximum minimum number processor cycle available time interval length thus c service pattern l c c zero execution semantics model automata execution semantics system describe mix time automaton automaton finite automaton whose state represent different operate system transition represent mode change mode state automaton form c comprise ti service function bound total resource avail able system mode set task execute mode schedule policy use schedule task contain one task fix priority omit since system allocate available resource task length c cycle c ti c unused pair ti arrival function input stream si denote either length slot allocate ti cycle priority ti note specification schedule mode adapt schedule policy use model arrival service function remain constant system mode however system move new mode reset new value associate new mode formally define automata first state relevant zero n b set buffer guard form one two b one two b since take integer value equivalent thus use interchangeably guard buffer appear contain guard form maximum value satisfy n one definition one automata give finite set task associate set input stream input buffer b output buffer b b automaton one execute min r b n j j j c j set j j j one j c j ti j min initial mode mode invariant function j l j j specify interval stay j ie must stay j least l j j time j time stay j automaton must take enable transition another mode go deadlock set signal trigger mode change control external controller b transition relation transition r form origin mode destination mode external signal trigger transition guard input buffer must satisfy transition enable time transition enable relative instant automaton enter assume one enable outgo transition mode time automaton select one transition urgent unless otherwise specify transition enable say mode change request example fig one b sketch automaton correspond task set give fig one figure b denote external signal trigger transition automaton table detail service function schedule policy active task correspond arrival function mode automaton mode mode mode one eleven slot three twelve slot two two service schedule three two one table mode system fig one mode change semantics instant mode change request processor may execute task may also pending data input buffer wait process general various ways system could response paper assume mode change request new mode j one automaton enter j instantaneously two arrival function input stream service function resource schedule policy reset associate j immediately three new stream process task j arrive immediately mode switch arrival pattern follow update arrival function four system continue execute unfinished task schedule task j note unfinished task may may appear j five pending data input buffer task j delay system move mode contain six new data arrive data stream process j rationale behind stream environment currently process stream often pause system service critical task resume point later hence important maintain buffer state system move new mode general pending data task old mode new mode also process achieve model include task new mode set arrival function zero delay arrival new task also represent model add intermediate mode two associate set task old mode besides delay transition intermediate mode new mode analysis give system b b would like compute maximum backlog buffer b maximum delay experience stream si maximum delay data item arrive mode task set derive compute maximum delay ie ti meet deadline maximum delay si always less equal di paper consider specifically fix priority time division multiple access however technique apply schedule main difference would computation execution demand node respect choose schedule policy detail schedule explain fourteen exact time analysis first define concept execution trace observe automaton mode stream arrive different rate control correspond arrival function call arrival pattern mode ai arrival pattern ti ai zero otherwise since one service function associate c service pattern mode service pattern c ti definition two buffer map buffer map function function compute buffer time base buffer time system stay put mode specifically define time automaton spend denote b suppose arrival pattern c service pattern j b b c b zero c zero zero b b zero c simply function vary schedule policy however always deterministic give function schedule one n pi c c b c n zero ai ai n b one b zero c ak ak b n p zero ai zero c c c c min c ko p pi b p j k assume k index slot cycle definition three mode execution c b execution mode c ti arrival pattern c service pattern b x b zero c x zero x definition four execution sequence execution trace min one j h j j j c j b j j execution j j b j j satisfy j b j j b zero j r j b maximum backlog analysis analyze maximum backlog buffer construct underlie behavioral automaton denote state machine whose state form b c mode b vector n denote buffer b time system stay put j arrival pattern c service pattern define time initial state configuration min bin zero min initial mode bin zero function transition b c b c one follow hold one c c zero b b c one schedule policy b b zero zero one n c zero zero zero transition b satisfy zero time associate transition reachable state derive exact maximum backlog buffer specifically maximum backlog maximum value reachable state b c maximum delay analysis maximum delay experience stream do similarly introduce additional behavioral automaton system use keep track wait time data observe upper bind invariant mode may stay put mode forever ie value configuration bound result behavioral automaton may potentially infinite address construct regional automaton denote reg time abstract representation state reg correspond set reachable mode value buffer ie b vector transition state b state b reg transition state b c state b c analysis do base reg although size reg significantly smaller might still infinite since value buffer state may bound allow feasible computation reg assume upper bind n size buffer size reg automaton efficient abstraction approach zone automata use rectangular hybrid automata apply however still require know upper bind size buffer automaton finite approximate time analysis analysis approach present previous section though exact expensive size region automaton exponential size buffer number task finite assume upper bind size buffer must specify exact method verify buffer exceed specify maximum size however case buffer unbounded analysis go forever search backlog value general could maximum backlog buffer unbounded case system say unstable stability often assume might hold case unless verify result mode switch backlog buffer get accumulate execute along sequence system enough resource clear backlog put constraint mode switch take place backlog may potentially become infinite result simply assume system stable fact important analysis able detect instability system quickly provide diagnosis system designer improve system motivate us develop alternative method much efficient capable identify system instability well compute safe system performance overview approximate analysis key idea approximate analysis instead enumerate possible value buffer backlog execution do exact method keep track execution lead maximum backlog buffer maximum backlog value mode along exploration path base structure input automaton maximum backlog buffer mode explore path compute directly arrival service function mode use technique without consider every execution search value exploration result abstract tree g v e capture execution trace lead maximum buffer backlog g view abstraction region automaton use exact method use compute time system two come section detail construction g section show maximum backlog maximum delay compute base g worth note since method tight general method present inherently approximate analysis key idea basic result construction g g form set nod v set edge e node v v consist mode specify maximum initial backlog system enter v addition v associate maximum backlog system v edge e e node v node associate one n one value always upper bound buffer guard associate transition value arrival service function associate zero otherwise attribute associate node transition g summarize fig two node v node n one n maximum initial backlog system enter maximum backlog system stay put one always bound due buffer guard associate transition value arrival service function zero otherwise fig two attribute node transition g fig three give overview construction g highlight figure point finger reachable node v need compute mode reachable take enable outgo transition need compute maximum initial backlog system enter describe computation attribute serve build block construction g detail next section suppose ti obtain maximum buffer backlog maximum initial backlog upon enter compute service function resource allocate task ti base initial maximum buffer backlog enter c maximum buffer backlog stay put base maximum buffer backlog move every transition enable compute service function bound portion resource give stream si system give function call typically define base execution demand ie number processor cycle require process data currently definition five suppose execution demand system enter let service automaton add min zero g unvisited n p c r f e e l b h c e r n p c unvisited yes finite tree g v e take node v unvisited remove unvisited compute maximum backlog v satisfy yes compute maximum initial backlog g yes add unvisited g find infinite backlog cycle contain find find system unstable fig three overview construction g function resource allocate task ti system give lemma define proof available fourteen lemma let denote execution demand system enter let set task higher priority ti ie lower service function bound amount resource allocate task ti give l k f x f x zero f n n x zero cycle ti may allocate resource time interval length c however grant full access resource time interval length result one compute service function resource give ti use lemma lemma lower service function bound amount resource allocate task ti give c l l c c l zero compute since execution demand ti follow corollary hold n denote corollary let maximum execution demand system enter v one n lemma denote l maximum backlog system stay put give ti otherwise l compute suppose transition let time associate r l otherwise word l interval r take recall maximum value satisfy lemma maximum backlog system enter take transition r give v min zero l ti j otherwise b construction abstract tree g section give detail description tree construction fig three start root tree min min initial mode zero since buffer initially empty add v set unvisited nod term unvisited v unvisited empty initially let v node unvisited first remove nod v unvisited correspond path v node w v node w pass path sequence maximum initial backlog system enter w equal maximum initial backlog system enter w word compute maximum backlog sufficient consider start v next compute maximum backlog system use lemma suppose transition satisfy r enable maximum backlog system enter give v lemma create new node case one node w g need explore hence delete continue next transition case two node w exist add v new edge v e zero infinite x x service function resource give si l interval r take compute section iva otherwise one edge path root v contain contain check path contain zero cycle lead infinite buffer two one three h backlog specifically let path g v note exist one n otherwise delete case one two case one one k h always upper bound mark bound node exist k otherwise k zero one k h claim maximum backlog infinite repeat infinite number time fourteen hence report infinite buffer backlog return path root g terminate construction add set unvisited continue next transition v transition explore continue next node unvisited set empty lemma construction g decidable one mode appear cycle incoming transition let x x x service allocate ti assume zero initial buffer backlog buffer l interval take define k otherwise let maximum value k incoming transition construction imply maximum number value initial maximum backlog enter thus number time appear node n g k result size tree g k since number automaton relatively small algorithm highly scalable x c compute maximum backlog maximum backlog buffer mode j maximum value v v contain j j v j maximum backlog experience stream j j compute maximum delay v case study present method compute maximum delay event stream si mode let min trin execution trace result maximum delay j c j b j j si mode j one suppose si delay among si arrive system mode maximum delay si delay delay experience j since consider finite buffer backlog delay finite thus fully process h time system enter mode one h denote amount time instant enter instant arrive delay one h one delay amount time need process b j zero initially buffer system enter data arrive time system since number arrive si amount resource allocate si independent data arrive si previous delay imply b j zero equal maximum backlog whenever system enter ie v g j b j zero v v node contain let correspond path j j one j h moreover amount resource give si system bound p n one n since fully process j system h time total execution demand data arrive must total resource give system along path worst case word p p j one k j j two h one two imply delay delay delay min g h j j j one h k j j overall maximum delay experience stream si maximum value delay note backlog delay safe approximation actual maximum backlog buffer maximum delay stream less equal compute value section present case study illustrate applicability automata realistic particular look equip advance feature connectivity via media show propose model use describe system derive various performance use analysis base obtain analysis result able tune system design minimize resource usage assure quality service assume system consist five main task table execute single processor architecture fig four task functionality kernel thread run time instance system clock io user input connection monitor telemetry wireless data collection activate periodically system update maintenance display update execute periodically every time audio process voice data call video process stream video use table different task input audio stream incoming voice call input video stream via task telemetry data stream ta tu input buffer ba bu output buffer ba bu ta tu ba bu ba bu application task system update kernel fig four system architecture application many complex dynamic system operate mode execute different subset task processor frequency scale best match process requirement mode schedule task active mode also choose respect task execution pattern overall performance case study assume fix priority employ voice call higher performance video stream however allocate video stream take advantage idle call hence little voice data background noise whole seven different active system idle execute higher priority call system enter mode user call three task execute highest priority priority video system mode user watch stream video mode three task execute highest priority priority system mode user watch video phone call thus four task get execute decrease order priority system enter mode audio stream certain threshold spend least da time happen idle period conversation audio traffic contain mainly background noise hence assign higher priority video stream system switch back mode audio buffer exceed value ca ie end idle period update mode two task execute higher priority sleep system enter power save mode activity duration time execute periodically wake perform system update return back sleep system sleep mode processor run frequency active mode run normal frequency expensive task audio video process processor operate maximum frequency design system important question must address decide much buffer space require ensure buffer overflow typical way compute maximum backlog compute value use minimum buffer need allocate task avoid buffer overflow different buffer system model system demonstrate automata easily capture dynamic behavior give system base result model compute maximum backlog buffer use propose analysis note might possible represent system use model mode model capability view system single mode worst combination original however approach often lead overly pessimistic result demonstrate later case study specifically focus input buffer voice video stream due space fig five depict automaton system ease presentation mode update show automaton transition mode automaton mode update show model system sleep one ba zero active one zero video bu zero update call video zero call one da video one call ba zero ba ca ba ca zero one ba zero active call ta video sleep update tu ta ta processor frequency sleep active call video fig five model fig four dash box figure task mode list highest priority priority period da minimum duration system must stay mode amount inactivity time system go sleep mode figure ba bu denote input buffer audio voice stream stream update job respectively ca c n buffer system switch two assume system update mode keep processor frequency previous mode come experimental setup result since periodic task arrival function compute directly choose assume arrival function task remain constant input audio video stream general hence arrival function take arbitrary form obtain arrival function video stream use set representative video clip simulate version instruction set simulator fifteen execution trace measure execution demand decode task derive function give number arrive input buffer time interval zero function use compute arrival function v video input stream arrival function audio stream obtain similar fashion capture instead one share update mode automaton one copy mode automaton show fig five set frequency experiment arrival function video stream choose arrival function audio stream mode smaller mode system give higher priority audio stream less input data audio stream maintain high level service voice call time f service function system compute base frequency processor assume processor run task besides give task set hence f service function give l f f frequency processor experiment set threshold system move mode set c analysis implement approximation outline section additionally perform analysis without mode model use original model compute maximum backlog video buffer mode individually take worst value conclude remark propose model call automata set associate analyze mode change time first approach use automata verification tackle stringent case require exact time analysis second technique develop incorporate calculus automata state exploration provide approximate performance metrics whole system base result derive individual combination two different produce solution efficient time guarantee give safe estimate applicability benefit propose model demonstrate system mode change drive time various buffer system would interest explore model lift set enable compositional analysis correct construction design single mode approximation research support part reference analysis p n e h f g l k c b x e e r e v level threshold ca fig six maximum video input buffer fig four fig six plot result maximum backlog input video buffer different value ca see fig five use model use approximation bar graph represent result analysis whereas horizontal line represent result approximation compare result approximation may see explicitly model dynamic behavior system result significantly estimate thereby lead better resource dimension buffer memory may observe maximum backlog give analysis remain constant increase ca base compute result one may easily determine amount buffer memory provision video stream choose threshold value ca alternatively information also help system developer tune minimize resource usage select best value ca minimize total memory requirement system tune would possible simplistic model one b c kirsch language embed program proceed vol nine one two l general framework analyse system embed system design date three l framework evaluate design packet process design conference four e l quantitative characterization event stream analysis hard vol five e l hard journal computer system vol two six g c g l elastic task model adaptive rate control seven shin kim k performance analysis multiple mode embed design conference eight g change operational context schedule information vol eleven nine l sha r j k mode change schedule vol one three ten j real mode change survey new proposal vol eleven pop p z design optimization mix trigger distribute embed twelve n p integrate design schedule mix time conference thirteen l p calculus fourteen l x lee time analysis mix fifteen e infrastructure computer system model computer vol two