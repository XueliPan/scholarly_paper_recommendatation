model query probabilistic process milo university milo abstract probabilistic process appear naturally various business process data management many model specify query process exist literature main goal research area design model expressive enough capture process analysis task time allow efficient query evaluation depict model establish thirteen sixteen seventeen eighteen claim achieve good balance expressivity query evaluation complexity compare contrast model common model probabilistic process highlight different make model design effect expressivity incur complexity one introduction probabilistic process ie process probability distribution possible appear naturally various instance possible may capture process derive popularity action among previous recent paper six explain capture probabilistic data via probabilistic process specification many additional natural language process computational biology probabilistic process occur case typically intricate structure may induce large even infinite presence recursion number possible six fifteen importance probabilistic process along complex nature call use query language allow analyze process possible result analysis apply process optimize identify optimal ways use column column editor school university analysis task include termination analysis ie find probability process terminate identify likely execution flow part thereof identify probability execution reach give point allow analysis flavor three require first one design formal model probabilistic process second model accompany correspond query language allow specify analysis task process model query language expressive enough capture process analysis task simple enough allow effective formulation process specification query third model query language must support efficient query evaluation clearly exist expressive power model query language complexity query evaluation important goal research area find good balance two many model query probabilistic process four six nine seventeen thirty appear literature vary expressive power query evaluation complexity admit specifically five sixteen seventeen suggest model query language probabilistic business process use depict logical structure business common web five nineteen model abstraction eight standard allow intuitive graphical representation process query language base view allow query process visually intuitive manner analogous process typically specify study query evaluation provide efficient different fragment query language thirteen sixteen seventeen claim propose model successful record june vol two achieve good balance expressivity complexity query evaluation substantiate claim first informally depict model complexity result achieve query evaluation review common model compare via comparison highlight different make model design effect expressivity query evaluation complexity next provide brief overview business process model query language business process specification abstractly model nest dag consist nod link edge detail execution order fifteen example consider travel agency specification may include nod flight hotel reservation car rental payment confirmation service edge describe execution order dag shape allow describe parallel instance may inject parallel search may either atomic compound latter case possible internal structure call also detail dags lead nest dag structure compound activity may different possible correspond different user variable value availability execution flow actual run instance obtain choose single implementation compound activity specification induce set possible set may large even infinite specification contain recursion practice common model probability distribution possible compound sixteen seventeen specification along description distribution call probabilistic note dictate execution course typical case interdependent instance user make reservation flight likely also reserve hotel allow model straightforward manner also define query language analyze query use define part interest analyst travel agency example analyst may wish find one likely book travel package contain flight reservation likely do particular company say may many different ways book travel package assume instance obtain likely scenario one first search package contain flight eventually reserve hotel result may imply combine deal suggest unappealing specifically interest deal refuse present use improve web site query define use execution pattern generalize similarly way tree pattern use query generalize tree ten detail bear structure activity name either specify leave open use special symbol may match node edge pattern either regular interpret edge transitive interpret similarly may regular transitive search direct internal flow search nest depth respectively match query capture via notion embed homomorphism respect node label edge relation note give specification query q number possible qualify accord q may extensively large even infinite recursive practice interest possible likely occur practice fact flavor analysis many case interest part possible define projection query whose output consist likely important question rise consider projection query choice rank metric query result recall model associate likelihood value every possible specification projection query single projection result may originate multiple case aggregate form result score evidently different aggregation function require different query evaluation incur different complexity query evaluation consider sum aggregation function explain intuitive mean depict complexity query evaluation choice function record june vol two paper organization section two recall model probabilistic query section three overview complexity query evaluation query section four overview common model probabilistic model compare model conclude section five two model informally depict section model probabilistic business process query language process originally define use five sixteen seventeen eighteen additional process model connection model discuss section four business process start depict model business process without introduce specification encode set order may occur specification model set dags dag unique start node incoming edge unique end node outgo edge nod label activity name direct edge impose order link via direct path assume occur parallel dags link implementation idea activity one dag realize via another dag call activity compound differentiate atomic compound may multiple possible choice implementation control condition refer guard formula example fig one depict partial specification root dag consist single activity compound activity three possible correspond different travel search flight flight flight guard correspond idea exactly one formula satisfy user choose one three search type thus implement either consider example describe group comprise user login injection advertisement flight activity confirm activity direct edge specify order occurrence must login choose flight advertise flight particular order thus may occur parallel login advertise atomic whereas flight confirm compound note specification recursive may call note satisfaction guard determine external factor user assume exactly one guard formula satisfy determine implementation give compound activity occurrence satisfaction guard change occur several time instance user may choose search flight first time go flight second time execution flow execution flow model nest dag represent execution since instantaneous model occurrence activity two nod first stand activity activation second completion point two nod connect edge edge dag represent order among implementation emphasize nest nature implementation compound activity appear activation completion nod structure must adhere structure specification ie must occur order implementation must conform example two travel agency give fig two order edge implementation edge draw regular resp dash describe sequence occur execution fig two user choose search reserve flight hotel confirm fig two b depict another possible user choose flight search follow choice flight reset make omit figure likelihood note occur dictate truth value guard turn dictate choice implementation compound possibly multiple associate activity specification probabilistic process guard formula associate probability satisfy probability may record june vol two figure one business process specification figure two execution flow thus far previously satisfy model use two likelihood function first name choice likelihood associate probability value guard formula implementation choice describe probability formula hold give partial precede second name flow likelihood reflect joint likelihood satisfaction guard occur along flow define multiplication value specification along likelihood function guard occur specification call probabilistic business process note function receive two input guard formula f hand partial e precede implementation guard f allow us capture among likelihood value three class accord sensitivity e refer history common scenario history independence function imply probabilistic independence implementation different throughout flow formally function e f every guard formula f e f two e e function capture value depend history e bound manner determine implementation choice activity node n suffice consider implementation last b precede compound bind b precede refer activity nod n n e contrast nod occur parallel thus general may may precede n choice refer formula guard implementation select activity function may use unbounded portion flow history thirty record june vol two e compute next choice likelihood instance price give product depend exact full sequence search user perform prior purchase correspond function observation note definition function always recursive bind nest depth recursive hand may moreover bind typically small practice typical query language next consider query language probabilistic business process originally define five refine seventeen eighteen start consider selection query whose output representation set original specification also match query introduce projection query allow focus interest query define use execution pattern adaptation exist query nest dags pattern similar structure contain transitive edge match path transitive activity nod search deep within implementation correspond compound level nest nod pattern may label may match example query fig three ignore rectangle surround pattern describe contain choice ba flight follow confirmation edge transitive edge may match sequence doubly bound activity transitive activity implementation nod may embed anywhere inside implementation correspond activity nest level match p e call embed embed p e homomorphism nod edge p nod edge e root p map root e activity pair p map activity pair e preserve node label node label may map nod activity name non transitive compound activity pair p nod direct implementation map nod direct implementation correspond activity pair e edge transitive edge node n p map edge path n e distinguish selection pro query follow selection query selection query represent e belong query result exist embed p e say e satisfy p evaluate business process output p consist full also satisfy p set likely denote p projection query many case interest full execution flow process rather focus part end define projection query probabilistic process selection query query result consist full embed generalize definition query allow specific part pattern specify project part rest pattern serve select interest namely embed entire pattern consider within flow nod edge match project part fact project appear query result give embed query q e embed result define nod edge e map nod edge project part q e result q e denote q e consist result possible q e finally result q denote q union possible result q apply namely q low q e flow set possible note e q may originate several namely may several e f low st e q e define projection result first decide aggregate weight individual form score projection result consider two possible aggregation function consequently semantics query sum semantics score e define score e e e f low e q e sum semantics record june vol two figure three query score e low e q e e result projection query q specification respect sum semantics denote q q semantics use clear context omit notation simply write q example let us consider figure three time query rectangle denote project part note projection focus execution may occur point user choose flight final confirmation reservation note due recursive nature general infinite number possible query answer user may reset restart search unbounded number time two possible answer query appear fig three b c first answer correspond choose point search pick ba flight immediately confirm second answer correspond choose point search pick ba hotel confirm observe answer potentially infinite number possible origin differ user do prior reservation likelihood answer sum accord semantics hand illustrate difference two semantics sum consider query case one particular deal consist specific flight hotel car rental reservation popular package consist flight hotel car rental overall common even though give offer individually less popular specific deal sum semantics result correspond rank highest appear semantics rank highest exist one popular appear three query evaluation next review main result query evaluation probabilistic business process omit proof refer reader prior full detail three ax determine complexity query evaluation whether specification recursive class function use process description ie level dependency history query semantics selection projection interestingly consider projection query choice aggregation function also bear effect complexity query evaluation complexity result summarize table one start discussion selection query proceed projection query selection query give specification selection query q number k result q respect denote q define k likely flow embed q exist one refer problem identify q give input next discuss problem complexity different class function function function design efficient algorithm selection query evaluation follow theorem may equal weight imply may several valid problem case pick one arbitrarily record june vol two weight function non recursive query selection data complexity sixteen seventeen eighteen projection non recursive selection projection recursive selection projection bind sixteen seventeen undecidable sixteen seventeen non recursive projection sum projection sum thirteen restrict rat arithmetic thirteen non recursive projection sum bind thirteen table one complexity query evaluation business process query complexity fourteen undecidable hold algorithm prove theorem correctness originally appear sixteen improve eighteen query q may solve time polynomial size output size exponential b query size theorem sixteen eighteen give probabilistic function query q may solve time polynomial size output size exponential query size algorithm solve work intersect specification query q output specification whose exactly exist embed q algorithm employ sophisticate analysis explore space possible repeatedly test possible avoid infinite loop maintain table previously compute dynamic program style also show algorithm query size possible unless define correspond decision problem test whether give specification likely threshold follow theorem hold proof appear seventeen follow construction fourteen use reduction theorem fourteen seventeen input size consider query size specification size consider constant function function pose challenge choice may depend number follow theorem show seventeen theorem seventeen give function bind b general idea algorithm create new new function essentially set flow apply algorithm proof theorem obtain annotate activity name specification factor within name information require computation namely precondition vector include last additionally new name also contain necessary assure precondition assume happen show seventeen add exponential dependency b inevitable follow theorem hold proof reduction set cover theorem seventeen function bind b number specification query b consider input size function last function show sixteen become impossible solve follow theorem hold theorem sixteen function give input may undecidable proof reduction halt problem encode machine specification function latter use model tape record june vol two projection query next turn projection query easy observe hardness result present selection query also hold projection query however turn upper bound depend upon aggregation function use specifically semantics theorem seventeen hold projection query semantics prove theorem adapt design selection query account projection query semantics naive attempt adaptation involve selection follow projection namely generation specification whose select project find however size select consequently algorithm complexity exponential size input specification even projection result small size moreover may show infeasible compute specification whose correspond projection result retrieve result intuitively projection transitive edge may result exponentially many compactly represent together however may still perform algorithm similar one employ selection query first step refine evaluation algorithm generate specification capture subset projection result transitive edge match keep subset include particular find specification projection result respect semantics sum aggregation function use query evaluation become much difficult specifically show follow theorem thirteen projection query sum semantics computation model size even query transitive nod proof reduction interestingly problem hard even hardness due dag structure graph may lead exponentially many project query transitive edge consequently sum exponentially many must compute see comparison section five probabilistic hand certain plausible specification structure design algorithm whose complexity specification size say projection query q specification separate every two query answer either equal difference greater fix constant follow theorem hold theorem thirteen projection query sum semantics function may solve one two recursive query separate specification algorithm use small world theorem show among infinitely many may match query transitive edge sufficient examine whose length bound size specification multiply k number require result consequently exponentially quantity many examine algorithm reduce computation set exponentially many candidate answer represent query ie query ask likelihood match finally adapt approximate likelihood value query point allow separate different candidate answer separate require exact computation likelihood value query impossible since may general irrational thirteen thus must resort approximation note proof theorem use query transitive edge transitive edge allow query algorithm efficient specifically consider rational arithmetic model seven model compute complexity assume arithmetic operation rational number may do one regardless number size follow theorem hold theorem thirteen query project part include transitive edge specification projection query sum semantics may solve record june vol two rational arithmetic model assumption rational arithmetic necessary even query without transitive edge yield projection result whose encode exponential specification size may first use construction depict prove theorem obtain new specification function apply algorithm note since size may exponential algorithm find may incur exponential time size input overall complexity size bind follow theorem hold theorem thirteen projection query sum semantics function bind b history may solve time exponential size specification double exponential b one two recursive query separate specification four additional model depict model probabilistic business process literature contain variety probabilistic process next discuss representative subset model model review query use analysis correspond complexity result query evaluation summary model result review section appear table two also compare contrast model model probabilistic chain probabilistic counterpart finite state machine call chain thirty fact transition associate state machine bear property thirty mean choice transition independent previous state traverse give current state common approach analysis process use query language base temporal logic l calculus differ term expressive power see query evaluation correspond compute probability property define give query hold random walk chain know query evaluation temporal logic query chain may perform time polynomial size chain exponential query size eleven comparison model query language finite state machine consequently chain lack expressive power capture possibly recursive process allow model see sequel equivalent model definition function resemble inspire property query language first observation temporal logic allow query ie compute probability give property hold selection projection query kind depict section two study context chain best knowledge even consider query query expressible language temporal logic end note temporal intuitively mean query process behavior rather structure see fourteen exact contrast query language take approach allow query structure process well structure possible indeed show fourteen query expressible query language expressible temporal logic vice introduce function call state chain probabilistic counterpart finite state machine similarly exist probabilistic model model allow function call version also recursion specifically recursive chain extend chain allow recursive consist collection finite state chain call potentially recursive manner author show generalize express previous important model probabilistic process probabilistic automata nine stochastic context free record june vol two model query temporal data complexity least hard relational arithmetic query complexity nonelementary nonelementary nonelementary p complete treelike prob selection projection table two complexity query evaluation different model query evaluation first study approximate termination recent work six extend analysis strong query language namely monadic second order logic denote problem compute probability give query satisfy random execution follow theorem hold theorem perform data complexity nonelementary query complexity highly unlikely query evaluation may solve show problem least hard problem decide give natural number natural number k di k strongly believe whether solvable computation model interestingly hardness result hold even simple termination analysis even interest approximate n also note context nonelementary query complexity evaluation problem complexity entail use highly expressive logic query language unavoidable even process model due several restrict study six specifically hierarchical chain restrict version allow recursive call interestingly query evaluation still harder due fact probability give property may small exponentially many require represent turn due structure allow several function call single function way exponentially many call may represent compactly thus computational model hope data complexity algorithm however use rational arithmetic model seven care size number follow theorem hold theorem six perform data complexity nonelementary query complexity rational arithmetic model possible call graph problem avoid obtain data complexity conventional computational model theorem six treelike six perform data complexity nonelementary query complexity computational model comparison model query language business process model likelihood function may show equivalent restrict version namely proof adaptation theorem three fourteen probabilistic context similarly business process equivalent knowledge extend model allow probabilistic study query language language query consider contain term expressive power note use costly incur nonelementary query complexity respect obtain language query language restrict expressive enough express interest practical show five allow practically efficient evaluation furthermore case selection projection query study context knowledge probabilistic turn intricate probabilistic probabilistic process specifically recent work six mention record june vol two establish model probabilistic base recursive state machine addition study query study restrict common query tree pattern query show incur lower query complexity f p p class computation solve polynomial time use p oracle tree pattern query previous work probabilistic document two three use model express finite collection possible document tree two type nod ordinary nod regular nod distributional nod define probabilistic distribution random document may generate make probabilistic follow author study query evaluation use language allow selection projection semantics use projection counterpart sum semantics show query evaluation feasible follow theorem query evaluation may do time complexity polynomial size exponential query size also show exponential dependency query size inevitable unless p p comparison model query language important distinction model model graph graph evidently difference cause unavoidable unless exponential overhead query evaluation also complicate algorithmic construction see thirteen discussion section three six consider share model allow graph specification query tree pattern study capture pattern expressible query language also six study query contrast selection projection query allow language five conclusion review paper several important model specify query probabilistic process compare term expressive power complexity query evaluation depict propose model business process query language allow selection projection query explain propose model achieve reasonable balance expressivity evaluation complexity clearly work do capture probabilistic process analysis task particular model consider extent data manipulate process execution work require model query manipulate data model analysis data manipulate process study twelve twenty process study probabilistic combine two line research unify framework probabilistic process along data manipulate additionally discuss selection projection query latter two particular aggregation function sum one author study aggregate query monoid aggregate function include sum count min probabilistic study join projection different aggregation function context different model present intrigue challenge research partially support science foundation binational science foundation eu project ministry science grant six reference one th e w p aggregate query discrete continuous probabilistic two b p expressiveness probabilistic model j eighteen five three p query update probabilistic information four r k p reps analysis recursive state machine program four five c milo query business process record june vol two six e p probabilistic via chain three one seven l f complexity real computation eight business process execution language web service nine temporal probabilistic automata ten query language eleven c complexity probabilistic verification j four twelve w fan l aggregation problem synthesize web service thirteen query web model uncertainty thesis university fourteen milo query structural behavioral business process fifteen milo type inference type check query execution trace sixteen milo evaluate query business process seventeen milo projection query probabilistic business process safety analysis cod k algorithmic verification recursive probabilistic state machine k recursive chain stochastic monotone nonlinear one c r hull j automatic construction simple business process r r l graham geometric r hull j tool composite web service short overview two c j e g n morgan use stochastic grammar language model speech recognition thirty j g j l snell finite chain springer b match twig probabilistic k j young estimation stochastic use computer speech language z manna temporal logic reactive concurrent f estimate maximum likelihood stochastic graph eighteen milo n yam linear graph optimal query evaluation weight business process j nineteen one p l j e nineteen milo yam navigation twenty l v verifier interactive web world wide web empirical world wide web two twelve p complexity manage probabilistic data pod l v l complexity decision verification communicate web service pod v wave automatic verification web service data bull three p increase accuracy shape automata theory logic thesis institute technology record june vol two