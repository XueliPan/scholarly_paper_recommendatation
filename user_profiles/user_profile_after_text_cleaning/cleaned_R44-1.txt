ask question institute research school computer science mellon university brad human computer interaction institute school computer science mellon university bam abstract question search across feasible program target match search criteria three separate study find question common often time consume answer first study observe thirteen lab find half bug insert associate question second study professional report ask question may answer use question nine time day rat one least somewhat hard answer third study observe seventeen field find nine ten associate question find suggest answer question important source difficulty understand large complex subject engineer program engineer distribution maintenance enhancement general term human factor program comprehension empirical study maintenance code navigation developer question one introduction central goal engineer improve productivity quality require efficient effective way explore code since encounter code familiar understand code modern challenge size complexity use indirection example many modern use connect communicate external use indirection enable reuse also make understand challenge example analysis code adobe find one third devote event handle logic permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee ten may cape town south copyright turn cause half report bug fifteen successfully among effect loosely connect challenge five better understand understand large complex conduct three study question cod task surprisingly discover significant portion developer work involve answer call question question search across feasible program match search criteria question capture much observe reason causality among program consider example first study propose change developer seek determine would work commit implement want determine guy get update aware call graph exploration tool could traverse chain method call directly help upstream update method bus onto post trigger update exist call graph tool unable identify upstream send trigger update interest unable answer question practical way instead optimistically hop guess would work spend time determine reuse functionality implement change edit code test change learn change would never work effort waste find many experience understand code arise answer question lab study complex unfamiliar code often insert defect either could successfully answer question make false survey ask twelve question reveal average think least somewhat hard answer question limit inexperienced new neither professional development experience experience make question less frequent easier answer question time consume answer field study often spend answer single question paper present data question gather seventy direct cod task first review relate work formally define question next present method result three study turn discuss find finally discuss find help effectively understand code two relate work long know control data flow central mentally represent program three study program comprehension find begin understand small program construct mental model control flow sixteen number study apply idea information forage describe navigate code fourteen begin origin method use cue method name pick many call tra verse towards target remember information collect eleven code navigation focus understand exactly decide call traverse example one study find word contain bug report usually sufficient explain call decide traverse fourteen must also remember find find lead information loss poor representation return point information previously find nine study illustrate central importance navigate explore code cod task several recent study observe work cod task identify information need question associate development one study identify question ask code ten believe question question might answer ask question question relate communication maintain awareness change reason design another study identify question specifically code seventeen report refine question question change question directly answer use development environment many challenge experience stem separate result many result tool development environment produce several question identify specifically control data flow interestingly question identify well support exist tool question believe might answer ask question several study observe use exist tool understand control flow produce future tool would effectively support need one study observe use tool edit code four addition identify several usability key recommendation better support select reverse engineer view prevent waste time understand also saw need much support reverse engineer sequence diagram another study fail find much use detail map code wall near two design useful possible task diagram much little information require many detail author conclude diagram provide concise target answer question likely useful diagram another study observe several use sequence diagram tool lab one specifically request ability rapidly configure diagram filter search easily hide determine uninteresting overall study suggest could benefit greatly diagram focus study provide little guidance find study attempt measure time spend development one study eighteen eight observe hour frequently execute command follow read source load run read edit note later study survey use time report spend nearly equal amount time communicate understand write new code edit old code relate thirteen report spend somewhat less time design test detail study ten work lab task find time spend read code twenty edit code sixteen navigate thirteen search thirteen test nine thus spend significant time try understand code three preliminary analysis relate work result study seem clear ask class question previously explicitly characterize question exactly question include many often word formalism would unambiguously show question highlight similar question use design formalism question describe although develop chronologically study present first paper use describe question observe see table one two one question intuitively question search across feasible program target match search criteria thus question consist two part search search criteria specify find question represent feasible set concrete trace concrete trace list statement map every variable value trace p c set concrete trace program p origin statement set destination statement set satisfy filter c c c leave unspecified use although least one must specify question without origin call upstream question question origin optionally destination downstream question c set filter c c x specify value variable x x leave unspecified find trace contain two type question find compare find find portion set trace match search criteria search criteria function give attribute describe set generate set table one list search criteria function observe study question match trace generate new trace contain one formalism design assistance function find set read f write f end x include text match string read write field f set field f field set field program type set type method set method set method declaration invoke method set method call framework without source method declaration may x data dependency x find transitive closure include transitive data table one search criteria function describe search see table two three compare tra compare set trace compare first unspecified method attempt match tra tra correspond trace match find compare attempt match sa tra correspond generate three new list contain order list match contain order list tra match also contain trace tra match could find comparison slice many tool design help explore program find set one technique use many tool slice seven nineteen find connect either data control data dependency x find set may last define variable x use control dependency exist control execute find control backward static slice simply transitive closure union two x highly influential study find better remember static slice relate bug either unrelated slice arbitrary portion program suggest follow slice use strategy backwards error bug seven twenty forward slice build work many slice propose find control data forward rather backwards x dynamic slice find control data particular execution like question filter constraint condition static slice find across satisfy constraint thin slice find data x exclude data pointer nineteen chop intersect forward slice x backwards slice pend x central idea slice apply code exploration use control data find answer developer question question differ slice many ways first search set concrete trace question exclude infeasible static slice typically define may analysis may dependent infeasible never execute however much work do improve slice focus eliminate infeasible example introduce context sensitivity twenty thus difference question specify fully precise answer whereas slice specify answer precision second difference question find portion trace occur multiple time static often find subset program occur exactly dynamic search trace single trace rather set trace important difference question slice question search across control flow rather design set slice always subset across control flow dependent include slice correspond question influence execute control dependency value come data dependency contrast control flow capture question happen ask question control flow slice may include answer question question formalism include search data observe one example question seventeen important question find table two three important difference slice question question search set describe wide variety search criteria consider example study one developer wonder call method necessary question find end trace mend identify five call depth five less static slice find first line conditionally throw exception depend input everything afterwards control dependent input case static slice still would help locate end might even include happen control data dependent even search support chop different chop origin target statement supply user thus user must already know end ask chop question four study one lab previous study twelve observe thirteen work two fifteen hour long change unfamiliar report experience use extensive knowledge diagnose problem formulate fix address underlie design problem rather simply twelve study data report several new find despite spend almost entire task ask question investigate code frequently incorrectly false assumption question relate bug method fast enough matter call frequently call necessary guard protect statement method true method need invoke method n call situation n already call two bug scroll handler need notify b b unrelated scroll remove call influence behavior downstream correct answer note method send event trigger hide call extremely expensive library function determine screen need repaint trigger necessary one caller reach relate question find end trace mend find end trace mend find trace four five one find call downstream library function find call library function include one trigger screen repaint find reach method call several additional find trace one two find reach method b update screen reflect update scroll data signal longer clear flag disable functionality downstream one find scroll trace astart compare trace trace four currently trigger screen update variety user input eventually invoke find end trace three find b read scroll data update occur find behavior result change include downstream functionality longer invoke find upstream include user input event call framework table two question fail answer false make study one one associate implement change contain defect two associate question question call graph distance origin statement investigate statement find question stand code act false implement buggy change case later realize mistake abandon insert defect analyze question ask action take look specific information incorrectly understand case spend employ tedious report several question attempt answer method review important method additional detail find twelve provide eclipse ide allow use eclipse feature take note paper work two task fifteen per task task change open source text editor line task design challenge require understand design code rather locate feature reuse achieve design task require fix design search current version application hack comment select two task involve edit code control update happen involve reason relate functionality scatter across find task highly challenge one participant describe typical bad day conduct two new analyse data first identify edit code cluster change label change implement later abandon contain bug change contain bug look see developer either ask question otherwise make assumption attempt determine question assumption could address question second analysis look question spend ten answer result implement average twelve change per task abandon change learn change could never work find bug could fix decide sufficient time finish change abandon average three change per task two contain bug abandon change contain bug either longer think change good design think time finish overall spend time investigate code either test dynamic investigation use read statically follow call use source browse tool spend remainder time edit fourteen consult create task description note diagram six reason without interact eleven cause defective change half change implement contain bug half defective change eight change able relate bug question either false assumption make question explicitly ask table two list false question relate question correspond question often make incorrect upstream downstream reason remove call currently present code take different form depend change consider upstream often occur ask assume behavior redundant unnecessary would always call somewhere else case call graph distance origin statement investigate target behavior often small mean question challenge reason difficult determine call feasible contrast downstream often occur make false method mutate data invoke library call relevant effect away mean call reason believe traverse path target would challenge assumption tedious time consume addition bug arise make ask question many case ask question formulate strategy answer spend much task investigate code traverse call attempt understand invoke rapidly switch call graph view static call stack dynamic static investigation allow navigate caller traverse longer call likely hit infeasible several guess incorrectly feasible dynamic investigation begin set invoke application behavior step hit correct one reach task start investigation relatively unfocused attempt make sense call task progress begin propose change question grow increasingly focus seek navigate specific point code differ greatly effectiveness sophistication employ particularly challenge many upstream navigation two realize could search call stack find upstream method instead spend much time sixteen ten locate method use string search browse file three spend ten seventeen thirteen ten use particularly tedious strategy navigate upstream method across feasible add run application execute functionality note execute recur many use eclipse call graph exploration tool traverse call traverse infeasible experience determine call lead search target figure one three experience instead invoke functionality copy entire call stack text editor even experience experience reason three defect insert associate question insert discussion despite spend much task investigate code often unsuccessful correctly understand make many false case lead defect figure one use eclipse call graph exploration tool traverse find difficult identify feasible lead target shade actual target several level away behind several high branch factor tool answer question often force use tedious answer specific question able easily check erroneous lead defect change might accurate result suggest reason important understand unfamiliar poorly design code result might generalizable expect work code field unclear typical task carefully control set lab study allow us evaluate success accuracy degree impossible field lab study never able perfectly replicate condition field understand real code typical task might involve less challenge question work period time might able use knowledge directly answer question study suggest learn include increase experience v limit time work likely lead rush change less investigation might otherwise do several seem much experience understand large complex question frequent challenge work field five study two survey order understand frequency difficulty question field conduct survey rat twelve question difficulty frequency method randomly sample among campus list developer address book send invite participate frequency one one two two four six five three eight seven eleven ten nine twelve four three five ten nine twelve eleven one change might break two application behavior vary different might occur three could method call potentially slow situation need consider four move functionality line code file else need move five method call redundant unnecessary situation six across path call set class functionality case insert seven investigate application feature functionality implement eight method call nine correct way use access data structure ten control get method method eleven part data structure access code twelve instance class data structure create assemble rat question least somewhat hard answer one one difficulty figure two frequency difficulty twelve question sort decrease difficulty survey receive exclude eight additional position include fourteen lead work single share office small number work open share space range professional development experience inexperienced zero experience median nine experience frequently change range time spend current zero median one year nevertheless agree familiar current team involve wide range bug fix implementation sixteen plan seven report typically spend fifty work time edit understand code range zero main portion survey ask rate frequency difficulty twelve question question select previous study question ask code seventeen question identify first study closely relate question method call indirectly relate change however observe many indirectly relate question refine question lab study hypothesize often answer question ask question pilot survey four graduate one developer ensure mean question clear iterate word base feedback question ask rate often past three days program ask question rate difficulty seven point scale hard easy answer question participant answer question necessary particular comparison participant drop comparison analyze data look simple descriptive statistics rat demographic report result use correlation coefficient p statistical significance measure smaller significant result average report ask nine question every day question often hard answer twelve question rat rat average question least somewhat hard answer nineteen hard hard answer think question easy answer rat least one question least somewhat hard answer rat least one question hard answer surprisingly ask question significantly less frequently significantly easier answer become experience seven p fourteen one p spend time four p seven p fifteen quality significantly affect frequency question eight p ten harder answer question lower quality code p one possible say unique question simply question become harder answer poorly maintain code figure two plot question frequency difficulty interestingly difficulty positively relate frequency p one frequent answer question change generally frequent difficult question high level example half report ask change least twice day rat least somewhat difficult answer course question much frequent difficult sixty think answer change usually least somewhat hard answer true sixteen instance class data structure create assemble discussion result reveal frequently ask question might refine question question often difficult answer experience remove need ask question result suggest answer question important part understand code whether new know well whether poorly design well design find still limit survey take single company differ greatly work experience overall professional experience project phase result demonstrate help effectively answer question important however result establish answer question ask question frequently ask question time consume answer question field look like six study three field order better understand ask question use answer observe seventeen work everyday cod task method recruit twenty study two participate observation sessions sessions conduct single observer single developer developer office use variety program c c briefly introduce observer review purpose study ask work cod task remainder approximately ninety minute sessions three finish first task choose second task select task encourage choose task involve unfamiliar code minimally define code write task choose task plan time session one task choose list task remain task bug previously assign another work observe bias towards begin end task task task developer previously begin complete task one developer stop work complete test fix change ask think aloud work deeply engross task occasionally forget talk prompt resume ask try confirm reject statement appear record sessions record audio take note two record lose due equipment failure leave eighteen record observer note produce time stamp annotate sessions span page analyze data first review qualitatively summarize next iteratively design cod scheme describe cod seventeen eighteen sessions one session include implementation task session cod activity time granularity occasionally retrospectively describe particularly memorable past task talk approach task general include investigate fourteen fifty reproduce six fifty twelve forty twenty five six eleven three edit sixteen compile twenty test four eleven five eighteen eleven three reuse eleven figure three circle activity time transition line transition transition activity activity color leave right transition right leave activity list mention discussion section interrupt reply drop interviewer activity cod interruption exclude analysis time use due equipment failure lose fifteen record total activity case stop work task complete implementation one developer reach end task conduct code review include code review activity time result spend majority time understand code propose change investigate nine ten implication associate question figure three depict sequence observe time spend work bug already understand first seek reproduce problem follow step bug confirm bug already fix ensure fix could test provide way begin use face incorrect application behavior either original bug introduce fix assign blame specific program point exhibit incorrect behavior determine bug begin feature implementation task begin propose fix solve problem investigate program behavior edit code implement change edit sometimes reuse exist functionality seek learn name correctly reuse compile build application sometimes produce compile finally test change often reveal defect investigate code frequently ask question order examine relationship question look question five five investigation central primary question try answer throughout activity surprisingly primary question nine ten developer primary question method generate error time min acquire deadlock attribute must use somewhere generate content test different thread pool interact thirty nineteen question note find trace p mend find trace p find read attribute trace p find statement downstream output error text find call acquire include lead deadlock find downstream use attribute include generate content compare trace trace find trace p find behavior test program program find call thread pool type developer primary question investigation data structure mutate code code assume table already application state change call denote completion another reason status could nonzero question note time min find write trace p find downstream mutate compare trace p fifty eleven trace p find write field trace p mend find status trace p find different code exhibit table load find state change cause find upstream value flow status include create value table top bottom five five four five investigation associate question activity developer primary question activity length activity relate question question begin rapidly formulate specific question express search criteria describe wish locate example deadlock developer begin statement begin traverse search acquire later finally reveal sequence cause deadlock answer question explore code either dynamically use log tool statically use source browse tool interestingly primarily use code browse tool investigate instead like lab study often make use tool seek answer multiple question try alternative answer primary question constantly deal uncertainty task generate test hypotheses wonder correctness result produce tool example activity help illustrate several point observe error message run application one developer spend locate error message code use knowledge rapidly locate code implement command invoke application obvious trigger error hop get lucky string search error message find match unsure find match next begin statically traverse call command method search error rapidly determine unsure path would follow command invoke switch step code learn project create spurious result code search reset project configuration string search error string find match however many call method one might cause error return step finally locate code seem relevant quickly browse code statically finally return inspect value discussion third study spend half time reason change nine ten developer primary question question point code specific search criteria describe wish find find hard time consume search large amount code contrast result study one question study three question explicitly ask like study find may influence practice tool use might differ extensive documentation comment process might rely code access sophisticate tool none unit test extensive enough rely test correctness change extensive unit test might lead implementation speculative change follow test rather extensive investigation prior change seven general discussion find question frequent often hard answer associate false lead bug ask many time consume ging investigation task several lab study become overwhelm investigate code give work actual task field often spend answer single question investigate change case ask question explore code search answer question link many diverse commonly experience understand large complex question help better explain use understand code factor influence success failure answer question may choose among several class answer question reason use already know communicate dynamically statically explore code code know well may already know answer six level understand difficult achieve due number present often change edit code one field study participant spend several investigate code write little year certain several important detail unique task concern might edit code conversely even new able generate hypotheses interpret use knowledge expect application work study one assume connect edit wish test hypotheses use communicate directly communication instant message indirectly documentation comment exist documentation diagram sequence diagram could help answer question provide anticipate correct question nearly question observe highly specific task make unlikely diagram would exist occasionally make use direct communication often instant message think might know part answer often available immediately respond moreover longer sometimes expect already do due diligence get general understand ask lengthy question busy knowledgeable teammate thirteen course also eventually leave team may otherwise unavailable might forget answer might never know answer thus often answer question explore code dynamic exploration run program observe output either directly tool log log tool case generate trace dynamically investigate difficult impossible special hardware require take long time application run generate trace unclear application input necessary generate trace developer study three work web application add log wait day execute lengthy batch job moreover question force consideration possible trace time randomly invoke application behavior attempt generate desire trace possible several advantage dynamic exploration could inspect state even mutate state select trace follow allow search statement set impractical search many method type know search relate scroll observe lab study could attribute lack knowledge effective dynamic investigation explore upstream iteratively set could instead much effectively inspect call stack however devise choose must simultaneously hypothesize answer question keep track question answer information find deal frequent ten may time reflect length however better educate type question ask could use answer might help devise effective code exploration challenge statically explore code static exploration navigate code use source browse tool call graph exploration tool textual search name contrast dynamic exploration static exploration require run program call graph tool eclipse call hierarchy allow follow chain call source however observe many case chain contain infeasible could never execute infeasible cause correlate branch take consumer conditional correlate one several control path consumer reach direct account discover several create correlate widely separate particularly difficult statically explore event bus architecture message create producer send bus subscribe pointer initialize particular implementation interface producer pass call sit invoke interface consumer often register framework framework producer use dynamic dispatch consumer transfer control back property system value refer create producer use access property look property consumer several often produce high branch factor control flow graph common interface may many create large branch factor dynamic dispatch event bus many call bus send method many bus receive call bus create two high branch factor developer effect correlate create many possible edge traverse force developer guess feasible attempt manually simulate control flow propagate data control flow observe perform path simulation manually nearly impossible high branch factor simply many consider eight hill e pollock l ak explore neighborhood expedite maintenance engineer ase nine ko j h b elicit design ides detail study corrective perfective maintenance task l ten ko r g information need collocate development team l eleven ko b h exploratory study seek relate collect relevant information maintenance task soft twelve twelve j ba program comprehension fact find engineer conference engineer thirteen g r maintain mental model study developer work habit l fourteen j r rector k use information scent model dynamic forage behavior maintenance task chi fifteen parent possible future development keynote talk workshop design sixteen n stimulus structure mental expert comprehension computer program cognitive psychology vol nineteen seventeen j murphy de k ask answer question program change task four eighteen singer j n n examination engineer work practice nineteen fink j r thin slice program language design implementation twenty tip f survey program slice journal program three use slice seven program slice engineer ten four tool find often specific search criteria describe wish find however exist tool force guess might locate traverse call statically dynamically recently tool begin support search eight developer specify origin method string search criteria score connect call graph path relevancy search string however eliminate infeasible support search describe string formalism attribute target oasis sequence explorer one depict trace sequence diagram allow use regular expression search method name find suggest improve tool could greatly improve developer productivity support search across feasible match variety search criteria eight modern development provide source browse tool explore code find tool indirectly answer many question ask ask better educate question might help learn share choose effective answer question result also suggest could perform cod task quickly accurately tool directly support answer question nine thank participate study help conduct study one study two three conduct first author visitor human program team research thank helpful formalism research fund part national science foundation grant ten reference one c german p survey evaluation tool feature understand sequence diagram j maint twenty four two g r build ecologically valid diagram help stay orient code symposium visual compute three f design cognitive four w j e realistic empirical evaluation cost benefit maintenance three five j coherent reaction onward conference object orient program six murphy g c hill e programmer activity indicate knowledge code seven harman r overview program slice focus two three