adaptive physical design archive one university two university three mellon university four university dame five swiss federal institute technology abstract introduce physical design tool improve performance continuously monitor change adapt physical design suit incoming current physical design tool require specification representative always incorporate profile incoming calculate relative benefit transition alternative design efficient query transition cost estimation allow quickly decide various design evaluate astronomy use query submit experiment show adapt change improve query performance substantially tool introduce minor computational overhead one introduction physical design tool vital ensure optimal performance major oracle include tune design part commercial offer goal reduce total cost ownership physical design tune provide useful physical design however current tool thirteen provide limit take approach physical design leave several tune process specifically need explicitly specify representative tune tool also require know tune session need relative benefit implement complete critical requirement soon become data center curation large scientific data sloan digital sky survey four project notable example data soon library project receive diverse exceed million query every month find representative challenge query access pattern exhibit considerable evolution within week five new also exhibit spike load straightforward approach run tool query invoke periodically continuous evaluation physical design achieve however approach require tune ensure tool react quickly slowly change result poor design recent research physical design problem focus one aspect physical design index design eight infer cost plan query optimization phase efficiently decide various index fashion paper focus vertical partition complementary index selection scientific vertical partition often use replicate data thereby reduce space one provide complete model physical design problem problem develop minimize combine cost query execution cost transition also develop accurate cost estimation reduce overhead run evaluate within astronomy experiment indicate two fold improvement query response time compare tune develop search space physical design without make analysis show algorithm provide minimum level guarantee adapt change current tool provide guarantee two assume general transition cost model transition cost asymmetric positive contrast current work index design assume constant cost create physical design structure zero cost delete eight validate model experiment show transition cost asymmetrical asymmetry bound constant factor develop novel technique query cost estimation technique cache distinct query plan change across several reuse plan estimate query cost reuse cache plan technique minimize much ninety current tool employ query estimation therefore much run also develop technique base estimate cost transition one configuration another current tool transition cost either fix assign arbitrarily vertical partition applicability beyond relational example algorithm regroup also use along necessary cost estimation provide use nine particular algorithm independent whether implement also applicability schema design proxy cache recently show physical design cache object often offset benefit deploy cache physical design recoup loss ten two relate work physical design tool use cost estimate analytical io model evaluate attribute group thirteen give query ie assume knowledge entire stream therefore provide single static physical design entire current research seven eight emphasize need design tool new query arrive continuously adapt physical design change eleven quiet six describe incremental adaptive algorithm index selection fully integrate colt seven al present similar algorithm rely heavily cost estimation approach take account transition cost al present formal approach index selection eight take account transition cost limit choose among difference set indices use core algorithm general purpose physical design limit index selection paper system develop vertical partition also assume transition cost asymmetric case eight formulation similar task introduce al twelve task research extensively particularly transition cost form metric twelve cost symmetric form metric asymmetry transition cost exist sequence ie insertion deletion table require make physical design change exhibit different cost algorithm thirteen algorithm asymmetrical task impractical respect efficiency algorithm solve dynamic program query take n two time even best case n number present simpler algorithm take n time step worst case use commercial considerable success nine fourteen perform better store compress contiguously disk however pose several hurdle implementation implementation commercial exist complete migration prohibitively expensive moreover consist mostly float point data compressible use compression scheme use thereby eliminate crucial advantage solution intermediate step perform regroup avoid increase reconstruction cost associate query cost estimation module similar configuration parametric query optimization fifteen sixteen exploit fact plan query across several invariant reuse reduce call reuse plan limit set indices table paper extend plan reuse correspond vertical partition table three tool fig one tool several task often perform follow task maintain physical design identify change significantly current physical design longer optimal b choose new physical design excessive cost incur move current physical design relative benefit tool perform task integrate fashion continuously monitor granularity query often monitor granularity query use analysis decide current physical design longer efficient change require tool consist three figure one core algorithm behind adaptive physical design section four cost estimator section five configuration manager section six core algorithm solve problem objective adaptively transition different order minimize total cost process give query sequence give data model let set possible physical design structure construct include vertical partition table materialize view instance combination physical design structure subject storage size constraint term configuration let set possible cost process query q configuration si denote q si q process si set q si often necessary change reduce query process cost cost transition two give give function function satisfy follow one si zero j si positivity two si si zero reflexivity three si si si triangle inequality particular satisfy symmetry property ie si si si asymmetry transition cost exist sequence one eleven physical design structure refer access core ie insertion deletion require make physical design change exhibit different cost give finite sequence query objective obtain sequence si total cost minimize total cost define cost si si one n first term sum cost query correspond configuration second term total cost transition note si real change configuration schedule transition cost incur optimal algorithm opt know entire obtain configuration schedule minimum cost algorithm determine without see complete thus determine physical configuration si base see far make future paper focus arise different vertical partition data model one let give set data model configuration consist set fragment f satisfy follow two condition one every fragment fi consist identifier column subset attribute relation r two attribute every relation contain exactly one fragment fi f except primary key four section describe two tool provide minimum level performance guarantee make incoming greedy adapt quickly change incoming present achieve minimum level performance particular show cost always eight n one time optimal algorithm n total number set asymmetry constant achieve performance need train representative amalgamation two one ski rental problem two physical design problem cost function symmetrical first describe know subsection describe prove bind performance relate ski rental classical problem skier ski need decide every ski trip make whether rent ski trip buy decide buy ski rent future trip unfortunately know many ski trip make future lack knowledge future define characteristic seventeen well know algorithm problem rent ski long total pay rental cost match exceed purchase cost irrespective number future trip cost incur algorithm twice optimal algorithm two cost function satisfy symmetry problem nearly identical ski rental stay current configuration correspond rent ski transition another configuration correspond buy ski since algorithm start state argue lead algorithm cost four time optimal fig two example conversion asymmetric transition cost symmetric cost number key issue establish correspondence ski rental problem decide configuration compare current one cost symmetrical al twelve use instead perform ski rental particular algorithm traverse one component query execution cost incur component approximately move component decision make move component traverse return first component identify consider complete undirected graph g v e v represent set e represent transition edge weight transition cost fix minimum span tree g determine pick maximum weight edge remove partition two smaller two smaller tree traversal define algorithm two algorithm show eight n one competitive twelve recall say competitive exist constant b every finite query sequence cost cost opt b two opt optimal complete knowledge extend algorithm solve one physical design problem cost asymmetrical transform complete direct graph complete undirected graph apply algorithm physical design problem cost symmetrical describe transformation b use algorithm show transformation increase cost eight n one time optimal transformation two simple transformation graph edge replace sum transition cost give algorithm show ten however add transition cost provide poor bound n node graph order achieve better competitive performance transform direct graph undirected graph follow let g direct graph g replace every pair direct edge v v undirected edge v correspond transition cost equal v v irrespective direction transform g h h follow two transformation p path h p correspond path g one direction inequality cost p cost p cost p always true inequality allow us bind error introduce use h instead g b h violate triangle inequality constraint show simple example figure two example three node direct fully connect graph ten transform undirected graph figure two b result triangle obey triangle inequality exploit fact algorithm construct make resilient triangle inequality violation algorithm one detail use algorithm two construct traversal process query build graph edge weight round next highest power two let maximum round weight denote f algorithm one next establish proof use f input direct graph g v weight correspond query sequence output vertex sequence process transform g undirected graph h v e st v e weight v v v let b v e graph h modify st v e weight v v round next highest power two let f minimum span tree b traversal f query q process c q let v node c v c c v v v node v end process q end algorithm one g input tree f v e output traversal f e else e v else return start traverse v traverse back let v maximum weight edge e weight remove v let result tree v let maximum weight edge weight respectively traversal traversal return start follow time traverse v follow time traverse v end algorithm two traversal f lemma one edge round weight traverse exactly time direction proof prove induction number edge f base case edge f lemma trivially true inductive case let v maximum weight edge f use traversal similarly let tree obtain remove v edge v traverse exactly direction require lemma inductive hypothesis edge round weight traverse exactly time direction traversal maximum round weight since include exactly follow edge traverse time direction reason apply edge theorem one algorithm four n one problem n asymmetry constant competitive proof shall prove traversal f follow two true cost two n one one cost optimal least one theorem follow cost single traversal constant respect length prove follow lemma one prove induction complete proof appear appendix bind eight n one worst case bind experiment perform much better best know problem track closely adaptive algorithm choose neighbor greedily current configuration rank neighbor base estimate query execution cost neighbor keep track cumulative penalty remain current configuration relative every neighbor configuration incoming query transition make observe benefit new configuration exceed threshold threshold define sum cost recent transition next transition need make describe detail ten present briefly alternative algorithm combine describe paper let x current configuration neighbor configuration x define k maximum cumulative penalty remain x rather transition query penalty remain x x transition threshold function configuration immediately prior x alternative configuration consider let z configuration immediately prior x threshold require transition alternative configuration z x x decision transition new configuration greedy transition first configuration satisfy five cost estimation require n time space n process time per query section describe reduce n however reduce n sufficient efficient operation physical design tool incur overhead estimate query cost optimize query transition cost often assign arbitrarily provide correlation consider cost actual time require make transition section describe provide accurate efficient cost estimation vertical partition k z x x transition cost estimation present analytical transition model estimate cost transition actual transition data first copy copy new table accord specification new configuration gray eighteen recently experiment several data load observe bulk command bulk insert command server work much like standard bulk copy tool far efficient run inside base analytical model performance result obtain use bulk insert column table observe two bulk insert operation first copy data far expensive copy data second cost import data scale linearly amount data copy first artifact data normally copy native format load type key linear scale true bulk insert mostly incur sequential io use model cost import partition p p three number row partition sum average column c per io cost copy data k per row io cost construct cluster primary key index thus estimate cost sum import data cost create cluster primary index cost create index linear due constant overhead new insert c k system dependent easily determine use regression sample bulk insert model assume cost transaction log routinely disable fast copy transition cost model use equation three model cost move configuration si another configuration let configuration si consist partition consist partition partition set difference cost transition si compute si four query cost estimation present efficient yet accurate technique estimate query cost across several technique base idea cache query plan reuse query cost estimation traditional approach ask cost query configuration expensive fifteen cache reuse query plan technique avoid invoke cost estimation achieve order magnitude improvement efficiency maintain high accuracy technique rely recent plan query across several invariant correctly determine right plan reuse estimate cost technique achieve complementary accuracy efficiency describe condition plan remain invariant across therefore cache reuse describe cache plan efficiently estimate cost cache plan plan invariance illustrate example plan remain invariant across figure three show three different two table b c e f g h primary join key e respectively consider query q predicate c join clause e select ten zero let query optimize show join join order plan optimal reuse partition respect c identical partition however plan use c merge single partition also reflect choice actually come different plan involve different join join order plan invariance guarantee choose construct plan across different theorem one construct query plan across two follow three condition meet one number partition respect mention query two division predicate exactly fig three plan reuse across several estimate cost plan illustration three define page size respectively function determine distance two page dependent constant condition one guarantee number join plan two instance previous example partition three partition join twice instead reconstruct row original table since result plan different plan reuse guarantee however query select b plan still reuse condition two guarantee similar intermediate join result select join order join method find optimal plan condition two illustrate figure three keep c different partition lead merge join hash join prefer c group together condition three avoid compare drastically different term page distribution function standard distribution distance nineteen determine experiment large number plan large table say two first configuration partition uniform size ie two partition partition contain fifty second configuration partition highly skew ie one partition one column second remain construct plan particular prefer join equisized partition table delay join skew table long possible hence reuse plan one configuration provide inaccurate result three condition satisfy prove contradiction generate plan give two suppose join method join order si assumption different without loss generality let cost less ignore cost scan partition since si order primary key order partition select number row partition page size filter row similar still use since use reduce total cost run query imply optimal plan contradict assumption part optimal plan b c cost c b cost c cost b plan cache cache query plan tree correspond join partition scan actual cost cache vary across cache strip plan tree uniquely identify string query id partition list page distribution first part string identify query plan cache second part specify list partition predicate clause query occur third part specify page distribution partition fig four plan cache key query id one c one leave right estimate plan new configuration partition estimate cost cost estimation cost estimation involve accurate estimation partition scan cost join cost thus give new configuration first retrieve correspond plan cache use key estimate cost partition scan join partition scan cost estimate compute average cost scan partition cache plan multiply actual size partition new configuration thus c io cost scan operation cache plan size vertical partition cache plan cost partition scan new configuration estimate f c size new partition estimate cost join partition use join cache adopt cost model develop al twenty cost model give us upper bind actual join cost accord experiment predict plan cost accuracy average six choose configuration space space potential exponential therefore practical system need apply domain knowledge choose configuration subspace tractable size several recent study describe prune reduce space thirteen choose method base astronomy summarize compactly query five note evolution still occur set change time query prototype define set attribute query access query identical make equivalence class candidate generate new query appear sequence give table b c e primary key prototype c generate candidate configuration correspond table c c b plan match configuration c b e thus candidate optimize scan cost specific class query also merge nonoverlapping generate new example give prototype b generate candidate consist table c b e intuition come vertical partition one enumerate coalesce group exist pairwise manner result gradually reduce expect total query execution cost plan examine affect prune detail future seven experiment implement partition cost estimation sloan digital sky survey four astronomy describe experimental setup detail present main result include analysis evolution time performance various accuracy cost estimation experimental setup fig five affinity matrix frequency ten select attribute p table use trace consist fourteen million query query consist simple query single table complex query join multiple table despite large number query define small number query instance fourteen million trace characterize however indicate lack evolution contrary considerable evolution new introduce continually prior may disappear entirely subsequent query sequence figure five capture evolution first three trace show affinity matrix ten attribute single table grid entry correspond frequency pair attribute access together order attribute along row column basic premise occur together similar group together relation result show column group change weekly basis physical design tool continuously monitor evaluate whether transition new configuration lead improvement overall cost data release three comparison contrast performance several complexity find minimal span tree use prim algorithm general algorithm make however generality come cost namely give knowledge specific design highly tune adaptive measure cost generality compare section also compare exist vertical partition algorithm present entire input incur initial overhead produce physical design layout service tune since adaptive produce optimal physical layout another physical design strategy employ algorithm rerun daily basis prescient day provide input algorithm provide lower query response time compare exchange one transition begin day finally serve base case vertical partition use cost transition cost estimate use analytical model time new template introduce estimate show asymmetry constant section four bound maximum value approximately model estimate transition cost accuracy transition cost consider accurate within ten actual cost query cost estimation do use cache reuse technique provide accuracy experiment io experiment execute query five percent sample roughly size although sample less ideal necessary finish io experiment reasonable time real give time compromise size order accommodate capture evolution longer period sample first sample fact table consist celestial object p sample remain table foreign key data store server main memory two disk separate disk assign log ensure sequential io server allow query join physical table require extreme case algorithm partition column logical relation separate table hammer show two column store separately store together prefer configuration always latter practice configuration arise cost join across table prohibitive algorithm never select configuration finally reduce large number partition table less five size lead large reduction number negligible impact io performance benefit reduce n describe technical report total number b fig six distribution response time overhead performance criteria measure cost term average response time query execute measure time query submit result return transition new configuration necessary algorithm undergo transition execute query increase response time current query amortize benefit future query result reflect average response time entire result compute query performance measure response time proxy cache use sample figure six provide division response time query execution cost estimation use transition total response time average query improve performance factor fifteen average query execution time surprisingly tune specifically improve performance forty exhibit two time improvement low consider general make regard access pattern suffer due higher scan cost associate read extraneous disk likewise suffer treat entire unordered set query provide single static configuration even improve response time beyond solution benefit periodic physical design tune offset high daily transition cost thus adapt evolve challenge continuously monitor change account transition cost tune another interest feature result incur much lower transition cost artifact due conservative nature evaluate two time transition expect performance advantage hand respond change evaluate candidate simultaneously choose configuration benefit recent sequence query optimism tolerable account transition cost change rapidly relative appreciate generality heuristic solution evaluate synthetic respect figure six b particular volatile exhibit stable state access pattern cause make frequent transition result figure six b show exhibit lower query execution time factor fourteen improvement overall compare figure six also show average response time perform cost estimation time spend query onetime cost incur contrast cost estimation incremental overhead incur ten fold overhead cost estimation versus four incur call per query thus benefit immensely due large number evaluate query reuse cache query plan allow reduce cost estimation overhead ten fold avoid call fact without total average response time would lag response time four scale poorly number alternative increase make attractive proxy cache receive continuous stream query make rapidly finally refer average transition cost cost change figure six incur single transition incur transition cost incur highest overhead require complete reorganization daily basis make minor configuration change compare lead three time per query overhead transition cost compare thus detect adapt change benefit transition disrupt execution incoming query figure seven chart average daily response time query execution transition cost various physical design normalize across average response time result change time transition improve track closely since neither implement change physical design improve response time exhibit several performance spike notably days one six thirteen perform better indicate change transition occur delay completion certain query transition overhead day one remain stable afterward table unpartitioned figure eight show cumulative distribution function error estimate cost query use instead call directly error cost estimation determine compute one query cost query cost five consider plot correspond cost estimation query although average cost estimation error thirteen plot show fig seven average daily response time overhead normalize fig eight plot error estimate query cost use dash line represent query solid line represent query higher five unit cost maximum error cost estimation fourteen ten error inspect high error reveal occur query estimate cost five cost plot remove light query reduce size solid line figure eight show cost estimation error filter set query maximum error filter query eleven less five error light query come discuss section since contribution light query total cost compare contribution heavy four inaccuracy estimate cost affect select algorithm eight summary future work paper present adaptive physical design tool task estimate tune current physical design find representative fee physical design tool tool quantitatively compare current configuration possible give good justification usefulness recommend design task reduce cost ownership large physical design tune routinely perform since tool gradually change ownership essential minimize overhead administration yet ensure performance similar system care experience develop novel adapt drastic change without sacrifice generality solution support efficient cost estimation make practical continuous evaluation experimental result algorithm show performance improvement exist full knowledge track closely heuristic solution tune specifically tune tool specific vertical partition extend index design primary focus go forward reference one schema design large use data partition two yang b integrate vertical horizontal partition physical design three approach vertical partition relational nineteen eight four sloan digital sky survey five wang x malik burn r unit cache replacement cache six e quiet continuous index tune seven k milo n colt continuous tune eight n approach physical design tune nine x e lin madden e p n column orient ten malik wang x burn r dash physical design eleven e v automatic physical design tune twelve n optimal algorithm metrical task system thirteen la competitive server cache sequence j four j eleven two really fourteen madden n different fifteen dash efficient use query design sixteen n r configuration parametric query optimization physical design seventeen r computation competitive analysis tune press new york eighteen g gray support finite element analysis relational part design access technical report research j nineteen ra information sufficiency ann math statistics twenty p r price access path selection relational management system hammer b heuristic approach attribute partition g j vertical partition design nine four malik wang x dash burn r physical design proxy cache technical report university appendix competitiveness section four provide algorithm asymmetrical task convert asymmetrical undirected transition cost graph symmetric graph use suggest twelve section prove algorithm four n one competitive reuse section four algorithm one construct graph b round cost edge undirected transition graph power two build b call f build traversal f use algorithm two denote traversal let maximum round weight tree f follow proof inspire proof twelve lemma two maximum edge weight edge round weight traverse exactly time direction proof prove induction number edge f base case edge f lemma trivially true inductive case let v maximum weight edge f use traversal similarly let tree obtain remove v edge v traverse exactly direction require lemma inductive hypothesis edge round weight traverse exactly time direction traversal maximum round weight since include exactly follow edge traverse time direction exactly reason apply edge theorem two algorithm four n one problem n asymmetry constant competitive proof shall prove traversal f follow two true cost two n one one cost optimal least one theorem follow cost single traversal constant respect length prove recall lemma two edge round weight traverse exactly time direction thus total round weight traverse edge two two construction algorithm total process cost incur node traversal edge total transition cost incur traversal edge two since cost time correspond prove exactly n one edge one prove induction number edge f suppose f least one edge v define traversal cycle opt move vertex vertex since f minimum span tree path connect total weight smaller otherwise cycle opt stay v two one assume consist one node opt stay throughout cycle definition algorithm opt incur cost least v one consist one node induction hypothesis opt incur cost least per cycle since one cycle cycle opt incur cost least one complete proof