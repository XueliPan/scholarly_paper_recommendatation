international symposium cluster compute grid io provide data confidentiality department state university university park pa perform scientific process stream media benefit parallel io significantly operate large data set require large io commonly use library interface parallel perform io efficiently like embed allow multiple process execute parallel perform io merge request process share later scenario preserve confidentiality data unauthorized access process without significantly impact performance application challenge task paper evaluate impact ensure performance parallel provide enhance interface call io bring average overhead best case average case introduction recent past complexity large scale science engineer grow dramatically emerge scientific require fast access large data envision execute large cluster typically parallel use message pass environment seven data set process large scientific engineer disk resident therefore efficient io access crucial achieve high performance several io eleven parallel file eight one allow application express parallel io program thereby help improve productivity well io performance significantly io eleven part standard two use extensively high performance compute domain example one io run many parallel machine top many file include parallel virtual file system one parallel utilize span several administrative introduce need establish security among process sixteen preserve confidentiality data unauthorized access process without significantly impact performance important step towards establish security currently io parallel work support part grant io directly support mechanism preserve confidentiality data make difficult cater security possible application programmer ensure security employ different approach typically make result code difficult maintain hard port also security hurt program performance additionally find security use incorporate tool seamless fashion therefore system support provide confidentiality data widely use io useful practice paper propose application level solution provide secure interface io call io combine advantage library base parallel io preserve data confidentiality minimal performance overhead specifically io enhance io encapsulate data encryption user transparent manner provide several advantage summarize follow enable application write io program manipulate encrypt data minimal change interface fact illustrate paper conventional io program convert equivalent secure version ie correspond io program minimal addition code support select portion data encrypt possibly different encryption algorithm key feature allow fine degree control security employ particular single application mix secure io use different encryption key appropriate thereby allow programmer strike balance performance confidentiality employ key management infrastructure allow parallel program access encrypt data use appropriate key even though program access file different pattern different part code flexibility important also allow different share encrypt data set implement propose io modify implementation io use experiment use four different indicate integrate confidentiality use io lead average overhead best case fig one collective io encryption map file view average case encryption map different file view overview collective io collective io one several io improve overall performance collective io allow processor io behalf effectively later exchange data communicate optimize data access boost io performance section explain collective io later demonstrate secure interface use collective io call io collective io implement io perform two phase io phase communication phase io phase perform io way beneficial data layout point view take account disk layout data perform io minimum number io call issue disk communication phase engage type communication ensure every process get share data collective io generally lead io spite extra time spend perform communication case small compare io collective io mostly use storage pattern access pattern different case allow processor perform independent io issue many io request small amount consecutive data illustrate figure one storage access pattern different perform independent parallel io every processor issue four io request small amount consecutive data result sixteen io request however collective io use scenario large number small io request reduce small number io request request large amount contiguous data thus total number io request reduce four show figure collective io perform optimize data access io phase communicate exchange data communication phase basic collective io support io file set view file read count status file write count status file set view collective routine change process view data file start view set type data set distribution data process set representation data file set collective read write file read file write use individual file perform read write file pointer update relative current view file collective io provide impressive performance benefit io system demonstrate prior study paper present io enhance secure interface call io design apply io focus work collective io description io problem statement goal design io interface correspond implementation obtain security enhance version io protect confidentiality disk resident data operate upon use io process trust able access appropriate key correctly data encrypt trust process untrusted process able access key context process spawn control environment ie process part communication trust process part group trust process give fine degree control encryption perform mean flexible interface allow specify different encryption key size block size able strike balance performance confidentiality parallel io perform use io require multiple may span several administrative grid environment need establish data confidentiality among process collectively operate grid protect confidentiality data environment important unauthorized access process data could lead potential especially process operate sensitive portion file therefore need application level solution support flexible interface specify different access control flexibility could term specify encryption algorithm use key size block size use encryption best knowledge first paper propose solution provide flexibility fine control regulate access data block level use io many challenge involve allow specify different encryption key firstly ensure give region io communication group represent order set process specify process operate collectively file zero c underlie order achieve seamless integration security exist io maintain information access various part file process granularity io handle different encryption map term displacement three four nine nine seven one two eight c two fig two architecture io process zero process one process two process zero file view process one file view process two file view fig three encryption map describe use similar construct various file view description io file encrypt use encryption algorithm key size block size specify process secondly number process operate file change either increase decrease need nonvolatile data structure manage encrypt subsequent describe io architecture underlie use address challenge b approach io ensure confidentiality data io incorporate follow traditional io firstly data access implement io interface implicitly operate encrypt data ie read data file implicitly data read write data file implicitly encrypt data write secondly comprehensive infrastructure call encryption map manage information access right various process access different part file essentially access matrix information encryption potentially different meta data key label use encryption data lastly manage encryption key differential access different process part communication group use key management infrastructure index key label unique identifier represent involve process communicator group grant access authorize process respective encryption key architecture io describe figure two encryption map key management infrastructure new io require elaboration discuss detail follow section along essential io fig four best case encryption map file view process file view process encryption map process file view process encryption map fig five generic case encryption map different file view file displacement absolute position relative begin file view begin example io code show figure six displacement second parameter file set view equal zero particular case describe data access pattern repeat throughout file part file process access file data match file type data describe process file type hole access process use complementary file type show figure three example code show figure six simple equal fourth parameter file set view file type contain integral number allow offset file express rather help portability example code show figure six also equal third parameter file set view one encryption map encryption map define part file task encrypt also encrypt specifically region file specify triplet displacement f encryption map store information access right participate process communicator group term key label accessible order data note approach scalable encryption map operate granularity file rather file io provide essential interface set encryption map namely p f set encryption map detail usage zero native zero native status status zero native length status length status example io code b correspond io code fig six run example simple code show usage file set encrypt map interface conventional io without encryption b io use io interface change interface addition file set encrypt map call method discuss section reference region file process encryption map use perform reference check reference check involve check whether request region file accessible process process supply term unique identifier receive creation communication group key label reference check successful encryption map process use key label obtain correspond key key management infrastructure depict figure two general sense two possible encryption map use encryption map file view ie encryption region coincide file view process depict figure four best case key management fairly straightforward process need request key process hence potential overhead exchange key eliminate encryption map different file view ie encryption region process may overlap across file type multiple process show figure five allow flexible scheme represent encryption map independent file view however case process perform io element part encryption map key exchange incur implementation key management perform use key management infrastructure explain two key management infrastructure ensure secure key management storage distribution use symmetric key management infrastructure six consist key management server two main encryption engine secure key storage use encryption engine encrypt key store secure storage key store server encrypt also maintain information key size key type key lifetime four figure seven describe scheme responsible generate distribute key base request run perform io interact use key management interface client typically make request symmetric key use use communicate key server either request new key retrieve store key key management server upon receive request verify client supply require key secure network show figure seven guarantee malicious user gain unauthorized access ie encryption key three essentially remote protect service index key label unique identifier identify process request key upon request service authorize process key correspond key label provide usage typical use collective io illustrate figure six involve follow step open file p f open p f open collective operation require process specify communicator group access mode f return f use subsequent io call set file view p f set view term displacement f identify unique view file perform io use one many available data example p f write access p f read close file p f close application programmer perspective perform io securely use io necessary change appropriately interface p f set encryption map call perform disk io use file write tine p f set encryption map take f handle displacement f identify unique partition file also take two additional namely data representation data representation argument string specify client one client two client n application application application interface interface interface start end key label start end key label start end key label start end key label user user user user start end user key label fig eight attribute representation encryption map use hierarchical extend time read disk data exchange process process own exactly data request process data every read call therefore modify behave manner read communicate file write typical collective write operation file write process involve communicator group perform encryption data write independently data communication encrypt data communicate appropriately among process perform effective collective io write disk correspond process every write call therefore modify behave manner encrypt communicate write view file object show figure nine help us better understand relationship access pattern encryption map impact performance io three possible application access pattern illustrate figure nine b c case encryption map assume figure nine b depict access pattern row wise since case access pattern encryption map match exactly access pattern least associate figure nine c show column wise data access pattern note case access pattern different organization encryption map assume row wise lead significantly encryption map consult per access figure nine depict block access pattern data set previous case access pattern different organization encryption map lead encryption map consult per access row wise access part access row wise incur additional overhead therefore represent intermediate case row access column access term incur collective call sum involve scheme depend strongly data access pattern encryption map encryption secure key engine storage key management server fig seven key management infrastructure representation data file argument use provide information regard file access pattern file system direct optimization note p f set encryption map file displacement parameter always zero enforce property encryption map would consist partition file associate different process make call complementary thereby ensure partition encrypt sample code use set encrypt map interface show figure six b implementation detail implementation io consist implement storage retrieval update encryption map apart appropriate encryption data io call original io implementation target run top one implement storage encryption map use extend attribute available part underlie file system extend attribute file system feature enable associate file interpret use store additional file attribute pair encryption map compose use set extend attribute constituent attribute entry encryption map unique prefix attribute identify unique identifier process correspond entry represent figure eight encryption map available system io call need instrument seamlessly use encryption map transparent manner application present implement two representative io call namely file read file write though approach also use parallel io call well file read typical collective read operation file read process involve communicator group perform read data present encrypt form disk data b c fig nine possible access pattern file view object b row wise access c column wise access block access table experimental setup cluster information number nod total number type main memory interconnect network operate system sixteen dual one two link one version v experimental evaluation experimental setup evaluate performance throughput parallel system whose configuration describe section experiment file strip across io nod strip across compute nod detail configuration information cluster present table sixteen node cluster configure file system version one nod cluster configure run remain nod configure io server client test use default stripe size modify part version incorporate set encrypt map aes twelve encryption use implement necessary encryption io call order measure performance impact approach practice use four parallel experiment include parallel io consortium fifteen matrix multiplication thirty synthetic kernel national lab call test perform row wise aggregation large file total data set size manipulate vary b performance implication various design encryption map io bear performance section analyze impact back analysis relevant experimental result one relationship encryption map file view explain section encryption map general independent file view however distinct benefit set encryption map file view one advantage concern efficiency key management since give process happen within file view every io call need acquire one key order data reduce involve acquire multiple key may necessary encryption map differ view also note encryption map volatile case file view therefore encryption map set file view prevail fraction program execution time figure ten present incur encryption map file view process encryption algorithm use aes bite key see figure incur due encryption decrease increase number participate process encryption also distribute among higher number process effectively parallelize bring encryption note sixteen process participate parallel execution program overhead incur io less average figure ten b depict incur encryption map different file view process case clearly notice incur case case encryption map file view however increase number process incur even sub optimal case high average overhead observe across specify encryption map different file view two sensitivity encryption algorithm encryption map flexible scheme capable specify different key encrypt different file due performance individual encryption performance io sensitive specific algorithm choose therefore conduct experiment two popular encryption namely aes triple observe use aes triple default case plain io without encryption plot figure eleven clearly see associate triple significantly greater aes average execution time increase observe case aes io time io time c r p two c r p four c r p eight c r p six one c r p two c r p four c r p eight c r p six one c r p two c r p four c r p eight c r p six one c r p two c r p four c r p eight c r p six one c r p two c r p four c r p eight c r p six one c r p two c r p four c r p eight c r p six one c r p two c r p four c r p eight c r p six one c r p two c r p four c r p eight c r p six one synthetic synthetic normalize execution encryption map file view b normalize execution encryption map different file view fig ten impact set encryption map different process view file incur l p q q ym n w v w n e e z l r n one nine eight seven six five four three two one zero c k j h g c f e c b e e e e fie r l l v w w w w q q q p p p z z z normalize execution time different encryption b normalize execution time vary encryption block size fig eleven sensitivity analysis case triple three sensitivity encryption block size important design parameter impact performance io scheme granularity block size encryption occur note general encryption io occur fix encryption block size although impose restriction size data read write use standard io call however order recover data correctly encrypt form necessary ensure size block size block encrypt example encryption block size one block write encrypt form file read call request data file necessary entire encrypt block start select request data block however fix parameter associate one hand beneficial use block size compatible completely divide size specify call due reduce reduce number hand large block size would also mean read write size different integral block size could incur large cost term data sake correctness write read actual call figure eleven b plot impact vary encryption block size execution time see difference optimal encryption block size application sub optimal one large twenty execution time therefore important tune parameter base application data set size question overall enhancement original io interface flexible allow study performance data confidentiality relate work many propose address security relate issue modern file cryptographic storage like cryptographic file system five transparent cryptographic file system ten encrypt file system thirteen eighteen nineteen provide strong security file provide confidentiality since e e z l r n one nine eight seven six five four three two one zero r r r data store encrypt form disk ensure compromise control store data main drawback may incur performance degradation client machine burden impose therefore may suitable high performance target io security develop traditional fourteen provide direct support distinctive program tool performance encounter high performance parallel also recent work storage security primarily secure communication network secure like seal nexus seventeen provide secure communication network attach secure disk twenty network file system secure file system secure file system provide security encrypt data wire well use authentication type file protect data communication since repeat encryption time file transfer inherent encryption overhead associate approach however important note security use incorporate associate increase security minimal hence focus ensure confidentiality high performance parallel minimal preserve confidentiality data unauthorized access process environment crucial task investigate feasibility design cost involve integrate security performance sensitive parallel io propose secure interface io call io enable confidentiality data encryption io essentially combine advantage library base parallel io data confidentiality user transparent manner also evaluate impact ensure data confidentiality part io performance also measure sensitivity performance impact various design issue like encryption map encryption block size use experiment use four different show integrate confidentiality use io lead average overhead encryption map file view encryption map different file view reference one parallel virtual file system version two two message pass interface forum message three j al dynamic efficient key management access four e barker al recommendation key management part one general pass interface special publication five blaze cryptographic file system six r optimal class symmetric key generation workshop advance cryptology theory application cryptographic seven g al toward scalable fault tolerant volatile nod eight p h al parallel file system cluster showcase conference nine j computer security edition ten g al design implementation transparent annual cryptographic file system technical conference eleven committee parallel file io interface version five twelve coppersmith al triple cipher block chain output feedback mask journal research development forty two thirteen corporation encrypt file system fourteen e al key management encrypt international workshop storage security survivability fifteen r r al national laboratory parallel io sixteen foster al security architecture computational consortium seventeen foster al secure infrastructure high performance distribute compute eighteen k fu group share random access cryptographic storage master thesis nineteen k fu al fast secure distribute file system computer twenty one twenty g al storage architecture review five j h overview file system winter technical conference j p c j feist architecture secure file system al scalable secure file share untrusted storage fast kent r security architecture protocol al parallel io test suite group meet recent advance parallel virtual machine message pass interface j li al parallel scientific io interface h key predistribution system practical solution key distribution problem conference theory cryptographic advance cryptology j al report development advance encryption journal research national institute technology b al version four protocol international system administration network conference thirty r l use parallel simulation evaluate program conference winter simulation al optimize implementation top e al framework evaluate storage system security fast f r file system large compute cluster fast h g parallel file system cluster computer society international workshop cluster compute r thakur al data sieve collective io symposium massively parallel computation e al level encryption file system technical report computer science university