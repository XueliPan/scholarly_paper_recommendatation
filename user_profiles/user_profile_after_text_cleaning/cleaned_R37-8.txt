remote diagnostics e porter university abstract present efficient protocol evaluation diagnostic program represent binary decision tree branch program protocol apply branch diagnostic program classification label leave user attribute vector user learn label assign program vector diagnostic program remain secret program owner learn anything construction significantly efficient obtain direct application generic secure computation use protocol implement version clarify system fault diagnosis demonstrate performance acceptable many practical subject data data encryption artificial intelligence expert general term security performance privacy data mine diagnostics branch program one introduction diagnostic program typically represent decision tree binary branch program cornerstone expert data analysis tool learn evaluate diagnostic program data basis certain feature among fundamental data mine task evaluation diagnostic program remote user data often present privacy risk user program owner program owner may want user learn entire content diagnostic program user may want reveal local data program owner example consider medical expert system diagnostic program permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee seven two copyright realization substantial investment data program evaluate contain information user health another example remote fault diagnosis increasingly popular support method complex detail remote diagnostic differ see section five many application something undesirable crash become slow unresponsive quit obscure error message system gather data problem manufacturer use information diagnose problem usually read small subset data typically require ship data manufacturer example encounter famous send error report button data gather system may contain sensitive information user document many will reveal information manufacturer hand often view proprietary diagnostic program valuable intellectual property diagnostic program may reveal application support history unpatched security information implementation internal structure application manufacturer may prefer keep secret paper describe method evaluation diagnostic branch program problem different learn decision tree subject much research one four assume diagnostic program already exist form binary decision tree branch program investigate apply user data way program reveal user user data reveal program owner present practical provably secure interactive protocol evaluation branch program protocol take place server possession binary branch program user possession attribute vector v user learn c v diagnostic label assign v server may may learn consider protocol reveal useful information except outcome computation diagnostic label case particular user learn branch program arrive diagnosis user attribute consider topology branch program diagnostic label may contain server hand learn nothing whatsoever user local data emphasize strong privacy achieve protocol example secrecy program evaluate standard requirement secure computation usually assume program public par tie respective input secret many user learn attribute consider branch program attribute vector large case example fault diagnostics attribute vector record user environment achieve security efficiently difficult challenge branch program evaluation protocol combine novel way several cryptographic homomorphic encryption blind garble circuit method method use somewhat unusual way simply realization secure circuit evaluation exploit detail circuit representation protocol implement conditional oblivious transfer primitive need protocol present substantial case study use method implement version clarify seventeen system remote diagnosis fault apply protocol decision tree generate clarify several large latex demonstrate performance efficient many practical many theoretical result field secure computation actual work extremely rare experimental evaluation prototype implementation demonstrate protocol perform significantly better generic paper organize follow describe relate work section two cryptographic section three section four present protocol section five apply fault diagnosis analyze performance section six section seven two relate work paper follow long tradition research secure computation paradigm informally security protocol paradigm define computational indistinguishability simulation ideal functionality trust third party accept party input carry computation formal various find example two seven fifteen probabilistic computation represent circuit binary decision diagram convert one use generic forty al sixteen generic however tend impractical due complexity see comparison generic approach section recent research focus find efficient computation ten auction set match intersection twelve survey eleven various data mine research use branch program instead circuit function representation still case however compute f x securely f assume know party x private input scenario compute g g private input first party private input second party implement make f generic function x description particular function g show section approach scale size branch program arise selective private function evaluation eight consider evaluation function large function much simpler branch program consider paper achieve practical efficiency protocol fundamentally rely structure branch program many paper investigate problem de tree learn cryptographic statistical one four decision tree learn machine learn technique build compact classifier best represent set label problem consider paper evaluation decision tree branch program fundamentally different complementary problem tree learn example protocol tree input whereas learn tree output concurrently independently work present protocol evaluate branch program p encrypt input x way p x reveal nineteen representation p must contain decision nod output single bite protocol appear impractical remote diagnostics user input contain value consider problem circuit owner obliviously evaluate circuit encrypt input construction user evaluate encrypt branch program paradigm server would perform computation encrypt attribute vector clear whether theoretical lend practical implementation shift burden evaluation server desirable practical several paper consider superficially similar remote diagnostics scenario system five remove sensitive information crash data thus enable concern privacy assist build crash diagnostic require recompilation assume access program source code contrast focus evaluation fault diagnosis program unlike system apply commercial compile without distribute without source code network system eighteen allow trust network collaborate order diagnose contrast assume diagnostic tool control single party manufacturer furthermore protocol cryptographically secure three cryptographic tool oblivious transfer oblivious transfer fundamental cryptographic primitive oblivious transfer denote one two protocol two party chooser sender chooser input index zero one sender input value result protocol chooser learn xi xi sender learn nothing use oblivious transfer primitive ie depend particular employ one two require one one modular exponentiation sender one one modular exponentiation chooser amortization thirty achieve one exponentiation per oblivious transfer reduce number constant factor require impractical increase communication complexity two thirty instance one homomorphic encryption homomorphic encryption scheme semantically secure permit algebraic give respective paper require en scheme additively homomorphic property allow e compute e e prototype implementation use sufficient security malicious require homomorphic encryption scheme need additional property verifiability exist efficient proof enable participant prove certain encrypt previously commit value see section efficient proof know malicious case protocol implement homomorphic verifiable homomorphic version six twenty garble circuit garble circuit fundamental technique secure computation originally propose forty garble circuit method enable secure computation functionality give brief overview detail explanation find let c circuit receive two input x x one one yn put c x zero one c r one w e e consider bob wish securely compute c x x input bob input method transform c secure garble circuit c enable computation c x without reveal x bob wire circuit generate two random wire key wire key use label encode respectively zero one wire consider single gate g c describe function g zero one zero one zero one let two input wire g label b let output wire label c correspond wire key b garble gate g b c c circuit c define random permutation follow four x encryption x key see encryption scheme must satisfy zero ten c c b b one eleven c c b b garble gate circuit manner send entire garble circuit bob garble circuit evaluation proceed follow input wire associate simply send bob wire key encode input bite ba wire leak information value ba wire key random input wire j associate bob bob engage one two protocol input sender two wire key j bob input chooser bite wire result protocol bob learn wire key j encode input without reveal j bob evaluate circuit start gate wire key input wire gate bob exactly one four learn key encode value gate output wire output wire use input another gate bob continue process evaluation procedure maintain invariant circuit wire bob learn exactly one wire key wire key random thus leak information bite b represent standard method provide map circuit output wire zero wire key one respectively allow circuit transform method use black box functionality normal circuit hide party respective input zero one instead consider use garble circuit implement secure integer comparison see section contrast standard functionality provide map bob final output evaluate circuit furthermore arbitrary string choose rather random string use method nonstandard way allow us implement conditional oblivious transfer bob learn exactly one two value depend output function encode circuit prototype implementation use implementation method construct integer comparison circuit describe detail section refer input functionality produce implementation achieve security malicious oppose necessary use implementation method secure malicious model operate commit input twenty offset integer comparison ur f l r r e secure comparison integer value offset integer comparison protocol take place two party bob bob bite integer x bite b output key end protocol execution bob learn two otherwise learn nothing denote functionality compare x b note special case b zero single zero one problem problem also know conditional oblivious transfer greater predicate three assume bound since encryption scheme use protocol secure case method efficient currently know approach three garble circuit provide relatively efficient protocol integer comparison circuit need compare two bite relatively small describe section protocol circuit creator provide key actual bob learn one two key actual result comparison four secure evaluation branch program describe protocol secure evaluation binary branch program protocol execute server possession branch program formally define section user possession attribute vector let k number nod branch program n number attribute practical n significantly k particular size protocol optimize case securely transform branch program independent n branch program section formally define branch program include binary classification decision tree special case let v vector user attribute attribute value bite integer experiment appear sufficient practical binary branch program triple l r first element set nod l pi decision nod l pi classification nod decision nod internal nod program decision node pair ti index attribute ti threshold value compare node value may occur many nod ie attribute may evaluate decision node l index next node ti r index next node ti function l r result direct graph acyclic classification diagnosis nod leaf nod program leaf node consist single classification label di evaluate branch program attribute vector v start set h l one else h r one repeat process reach one leaf nod obtain classification security objective protocol securely evaluate v protocol reveal nothing server user learn v classification label contain one leave branch program user also permit learn total number nod see discussion section length path root node leaf contain result evaluation ie label assign v user learn anything else particular user learn attribute v consider threshold value compare outcome comparison requirement attribute selection oblivious preclude application secure computation standard participant know input use computation possible create circuit take user attribute input ignore use circuit would large v may contain attribute detail discussion find section secure branch program protocol protocol run three phase phase creation secure branch program execute server use algorithm one server convert original branch program secure equivalent algorithm one require interaction user knowledge user identity example server may maintain large store secure branch program represent differently randomize replenish idle server machine many spare cycle algorithm one convert nod branch program secure nod branch program classification node replace encryption classification label content remain unknown user unless appropriate key obtain decision node replace small garble circuit implement offset integer comparison see section circuit enable user learn one two key depend comparison user attribute value offset blind value decision node threshold value reveal key next node evaluation path input branch program l r see section l pi decision node ti l pi classification node contain label di output secure branch program k random bite blind value two k random wire key one let q random permutation set one k q one one two generate random key one k use encrypt one k one j decision nod three one k four five six seven eight nine ten generate two random wire key one j use encode user input garble threshold comparison circuit generate random b two let q pi classification node di bite blind value store let label di encryption key use semantically secure encryption scheme assume pad decision nod classification nod size else pi decision node ti use generate garble circuit see section generate secure circuit offset integer comparison functionality see section compare x b two ti return l else return r l q l q l q r q r one j encode respectively zero ti l r x b use one wire correspond input x let eleven twelve end thirteen end fourteen return one algorithm one convert branch program secure branch program user know attribute compare threshold user input garble circuit blind server phase describe add random bite value user know statistical security parameter set eighty implementation blind value generate randomly server phase subtract user input circuit compare threshold phase oblivious attribute selection phase user obtain blind attribute value use input compare circuit secure decision nod create phase first user create instance additively homomorphic encryption scheme encrypt attribute attribute vector public key take place user send entire encrypt attribute vector server along public key node blind value choose phase attribute compare thus user need learn server compute value directly without learn user input attribute vector bite attribute value server input node ti index user attribute compare node ti decision node choose randomly random bite value generate part output user si two wire key wi encode si b two input wire circuit see algorithm one output server one user generate key pair homomorphic encryption scheme send public key server input secure program node index h correspond node encryption key h one k wire key wi output classification label c c v h h one use key h node sh obtain two label three classification node return label four else garble circuit five six evaluate input result evaluation obtain pair h h encode output wire value return h h user send e server error secure program properly form seven eight else nine ten end algorithm three evaluation secure branch program two one n three four end five one k six seven eight nine ten eleven server compute e e use homomorphic property encryption scheme send value user user find compute si two b j one two two oblivious transfer server user execute one protocol user act chooser input si j ie bite si server act sender input wire key encode respectively zero one input wire threshold comparison circuit see algorithm one end result oblivious transfer user learn wire key wi encode input si circuit note user yet evaluate know key encrypt twelve end algorithm two oblivious attribute selection violate user privacy compute e since know e encryption homomorphic compute encrypt value send user random blind value add server encrypt bite attribute longer therefore statistically hide thus reveal attribute server choose sufficiently large eighty implementation note two much smaller order group addition do encryption user use private key take two user obtain si bite input garble offset integer comparison circuit next user act chooser instance oblivious transfer server learn garble wire key correspond input value si note reveal si server user wire key value need evaluate phase phase evaluation secure branch program last phase user receive secure branch program server along one evaluate locally apply algorithm three input one one evaluation reveal anything user except label end evaluation path step user apply one comparison circuit value sh encode set wire section know attribute hide sh user thus learn index next node key result comparison information leak evaluation procedure total number nod program number nod evaluate reach classification node note full decision tree number depend path take classification label usage scenario require server learn classification label user simply send server server learn classification label user learn nothing server replace label encrypt label server public key user obtain end evaluation send server emphasize user simply rerun program evaluation algorithm phase secure program different attribute vector thus learn original branch program learn wire key correspond blind attribute phase user evaluate single path branch correspond attribute vector use input protocol way user learn random wire key encode possible input program order evaluate different attribute vector user must rerun entire protocol start phase obtain different secure program different set wire key protocol maintain invariant every secure branch program one path evaluate user path appear random user security protocol present section secure model ie assumption faithfully follow protocol may attempt learn extra information protocol transcript proof standard omit save space even user malicious rather learn anything diagnostic program except final diagnostic label since underlie oblivious transfer protocol secure malicious protocol section transform constant cost achieve security malicious model sketch transformation due lack space party must commit respective protocol input include server branch program blind value user attribute value instance oblivious transfer must replace instance commit oblivious transfer party prove input consistent previous similarly instance protocol must replace instance secure computation commit input server prove offset integer comparison circuit form correctly party prove input consistent homomorphic encryption scheme must verifiable ie must enable prove consistent previous commitment finally commitment scheme must enable efficient proof certain commit value cryptographic tool satisfy ie one homomorphic verifiable encryption scheme two commitment scheme three commit oblivious transfer protocol four secure computation protocol commit input five efficient proof require protocol find twenty even security malicious model prevent malicious user claim attribute vector change repeatedly rerun protocol different commit input attempt learn entire diagnostic program prevent server number protocol user easy enforce refuse accept new user specify period expire efficiency comparison generic secure branch program create algorithm one decision nod original program replace garble circuit compare two offset bite circuit require log gate total k log gate conservative estimate since nod classification nod note size circuit independent number user attribute n algorithm two require k one two oblivious transfer transfer wire key correspond user blind input k nod alternative use protocol section use generic enable secure computation functionality represent either circuit forty binary decision diagram fourteen latter may better choice branch diagnostic program way implement secure evaluation binary branch program use generic would server take specific branch program transform equivalent secure program use say standard garble circuit see section user evaluate garble circuit attribute vector satisfy security first topology program reveal user generic secure computation usually assume function compute know party garble circuit technique work even circuit know truth table associate individual gate reveal topology circuit evaluate contrast protocol reveal length evaluation path total number nod leak information rest branch program even worse approach user learn attribute program evaluate thus violate one core security see section ensure obliviousness user input selection functionality must define take branch program give size oppose specific server program securely apply attribute vector give length attempt implement functionality use compiler convert functionality equivalent garble circuit unfortunately compiler experiment unable compile would allow us apply branch program realistic size realistic attribute machine four ram compiler run memory attempt compile functionality apply branch program vector table one give comparative computation communication sample experimental setup along detail performance analysis protocol find section six negative run memory even relatively small may due particular compiler implementation rather inherent flaw generic approach nevertheless protocol describe section provide superior solution specific task secure branch program evaluation achieve complete privacy protocol section reveal total number nod branch program length evaluation path correspond user attribute vector information appear harmless practice necessary hide provide exist upper bound b number nod p length evaluation path hide size branch program server create b k random never user mix randomly real encrypt nod secure program semantic security encryption scheme use encrypt individual nod guarantee user tell difference encryption real node reach evaluation random size pad way secure branch program contain exactly b hide length evaluation first transform branch program decision tree node fix depth transform full tree depth p replace classification nod depth p p full tree depth p p one every leaf contain original classification result tree every evaluation path length p five remote diagnostics section give brief introduction problem remote fault diagnostics use protocol section four implement version clarify practical system fault diagnosis seventeen error report example remote diagnosis tool error report two purpose first purpose gather extensive information failure enable engineer fix problem emphasize focus problem since exist many standard create decision tree see seventeen section two second purpose improve user experience pro server user nod fifteen fifteen computation two sec seven sec two sec x seven sec communication x computation three sec fourteen sec four sec x twelve sec communication x cursive bold protocol x fail compile table one comparison evaluation branch program message describe user problem user avoid problem future case study address second purpose server provide feedback user user problem vista include prominent item control panel call problem report allow get latest information particular problem web site distribution also contain new feature generate information help privacy statement information collect problem diagnosis acknowledge problem report compromise privacy problem report contain content memory program fail memory might include name part document work data recently submit policy say concern release personal confidential information send problem report course send problem report benefit remote fault diagnostics corporate particular express concern remote diagnostics could reveal intellectual property documentation also acknowledge security privacy risk associate fault report protocol present paper enable user obtain support message fashion user reveal anything manufacturer local data manufacturer reveal user user local data map diagnostic message privacy diagnostic program may appear manufacturer simply send diagnostic program user better yet integrate directly support application many however view diagnostic program valuable intellectual property state explicitly legal document accompany diagnostic thirteen sue obtain access diagnostic program update widely deploy new support message diagnostic tool always feasible either since many simply install patch moreover diagnostic program reveal deploy example single message diagnostic tool sufficient reveal user experience particular fault exploitable buffer overflow entire diagnostic tree ship every user instead evaluate even experience fault could discover vulnerability analyze diagnostic tree diagnostic tree produce clarify one inner nod diagnostic tree directly point function contain security vulnerability lively market information strong completely reveal know fault bug emphasize promote security obscurity patch bug program soon practicable purely pragmatic perspective however force choose provide diagnostic support else reveal every internal detail diagnostic tool reality face stark choice many decide provide support result experience will disclose local data data collection fault diagnosis typically environment record abstraction program behavior different different cost accuracy see nine seventeen instance one abstraction count many time function program call another count function call sit satisfy certain predicate equal zero function return value purpose paper abstract detail program behavior dump generate environment refer individual data simply attribute assume vector attribute fix maximum size quite example vector function counter may include attribute note computational complexity user algorithm protocol section four depend number attribute diagnostic program evaluate data dump produce environment diagnose problem paper use diagnostic program generate clarify system seventeen emphasize clarify diagnostic system thus simply alternative commercial often distribute pack compile without accompany source code investigation fault binary manual laborious process whereas even unsophisticated user benefit fast diagnostics provide like clarify general diagnostic program manually create human construct automatically train machine learn classifier previously label program supply example beta concern privacy data clarify take latter approach necessary standard decision tree construction use protect data privacy one number whose data use construct diagnostic program typically order magnitude lower number apply result program data therefore focus evaluation diagnostic program diagnostic program usually form classification tree branch program internal node one attribute compare threshold value leave contain diagnostic label example figure one show diagnostic branch program create clarify use function count player application give consistent error message error case model four diagnostic label include normal execution error file format latex attribute nod nine seventeen nine seventy err accuracy five four five five table two give length attribute vector number nod diagnostic tree number distinguish decision tree tree classification accuracy application seven nod nine nod seventy nine nod seventeen nod nod sixty nod latex nod server user time time table three evaluation clarify diagnostic program computation communication cost time include depend information send party protocol time important metric since dictate long two party must maintain connection perform idle time low demand first analyze scale behavior server algorithm present figure two three see server computation independent number attribute attractive property diagnostic scenario attribute vector quite large contain lot information relevant diagnostic program furthermore server algorithm scale linearly number nod branch program good one realistically hope achieve scale behavior user algorithm show figure four five case server user computation time depend linearly size branch program independent number attribute attribute vector unlike server user computation time depend number attribute user must encrypt entire attribute vector transmit part protocol also evaluate prototype implementation several real show table three choose common program either contain security would reveal diagnostic program report mislead error message none nonexotic error condition therefore would benefit remote diagnosis diagnostic program use classification tree generate figure one diagnostic branch program dot line take attribute normalize count feature value less equal threshold list box solid line take greater threshold threshold determine automatically decision tree algorithm different node tree clear box decision nod shade box classification nod root error try play file corrupt tag artist name store format tag corrupt frame data diagnostic branch program distinguish three failure normal execution function mad layer provide almost perfect discriminative information error class try play mad layer routine part library call audio frame run since format among format support successfully decode audio frame library never call mad layer tag delete routine differentiate corrupt tag class tag parser library dynamically allocate memory represent tag free tag delete tag parse fail memory tag allocate since tag parse succeed corrupt frame case tag delete never call free tag memory make absence discriminative class audio library default error handler error default use application specify one specify error handler presence function indicate corrupt audio frame absence indicate corrupt tag finally perform subband frequency inversion odd sample line call frequently part normal decode audio frame data corrupt frame function call less frequently decision tree algorithm find appropriate threshold value separate normal corrupt case table two show diagnostic program several six performance evaluate prototype implementation use three processor two ram cache realistic approximation user might use expect server would maintain powerful dedicate server process remote diagnostics request analysis scale behavior create artificial data set vary number nod attribute measure time separately time include perform independently party server computation time diagnostic program server computation time user vector second time time second time time ten twenty fifty seven fifteen number attribute user vector number nod diagnostic program figure two server algorithm scale number attribute figure three server algorithm scale size diagnostic program user computation time diagnostic program user computation time user vector second time time second time time twelve ten eight six four two zero fourteen twelve ten eight six four two zero seventy sixty fifty forty thirty twenty ten zero eighty sixty forty twenty zero ninety eighty seventy sixty fifty forty thirty twenty ten zero thirty twenty fifteen ten five zero twelve ten eight six four two zero forty thirty twenty fifteen ten five zero ten twenty fifty seven fifteen number attribute user vector number nod diagnostic program figure four user algorithm scale number attribute figure five user algorithm scale size diagnostic program nine seventeen attribute invocation counter function application computation communication cost execute protocol acceptable many practical seven present practical provably secure protocol enable user evaluate server branch program user local data without reveal information except diagnostic label apply prototype implementation several realistic use diagnostic decision tree produce clarify system branch program demonstrate perform well many practical interest topic future research apply oblivious evaluation branch program develop paper computation material base upon work support national science foundation grant grant eight reference one r r data mine international conference management data page two beaver secure interactive compute advance cryptology volume page springer three blake v strong conditional oblivious transfer compute advance cryptology volume page springer four c f k practical privacy framework symposium pod page five p n system generate secure crash information security symposium page six j v practical verifiable encryption discrete advance cryptology volume page springer seven r security composition b proof protocol j cryptology thirteen one eight r r reiter r r wright selective private function evaluation private statistics symposium distribute compute page nine j j ha c h e decision tree learn forensic classification conference machine learn volume page springer ten j malkin k r wright secure computation international colloquium automata program volume page springer secure computation n b sella secure computation system security symposium page g j make behave security obscurity privacy statement error report service report solve computer eleven j b r f configure error report secure computation survey eu workshop secure twelve freedman k b efficient private k communication preserve match set intersection advance cryptology volume page springer thirteen gateway system management service agreement secure function evaluation symposium theory compute page thirty b efficient oblivious transfer annual symposium discrete soda page fourteen e l secure function b r sumner privacy preserve evaluation order binary decision diagram conference computer security page fifteen cryptography volume basic university press sixteen play mental game annual symposium theory compute page seventeen j ha c j h porter e improve error report use black box conference program language design implementation page eighteen q h wang secure electronic vote conference computer security page nineteen evaluate branch program encrypt data theory cryptography conference volume page springer twenty v efficient secure computation commit input advance cryptology volume page springer auction mechanism design conference electronic commerce page r longhorn raise oracle oracle sue sap p base composite degree class advance cryptology volume page springer exchange oblivious transfer technical report computation laboratory university sander young annual symposium computer science page b stone lively market legal bug new york time thirty h wang c yuan z ym wang network towards automatic international workshop volume page springer j found cryptography oblivious transfer j problem report annual symposium theory compute page forty generate exchange b privacy preserve data mine j cryptology fifteen three annual symposium computer science page