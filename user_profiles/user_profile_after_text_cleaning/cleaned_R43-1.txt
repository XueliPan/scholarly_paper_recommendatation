automatically document program change university abstract source code often document log message message key component maintenance help validate change locate triage defect understand however documentation burdensome create incomplete inaccurate present automatic technique synthesize succinct documentation arbitrary program algorithm base combination symbolic execution novel approach code summarization documentation produce describe effect change behavior program include condition program behavior change new behavior compare documentation log message five popular open source project employ human study find generate documentation suitable supplement replace exist log message directly describe code change subject specify verify reason program general term documentation human factor measurement commit message code summarization work support reflect view research permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee ase ten copyright one introduction professional spend time try understand code fifteen moreover maintenance typically expect consume total budget project maintain evolve documentation crucial help understand modify code twelve paper focus documentation code change much engineer view application sequence code base numerous kernel generally consider stable change time per hour fourteen help validate change triage locate defect generally understand version control permit association textual log message commit message change use message pervasive among development accurate commit message desire thirty average investigate paper change document commit message actually describe change lack documentation practice illustrate follow indicative appeal development mail list go forward could ask descriptive commit message ideally state change also unless obvious know busy take time help anyone look log one practice goal log message may summarize happen change replace warn b place change context explain make fix bug refer information respectively context information may difficult generate automatically hypothesize possible mechanically generate documentation suitable replace supplement code change effect observe log message random sample five large open source project contain summarization information imply tool like compute precise textual difference two file replace human documentation effort sufficient would necessary conjecture two reason raw inadequate long confuse make change clearer concise propose summarization algorithm describe effect change program behavior rather simply show text change propose algorithm refer summarize condition necessary control flow reach change effect change functional behavior program state program use condition high level produce structure hierarchical documentation form call x instead z additionally key component introduce set iterative brevity readability allow us create eighty shorter standard primary goal approach reduce human effort document program change experiment indicate suitable replace content much exist version control log message case find contain information exist log message typically precise accurate moreover tool use human documentation available include case patch repair main paper empirical qualitative study use version control log message several large open source study analyze message find use commonplace comprise documentation algorithm describe change condition occur couple set transformation change summarization take together automatically generate code change novel process objectively quantify compare information content program documentation prototype implementation algorithm comparison output message five project experiment back human study suggest could replace log message begin example highlight approach two motivate example project multiple need descriptive log message quote cayenne project development list suggest sorry pain neck could please use descriptive commit message try read commit since vast majority comment really tell go unless look two consider revision library write entire commit log message change producer documentation indicative many log message describe change sufficient detail fully understand example neither type producer nature change clear consider revision call close document one set producer producer modify use document instead set producer document originally create producer documentation possible determine change influence format version information add producer string documentation design provide sufficient context effect change understand furthermore claim tool view text code change often fail clarify effect consider revision bibliography manager also write consist modification single return statement show summarization nineteen else return else return zero else return although source code show exactly change textually reveal impact change example without understand variable new behavior remain unclear instruct provide additional adjacent line context view though specialize tool increase available context blanket approach become increasingly verbose without provide relevant information example define six line change range standard context similarly explain condition change statement execute contrast explain program differently call format string null return null split length two return split zero instead return link behavioral change condition occur message yield additional clue beyond output claim documentation form provide insight true impact change without include verbose extraneous information serve document change formalize intuition study current state log message propose algorithm generate documentation three empirical study log message section analyze reality commit log documentation five open source project use show table one cover variety application project select range name domain total game data present utility file share bibliography three fourteen thirteen table one set program use study column list span commit program analyze study column count number distinct user id check lifetime project figure one percent change modify give number source code file graph report code file file well file exclude metric majority involve change three source code file take place chaotic stag development project average eighteen even project benefit clear documentation case documentation particularly compel form communication first note log message nearly universal across study log message since documentation occur pervasively infer desire important part development however desire accurate documentation vary quality extant log message see section suggest many commit could profit additional explanation five thirteen average size log message eleven line average size textual show code change associate commit line typically produce concise reference bug number seven line hypothesize message order magnitude ie line would line human longer insufficiently concise use line natural metric size find also apply raw character count next address scope commit figure one count number source code file modify give change note figure two percent change documentation study indicative document change see section methodology manually annotate documentation twelve common average ber may zero change introduce new file delete old file change file text file algorithm document note majority change edit one three file suggest lightweight analysis focus small number file time would broadly applicable find similar perry finally characterize often log message contain information portion study select subset indicative log message see section detail manually annotate contain information information annotation information express one specific program object x null section describe annotation process detail information define text see include information slight preference project interactive game outlier message often reference game play conclude amount developer effort exercise compose information give understand log message next section describe approach produce documentation arbitrary code change four algorithm description propose algorithm call take input two program output textual description effect change behavior program ie output documentation algorithm produce documentation describe change document create nothing entirely delete instead simply list separate step algorithm change involve multiple file document change method separately follow pipeline architecture show figure three first phase detail section use symbolic execution obtain path predicate statement code phase two identify document add remove figure three view architecture path predicate generate statement insert delete change predicate document result documentation subject series summarization deem acceptable ie sufficiently concise change predicate section third iteratively apply summarization section documentation sufficiently concise finally group print structure readable form obtain path predicate first step obtain path predicate formulae describe condition path take statement execute two nine seventeen process method first enumerate control flow obtain add statement path effect consider loop either take decision occasionally result imprecise incorrect documentation however show section occur infrequently practice control flow path symbolically execute five eleven track conditional evaluate guard predicate use current symbolic value statement two duplicate information explore analysis thus potentially exponential collect result predicate conjunction form path predicate give statement method local heuristically less relevant explain change function call return enumeration method parametric respect relevant predicate flag prototype implementation invocation assignment throw return deem relevant symbolically execute store result later documentation step use symbolic ie value instead raw textual value describe statement ie e figure four path predicate analysis symbolic execution analysis could also use relevancy filter step combine three efficiency generate documentation phase algorithm two set statement predicate obtain path predicate generation represent code revision use make documentation form x instead z figure four show phase algorithm match instruction symbolic enumerate change predicate present one version line nineteen prototype program consider unchanged execute code instruction condition group predicate line predicate handle first line fifteen documentation generate hierarchical manner guard give predicate sort line number line seventeen exactly guard current predicate document via instead phrase line eighteen remove consideration multiple guard current predicate print order appear original source undocumented remain next common predicate select line document use phrase line helper function call document might perfectly cover addition new predicate process terminate must document document process handle incoming set interest predicate take union predicate guard predicate render via describe function source language minor natural language algorithm produce complete documentation input ie heuristically relevant see section large change however documentation may insufficiently concise next phase algorithm summarize result finally algorithm also print list field add remove mimic certain style documentation follow example revision new field new method summarization summarization key component approach without explicit step reduce size raw documentation create section output likely long confuse useful base judgment observation log message order line long see section three without summarization raw output average twice long previous study human source code readability length snippet code number contain two relevant factor negatively correlate readability six predicate emit structure documentation set input method path predicate input method path predicate input map e symbolic output global one let insert domain domain two let delete domain domain three let change four domain domain five six seven end eight end nine insert delete change ten let predicate eleven twelve thirteen fourteen end fifteen predicate predicate sort frequency sixteen call predicate e let predicate predicate change change helper fun p predicate e seventeen p output describe e eighteen nineteen twenty end p sort sort output instead describe e end predicate p predicate order output describe p tab right call p p predicate p remove e output tab leave thirty end end figure four documentation generation mitigate danger unreadable documentation introduce set summarization synergistic sequentially apply much like standard compiler copy propagation create dead code elimination optimize basic block remove extraneous create combine predicate optimize structure documentation unlike standard compiler however instead many sacrifice information content save space number document increase number apply rest subsection detail due space use number example transformation note however actual robust possible relate standard compiler similar spirit apply documentation map precise finally note algorithm run control flow graph suitable use common imperative prototype implementation describe algorithm particularly readability section context however natural statement filter document set relevant method potentially represent many retain also retain field since often capture impact code visible program state finally document return throw capture normal exceptional function behavior code notably avoid document local use symbolic execution document use line eighteen figure four predicate line figure four mean many reference local replace reference value also take advantage standard textual idiom ie getter document call form get since typically equivalent field read single predicate algorithm produce hierarchical structure documentation change guard predicate describe occur group associate may include redundant extraneous term thus consider statement group one drop method call already appear predicate two drop method call already appear return throw three drop condition least one operand assignment statement document transformation one two view variant common elimination typically important know particular method call many time call transformation three base observation predicate become large confuse contain many condition directly relate guard thus remove condition also occur guard example null x true b true c true return null return guard discuss b c unrelated action return however transformation apply least three guard condition least one would remain work practice prevent much context lose thus retain null throw new exception even though share statement whole change reduce redundancy across documentation multiple change single method conceptually akin global common elimination term rewrite generate documentation change method one instead condition two instead predicate three add hierarchical structure avoid duplication transformation one convert expression form p x instead p p x instead similarly transformation two convert p x instead q x x p instead q third transformation reduce predicate redundancy nest specific guard underneath general guard give two adjacent piece documentation merge single piece documentation find elevate intersection guard share conceptually similar conditional hoist example convert p q x p q p q x simplification transformation save space elide target method call example may transform method simply method addition document predicate still greater character display heuristic limit could ideally replace custom view environment could expand collapse predicate desire summarization apply case large change documentation still long consider acceptable ten line sweep change code observe trend important detail thus remove predicate entirely replace documentation list return value throw value add remove change observe information often sufficient convey system affect change would impractical describe change precisely transformation similar documentation summarization domain natural language process attempt capture gist change rather detail readability always apply employ small number recursive phrase common succinctly natural language example true remove x zero become x null x become x become x next become x element similar readability prove effective previous work generate documentation five figure five size comparison human generate documentation table one figure six cumulative effect apply set size documentation table one include average size output comparison five evaluation information conciseness important documentation critical exist information convey size description extreme print entire artifact document perfectly precise concise conversely empty documentation virtue concise convey information technique design balance information con impose summarization step amount information document grow evaluation aim establish similar real human implement algorithm describe section four prototype tool document change program section compare documentation documentation documentation term size section quality section take one second average document change three second experiment document entire repository take three size evaluation average size comparison output target human documentation present figure five average approximately nine line longer documentation typically create though documentation may seven line long notably documentation line shorter average figure six indicate level conciseness dependent upon describe section raw unsummarized documentation line long average approximately twice size output filter reduce size single predicate documentation remove redundancy reduce total size another whole change primarily readability actually increase documentation size one effect line count reduce total number character display summarization apply eighteen change effective reduce documentation size another overall summarization rarely apply use reduce documentation manageable size finally readability reduce final line count thirteen primarily remove true predicate however affect total number character less one content evaluation compare quality documentation program change select comparison criteria quality important address turn present result selection source code repository form basis suitable comparison example file documentation admit interest comparison restrict attention contain log message information modify least one three file modify file ie ignore change unit test package touch one two three file account change touch least one file see figure one manually inspect log message table one obtain fifty conform change total require inspection documentation comparison rubric employ rubric documentation comparison design objective repeatable fine grain consistent goal precisely capture program behavior structure compare first cast formal language express specific information concern program behavior structure step one two transformation admit direct comparison information content step three step one program object mention documentation instance identify step automatic inspect log message refer specific program variable method class criterion admit implementation detail specification requirement detail associate source code use verify presence object object name source code user consider program object enumerate type name unary true false logical equal equal equal equal binary unary binary empty call invoke return throw assign element insert imply instance add change remove programmatic edit unary table two table relational use documentation comparison logical describe condition programmatic express language edit describe change code structure step two set true among object identify step one extract serve encode documentation formal language process automatic inspect documentation identify object enumerate step one one implicit unnamed include full set consider enumerate table two make process essentially may compose constant two object x mathematical x two nest associate source use check validity encode relation manual inspection reveal relation false remove doubt message assume true step three relation either human documentation h check see relationship also fully partially present documentation pair h determine h imply write h h relation imply another relation operator operand correspond either object object implicit unnamed general description object see example unnamed object identical h associate source code check validity relation step two relation find inconsistent program source remove consideration step one two step three contain instance noun phrase problem require annotator judge two nonidentical name refer object gold refer program object approach problem propose however use human show accurate task eight process design distill message precisely information wish model impact change program behavior notably leave behind potentially valuable information beyond scope work impact change performance furthermore process allow us precisely quantify difference information content technique similar rouge metric twenty evaluate document score metric apply rubric quantify well capture information log message metric refer score compute score inspect implication map x add two point documentation contain x one point documentation contain reward precise documentation update version change version x add two point remain unmapped log message add two point total log message instead conservatively assume additional spurious score metric compute fraction point assign algorithm documentation score point point log message point score metric range zero one five indicate information content score five indicate contain information log message ie least one relation imply log message maximum score ten possible log message contain correct information information standpoint conjecture score five imply suitable replacement human log message contain least amount information figure seven show average score assign documentation pair follow rubric ask sixteen graduate program seminar check work review random sample consist documentation pair change show exist log message output algorithm output standard ask inspect information map establish provide detect compute score accord annotator compare result original score find maximum score deviation average deviation pairwise agreement result study present figure seven compare result fifty error bar indicate maximum deviation observe figure seven distribution score change already information score five greater indicate suitable replacement log message error bar represent maximum level disagreement human human represent confidence bind data average score except greater five however show number change score least five contain number large change effectively document accord metric change receive zero significantly reduce general prototype average score compare favorably small medium size change impose tight space practice use interactive visualization similar allow part expand collapse need would likely make unnecessary case calculate score five contain information log message example revision contain log message need call clear contain relation result score five call reset longer call clear case documentation find contain information score five revision log message state comment unused constant name constant remove field remain case contain less information typically arise unresolved imprecision either predicate generation summarization example log message revision state fix bug content selector editor field use instead delimiter case clearly contain relation indicate remove insert forty call equal editor call conte add f el c n en e l find support hypothesis majority information log message could replace machine generate documentation without diminish amount information convey reduce overall effort require leave additional focus craft documentation qualitative analysis addition validation information map documentation log message pair ask felt useful describe change case either preference seventeen prefer also ask qualitative question regard algorithm output many note strength algorithm output specific compare log message simultaneously low level context compare output fifteen sixteen agree algorithm would provide useful supplement log message many go note useful highly useful would great supplement definitely useful supplement help make logic clear comparison human log message algorithm output often easier understand accurate easy read provide information general consensus ideal suggest serve useful supplement human documentation available validity although result suggest tool efficiently produce documentation commit message good better documentation term information may generalize first select may indicative attempt address threat select wide variety application network game business logic second select manual comparison may indicative attempt mitigate threat select contiguous block middle project thus avoid nonstandard practice early phase development bird al note study attempt tie developer bug fix via defect subject bias four mitigate threat inspect tie defect report second manual annotation documentation quality may indicative attempt mitigate threat clearly separate information evaluation use list criteria subjective information remove documentation evaluate solely furthermore ask sixteen review random sample documentation pair order quantify uncertainty quality evaluation mitigate potential bias error bar figure seven indicate maximum human disagreement six relate work source code active area research goal precisely calculate line code change two program tool widely use engineer task include impact analysis regression test version control recently al one present tool employ semantic knowledge capture work relate also enumerate code change however recognize output tool often verbose difficult interpret use documentation since necessarily list change work different one goal describe impact change rather change two focus summarization instead completeness three output intend use documentation input another analysis tool kim describe tool call discover document structure code change eighteen potential complement instead focus precise summarization al sixteen present another approach determine difference program like analysis focus program however tool dynamic primary application regression test documentation automatic natural language document summarization attempt early al note majority participate past document understand conference text summarization challenge extraction base extraction base extract part original document use exploit document structure however analyse early al make use structural information analysis make heavy use structure input since program much structure natural document summarization ten summarization search engine web mine seven nineteen produce structure output however intent case produce text increase speed query summarize data finally semantic three use semantic cue order characterize difference two document characterization often binary judgment change important suitable use impact analysis regression test documentation seven conclusion version control use pervasively engineer log message key component maintenance help validate change triage locate defect understand however documentation burdensome create incomplete inaccurate undocumented source code typically lengthy difficult understand propose algorithm synthesize succinct documentation arbitrary program technique base combination symbolic execution novel approach code summarization technique describe code change provide context explain code change make documentation describe effect change behavior program include condition program behavior change new behavior evaluate technique log message five popular open source project propose metric quantify information relationship log message information standpoint find suitable replace log message human study sixteen use validate approach suggest change portion log message documentation produce supplement automatically reduce human effort free concentrate document change eight reference one j technique tool program fourteen one two ball j r efficient path profile international symposium page three r r c smith implementation experiment semantic international conference maintenance page four c bird e aune j v p fair balance bias engineer page five r p l w automatic documentation inference international symposium test analysis page six r p l w r metric readability international symposium test analysis page seven x j wen w link analysis research development information retrieval page eight c k noun phrase cluster joint conference empirical large corpora page nine l carter b b l carter j path analysis rename predicate instruction schedule international journal parallel program six ten l document summarization use synopsis creation expert page eleven das program verification polynomial time notice five twelve c b de n k de study documentation essential maintenance page thirteen r bug inconsistent behavior general approach infer code symposium operate page fourteen kernel development foundation fifteen p really anyway developer network c compiler sixteen k j p trace analysis six seventeen r r path slice program language design implementation page eighteen kim discover represent systematic code change international conference engineer page nineteen c lee kan lai stylistic lexical web block classification workshop web information data management page twenty lin f j och look good metrics rouge evaluation workshop h p automatic creation literature abstract journal research development two two b j e rush c e young improvement automatic abstract use structural analysis journal society information science two j f w g use decision tree resolution joint conference artificial intelligence page l identify reason change use historic international conference maintenance page g k ward say want documentation conference design communication page l engineer theory practice prentice hall practical maintenance best practice manage investment sons r e perry toward understand rhetoric small source code change six g efficient path condition dependence graph international conference engineer page thirty j source code control system one four r c g lewis modernize legacy engineer process business practice e k w syntactic regression test output international symposium web evolution r song h j wen w learn block importance model web page international world wide web conference page w soon h c lim machine learn approach resolution noun phrase linguist four e comparison consensus consistency measurement approach estimate reliability practical assessment research evaluation nine four r v system document summarization information knowledge management page w c automatically find patch use genetic program international conference engineer page