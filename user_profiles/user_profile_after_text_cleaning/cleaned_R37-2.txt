model transactional memory performance e porter department computer university abstract transactional memory promise make parallel program easier lock perform well performance claim always bear application may violate assumption designer external system effect order help assess suitability code transactional memory work introduce formal model transactional memory well tool call predict conversion lock within stamp get good performance difficult commonly appreciate need tool tune transactional performance subject processor parallel architecture processor performance general term design measurement performance introduction one transactional memory three promise paradigm simplify concurrent program relieve programmer worry deadlock make easier code correctly however program need correct efficient introduction application negative performance transactional memory make implementation base implicit model application behavior may true give application poor performance instance design often trade faster commit abort cause perform much worse lock many case application data structure reorganize improve transactional performance necessarily obvious upon inspection code thus important tool help diagnose correct performance performance transactional program may also arise interaction system unrelated portion system figure one illustrate simple conditional statement programmer would expect reduce conflict access share variable yet code generate always read copyright hold ten threshold figure one simple code sequence assembly produce value memory always write back use condition determine whether update register write back compiler try avoid branch around load store make sense platform hardware transactional memory system however performance lose coherence conflict much lose branch system effect difficult application developer anticipate ultimately issue must resolve better integration implementation rest system stack tune tool help distinguish whether performance problem originate code attributable system effect help characterize tune performance transactional program work propose validate formal model transactional memory performance tool base model synchronization characterization model start transactional parallel application sample set address read write critical section build model program execution predict performance application use model two key metrics data independence conflict density critical data independence measure likelihood thread access disjoint data conflict density measure many thread likely involve data conflict one occur parallel use lock key use model identify could benefit use invest engineer effort make conversion two model model formalize intuition transactional performance primarily determine number conflict provide basis performance tune tool transactional memory generally rely conflict safety condition call set address read critical section read set set address write write set union read write set address set critical section b conflict b aw informally conflict say write set one critical region must disjoint address set guarantee safety conflict efficient compute use widely transactional memory critical data independent write set disjoint address set critical section concurrently modify data data transactional memory system serialize access critical section case transactional memory perform much worse conservative lock due overhead require detect resolve conflict conflict density measure connectedness graph data conflict assume conflict among n thread best case single thread might write datum read n one thread low density conflict produce short serialize execution schedule n one commit writer worst case thread write datum write n one thread yield high density conflict necessitate completely sequential schedule thread must run serially one next estimate data independence conflict density critical sample address set sample address set critical could potentially execute concurrently use transactional memory determine conflict process describe detail effectively implementation safety property system sample incorporate dynamic behavior application potential data conflict little publish performance tune transactional program two present framework analytical performance model whereas work model performance al introduce transactional memory instrumentation support performance profile six work complementary model provide limit tie specific schedule model present al nine provide definition dependence density similar aggregation data independence conflict density work close loop apply model make concrete performance three model validation section validate model implement module four compare predict performance measure performance model validate model seven stamp version five experiment model eight sixteen additional simulation result available companion technical report seven experiment run version experiment use eight present mean four simulate main memory access latency perturb account simulator determinism one table one show predict actual execution time parallel phase geometric mean error across track trend closely poor like intruder good like precision decrease become short particularly run three second less worst case predict scale trend offset factor one select term data conflict data dependence avoid confusion mean bay eight sixteen twenty eight sixteen fifty eight sixteen eight sixteen eight forty sixteen eight sixteen eight sixteen fifteen err zero nineteen sixteen forty three thirteen one thirteen thirteen eleven seventeen nineteen fifteen di zero one four thirteen zero zero one ninety genome intruder vacation table one execution time second stamp second label project execution time second label accuracy error di data independence value conflict density eight bay data available time submission data independence conflict density prove interest metrics widely vary value across stamp highly data independent intruder bay light conflict density conflict quite dense average nine densely conflict thread per transactional conflict experiment show model strike good balance accuracy complexity model less capture scale trend thus model important tool application need leverage transactional memory effectively reference one wood variability architectural multithreaded two g analytic framework performance model transactional memory eight three j e moss transactional memory architectural sup port data structure may four p j e al full system simulation platform computer five c c j c k stamp transactional six c n dissect transactional transact seven e porter e understand transactional memory performance technical report eight h c porter bhandari e transactional memory operate system nine c r c model optimistic concurrency use quantitative dependence analysis