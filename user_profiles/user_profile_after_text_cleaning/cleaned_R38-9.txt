find diversity remote code injection exploit j wang savage university san research abstract remote code injection exploit inflict societal cost active underground economy grow around continually evolve attack present methodology infer phylogeny evolutionary tree exploit apply methodology traffic capture several vantage point demonstrate methodology robust observe polymorphism reveal code share among different exploit result accurately capture subtle among exploit within family thus believe methodology result helpful step better understand evolution remote code injection exploit subject network protection operate security general term measurement security worm classification binary emulation phylogeny one introduction increasingly victimize criminal enterprise span extortion identity theft wire fraud piracy unsolicited bulk core use remotely compromise harness millions host considerable effort focus defend attack comparatively little research describe ecosystem one piece relate another pressure drive structural functional evolution may teach us author permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee six rio de brazil copyright state paper conclusively answer question develop measurement methodology first step direction particular focus identify measure diversity among remote code injection exploit use compromise host typically host compromise via vulnerability buffer overflow format string integer overflow allow input inject run program execute subsequently exploit may additional join centralize operate system evade detection ie variation among focus specifically exploit initial first execute newly compromise machine operate constrain environment typically small simple machine program thus particularly analysis give corpus number obvious question arise immediate motivation understand much variation exist among exploit inform state particular polymorphic consider heel approach nine ten consideration motivate research approach two three eighteen however date little empirical evidence presence wild let alone attempt characterize impact exist time measure diversity may also allow us better understand create potentially infer paternity different sample generally construct phylogeny would simplify categorization name analysis perform security could also provide insight dynamics influence development evolution share moreover potency become powerful market advantage organize phylogenic analysis may prove useful estimate vigor different however point lack empirical analysis literature today summary purpose work enhance understand today diversity relationship one another study gain evidence today diversity simple employ sophisticate evasive paper develop demonstrate methodology automatically identify quantify similarity use data create phylogeny give vulnerability remainder paper organize follow section two provide brief background remote code injection exploit discussion relate work analysis provide overview methodology section three section four analyze amount cause diversity exploit within individual across multiple section five discuss find current network conclude section six two background relate work remote code injection attack combination vulnerability exploit vulnerability particular structure allow data provide network subvert redirect execution control flow example network input overrun beyond end unchecked buffer overwrite return address call stack frame divert control buffer exploit particular formulation attack vulnerability typically attacker use many different instruction sequence exploit particular vulnerability result may multiple exploit vulnerability refer variation exploit particular vulnerability diversity exploit finally carry first code execute result control flow subvert figure one show simple representation buffer overflow instance remote code injection attack case inject vulnerable buffer overrun figure one simple example remote buffer overflow shade represent exploit send network inject vulnerable buffer target host return address overwrite inject data thereby redirect execution flow reside vulnerable buffer use terminology crandall al four study examine polymorphism diversity portion exploit region exploit refer inject execute divert flow execution victim machine study considerable freedom construction however frequently limit size buffer process need buffer contain sled long consecutive nothing allow imprecision guess address quite sophisticate construction include creation sled polymorphic encrypt potentially compress transit execution one motivation greatly frustrate ability find textual signature give indeed polymorphic also create random challenge finally include code include code detection complicate disassembly analysis thus even decode challenge problem early attempt defeat polymorphism use analysis heuristically decode polymorphic cod base assumption cipher analysis portion know decode instance encode recover encryption key general approach call generic emulate execution typically use heuristic guess process terminate however overhead technique substantial variety undermine efficacy thus develop combine emulation dynamic translation static analysis use similar approach work decode compare another key problem one approach model binary string use traditional lexical distance measure approximate variation alternative approach use structural distance measure capture variation control flow value instruction basic block function call level five six eleven experiment paper propose another metric find better suit problem domain three methodology section describe analysis include motivation overall analysis proceed follow major step first extract directly network trace use shield decode restrict binary emulation finally examine similarity among exploit perform cluster exploit collection active definition remote code injection exploit refer specifically exploit require attacker actively compromise victim machine initiate action victim require hence primary mean collect exploit examine network trace traffic send active host respond unsolicited probe exploit attempt measurement purpose pang al observe study exploit destine unused address space emulate behavior allow us collect session data attack host twenty particular complete infection handshake suffice attacker transmit illustrate utility use active measurement consider exploit exploit target different use network port listen exploit traffic passively network telescope approach sixteen exploit would simply appear destine port trace thus require active capture bind request portion exploit handshake differentiate exploit use network trace live stateless twenty obtain exploit extract analyze portion exploit promise first place author execute new code system new code author use variety different accomplish number find need host executable comparison focus protocol frame application layer frame compulsory element although message sequence exploit vulnerability also vary author likely benefit less alter handshake message use shield extract exploit sion trace shield originally design filter know apply shield set modify collect data beyond buffer boundary however collect data correspond executable code example execution start offset within buffer depend exact vulnerability exploit indeed case first several vulnerable buffer contain begin executable proper second example buffer may contain random pad part exploit code data read exploit code address issue use follow exploit emulation technique exploit emulation many exploit encounter study main executable encode one encode technique commonly observe decode key though also encounter encode escape character variety reason might explain observe use encode eliminate null allow buffer overrun complete hide telltale string web site name name finally obfuscate executable code thereby make intrusion detection difficult regardless find decode exploit often necessary reveal actual executable code enable analysis scale many sample need process decode exploit clear find easiest way deal variety decode use binary emulation allow different exploit decode execute thus reveal underlie code emulate exploit also necessary reveal actual instruction execute exploit contrast find even static disassembly decode trouble instruction alignment occasional instance random filler text decode valid implement emulator use pin thirteen give encode first declare statically allocate buffer c source code treat buffer function compile source binary mark buffer read write execute allow run properly address issue buffer begin prefix mention section iteratively retry fail subsequent offset find simple retry policy enough overcome issue prefix pin successfully emulate binary mark execute instruction later analysis emulate exploit platform use prolong execution emulation function call ad b fifty b c distance e c n e g r e one eight six four two zero b c b figure two example distance matrix b correspond dress memory access would intercept flow execution restart instruction emulation stop control flow make absolute jump location outside buffer emulate short advantage relatively low overhead compare emulate entire binary executable although pursue direction could conceivably also use methodology emulate look among code base executable file however unclear whether overhead approach would prohibitive cluster understand relationship introduce distance metric instruction generate binary emulation perform cluster instruction use metric case study evaluate cluster manually confirm intuitively sensible tree construct agglomerative cluster intuitive interpretation phylogeny exploit agglomerative cluster form hierarchical cluster algorithm build hierarchy similarity among exploit sample iteratively merge pair cluster step algorithm begin unique belong cluster perform merge pair cluster define distance cluster distance furthest sample two respective cluster also know complete linkage distance addition algorithm record distance two cluster merge information allow us construct visualize cluster result figure illustrate simple construct way use distance matrix show figure show individual sample show merge distance initially agglomerative cluster start three cluster b c b cluster distance fifty constitute first merge horizontal bar b value fifty point remain cluster c since distance c horizontal bar cluster c cluster merge distance choose agglomerative cluster cluster technique two reason first result agglomerative cluster typically easy human connect back feature input data way contrast many find cluster nineteen similarly result second data possess cluster agglomerative cluster usually find automatically show section four data find study possess cluster study primary metric distance define also experiment two metrics edit distance decode metric base control flow graph color distance methodology focus use relative edit distance execute abbreviate distance compare two specifically exploit sample mark execute instruction concatenate mark order appear ie memory order construct canonical string representation final step compress consecutive run instruction single compute relative edit distance exploit use canonical string relative edit distance number edit insertion deletion substitution use transform one string another normalize length longer string use execute instruction different use instruction stream stream representation appear execution order memory order potentially multiple time edit distance also experiment relative edit distance entire decode without try distinguish code data encounter first metric distinguish code data sensitive change embed string second edit distance could help us infer exploit across differ vulnerable buffer size third random pad neither code data case generate noise structural distance investigation implement version control flow graph color approach al eleven use calculate structural distance percentage mismatch basic block two sample block consider mismatch part share two sample primary limitation technique capture subtle variation relate exploit entire basic block summarize presence absence certain lose information render metric inappropriate purpose often group together distinct exploit four exploit diversity section analyze diversity exploit trace capture live exploit attempt host four name resolution choose various infamous worm use exploit past infect millions host exploit traffic still prevalent today trace use capture exploit attempt residential network two days start six capture traffic use machine run listen address respond incoming request use shield framework describe section identify capture exploit know discuss order extent diversity exploit negligible name resolution extensive vulnerability substantial diversity first examine number frequency vulnerability use methodology section three one cluster accord variability thus identify two provide detail characterization family convey structure well subtle functional among three show prevalence family trace manually examine identify use cluster methodology show distance metric capable correctly identify exploit well capture subtle functional among closely relate end section characterize exploit diversity second trace traffic national laboratory trace examine diversity different vantage point use cluster methodology across trace time result show methodology also able identify prevalent exploit trace exploit target three different name resolution worm exploit name resolution vulnerability security bulletin launch particularly virulent infect ninety vulnerable host within ten result congestion probe infect machine cause disruption global scale fifteen despite small population vulnerable host roughly infect host initial outbreak continue propagate wild day instance zero one one table one exploit frequency per vulnerability table one show exploit frequency per resolution vulnerability observe two apparent exploit exact one outlier examine outlier detail suspect likely corrupt network capture trace outlier identical except last whereas trail exploit contain valid executable code tail outlier contain one unidentified possibly protocol header follow two header contain source address send host destination address different geographic region three header destine port resolution port four first exploit give trail appear tail one packet overwrite head another packet portion two trail believe outlier result incorrect reassembly local capture machine corrupt outlier conclude one exploit residential trace therefore exploit diversity local security authority subsystem service validate user original worm release exploit buffer vulnerability spread disrupt bank news military government globally eight indeed damage make trial conviction author media spectacle one exploit persist day regular element program repertoire mostly incorporate exploit accord trend micro e c n e r r c c fifty zero zero ten twenty thirty forty fifty sixty vulnerable buffer figure three exploit frequency per vulnerability residential trace distinct exploit total number distinct capture distinct exploit attempt residential trace show figure three exploit attempt skew across handful responsible large number long tail distribution different exploit clearly abundant diversity extent vary nature variation answer question analyze exploit accord methodology describe section three cluster exploit first evaluation distance metrics result cluster figure show visualize cluster metric section position represent one unique figure three although order prevalence show relative edit distance horizontal line segment graph value indicate two cluster distance merge one cluster merge cluster use complete linkage distance discuss section three vertical line segment extend downward horizontal segment root two represent two example figure join together horizontal segment value zero construct hierarchy cluster contain exploit another contain exploit merge cluster distance zero indicate execute instruction sample within cluster identical extreme show maximum distance two exploit sample sample contain root segment comparison figure show result use two metrics one edit distance decode without distinguish code data two metric base al control flow graph fingerprint technique describe section experience edit distance data string random pad embed within create substantial noise result metric could capture among exploit due fundamental code hand find metric base basic block general summarize basic block simply presence certain ignore subtle consequently metric cluster functionally distinct exploit identical show three four group together figure find distance provide useful balance two approach general enough ignore due detail enough capture subtle functional thus use distance primary mean compare exploit cluster throughout study construct cluster merge occur small distance ten use ten threshold define among exploit threshold find five exploit vulnerability visualize process every vertical line segment intersect horizontal line figure value ten define exploit family accord cluster represent tree root vertical line number cluster leave right henceforth refer five manual analysis validate cluster result manually examine decode every every family examination conclude suggest indeed five separate code base however three four sufficient similarity among suggest cluster figure four conclude branch code base summarize interfamily analysis evolution diagram figure five family exhibit small amount variation among within family correspond address port encode attempt victim connect specify host victim additional code e c n ninety eighty seventy sixty fifty forty thirty twenty ten zero ten e c n twenty fifteen forty thirty ten five zero five zero l one l two l three l four l two l three l four l zero l one l four three two l zero l one l zero ten twenty thirty forty fifty zero ten twenty thirty forty fifty zero ten twenty thirty forty fifty b edit c structural figure four exploit use edit distance execute code b edit distance decode c structural distance execute code e c n eighty sixty forty twenty zero twenty however contain identifier string precede decode routine although contain attack machine port number pad differ particular take follow form port character pad identifier length fix value exploit contrast exploit append string contain h forty thirty twenty fifteen ten five zero common ancestor figure five evolution diagram file typical distinction two term refer connect victim immediate parent infection chain refer connect central location next give detail characterization family provide intuition structure convey substance variation within among provide distance metric differentiate subtle functional among straightforward function name form miniature data section end main body exploit follow immediately decode loop main body data section one time consist main body follow encode data section encode scheme also key find embed string like decode data section search string suggest belong previously share encode scheme roughly flow execution whenever read encode decode loop read next b write b decode otherwise three dedicate function block end library load function find portion code decode loop series call function block minor among contain string variation middle search string suggest belong various commercial security firm zero one three four two family figure six distribution host family exploit vulnerability cluster use similarity threshold ten host belong represent label one three graph prevalence exploit finally complete analysis discussion exploit prevalence family granularity oppose granularity figure three figure six show relative prevalence exploit family express distribution host contribute exploit family exploit family tally number host attempt exploit vulnerability host make exploit attempt use one distinct set host string could reference group last stage delirium famous discover vulnerability one zero two three five four zero ten twenty thirty forty fifty sixty seventy eighty ninety vulnerable buffer zero ten twenty thirty forty fifty sixty seventy eighty ninety figure eight exploit use distance e c n h ninety eighty seventy sixty fifty forty thirty twenty ten zero ten forty thirty twenty fifteen ten five zero e c n e r r c c fifty zero figure seven exploit frequency per vulnerability ninety distinct exploit total long tail nearly eighty exploit appear contribute family disjoint host use exploit follow eighteen host summary exploit capture phylogeny within phylogeny attribute source variation differ address moreover technique use distance section make manual analysis much easier cluster result appropriate moreover distance metric strong predictor type similarity would find among exploit remote procedure call service fundamental service exploit one spread worm august blaster worm infect within first propagation responsible infect anywhere half million eight million host several thereafter twelve blaster originally exploit vulnerability cover section later exploit vulnerability interface since exploit also become mainstay exploit arsenal number distinct capture ninety distinct exploit attempt residential trace show figure seven exploit attempt also skew across ten responsible observe exploit however long tail almost eighty distinct appear raise question whether result polymorphism trivial vulnerability perform cluster exploit determine extent nature variation construct figure eight show cluster decode use distance metric cluster merge happen distance ten use distance value threshold define among exploit result six exploit vulnerability low initial threshold large gap cluster merge distance ten indicate exploit within family similar zero one two three four five family figure nine distribution host family cluster use distance threshold ten host belong represent label two three graph bind exploit differ substantially exploit manual analysis manual analysis confirm cluster show reflect six different code base among summarize figure ten within family though code polymorphism exploit among exploit due data encode address well name discuss structure nature within among use nonoverlapping encode whereas exploit examine use variant also decode loop use subtraction set register value respect organization code main body consist series call load function block block present end common ancestor bind figure ten relationship relatively simple decode loop length flow execution complicate among exploit data section contain function name middle several function block append flow execution start decode loop invoke many call function block execution approach data section however jump past data section function block another set perform function call moderate distance within family nine due differ decode routine offset exploit otherwise identical difference decode give us confidence robustness cluster algorithm particular cluster threshold different threshold split family two would also reasonable could choose lower cluster threshold five split two small new smaller threshold would large impact result though within minor compare exploit characteristic execution flow perform standard load memory address function find also perform consecutive jump two text section obtain data offset exploit execute remain code thereafter first data section contain string address get executable name second data section simply contain executable name variation address take value zero executable name account average distance among sample family relatively low ten distance suggest would similar many respect manual analysis reveal share decode loop use key loop although aware responsible use miniature data section contain function name near end however use shorter exploit length shorter longer main body basic block within main body similar except block reorder register rename instruction substitution interestingly number loop overshoot exploit past end data section thus seem reasonable hypothesize either refinement poor imitation closer look reveal three exploit contain follow string order near end end string differ last contain connect contain bind listen accept result p l c n forty thirty twenty fifteen ten five zero believe two derive code base except require host connect back infect host require host bind socket wait connection attempt infect host typically execute newly infect host reside within execute bind infector reside within indeed investigation reveal five average edit distance four exactly correspond integer form support version bind prevalence exploit figure nine show distribution host exploit belong differ functionality similar prevalence hypothesize could belong able traverse use combination bind summary exploit form another phylogeny methodology allow us capture subtle distinction bind specifically moderate distance bind provide strong hint two relate hypothesis confirm manually discuss begin section original vulnerability blaster exploit also target zero five ten fifteen twenty thirty host figure eleven exploit diversity per send host vulnerability exploit unique exploit frequency capture distinct exploit vulnerability exploit represent opposite end spectrum vulnerability exploit attempt use unique figure eleven show distribution exploit attempt therefore distinct among remote host try exploit vulnerability moreover unlike exploit analyze exploit exhibit high amount exploit diversity per host construct figure twelve show result cluster use distance metric compare distance among small judge cluster merge occur distance one use threshold result two although thirteen interfamily distance indicate closely relate manual analysis manually inspect exploit reveal last third roughly contain randomly generate character select letter except several fix character embed within random text also small two main body well random character account variation within family e c n five four three two one zero zero c e r one c e r zero fifty figure twelve exploit use distance set maximum distance one yield two thorough inspection lead us conclude two similar type exploit trace figure thirteen show evolution diagram reflect find common ancestor bind figure thirteen relationship one peculiar feature share large sled sprinkle hex string search string lead us module part framework fourteen generate exploit include generate encode random filler character although directly attribute exploit generation help provide insight construction use author hex string return address redirect control flow exploit addition module invoke function text fill last portion exploit random character ascii letter observe exploit importantly however fix character place within random text observe exploit exactly match jump command return address furthermore terminate four character null null however could directly attribute exploit observe module smaller distribution random character different could find instance decode within framework encode scheme cover main body exploit different exploit use different key indeed within family average edit distance whereas average edit distance decode show table two manual inspection confirm variable encode exploit main body contribute jump average distance change key along random filler character commonly describe polymorphism exploit feature family zero one zero one host edit decode edit three table two effect random filler interfamily result vulnerability include number host average edit distance average edit distance decode decode main body fell two belong family long ten belong long exploit similar share block place decode routine however code function block perform attempt perform bind hence longer nonetheless exploit form end call load authentication token jump second exploit call thank nepenthes seventeen honeypot contribute analysis summary distance metric able reconstruct phylogeny exploit even presence polymorphism variable encode key random pad character embed within moreover functional primarily contribute distinction bind version version otherwise exploit share degree diversity diversity across final experiment analyze exploit diversity trace different network vantage point use second trace examine relative prevalence vulnerability exploit different point apply exploit cluster methodology across multiple time identify family host exploit send eleven three one edit four one one one four one five zero eleven four nine table three result trace include number host number exploit send constituent express percentage number exploit send average edit distance decode disjoint exploit trace trace run national laboratory start nineteen host serve active incoming request range address five trace network traffic identify capture exploit run trace shield eighty sixty zero l b l forty e c n one l b l twenty zero twenty five l b l four l b l three l b l two l b l six l b l zero fifty figure fourteen trace exploit use distance set hash mark zero represent represent represent represent construct previous experiment cluster exploit among target individual experiment cluster exploit find trace know shield figure fourteen show result cluster multiple trace previous experiment since cluster merge occur distance threshold ten use value threshold cluster exploit seven form result prevalence exploit manually inspect confirm seven distinct family table three show host prevalence number send exploit distance sort decrease order host prevalence respectively bind suggest relatively low interfamily distance fifteen prevalent family host send strike aspect family exploit three different however exhibit little variation edit distance four within exploit contrast least prevalent family target vulnerability find residential trace section residential trace variation within family relative edit distance due randomly generate character end summary cluster methodology distance metric able cluster exploit across target multiple result effective identify exploit finally compare residential trace find exploit generally target set even use trace prevalent trace exploit five discussion research community engage vigorous debate likely future role network intrusion detection extent exploit polymorphism limit effectiveness previous section document polymorphism within already use investigate whether polymorphism make signature construction difficult generate small set exhaustively cover exploit observe vulnerability residential trace signature contiguous sequence construct signature set use greedy algorithm set cover problem seven individual vulnerability except one signature suffice cover set exploit require two one cover exploit cover rest manual investigation show primarily focus portion mostly entirely test trace internal network false none yield false internal trace experiment generate trace suggest polymorphism effective evasion two alternative hypotheses motivation polymorphism observe perhaps author use polymorphism evade construct perhaps realize polymorphism ineffective signature construction still effective compromise sufficient number host yet another hypothesis today polymorphism unrelated evade variation clearly due functional variation bind variation due decode variable key might simply motivate increase difficulty reverse engineer trace definitively ascribe intent polymorphism observe exploit suspect likely combination reason improve understand actual polymorphism well use polymorphism change time remain interest open six conclusion present methodology construct phylogeny remote code injection exploit evaluate methodology network trace take several vantage point find methodology robust polymorphism observable trace use methodology find code share subtle variation within exploit use bind versus traverse polymorphism exploit diversity topic discussion within research literature document use polymorphism exploit currently loose broadly analyze emergence polymorphism phylogeny remote code injection exploit part effort better understand social technical dynamics around creation believe methodology result promise contribution understand would like thank access trace insightful help obtain trace internal network feedback paper also would like thank anonymous helpful comment work support grant center network seven reference one news creator avoid jail term l p vigilante containment worm proceed symposium operate system three j r crandall tool capture analyze novel worm unknown proceed workshop rapid worm four j r crandall z f f derive unknown polymorphic metamorphic worm exploit proceed conference computer security five r roll comparison executable object symposium sur la de l information june six h flake structural comparison executable object proceed conference detection vulnerability assessment seven approximation publish company boston eight g worm impact around world may nine ha kim b autograph toward distribute worm signature detection proceed security symposium san ca august ten c j honeycomb create intrusion detection use proceed workshop hot network eleven c e w g polymorphic worm detection use structural information proceed symposium recent advance intrusion detection raid wa sept twelve r epidemic far believe thirteen r r muth h g v j k hazelwood pin build program analysis tool dynamic instrumentation program language design implementation june fourteen project framework fifteen v savage c n weaver inside worm security privacy one four sixteen c g savage network telescope technical report seventeen nepenthes development team generic eighteen j song dynamic taint analysis automatic detection analysis signature generation exploit commodity proceed annual network distribute system security symposium five san ca analysis algorithm proceed advance neural information process twenty r pang v p v l background radiation proceed measurement conference p royal w lee extraction pack singh c g savage worm fingerprint proceed symposium operate system design implementation san ca recent recon june e defeat polymorphism beyond emulation two costa j l nineteen jordan spectral cluster proceed virus bulletin international conference p art computer virus research defense trend micro virus encyclopedia h wang c shield network filter prevent know vulnerability exploit proceed conference sept