analysis advance institute science advance institute science computer science technology computer science technology abstract widely use web complexity program increase last year therefore need program analysis evident analysis determine set object reference variable object property may point analysis basis program analyse wide range code optimization engineer tool however analysis yet develop dynamic feature modification object addition update propose analysis precisely handle dynamic feature work first attempt analyze behavior evaluate analysis set program also apply analysis code optimization technique show analysis practically useful subject program language application mean program semantics program analysis general term design experimentation analysis pointer analysis program anal work support engineer research center excellence program ministry education science technology science engineer foundation grant number permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee sac nine march copyright script language one introduction script language design web script standardize version six attract program become lengthy complex almost web support help dom eleven seven sophisticate program use popular web sit days web sit use implement important application logic rather simple user problem program slow execution speed program usually execute many dynamic feature must check speed program affect people perception responsiveness popular performance improvement use code optimization important method make proper choice build high quality statement execute many machine little change source code bring much improvement performance code optimization statically apply use source level transformation also adopt code optimization generate faster target code even utilize code optimization analysis essential code optimization yet develop analysis determine set object reference variable object property may point analysis enable essential analyse code optimization analysis defuse analysis paper present evaluate analysis first step program analyse analysis base analysis c two section two discuss motivate example research define restrict language briefly describe behavior section three present flow one analysis restrict language section four section five evaluate analysis set program also evaluate impact analysis special case analysis take account analysis distinguish different function prompt new object ax new object ay new object new object b ax b one one two three four one two three four one b figure one example program graph top program code bottom leave conventional graph bottom right graph consider nation one program section six discuss relate work finally section seven present future work two motivation sense object associative data structure allow dynamically associate arbitrary data value arbitrary string object access array element feature represent syntax example expression equivalent object property figure one program show behavior get string library function create new object name object allocation site program assign nonexisting property name x reference exist property create fly value assign newly create property similar property assign property whose name give expression via operator expression may evaluate x nonexisting property name object property access operator actual property name may statically unknown conventional analyse base analysis two treat array aggregate naively adapt conventional analyse object also treat aggregate object array index string practice object use complex hierarchical data structure dom eleven therefore result conventional analyse would inaccurate program figure one algorithm compute graph bottom leave graph aggregate consequently set b object call object maintain information property increase precision analysis obtain graph bottom right figure one graph maintain name property object example use represent property x object add property via operator use aggregate way analysis object property update via operator may know property object actually update name change property may statically determine exist property object may update new property may create object may evaluate x point graph program node case evaluate property name statically determine graph set b accurate conventional approach analysis increase accuracy distinguish property separately consider dynamic feature three presentation brevity define restrict language part base work sixteen modify ways add operation unique global object expose weakly dynamically type language class support share functionality code provide modification object addition update object like associative array data structure allow dynamically associate arbitrary data value arbitrary string property name function behave function function object assign property object function act method reference property object call function call method object reference bind object function body otherwise reference resolve unique global object function use constructor invoke new operator new operator create new object call constructor bind new object function body unique global object whenever variable declare global scope value assign undeclared variable variable become property global object abstract syntax figure two comprise follow language construct function call method object reference object receive method call function body otherwise reference global object object literal create new object function f create new function object formal e self reference method call variable primitive data value object literal x c function x x function expression ex e e new e e e e e e p e property reference property reference object creation function call assignment primitive add skip x e e else conditional e return e operation variable declaration expression statement sequence iteration function return figure two syntax body body refer enclose function f f invalid outside function ex property reference operator expression e evaluate object x property name expression appear leave side assignment expression property x object property create property reference operator expression evaluate object evaluate string use property name object evaluate string x mean entire expression equivalent new object creation expression evaluate function object function call actual function body resolve newly create object object creation expression function return object entire expression evaluate new object otherwise entire expression evaluate return value function function call evaluate function object function call actual function call method object form bind object evaluate function body otherwise bind global object p primitive arithmetic logical primitive return primitive data value three x variable declaration variable declare global scope value assign undeclared variable variable become property logical logical may return object global object presentation brevity feature restrict assume syntactically different global variable declare use program allow implicit conversion primitive data value object property deletion meaningless analysis include analysis restrict feature easily add analysis trivial modification four analysis section present flow analysis develop analysis base framework eight analysis precisely model dynamic feature modification object addition update analysis maintain information property object increase precision analysis present set analysis section describe system design form constraint generation rule analysis construct set input program use generation rule section next use set rule solve analysis compute least solution model section set set constraint form se set variable se set expression set constraint se read expression e evaluate object set object set include se write c finite collection set syntax semantics set figure three formal semantics set define interpretation map set set value v al definition set impose meet interpretation expression undefined call interpretation model solution conjunction c constraint x se set variable x set expression se se define x se write c least model c semantics set naturally follow correspond language construct set variable object e evaluate e property reference ie e execute bind value call function body function reference e call use pass object receive method call function body set variable object assign object property x via operator variable l refer object statement r let contain dot set variable object assign property object via operator variable l refer object statement r let dot contain regardless property syntax set e l object allocation site object name x se expression dot return w x x w x call identifier set variable expression set variable bind function call set variable property x object set variable assign set variable assign set variable body function set variable return value function set expression primitive data value set expression object name set expression property write set expression property write set expression property read set expression property read set expression function call semantics set v al w x x w x call v v return l object allocation site v al v al provide imply dot provide imply v v v v dot provide function imply figure three set set variable object assign property object via operator variable l refer object statement l r let contain regardless value set variable object point function object return set variable object function object return set expression represent primitive data value number string null mean singleton set contain object name create object allocation site l l uniquely determine location program code mean singleton set contain w x x set expression represent semantics expression set expression impose collect value dot w set expression represent semantics expression e two set expression impose restriction collect value x set expression object expression ex evaluate set expression mean set union case property x set operator set expression object expression e evaluate set expression mean set union dot e evaluate object e might evaluate property therefore consider call set expression function call expression en first parameter call function object call second parameter object receive method call function call method actual function function map object name expression create object use obtain function signature set expression impose bind actual function solution analysis define least model conjunction conjunction program guarantee existence least solution every operator monotonic term constraint single variable eight c zero n p en l enclose function object function l x write w w x x x zero n new en l new call call zero n en call enclose function return return return x x declaration figure four constraint generation rule w x x dot w x dot call function return one n figure five constraint solve rule constraint generation every program expression analysis generate set represent semantics expression figure four show constraint generation rule analysis every program expression e constraint se set variable set expression e generation rule subscript e denote current expression rule apply analysis also generate set represent semantics global variable function return describe figure four analysis simply collect contain relation e c read c generate expression e global object represent create new object label l object allocation site label use object name create rule generate contain compound set w w mean explain section resolve simpler constraint solve section expression e evaluate function rule generate constraint form se function call e find use pass object receive method call function body generate expression property reference bind global object function call method correctness ie least model generate program include actual value assume operational semantics define base operational semantics sixteen semantics use intermediate form prove system correct outline nine primitive primitive always return primitive data value straightforward new object label object allocation site l simple function object reference function body write deal expression assign value reference variable two generate expression first describe expression value right side second describe expression assign value right side variable concern expression assign value object property operator rule generate follow expression one assignment expression value two object evaluate property x object value expression assign value object property operator generate describe follow one assignment expression value two object evaluate unknown property object value moreover property object update concern property reference operator rule generate two expression first constraint describe expression value property x object describe second constraint bind reference function reference expression call function reference object property call bind object function body set variable use bind property reference operator rule generate two expression first constraint describe expression value property object describe second constraint one function expression function expression label l evaluate newly create function object call function call expression rule generate constraint contain set expression call mean constraint describe section new object creation expression new object create bind new object body function use constructor function return object value expression evaluate new object otherwise expression evaluate return value function describe return rule return statement variable declare global variable declaration global scope become property global object x property x global object constraint solve section present constraint solve rule constraint set contain compound set resolve simpler use rule section figure five show constraint solve rule intuitively rule propagate value along possible data flow program first two rule simply propagate value rule w introduce property x dot collect object set operator rule w collect object set operator rule introduce property x value explicitly set opera tor add rule property x implicitly set operator object consist define operator dot operator rule collect object operator may return value property object rule call add new represent parameter bind use obtain function signature information simultaneously collect constraint generation phase section solution compute conventional iterative method solution space finite object name give object allocation sit correctness proof do induction function derive four constraint five experimental result implement prototype analyzer use interpreter rhino fifteen parse program experiment conduct four machine physical memory use fourteen one popular program implement pure without use dom script browser table one show program column object creation sit report number create new object exclude program heavily depend particular like program one object creation statement show behavior also exclude program script scope analysis time object formation third column table one show analysis time analysis report time median value five run program analysis run less result show analysis do even small important program measure object information estimate preciseness analysis consider indirect access form e program expression set contain object may read write expression object information perform better smaller set similar metrics use analysis c ten twelve perform estimate impact analysis experimental result summarize table one column object indirect access average number access object indirect access program less two ten thirteen program result show analysis precisely model behavior program solution effectively use analysis call graph construction eliminate redundant property refer program line object analysis creation sit cube morph aes five ten eight nine fifteen fourteen thirteen time object indirect access one one one one table one program analysis time analysis average number access object indirect access property reference basic language construct program property reference frequently use operation syntactically similar property reference commonly find therefore redundant property reference good target elimination one partial redundancy elimination analysis essential detect whether property reference evaluate value different point program figure six show example eliminate redundant property reference leave program property reference ax use value ax change optimize program store value property temporary variable use value instead ax value ax change one follow case one assignment expression e ax e execute two property x alias update e execute three function call describe case two base fact b alias f change property x parameter original program transform program figure six right transform program use propose technique without solution analysis transformation do source code level transformation without information do suggest two function call affect value property reference find redundant property reference nine thirteen program execution time program measure twenty report time average fifty run table two show experimental result ae show number property reference number assignment program respectively number assignment report transformation technique introduce new assignment expression program column time execution time use signify pro function f p zero b c ax ax five f ax nine function f p zero b c ax ax five f nine example eliminate redundant figure six property reference leave original program right program transform eliminate redundant property reference program original transform without transform ae time ae time ae time twelve thirty fourteen sixteen sixty twelve eleven twelve eleven cube aes table two original program program transform eliminate redundant property reference number property reference ae number assignment gram transform transformation technique program number assignment increase without decrease number property reference eliminate loop invariant property reference transformation technique simply try eliminate redundant property reference even property reference use twice however simple method could make performance worse introduce temporary may cost eliminate property reference example performance become worse case transform cube program without information transformation performance improvement redundant property reference selectively eliminate consider introduce assignment eliminate property reference various transformation technique information eliminate redundant property reference improve performance program better technique without information result show analysis useful practical application analysis six relate work program analysis c may start point program analysis various analyse c different cost precision relatively precise efficient analysis analysis c two analysis precise work thirteen das five even though addition analysis start point analyse therefore approach reasonable basis analysis language work clearly relate analysis analysis twelve also base analysis twelve annotate use track object separately approach directly adapt modification object potential impact approach extensively measure use object information call graph construction synchronization removal stack allocation twelve type sixteen three focus help maintain program consider modification object sixteen specify formal semantics type system type system model automatic type detect access property null object type also use execute program faster execute program take much time type check static type system interpreter execute program faster avoid type check statically type check seven future work present analysis base analysis c two implement analysis use approach conventional analyse treat array aggregate however conventional approach would inaccurate object also associative array distinguish different object analysis carefully deal object depend whether object use array evaluate analysis program also apply analysis optimize program eliminate redundant property reference result demonstrate analysis practically useful future work want evaluate impact analysis set extensive program would need model behavior complicate hierarchical object structure dom object use practical program would also like develop various client analyse analysis evaluate effectiveness analysis especially would like develop general code optimization evaluate impact practical program eight grateful peter share valuable work nine reference one aho lam r j tool publish boston two l program analysis specialization c program language thesis university three c p towards type inference conference program page four p r compositional inductive semantic equational constraint form lecture note computer science five das pointer analysis directional proceed conference program language design implementation page six international language specification edition seven j new approach web eight n set base program analysis thesis mellon university nine n analysis program lisp seven three ten hind pointer analysis use engineer note five eleven p l wood g j champion document object model dom level three core specification recommendation twelve b ryder analysis use annotate proceed conference object orient program page thirteen b analysis almost linear time proceed symposium program page fourteen open source project fifteen organization rhino sixteen p towards type system analyze program symposium program page