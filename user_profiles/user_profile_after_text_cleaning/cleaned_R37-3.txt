operate provide e porter university abstract current operate provide insufficient interface express consistency access system file communication ensure consistency must able access system atomically isolation system although os update system atomically isolation process within single system call critical integrity application condense single system call operate support transactional execution system call provide simple comprehensive mechanism atomic isolate access system preliminary result prototype implementation indicate overhead system acceptably low one introduction operate manage user provide mechanism group logically consistent update consistency application data undermine system concurrency consistency guarantee allow critical occur atomically ie occur isolation rest system ie partial result series visible observe concurrent data consistency exist different layer stack instance lock use mutual exclusion provide consistency data structure provide consistent update secondary storage unfortunately system call lag behind provide support consistent update os execute single system call atomically isolation difficult impossible extend guarantee operation complex fit single system call paper propose add system system call system transaction execute series system call isolation rest system atomically publish effect rest system system provide simple powerful way express consistency concurrent os application know data consistent state yet system critical ensure consistent update file system outside user control simple case serialize use single system call use rename atomically replace content file unfortunately complex installation upgrade condense single system call incomplete install leave system unusable state execute entire install atomically isolation would powerful tool system administrator operate system provide combination system express presence concurrency must ensure consistency isolate series important data interference task concurrency control expose user file lock clumsy difficult program moreover often insufficient protect series system call interference run system especially malicious figure one show example application want make single consistent update file system check access file conditionally write pattern common program unfortunately application express system need access open system call see consistent view inability application consistently view update system result serious security example figure one illustrate race condition major persistent security problem modern operate attack attacker change file system use symbolic link victim access control check actual use perhaps trick program overwrite sensitive system file like password race also arise temporary file creation access system conceptually simple attack present much deploy difficult eliminate time write search national vulnerability one victim attacker access foo foo write secret foo victim attacker secret foo access foo foo write secret foo figure one example attack follow example eliminate race system attacker serialize order either transaction attacker see partial update victim transaction change term attack yield hit three practice lack concurrency control system call address ad manner add new semantically heavy system call new problem arise address race encourage traverse directory tree user space rather kernel use recently introduce family system call similarly kernel recently add new flag fifteen system call eliminate race condition call open six individual file introduce new file system support atomic append seven add transaction support eleven rather require lobby os new system call allow solve compose series simple system call atomic isolate unit position paper advocate add system system call provide user simple powerful mechanism express consistency system relative success parallel program compare thread lock strong indicator useful natural abstraction reason consistency wrap series system call transaction continue use secure manner eliminate need many complicate change recently introduce also protect concurrency way reduce code complexity potentially gain performance eliminate lock file allow concurrent file update instead use paper also show system efficient preliminary data prototype implementation kernel two system system provide atomicity consistency isolation durability acid system state application code change require use system enclose relevant code region within appropriate system call place system call within transaction change semantics result publish rest system outside transaction action system visible soon relevant internal kernel lock release within transaction update keep isolate commit atomically publish rest system previous transactional operate locus nineteen quicksilver fifteen historical provide system support implement use implementation namely isolate data structure lock roll back fail undo log one problem lock scheme simple lock capture semantics container object multiple concurrently safely create file directory long none use file name none read directory unfortunately create file historical require write lock entire directory needlessly serialize eliminate concurrency compensate poor performance lock allow directory content change transaction reintroduce possibility race condition system ought eliminate propose design system provide semantics historical help address concurrent program current future multicore hardware implementation sketch key goal system transaction implementation provide strong atomicity isolation guarantee retain good performance section outline prototype achieve detail design prototype available technical report twelve implement custom transactional memory system rollback two many kernel data structure include object represent file system process address space isolate update kernel data structure adopt lazy version management eight operate private copy data structure unlike traditional approach use lock lazy good match os kernel lock hold return application transactional system call lazy also allow process quickly abort lower priority process thread need wait transactional victim walk undo log leverage exist os buffer isolate data read write transaction application write data file device update generally go os buffer first allow os optimize device access make buffer isolate transactional data access commit buffer update memory limit size restrict transactional model instance application write message network buffer commit application expect response message within transaction future work could examine use secondary storage help buffer change extend network paper argue expressive system call framework serve interface future fairness schedule transactional thread fairly historical transactional operate protect interference system call thread use lock discipline annotate access object thread transactional access object first time must check conflict annotation arbitrate conflict many case check perform time thread acquire lock object detect conflict critical section begin safely suspend conflict thread abort transaction give substantial latitude ensure fairness prevent starvation task whether transactional durability system state remain consistent across crash update commit must must reside stable storage durability relevant system like file nonvolatile storage provide durability often slow performance increase latency stable storage option relax need instance eliminate race describe require durable update design specific file system responsible write intermediate transaction result disk atomically write group update commit atomic write could implement semantics transactional file system eleven twenty conflict detection object occur common code share file implementation durability thoroughly study previous work paper focus system system state system provide atomicity isolation system state oppose application state system state include os data structure device state whereas application state store application data structure within address space use system application must able restore pretransaction state system transaction abort application state manage several ways application state might need explicit management example os automatically restore application address space speculator ten application implement recovery mechanism perhaps use hardware transactional memory relate work system support solve fundamentally different problem solve fourteen kernel use hardware transactional memory synchronization technique within kernel whereas provide part os currently available hardware use build support short critical enforce consistency access memory insufficient implement must guarantee consistency across heterogeneous system must support arbitrarily large speculator ten apply isolation rollback mechanism operate system similar mechanism allow system speculate past remote file system provide transactional semantics complicate endeavor must isolate whereas speculator share speculative result attack occur speculator attacker victim would part speculation attack would successful speculator extend task include system configuration seventeen provide interface delimit speculation thus insufficient like atomic installation three three system section examine several class open cleanly address group system call within isolation concurrent performance provide simple isolation primitive system expose new enhance concurrent performance computer instance system administrator perform major distribution upgrade apt system typically upgrade thousand package require hour time many case package update disjoint file without order thus safe install concurrently package concurrently safely apt perform install sequentially design harm common case performance easily guarantee correctness worst case similarly simple web often use relatively heavyweight management provide concurrency control small amount application data lead higher well management complexity security risk come although perform important role provide sophisticate query optimize access large data set system provide lightweight solution modest query system allow application group multiple write file shield see file inconsistent state update power many web need system also allow new ways express enhance usability consider user music file must convert format support player producer easily fit pipeline program attempt overlap conversion create irritate partially convert file producer consumer run designate producer consumer pair system could consumer serialize producer wait producer necessary al describe safety condition sort transaction call thirteen improve usability provide simple way data communicate pip eliminate race security race condition threaten security change system state check modification although race commonly present context file system name pace also occur os file system demonstrate race signal use crack include screen race new allow application disable signal manner similar os disable interrupt critical provide simpler alternative serialize signal delivery system local use vulnerable similar race creation connection suffer socket race exploit allow user steal another one plash system similar exploit two prevent socket race system transaction must allow multiple process participate transaction race condition single file system address transactional file system eleven valor sixteen transactional file system address race condition system network signal transactional file also address race involve file race creation temporary file privilege program provide common attack vector five many use file system temporary file creation protect even root file system transactional propose implement system primarily layer allow os isolate series span multiple transactional file transactional memory exception transactional memory use synchronize thread open problem transactional memory support system call within transaction system call effect difficult undo transaction must number approach problem leverage logical undo complement system call include open nest nine escape action eighteen two support system call transactional memory first system call may side effect difficult detect rollback may remove last link file delete second isolate update system thread application use lock order appropriate tool affect system state installer must isolate partial update process system system provide also violate expose effect rest system immediately four bench small large create read delete write read write read twelve one four seven ten twelve thirteen fourteen twelve eight two two twenty figure two execution time second slowdown relative small operate file length large read write file comprehensive solution update system access internal os data structure isolate side effect system call similarly system leverage os schedule synchronization ensure isolation four transaction overhead evaluate feasibility system evaluate prototype derive experiment perform four core processor run four ram figure two show performance run one second overhead system twenty large phase repeatedly write file transaction efficient transaction commit group write present io improve disk arm schedule outperform much factor five implementation complexity system add roughly line code kernel require line minor change kernel code replace pointer wrapper function detect conflict although add system increase implementation complexity operate system overall system code complexity reduce many eliminate ad code currently need approximate atomic access system scale performance current increase core count require substantial implementation effort concurrent program difficult require pervasive change research previous decade instance four address number scale redesign os data structure user substantial engineer effort require implement system help write performance scalable program give tool write concurrent multicore era value useful abstraction justify challenge implementation five summary add efficient system call provide natural way synchronize access system problem currently solve ad manner paper argue system elegantly solve number important range system security performance six author thank mike anonymous helpful comment reference one two three national vulnerability four h r mao f r morris l stein z operate system many core five h dean model check one million line c code six secure file handle seven h st file eight j r transactional memory morgan clay pool nine j j k e l yen hill b swift wood support nest transactional memory ten e b nightingale p j speculative execution distribute file system eleven j enhance file system magazine twelve e porter c j benn e operate technical report ut thirteen h e e commit conflict fourteen c porter h bhandari e use manage transactional memory operate system fifteen f j experience quick silver sixteen r e c p wright enable transactional file access via lightweight kernel fast seventeen j improve management operate system causality analysis eighteen h j tack n swift safe io memory nineteen j j w page b k g j synchronization distribute operate system twenty c p wright r g e extend acid semantics file system storage three two four deliver signal fun profit c l extend hardware transactional ory support wait action transact five