report page render view fu san win san san san abstract program enable faster performance higher interface quality pure program demand error prone action partially update page require custom code problem exacerbate distribute program browser server developer use access page state forward framework simplify development page treat render view developer declare view use extension page map view render data browser declarative approach lead significantly less code framework automatically solve performance optimization developer would otherwise since page fuel view forward leverage research incremental view maintenance create optimization appropriately extend need page nest variability order thereby achieve performance comparable subject information management general term view maintenance support research award permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee ten june copyright one introduction web application page become popular suggest requirement professional level web twenty web application page cornerstone since enable performance interface quality equivalent asynchronous conglomerate program highly interactive web application page program model produce web application page differ prior pure model web ten era page produce entirety server side section eleven discuss advantage offer pure model also serious program challenge introduce forward framework simplify program application page treat render view whose data declare developer use syntactically minor extension render deliver page responsible data visualization interaction user map view either use use unit visual configuration put together page view fee data paper key contribution introduction declarative program development report part page draw parallel declarative query simplify data management last thirty similar productivity benefit deliver use declarative query development page case past productivity benefit declarative approach due framework automatically solve performance optimization provide common would otherwise need developer particular forward leverage research incremental view maintenance extend need page summarize list section thirteen net effect forward relieve page developer write mundane data synchronization code order reflect effect action page forward available forward eleven background pure user action page lead request server server update state compute new page send client ie browser sufficient level abstraction new page computation function input server state include request data main memory state application primarily session data relevant information external credit card process system output unfortunately user experience pure interrupt browser block synchronously blank ie display blank window wait new page even common case new page almost identical old page browser state data form cursor scroll bar position lose user spend time anchor attention focus new render page page rely code include extensive use library map calendar user action lead browser run event handle function collect data page form relevant action send asynchronous request response handler function specify browser blank keep show old page request process even allow additional user action consequent request issue later response handler receive server response use partially update page state page state primarily consist one page dom document object model object capture display state form text box radio button two state page often part third party map calendar typically encapsulate state export function programmatically use read write advantage page application feel quick responsiveness due three advantage pure server model one partial update speed request process response focus relatively need produce partial update page contrast pure server model whole page must since today often fuel multiple query user page fuel query partial update strategy dramatically decrease response time example consider proposal review application page show figure one see review submit revise pure model submit review proposal also pure make simple use purpose without contact server example application use submission form upon click enter key still qualify pure application purpose require entire page include query review average grade page however developer typically optimize asynchronous request issue input review server issue query order find id newly insert review average grade correspond proposal upon receive response response handler update page dom reflect small change two action browser example reviewer submit review continue review move cursor scroll bar next proposal even response handle function update page behavior major improvement fifteen server side request follow loss page cursor position continuous action enable two factor first asynchronous nature request prevent blank common case response handler leave page unaffected user keep work uninterrupted page furthermore browser synchronous block reduce amount time need response handle function update page response receive update state browser reflow ie redraw modify part dom conjunction partial update minimize update page consequent lead typically negligible wait period three third party provide comprehensive map calendar produce large save development time due code reuse component enable polish consistent user experience across different web also mitigate advantage lead novel feature many practically impossible previously capture quickly respond action user page challenge program page complex time consume many reason indeed advantage list lead correspond program challenge one realize benefit partial update require developer program custom logic action partially update page pure implementation programmer need write one code produce report two code effect individual action application however action also require three code retrieve subset data need refresh four code refresh subregion page run example three four require submit new review revise exist review remove review obviously laborious developer need correctly assess data flow page run example submit review page figure one developer issue query average grade review page display inconsistent data another review concurrently insert two programmer code code develop page require distribute program browser server involve multiple data model furthermore widely criticize see error prone lack strong type conventional program language feature advantage use purpose liability nowadays thank request integral part process application implement three developer page pure application need understand since browser automatically parse turn dom developer page need understand dom order update display also understand component order first write code initialize write code refresh state base nature update twelve framework language forward facilitate development page treat render view page consist page data tree capture data page state logical level visual layer page unit tree map page data tree render data page typically include also page data tree populate data statement call page query minimally extend select clause nest b variability case create nest heterogeneous table programmer easily map page unit tree user request context unit lead invocation program update server state paper focus report part page assume server state capture state therefore server state update fully capture respective update table express conceptually update indirectly lead new page data tree result page query new server state consequently new render page forward make follow towards rapid declarative program page minimal extension use create page data tree page unit tree render page data tree combination enable developer avoid multiple language program order implement page instead developer declaratively describe report data render page choose much programmer audience base b smaller feature set omit create challenge efficient query process view maintenance appear necessary problem c exist research technology provide great leverage implementation optimization see section thirteen enable focus truly novel research issue without already solve server functionality experience create commercial level prior academic work area see section five indicate application interface external expressive power typically sufficient briefly describe future work section six issue arise external forward developer avoid hassle program partial update instead specify unit state use page data tree declarative function express extension state example map unit wrapper around map component use specify point show map without bother specify point new update component offer present framework section two run example section present data framework section present visual layer thirteen system optimization naive implementation forward simple program model would exhibit cripple performance interface quality pure instead forward achieve performance interface quality page solve performance optimization would otherwise need developer particular instead literally create new page data tree unit tree page scratch step forward compute use prior since page data tree typically fuel extend query forward leverage prior research incremental view maintenance essentially treat page data tree view extend prior work incremental view maintenance capture nest b variability output c order neglect prior work focus homogeneous set forward provide architecture enable use massive component thirty page forward framework basic data tree incremental maintenance algorithm modify account fact component may offer implement possible data tree change rather approach enable wrap data tree change component method call net effect forward accomplish acceptable performance penalty handcraft program data point revise exist review page take forward compare favorably wan network latency average human reaction time figure one review page section three present maintain page section highlight incremental view maintenance page data tree section present architecture refresh visual layer lastly section four present system implementation experimental result two forward framework run example run example simplify version web application national science foundation use submission review among principal program first pi visit submit proposal page submit project description budget estimate personnel proposal submission deadline invite panel collaborate review page figure one reviewer see title assign click access proposal detail proposal reviewer submit revise review comprise textual comment grade range one five addition reviewer see review bar chart visualize respective grade average grade finally program director use recommend page peruse review provide indicate recommend fund architecture figure two show overview architecture forward framework forward page describe unit tree correspond page schema unit tree synchronize page data tree conform page schema browser page state include state dom user interact page happen trigger either direct user action click button lead invocation program update server state program access one context form program invocation two original application available three page contain form initialize figure two forward architecture use data program issue command forward server state completely capture state therefore server state update fully capture modification log store command table program invocation page state computation module create data tree new browser page state order support incremental update page respective translate data difference old new page data tree method call well update dom furthermore data difference automatically compute incremental way without page state scratch possible computation page data specify use query call page query result page data tree essentially view base table framework log state base table application employ incremental view maintenance obtain change view incremental page update core focus paper technical issue discuss detail section three data layer page data tree capture page state logical level use minimal extension data model follow feature facilitate map page data unit tree first data tree set list indicate whether order matter grade figure one list review proposal form set second nest nest review within finally allow heterogeneous collection correspond input mode review also carry nest list grade correspond display mode carry comment grade schema data tree capture schema tree query user interest challenge arise around program require unify access user provide data detail unify access beyond scope paper briefly discuss future work section browser dom unit instance state data list list clause produce set query order produce list follow query produce review page data tree one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty thirty title review set fly one comment grade reviewer creative three good grade list one value three switch comment null grade list null one one poor title float review set string string comment string grade reviewer string list grade value switch comment string grade list string comment string grade string figure three page data tree figure four page schema data node also call value map schema node data tree homomorphic schema tree value one follow one atomic value string integer two map attribute name value whereas attribute distinct three collection contain homogeneous ie map schema node furthermore schema node specify primary key constraint collection uniquely identifiable unordered collection set whereas order collection list primary key play key role incremental maintenance page four switch value tag union case value pair one pair select switch value represent select pair switch schema represent schema possible pair five null value example figure three show page data tree represent list review page proposal title atomic string value review nest set review switch value case select note however correspond switch schema figure four contain case indicate reviewer review either display mode input mode extend nest spirit five variability furthermore query without order one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty thirty forty select select review r select order grade value review r select case select input select grade else select review r end select review r p exist select order query operate four table review submit save also operate special collection provide single session attribute line outer query produce list line show produce set review current user conventional p outer query allow nest query select clause query language construct result nest line similar except order clause make result list instead set query feature case else end conditional expression determine reviewer review input display base whether correspond draft review valid extension heterogeneity allow case expression become constructor switch value whenever branch evaluate potentially heterogeneous one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty thirty forty fifty sixty case value pair general various constructor function provide convenience syntax create value data model another example constructor line twenty lastly line use aggregation function calculate average review grade proposal existential line filter assign current user visual layer capture logical structure page include program invocation request may issue furthermore forward enable incorporation thirty forward framework page unit tree comprise instance page correspond unit instance tree comprise unit instance conform unit tree similar data tree conform schema tree unit unit schema homomorphic map unit schema attribute nod page schema tree intuitively unit schema capture export state unit unit map induce map correspond unit instance nod page data tree term unit instance data forward framework provide textual template syntax configure unit tree example figure five show unit tree review page schema tree figure four element unit enclose unit configuration contain one default unit schema attribute two nest unit template also allow thus developer configure visual page single unify syntax bind attribute use map unit schema attribute schema nod example root attribute unit map grade figure four ref attribute map respectively attribute unit associate one program program invoke access one invocation context data node map unit instance program invocation two data form three use data program invocation issue command capture application modification log example button unit figure five line associate click event program program invoke use correspond proposal invocation context grade unit review unit current user session issue insert command review table program invocation page refresh efficient manner detail fully describe section three three incremental page refresh pure often suffer long response time due expensive recomputation data list unit table bind column header title unit print bind title column column header review unit table bind column header comment unit print bind comment column column header grade unit print bind grade column column header reviewer unit print bind column unit table column column header grade unit bind grade column column header review unit switch bind case bind div unit bind grade ref bind bind option bind unit unit bind comment unit button text submit div case case bind div comment unit print bind comment grade unit print bind grade unit button text edit unit button text remove div case unit switch column column header grade unit print bind column unit table figure five unit tree configuration layer visual layer unfriendly user experience due browser solve see section eleven cost significantly complicate web program follow strawman approach employ avoid blank programmer provide query populate report data without provide separate query program incremental new page data tree current implementation build top relational without modification engine framework monitor data modification application maintain modification log expand log capture data change table modification log page data tree store main memory resident table fast access data difference encode series data modification command turn data modification command insert remove update remove command remove locate node identify data tree remove root update command update n replace old root new n insert command set version list version two different type insert r n insert n root target set identify r r n take one parameter adjacent node new insert section list benefit page refresh use example section provide background relational leverage section describe page schema decompose flat view obtain query define flat view section discuss handle order view maintenance process finally section describe maintenance result flat view translate apply nest data tree benefit example drastically reduce number query must run order refresh page detect follow may statically prove certain data tree nod unaffected data therefore data nod need page state case compute function modification log without access proper table since store modification log main memory fast computation achieve avoid disk access furthermore view maintenance literature show greatly increase inclusion small amount additional data view example average view average maintainable also count incremental maintenance previous two case available may need access table compute consequently however compute usually faster run page query scratch help modification log cache old page data set practice utilize one maintain page data tree apply different part page suppose current reviewer ken update grade comment review two proposal figure one therefore modification log include update comment rat two review table b update mode value figure six page state computation fresh refresh page need page make asynchronous call fetch new page entirety server response handler replace old page dom new one straw man approach achieve behavior superficially compare pure model server side computation stay browser still need entire page furthermore still experience loss focus cursor position data enter form forward combine best model pure model offer development advantage model page render view need specify extra update logic framework incremental page refresh data layer visual layer achieve performance preservation focus scroll cursor position form data section describe incremental page refresh handle data layer section visual layer section leverage extend incremental view maintenance page state computation module forward see figure two treat page data tree view page refresh use log happen data possibly data maintain old view instance new view instance figure six show overview maintain page data tree old page state page data tree new page state recall page data tree compute result page query nest query forward extend language design time decompose nest page schema flat relational view denote rewrite page query query define flat view respectively run time old page data tree first transform instance flat relational view use relational incremental view maintenance algorithm flat view utilize modification log possibly data incremental change flat view compute translate data difference combine old page data tree calculate page data data two table suppose modification log also happen follow change happen right submission update ken c insertion new review three proposal update review another proposal e insertion recommendation another page notice proposal appear page since assign ken give modification log statically determine change e affect review page ie case since current page show also determine change affect page proposal appear page data tree show ken change modification log correspond either page state case incremental maintenance case particular b input form proposal disappear since switch node revert display case display proposal set accord grade review submit ken new review insert list review c finally c average old average count count also include view additional data leverage relational research relational model literature six nineteen seventeen eighteen describe efficiently maintain materialize view v q q query base table one approach implement many exist also forward model data change differential table let old view instance new view instance differential table base relation contain insert contain delete capture modification log way v v define update treat combination insertion deletion view maintenance algorithm approach run two query q q produce v v respectively focus defer view maintenance nine work table modification log reason web although data modification affect data tree see multiple page view maintenance user defer user request page system throughput maximize implement top open source native support materialize view general use well reduction nest query switch use build block manage nest switch transform nest page schema flat relational view correspond page query query ti define give page query q correspond page schema v take first step create flat one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty follow represent decomposition v respect q outermost collection v represent relation select clause map new relation case case conditional also map new relation notice unaffected let correspond si pi pa parent sub query expand contain foreign key attribute reference sa call sa parent finally primary key attribute si make include foreign key attribute parent relation exist addition si original primary key attribute point flat relation si decomposition correspond pi may use value ancestor modify si get flat view ti create define query base pi query without correlation first ti design si schema also contain attribute whose value refer descendant pi define query flat view ti modify pi add parent pi additional input table pi clause original reference value change join attribute finally order ease discussion still call flat relation ta parent pa parent run time traverse top maintain ti follow first top level view define run use ta parent maintain parent table ta would already maintain ta ta available necessary since ta input relation definition example follow define flat view correspond result relational decomposition page schema page query run example create view select p exist select order create view select review r create view select group review r consider describe section since neither change previous current page state change empty change c bring able compute join selection define query decompose flat view run example maintain list reorder since prior work relational view maintenance assume bag set semantics extend support order list semantics embed order information data simulate use support list data model forward allow query language algebra like input output intermediate result treat list many need preserve order input output selection projection view maintenance purpose simulate relational order information embed data inside order specify attribute example list encode set one two ken three jane auxiliary first attribute order specify attribute practice attribute use encode like describe ten order support efficient reposition way treat order like data need explicitly maintain order operator create order handle statically mark attribute order specify attribute run time insert data change sort reorder entire view defer final result size data usually small limit nature web page median often expensive maintain example deletion input list operator may incur scan input list delete among top k maintenance view study embed order information restore modification apply nest view discuss next update page data tree data change ti ti obtain ti view maintenance result flat view translate series data modification command apply old page data tree obtain new data tree change different ti apply order change child data node apply parent data node guarantee exist since every ti primary key attribute define contain primary key correspond data tree simple navigate data tree locate target change ti ti notice relation data tree either list set list ti need translate insert command data tree require adjacent specify adjacent locate efficiently use order specify attribute previous sort list materialize cache part data tree handle case straightforward incremental maintenance visual layer give data layer difference incremental maintenance visual layer refresh page unit instance translate data layer difference update dom base observation browser page state divide fragment fragment correspond render unit instance turn depend one correspond data tree nod unit instance correspond update data tree node need incremental maintenance unit instance tree incremental maintenance page facilitate unit instance tree data structure reside browser unit instance maintain underlie dom pertinent data layer difference encode sequence insert update delete command page data tree use unit tree produce unit instance correspond encode unit instance insert command span multiple fragment insert command respective unit instance similarly delete command update command span multiple fragment update command top unit instance delete command exist descendant unit instance insert command new descendant unit instance initialize new page instance create unit instance tree scratch however give exist page instance use unit instance maintain unit instance tree order preserve exist dom incremental render update unit instance tree invoke turn unit instance incremental renderer renderer translate unit instance difference update underlie dom element method call underlie component note implement unit author automatically utilize framework without effort developer essentially encapsulate partial update logic necessary utilize provide custom logic page mediate unit consider number possible unit instance difference one unit schema attribute root data two data encode three insert update delete command attribute command pair unit associate renderer since forward utilize exist number possible typically exceed available refresh therefore give unit difference specific renderer attribute command pair implement framework attempt simulate basis available renderer simulate update renderer ancestor attribute update renderer also simulate combination insert delete minimally unit need associate insert delete renderer unit schema root attribute example consider bar chart unit use review page reviewer modify grade review underlie component support change value particular bar update renderer implement value attribute bar chart refresh affect bar otherwise entire bar chart refresh implement specific improve performance expensive initialize map unit avoid overwrite value collect value four implementation evaluation forward operate interpreter application specification static analysis take place first time application load system prototype implement run jetty container query parse translate conventional execute relational illustrate performance prototype consider run example store proposal six review page display twenty reviewer submit revision review one display proposal two make since reviewer page last refresh one review update another reviewer proposal whereas review update proposal display current page consequently page refresh two additional review page perform core two quad run vista server run sixteen server mode whereas page load browser since compile native code base profile multiple method initial read experiment discard steady read obtain order approximate server average ten read take smooth spike garbage collection simulate server already cache memory buffer currently user hence retrieve randomly select read network container enable compression default account order magnitude reduction response size estimate time need real network traffic assume network time twenty average us one five respectively demonstrate performance server table one present itemize strawman implementation describe begin section three start time submit button click till browser fully refresh table two present forward employ incremental maintenance section three table one one time spend code browser collect data invocation context time transmit request four system description server invoke request one browser two network request latency three four five six seven network response latency eight nine browser render request transfer time update review generate page data tree response io response transfer time size two six time fourteen fifty two five thirteen fifty nine total table one strawman implementation system description server invoke request one browser two network request latency three four five six seven network response latency eight nine browser request transfer time update review view maintenance response io response transfer time incremental render total time fourteen fifty two five seven five fifty one eight table two forward implementation size two four time invoke program update review note fourteen outside scope incremental maintenance therefore identical value table two five time evaluate query generate page data tree index create foreign key efficiently join table query expensive due disk access incur six time encode entire page data tree network time finally nine time create new unit instance tree render dom scratch omit browser reflow time provide programmatic reliably measure reflow time run example fast measure manually table two note four remain table one show store modification log main memory measurable performance penalty five demonstrate efficacy incremental view maintenance section since proposal update modification log collection fall case therefore query need issue nest grade fall incremental maintenance case modification log need access compute review compare full query require join review table incremental query use modification log yield speed six show data layer difference efficient encode entire page data tree similarly eight show data layer difference also efficient transmit lastly nine show incremental maintenance visual layer section produce speed speed attribute less dom create less initialize addition speed forward incremental refresh preserve value user may enter form thus provide user experience superior strawman implementation full refresh five relate work data management research community create web site twelve pure server side web application eight development eight unit structure page track er schema easy create page navigate across work still provide important target forward pursue maintain clarity specify despite fact require distribute program multiple tedious combination component refresh generally browser side code neglect except recent fourteen describe run browser eleven four also provide programmer ease program single language typically exclusively server mirror page state cache entirety server keep browser server page state sync automatically however since imperative instead forward language perform automatic incremental maintenance page therefore one program refresh best knowledge forward framework employ automatic incremental maintenance page spirit pure framework provide mirror page state always send page state browser server hide form field share drawback list page state include style implementation detail therefore high memory footprint slow mirror example show page page figure one occupy three time memory forward structure page across architecture send form part page data tree obviously sufficient efficient sixteen achieve single language property fundamental technique distribute process browser server case accomplish translate single program language believe high engineer complexity distribution unnecessary since mirror performant show use web application infrastructure seven show manage cache dynamic page invalidate outdated view cache upon relevant update base table provide opportunity forward exploit instead invalidate whole page update invalidate part relational incremental view maintenance receive high attention mid context efficient data ware house maintenance example see two recently one ten three thirteen propose view maintenance problem query data model support nest order however limit applicability forward specialize immediate view maintenance support set require update apply less expressive query six future work forward allow development page declaratively describe data use appropriately extend consequently render forward page unit structure page treat automatically refresh render view show render view approach increase productivity since page succinctly express combination visual page mundane data synchronization issue page automatically resolve core describe solution page assumption technically mean server state effectively fully capture state page data logical level describe query state notice partial failure assumption lead wholesale dismissal approach rather developer use forward part page need resort conventional program rest task simplify web application program entail number additional challenge describe next emerge remove page assumption challenge require additional research often intersection engineer data management notably integration issue keep resolve code practice extend page extension render view paradigm may need take user interaction page lead change page page change succinctly express direct function user interaction one way always best accomplish page change first turn user interaction effect page view automatically maintain capture another direction towards address case extension forward allow page query use current page state also input b extend page query semantics allow expression partial modification believe extension direction bridge render view paradigm style program base explicitly specify effect part page integration page server side server state include object either underlie export encapsulate underlie therefore make unavailable query fuel render view conventional integration problem object relational data emerge part problem mitigate fact forward page already include nest variability nevertheless need work provide tool spirit hibernate facilitate integration keep mind long history problem indicate magic bullet find need apply best practice integration domain seven reference one j v j l wiener incremental maintenance materialize view data page two e k singh efficient view maintenance data warehouse page three n w movie incremental maintenance system materialize object view data two four enterprise framework five f c query language system page six j f w efficiently update materialize view page seven k li po view invalidation dynamic content cache page eight p web model language model language design web sit computer network sixteen nine l griffin l h defer view maintenance page ten k e view maintenance materialize view er page eleven echo web framework twelve f levy declarative specification web sit strudel j nine one thirteen j n foster r j l algebraic approach view maintenance fourteen g browser page fifteen j j new approach web stand sixteen seventeen griffin l incremental maintenance view duplicate j schneider page press eighteen maintenance materialize view data bull eighteen two nineteen v maintain view p page press twenty analysis source latency web page page b revel queue seven six b maintenance data cub summary table warehouse page c w report speed fifty state c conversation queue four four k ross materialize view maintenance integrity constraint check trade space time page k k r b g roll join asynchronous incremental view maintenance page j po k incremental maintenance path expression view page l minimize browser reflow june thirty access four net f yang n n x j j j unify platform data drive web automatic partition page f yang j j language page k h j yang g efficient maintenance materialize view page library h graph structure view incremental maintenance page h j hammer j view maintenance warehouse environment page direct ria