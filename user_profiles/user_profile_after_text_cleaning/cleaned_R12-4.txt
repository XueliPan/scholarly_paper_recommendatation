international conference data engineer international conference data engineer process group nearest group query one two three four five tao six university university science technology china abstract give data point set query point set q integer k group nearest group query find subset point k total distance point q nearest point greater subset point k query find many real paper exhaustive hierarchical combination algorithm subset refinement algorithm develop query process superiority term efficiency quality compare exist develop originally data cluster demonstrate introduction paper study new query type name group nearest group query regard generic version group nearest neighbor query one query retrieve single point query aim find subset k q minimize q distance q ie distance q nearest point query many business analysis decision support example plan meet group people venue find available issue query maturity people aggregate several convenient order reduce travel cost due consideration limit budget cost maximum number k usually limit constraint query use find set total travel distance people nearest minimal k one query reduce query data point location available conference venue query point q location person b fig one two query k three give set data point query point set q integer value k one k min q query find subset point k q q every p k p power set query may return k point show figure one case query may return solution less k point example figure one b nearest location matter set k minimal total travel distance distance aware solution say k process query find subset k point produce minimum total travel distance unfortunately k know advance process query avoid evaluate one k point observe subset k point produce minimum total travel distance must contain solution example figure one b produce minimum total travel distance solution may contain many k point process query need find one obtain subset final solution query easily find drop point query point group example final solution drop subset figure one b thus process query find one subset k point produce minimum total distance focus paper paper exhaustive hierarchical combination algorithm subset hierarchical replacement algorithm propose query process order optimize performance data point hierarchically represent block use process query treat block data point find intermediate solution higher hierarchical level first refine solution search space lower hierarchical level minimize follow guide search direction every set k block evaluate high hierarchical level set current best value ie minimum total distance refine visit next level different approach solution optimal possible iteratively replace initial subset higher hierarchical level block treat data point replace every element subset resultant subset current best value refine visit block capable provide optimal solution however performance drop dramatically k greater two contrast linear k inspire cluster pam two three pam use process query compare pam provide solution quality performance better order magnitude compare solution use best term quality outperform several time case two dimensional space discuss propose apply multiple dimensional space support hierarchical data structure exhaustive hierarchical combination algorithm use paper summarize table query process traverse root every set k combine form set one n query point q q entry e subset lower bind distance q e upper bind distance q e point q group accord lower bind distance upper bind distance separately q sequence get two distance sum q clearly subset k child leaf nod ie leaf nod must q distance sum q associate denote one n compute insert h assign threshold heap h minimum subset h lower bind distance safely prune h child leaf nod compose subset size k distance sum less remain h follow traverse fashion minimum select direct child nod ie nod directly refer visit compose set new compute new insert h current minimum h use update threshold subset h q thus denote q table summary notation explanation q q q e q e data point set conference query point set people threshold subset k point minimum distance point q minimum distance point q entry e node maximum distance point q entry e node safely prune repeat h associate subset minimum subset return leaf nod case description clarity insert heap prune prune also take place insert h zero three fourteen seventeen thirteen fifteen four fifteen sixteen seven nineteen fourteen root query point data point heap lower upper bind distance sum associate fig two example query process use figure two show example root combine size k two h use insert heap minimum threshold subset prune heap replace possible size two compose direct child nod subset refinement algorithm workable small k even though optimization apply section describe subset refinement algorithm provide high quality solution performance linear k q time complexity k k q inspire pam two three cluster algorithm work basically follow first initial subset identify try refine tentatively replace point total distance reduce refinement iterative process go detail first propose two prune rule explore proximity query point prune irrelevant initial candidate prune give q subset tentatively use point replace point order obtain update produce smaller total distance process point p prune q p q q q candidate prune give q subset tentatively use point replace point p order obtain update produce smaller total distance process p prune resultant total distance reduce note rule applicable p entry node distance entry minimum distance entry query process start select initial subset arbitrarily select k point however produce smaller total distance require reach final solution thus better overall performance work employ approach base algorithm consider distribution q first q cluster use algorithm obtain center ie mean nearest neighbor retrieve k distinct point let current cur initial cur q cur try compute threshold find better solution replace point cur point cur support iterative process root n first iteration tentatively replace p cur every entry e n compute resultant total distance sum entry e point p cur resultant sum record sum p e heap h empty initially otherwise replacement safely prune accord prune rule process tentative n point cur h empty terminate return cur since replacement reduce total distance else h empty element h h minimum sum remove h process h refer node node process similar way process root difference tentatively replace rather p cur h refer leaf node say p first iteration do replace p cur reset next iteration browse update cur terminate reduction total distance possible discuss step cut tentative update traverse within one iteration similar method use tentatively replace point p cur entry e also group query point base maximum distance e consequential total distance upper bind total distance subset obtain replace p data point e denote element h h update prune safely prune analysis one versus pam pam use process query use pam k center randomly select first step form initial set say iteration second step pam perform follow tentatively replace current p every point p cluster quality improvement compute reduction distance sum among tentative one maximum improvement carry next iteration pam repeat operation cluster quality improve total complexity pam one iteration k k two large computation become costly initial subset clear pam return identical solution however compare pam much efficient avoid unnecessary tentative support prune rule one randomly select point cur tentatively replace one randomly select point cur total distance reduce cur update carry replacement immediately update cur better solution find attempt local optimal solution assume reach local optimal global solution return set higher value quality solution improve approach quality level pam order compare term performance suppose common initial subset best case final solution better point find conduct tentative return suggest three number possible point point thus evaluate k best case node high level tentatively replace p follow traverse fashion visit node replace total distance reduce total evaluate n number nod visit n node n constant give value fifty experiment best case final solution medium size p p data set use experiment smaller k several time best case better relative performance compare general case deliberately design always refine currently promise subset traverse index structure randomly select subset process thus expect performance usually better two q region prune rule distribution region q impact prune rule general q distribute relatively small region compare distribution region prune rule work well show example figure three minimum bind rectangle q around ten data point outside grey area prune figure three b q around grey area increase significantly point prune none example point prune prune rule apply give current subset tentatively c r c c thirteen twelve eleven one nine eight seven six five four three two one zero e e c c e g p e g r e v p one p two current subset p four b r p three p one q one q three q two p two q four b q p five b q q one p three p one q three p four q two p two q four p five fig three q region prune rule b replace point p p p prune accord resultant total distance reduce case large q point p prune may prune tentatively replace point p example point prune figure three prune figure three b tentatively replace even though lose prune ability case large q prune rule still work effectively experiment north experiment conduct use memory four data set test real data set p p point obtain consist populate real data set n e place contain postal address point new york boston synthetic data set n one six uniformly distribute point synthetic data set n two uniformly distribute point data set uniform unit region q distribute area whose percentage whole data space denote disk page set buffer use data set index pam data set store number disk page implement pam algorithm four five make fair comparison pam common initial subset compute use approach discuss ratio set suggest three experimental result report average query default experiment q k six ten p p experiment quality solution return pam approach initial subset examine compare average total distance query aim find subset point produce minimum total distance query process solution produce smaller average total distance higher quality since workable small k use pam normalize quality ie total distance return algorithm divide total distance return pam figure four demonstrate experimental result set k two four data set figure four b demonstrate experimental result set k two ten data set p p quality demonstrate pam quite close optimal solution return ne two four eight ten accuracy six k b accuracy k fig four effect k ten number disk page access cost compare pam k increase k greater two cost much thus omit demonstrate consistently better performance pam c r c c fourteen thirteen twelve eleven one nine eight seven six five four three two one zero c e c p c two ten twenty thirty forty fifty two ten twenty thirty forty fifty k k pa k fig five effect k q ten b k v conclusion two query process exhaustive hierarchical combination algorithm subset refinement propose capable provide optimal solution even though workable k small important application query data quality management similarity join maximum match record one date set constrain work report paper support grant research council reference one q tao k group nearest neighbor query two l p group data introduction cluster analysis sons three r j han efficient effective cluster method spatial data mine four algorithm distribute memory parallel data mine five j classification analysis fifth symposium math statistics probability