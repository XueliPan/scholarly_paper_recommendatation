navigate complex university university research milo university abstract integrate set data source often refer study paper common scenario case integration yield set interconnect refer enrich individual also render navigation within intricate user action one application may affect assist navigation provide solution base simple generic model navigation flow within query model allow describe navigation flow interest effective query evaluation algorithm provide navigate within model serve basis compass system build top server one introduction integrate set web service data source often refer instance relate may integrate follow among one patient personal list prescribe drug two directory three map service may glue feed drug list search facility directory obtain offer drug feed address retrieve map service present location call glue pattern eleven previous work typically consider isolate atomic service eleven seventeen however often incorporate service within instance patient drug list may part electronic health record application research partially support ministry science science foundation binational science foundation research permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee article volume present international conference large data base proceed endowment vol three one copyright endowment macies directory may part pharmaceutical web site glue case yield set interconnect development current trend number well number estimate significantly grow near future fifteen sixteen may navigate parallel several interact instance consider patient wish find prescribe drug sell without exploit could navigate separately within pharmaceutical map may require login account retrieve prescribe drug login pharmaceutical application manually search offer drug turn map repeatedly search location relevant alternatively exploit complete navigation much faster may still need first login account pharmaceutical application due security impose single click prescribe drug feed data pharmaceutical application retrieve offer drug appear map example illustrate two within typically many information offer deal may find medical payment may do imply number possible relevant navigation flow may large even single application number flow large four increase navigation exploit structure much better way significantly better user save work induce less identify may challenge grow popularity sixteen along difficulty exploit call solution assist navigation present paper depict development system base generic model describe structure interaction participate possible navigation flow within model allow weigh possible flow base upon criteria number click require manual user input popularity introduce simple query language allow specify navigation flow interest user last develop algorithm give query current user location within find k best weight user navigation possible present user assist navigation experiment indicate efficiency well contribution model describe serve basis development compass system assist navigation compass present abstract graphical representation similar click may easily form query system compute navigation flow satisfy query flow rank base metric currently popularity number incur click suggest metrics display alongside list navigation press button x follow link may either follow recommendation may follow propose case new consistent actual make user automatically compute compass integrate server operation demonstrate ten patient portal ten demonstration two provide description system current paper present underlie model note focus paper structure connect way connection affect navigation flow within think generalization typically use naturally semantics individual implementation data manipulate also need consider however previous work show one quickly meet high complexity eighteen six consider semantical feature navigation assistance system effective must interactive respond oppose static analysis tool eighteen consequently focus analyze structure allow implement analysis efficient analysis possible relate work conclude introduction brief overview relate work highlight contribution recent work lead development many assist seventeen eleven seven contrast work first knowledge assist navigation various work four six five consider analysis navigation flow within context single application work analyze also data manipulate note five six query combination execution flow data manipulate interplay thereof incur high complexity work four take approach similar query application structure suggest evaluation algorithm restrict set single isolate application contrast show inherent add hardness p n p algorithm exist add hardness call dedicate optimization figure one present also note model resemble net nineteen bear yet sufficient capture structure expressive power allow efficient query evaluation query study extensively context relational data nine fourteen graph theory problem study extensively eight show render query evaluation harder single graph show section three exploit tool within evaluation paper organization paper organize follow section two describe data query model section three analyze complexity problem provide practically efficient query evaluation algorithm section four describe implementation compass system experiment conclude section five two start present model along intuitive glue pattern module implement functionality support interface input output take syntactic viewpoint first consider interface consider incorporation semantic analysis also take account logic later assume domain l name follow eleven name l l associate two set set input denote l must feed may operate set output denote l output operation model direct graph correspond formally define assume domain n nod bear unique identifier nod label name l name may annotate multiple nod definition direct graph v e v n set nod e v v set edge v l label function v distinguish single node start stand start point set nod end stand possible end point use n edge denote v resp e define notion collection whose interconnect via glue pattern intuitively connect source one application target another application supply require input show phone drug drug deal personal clinical drug deal pharmacy consumption definition pair set set glue pattern glue pattern pair two nod distinct call source resp target denote source target require every source multiple target nod belong distinct reason last requirement become apparent discuss role navigation flow example fig one depict graphical abstract view part namely portal ten partial consist four drugstore electronic health record map application application unique start node mark full circle possibly multiple end nod mark doubly bound circle represent completion task purchase drug drugstore regular edge detail logical flow within application map application show map follow edit address may receive input address dash edge stand may also receive input show pharmacy detail note single may source several whose target reside distinct instance choose drug source one whose target show drug detail drugstore also another whose target search drug navigation flow navigation flow actual instance navigation within consist sequence navigation step intuitively flow single application start application start point follow edge relation input along flow feed either output previously activate user navigation point application capture location node application along flow consist several navigation point model via program counter signify current nod flow navigation flow induce parallel navigation participate capture sequence absence navigation step single step one application update correspond node keep intact however allow bypass standard application flow activate receive input thus application may activate even node reach rather combination output glue along output current feed require input case node may jump continue flow point next formalize definition give program counter p c ni node say ni n n one n edge one ni n two j exist n target target condition give hold n j target three n j indices j condition state every n n n j n j j intuitively two p c p c say p c ni n p c p c obtain p c user advance application ni n consequently possibly activate nod correspond jump ni n refer user choice navigation flow sequence program counter user f p p p say f successful node p correspond application successful flow full p start start otherwise refer continuation example consider simple navigation flow fig one use sequel notation refer node annotate appear application assume user navigate parallel drugstore reach drug list nod particular mean user already log drugstore assume user continue navigate reach drug node make choice drug note connect drug drug detail supply latter choose drug name focus latter assume require input consist user login information register see drug detail use service well request drug name since drugstore already pass user login information also provide assume pass one next thus drugstore jump show drug detail user may proceed make navigation mash example user input cause jump single application general may jump multiple take place parallel note except order one advance different ie whether first perform give step one application vice long individual application sequence traverse nod order stay intact two navigation flow defer sense consider equivalent formal definition equivalence relation give appendix query far discuss notion navigation flow distinguish successful nonsuccessful base whether define application reach many case also set nod user wish traverse specific order end next introduce notion query describe navigation flow interest define query q acyclic graph define nod must appear qualify flow require partial order traversal edge q may mark transitive appear consecutively navigation sequence definition query q pair g st g v e v subset nod appear e v v acyclic edge relation v subset edge e mark transitive successful navigation flow p p satisfy query g node n g exist st n p furthermore edge n g n exist one resp p note application graph may cyclic node may appear multiple time navigation flow definition require constraint satisfy least one requirement follow spirit notion eighteen commonly use process analysis general may still many qualify flow give query typically prefer flow end introduce weight model navigation flow within follow weight model assume domain w weight use weight function assign weight w edge e possible user choice application edge weight intuitively reflect cost term user input likelihood choose random navigation flow individual edge weight occur along navigation flow aggregate obtain flow weight aggregation function w w w receive two weight input first intuitively correspond aggregate weight compute far second new edge weight aggregate previous value instance compute total number click w zero popularity may model likelihood function w zero one consider aggregation function satisfy follow intuitive one associative commutative namely x z w x z x z x x two neutral value denote namely x w x x x three monotonically increase decrease w namely either x w x x x give navigation flow f p p p define weight f recursive manner follow w p w p p w p p weight along weight function note model introduce assume weight individual choice depend previous sometimes case practice weight function reflect number click sometimes figure two query answer popularity simplicity presentation assume independence stress result go extend model allow dependency explain require support model appendix answer observe monotonically increase resp decrease weight execution flow generally monotonically increase total number click interest k flow weight require least overall number click f w eight monotonically decrease popularity flow interest k flow highest weight likely refer uniformly result query q respect weight user current program counter navigation point p c denote top k q p c thus define set highest decrease function increase function weight successful navigation flow satisfy q start p c multiple set pick one arbitrarily due fact two navigation flow may equivalent sense describe example order allow diversity user output one navigation flow every equivalence class example reconsider depict fig one assume simple weight function assign equal weight edge function count number traverse navigation assume wish minimize consider user wish shop drug appear electronic health record user want check drug price drug store close place residence may issue query q depict fig two query require flow traverse choose drug choose prescribe drug go show deal detail drugstore find price choose drug choice drug also follow show deal detail show detail deal offer drug latter turn follow show map map application show pharmacy location fig two b depict nod edge traverse navigation flow satisfy q flow start navigate choose drug utilize cause jump drugstore show drug detail show choose drug detail flow continue navigate drugstore show deal detail connect site cause jump show continue navigate find pharmacy interest finally use connect site map show location choose pharmacy choose drug drugstore show deal detail show deal detail map show map b three query evaluation study section evaluation query unfortunately next show data complexity algorithm compute query answer possible unless p n p let problem decide give weight query q bind b whether exist successful navigation flow satisfy q weight higher b theorem size input furthermore hold even form chain proof defer appendix lack space base reduction naive algorithm obtain look configuration graph g namely nod g program counter edge correspond e relation note many eight literature find single graph polynomial complexity graph size naive algorithm would first choose order traversal query nod choose query node correspond node configuration graph namely node whose appropriate application query node repeatedly apply algorithm g find choose nod accord choose order correspond query nod consider flow give find however number nod g thus algorithm complexity exponential number exponent base size individual application graph contain nod often case practice thirteen complexity naive algorithm become infeasible fortunately careful analysis source consequent complexity query evaluation show fact depend number interconnect query size relatively small practical case indeed show obtain practically efficient algorithm complexity exponent depend quantity basis exponent small constant simplify make three ease presentation assume one application one end node two end nod source three source provide sufficient input activation target independently current location target application stress make solely ease presentation explain appendix necessary change hold depict algorithm present key utilize development consider query q g st g arbitrary navigation flow f satisfy q f traverse nod order conform e call order compatible query also possibly traverse nod source terminate reside accept state let us denote source nod traverse f consider possible navigation flow traverse order f nod n denote class navigation flow f key observation find flow f may compute independently lead c current user p contain first node n compute lead p p contain second node n forth last node n overall flow k may do independently due fact order choose n determine particular order source thus know valid start one node n end next node traverse source along way observation important two ways one allow compute next p c next step computation start independently choice actual path current step next p c current p c except next node n n target n source two allow computation restrict single application next node n reside shall show allow analysis far consider flow correspond single f set generally flow satisfy q find repeat procedure possible order compatible query algorithm start depict use algorithm depict algorithm use algorithm external call give single application graph g two end nod g compute may implement purely way weight algorithm eight however stress point semantic analysis perform efficiently may take place algorithm apply single application graph time may implement analysis four five incorporate transparent way within algorithm algorithm next depict efficient algorithm query evaluation algorithm receive input query program counter indicate current user position number k request result output qualify navigation flow data structure refer algorithm consider compatible define order query nod subset source order algorithm compute navigation flow conform compute partial navigation flow two consecutive nod combine result obtain full navigation flow order efficiency algorithm advance parallel computation do different order parallel computation do style store detail algorithm give algorithm one initialize structure line one use line two priority queue f possible order set partial navigation flow compute far order initially order priority iteration pop line four order highest priority f first check stop condition line five namely whether k full flow better compute already find break loop line six terminate otherwise look signal index last node reach computation continue computation point invoke show iteration compute store data structure call th node algorithm raise index one indicate point next computation start line eleven value reach size finish computation flow find store merge overall line thirteen consequently line fourteen priority f update recall notion equivalent equivalent already exist add overall finally output result line sixteen algorithm one data query q g program counter c number request result k result top k q c empty array size k navigation flow initialize frontier priority queue order do pop f eight eight break end c c c one update f end end output one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen method give input c index consist one order nod traverse two set c one th node store c obtain traverse one explain unique among extend c th node update c appropriately first compute c contain find find c set target node source node node c correspond application target reside line twelve perform analysis line three target analysis perform use mention single graph g obtain application graph omit source nod target analysis result concatenate line four find far form c keep do use method compute time choose either next concatenation accord weight order finally line c update accord target location furthermore may affect due recall due assumption two activate whenever source reach thus find whose source node target line six c update correspondingly line seven also perform jump incur algorithm two data program counter c order location result compute c update compute prefix along c target c target p target p update c target st source target update c target one two three four five six seven eight end complexity recall algorithm fix parameter tractable twelve every input size x parameter p operate time f p p x function f parameter p typically relatively small intuitively algorithm almost polynomial case use p n source namely number distinct source plus number query nod follow theorem hold theorem worst case time complexity p poly k p consequently take p parameter shall see section four value p typically rather small algorithm performance good practical case note incur space exponential p exponent typically small enough allow require space fit main memory case one may group together order subset small enough fit memory perform single subset iteration take overall result four experiment model describe paper serve basis development compass system figure three dependency size figure four dependency glue pattern assist navigation due lack space detail architecture compass give appendix next describe experimental study algorithm performance synthetic data well system contribution system implement server experiment perform ram performance experiment run ten time graph show average result case standard deviation exceed five synthetic data synthetic data generate vary number nod application number interconnect number target single connect gain intuition typical value one examine extensive repository available web two refer statistics available thirteen web application size three examine develop server typical parameter value thirteen state size typical nod analysis show repository bear render total size typical around nod average number examine fifteen five distinct source number seem relatively small obtain still rather complicate first many possible navigation even within single application combination five increase number power five existence introduce intricate complicate navigation process furthermore show algorithm run experiment parameter value range one ten time typical value find five time maximal value find also consider various structure participate examine effect algorithm performance vary number one number distinct source range one twelve source target choose uniform distribution application nod guarantee multiple target reside different weight function use multiplication aggregation examine individual edge weight various zero one uniform equal weight edge observe change performance thus show result obtain uniform distribution vary number query nod one twenty k number request flow one twenty report result three representative value one ten twenty k experimental result first experiment examine effect size give performance algorithm fix number fifteen query size ten vary size one nod fig three depict algorithm execution time function number nod compose observe execution time exceed eleven second k twenty furthermore apparent execution time algorithm grow moderately respect size even nod ten time size typical query evaluation time one second second experiment examine effect number algorithm performance vary number one fix number six size query size ten fig four show execution time algorithm one second even nearly ten time typical value examine effect query size surprisingly see execution time behave similarly behavior respect number thus omit obtain performance graph also note memory consumption observe experiment study parameter value ten five time typical maximal value observe memory consumption low enough fit main memory case may employ group mechanism see section three parallelize work possible order fit main memory execution time refine algorithm grow linearly number dependent ratio require available memory data effectiveness assess performance well effectiveness system assistance consider namely ten patient personal portal consist five drugstore electronic health record map service message service size nod contain fifteen interconnect next explain necessary step apply compass use example describe experimental result setup recall algorithm require abstract model consist one graph representation application participate two description glue pattern interconnect three weight function application graph time second time second edge involve structure give since build note however many specify declarative one allow extraction connect automatically retrieve server weight function two function employ first weigh flow total number click require second capture popularity weight account navigation step obtain popularity weight obtain follow flow edge connect service information transition popularity obtain statistically analyze user log popularity rank obtain system eleven compute rank abstract model place compass allow issue query model end system enable user one view graphical representation load two compose query consecutively click nod particular order three present compass navigation four examine various click view highlight image compass present alongside original allow user continue navigation view experiment system witness interface easily use design query however small subset lack experience work design query therefore enhance system repository store commonly use query available experimental result sum section report system performance experience context assistance performance result comply report result synthetic data depict fig three vertical line stand compute average one second three second five second variance less five perform effectiveness experiment group eighty half already familiar half measure time take navigate within without assistance compass split experience inexperienced group two first subgroup navigate able observe second subgroup assist compass navigation benefit provide give three task follow one find detail physician work address two find detail physician work address send cellular phone message contain physician detail three view personal graph drug consumption give patient average time take inexperienced aid compass complete relatively simple task experience average time group perform significantly better task assist compass overall average improvement variance less four inexperienced perform task average constitute improvement experience achieve average time better compare performance without system assistance see contribution compass class five conclusion consider paper encounter navigate complex present solution assist navigation solution base simple generic model navigation flow within intuitive query language allow define navigation flow interest study complexity query evaluation context provide efficient algorithm assist navigation explain algorithm utilize develop compass future research include incorporation knowledge user context semantics automatic inference model six reference one business process execution language web service two milo navigate compass ten three milo evaluate projection query probabilistic business process nine four milo yam goal orient navigation nine five r hull f v automatic verification business process nine six l v verifier interactive web five seven r j n mass seven eight find k nine r optimal aggregation j ten k b p towards health twenty rescue nine eleven milo n twelve complexity theorist nine four thirteen c estimate cost fourteen b match twig probabilistic seven fifteen n emerge application development paradigm digital journal j thirteen four sixteen lee tang toward new paradigm pattern web twenty six ten seventeen b al smash navigation data network nine eighteen z manna temporal logic reactive concurrent nineteen net analysis four twenty p l j e world wide web empirical world wide web two twelve e find k parallel two j wong j hong make marmite towards program web chi seven j b r f f framework rapid integration presentation seven appendix equivalent navigation flow recall informally introduce section three notion equivalent navigation flow important allow diversity result show user intuitively two different flow equivalent induce flow every application separate differ order different interleave whether flow first advance application application b vice algorithm output one equivalence class define formally define restriction flow application signify relevant part flow application thus two flow equivalent involve furthermore note part flow advance make interest study equivalence thus consecutive state stay ignore capture notion canonic restriction define next definition equivalent navigation flow give program counter application denote p node appear navigation flow f p p p define f restriction f nod sequence p p p furthermore define canonic restriction f obtain f repeatedly omit every node ni ni ni exist finally say two navigation flow equivalent application canonic restriction canonic restriction b proof theorem proof show reduction first show reduction graph chain form refine proof give eat follow consist n simply long chain length l four n whose final nod consist single root two correspond true f xi correspond true false connect correspond literal appear positively negatively weight function w assign one every edge set b three n slightly different construction use chain instead two application chain three nod second node connect third node chain contain xi xi well inclusion note algorithm may easily transform algorithm follow algorithm guess subset source guess order nod choose subset verify order compatible query edge check existence flow conform better weight give bind b do algorithm withdraw throughout paper make several ease presentation model result next withdraw explain necessary change model algorithm model assume definition one weight every edge along flow independent previous flow practical case independency hold instance consider weight function measure popularity use search drug drugstore possibly likely finalize reservation without reset get buy navigate browse drug manually click drug name choice typically certain drug wish purchase account first extend weight model weight function w longer function single edge rather function edge along precede refer flow history follow line similar algorithm three generate new encode within node label sufficient amount information flow history precede may construct weight function w independent flow history simulate w apply w size greater original factor depend much history affect weight namely many previous need record decide weight give edge study twenty show number small four case allow remain highly effective even presence simplify presentation assume one application bear single two end nod source three every may activate source reach independently current location first relax assumption one multiple exist single application simply insert order study query nod source order assumption two may also easily relax follow first create new add single child n n mark n instead n apply relax assumption three extend follow every order node source generate new order om order obtain choose subset nod allow activation order choose subset insert new nod order right appearance new order traverse algorithm depict c system architecture next present brief overview system architecture compass develop top server develop research server allow compose thereby use architecture compass depict fig five describe main system explain work together figure five system architecture compass component user interface navigate construct compass use basis user interface server enhance enable user one view give two set navigation three obtain compass navigation four examine various recommendation click view highlight image abstract model model store compass include participate application well connect first component namely application manually configure participate demonstration follow logical structure note however many web specify declarative one allow extraction connect retrieve server along input output last consider construction weight function flow demonstrate two weight function first weigh flow total number navigation step user click input take second capture total popularity user weight account navigation step easily obtain popularity weight obtain follow flow edge connect service web application obtain information transition popularity experimental study collect statistically analyze user log employ system eleven compute popularity rank two adaptive query engine last component compute provide engine query abstract model incorporate server query receive compass direct query engine process return result back compass presentation furthermore query engine remain active throughout navigation process receive report user navigation step new consistent user compute send forth user navigation navigation flow map user map