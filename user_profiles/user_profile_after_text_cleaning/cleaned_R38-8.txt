nineteen eleven filter dynamic reis university j wang filter network data offer fast alternative intermediary patch exemplify shield wang al article take shield vision new domain inspect cleanse static content also dynamic content dynamic content target dynamic web page become popular vector attack key challenge filter dynamic undecidable statically determine whether embed script exploit browser avoid problem rewrite web page embed script safe insert check filter do rewrite page contain logic apply check dynamically generate modify web content base know build evaluate general framework perform dynamic instrumentation embed script admit action like filter also explore top subject operate security protection program write compiler general term security additional key word phrase web browser vulnerability code rewrite subset material article first appear proceed symposium operate design implementation author address c reis department university wa j h j wang wa department permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit direct commercial advantage copy show notice first page initial screen display along full citation copyright work own must honor abstract credit permit copy otherwise republish post redistribute list use component work work require prior specific permission fee may request two plaza suite new york one permission c web vol one three article eleven publication date nineteen c reis al reference format reis c j wang h j filter dynamic web one three article eleven page one introduction web become important interface many electronic service information access personal office task importance web accompany rich functionality extensibility also contribute popularity vector attack year eight critical security bulletin correspond nineteen due flaw explorer ie control also seven critical security bulletin correspond sixteen period time date primary way defend browser patch however study show deployment patch often delay patch become available service update patch automatically typically delay enactment patch require application restart delay help home corporate save work schedule additional delay corporate set patch typically test prior deployment avoid potentially high cost recover faulty patch al result dangerous time window patch release patch application often patch gain vulnerability knowledge launch attack one study show large majority exist attack target know al exploitable application level previous work shield wang al address patch deployment problem filter malicious traffic accord vulnerability transport layer vulnerability consist vulnerability state machine characterize possible message sequence may lead attack along message format trigger exploitation application overly long field message trigger buffer overrun key characteristic approach cleanse network data without modify code vulnerable application approach make signature deployment removal need easier patch vulnerability signature deployment automatic rather use deployment model antivirus desirable feature filter motivate us explore potential exploit removal web page shield approach able filter static page treat another protocol layer web vol one three article eleven publication date nineteen filter dynamic fig one system however challenge lie dynamic page dynamically generate modify script embed could easily evade shield filter use script generate malicious web content possibly additional obfuscation determine whether script eventually exploit vulnerability undecidable approach cleanse dynamic content rewrite page embed script safe render browser safe equivalent page contain logic apply check dynamically generate modify web content base know end design system perform dynamic instrumentation embed script admit change web page behavior vulnerability signature one policy sanitize web page accord know vulnerability figure one give overview system show transform use set system focus predominant script language use web system would require additionally rewrite disable script use web protect general approach code rewrite interposition use code rewrite use isolate fault al rewrite use enable security police schneider al stack inspection access control however rewrite script code web pose additional challenge language combination rule implicit garbage collection pervasive reflection require number need previous rewrite work design adhere well establish protection complete interposition underlie resource ie document tree transparency schneider addition general framework support filter example author add prevent certain attempt protect web transform input browser logic injector deploy client web vol one three article eleven publication date nineteen c reis al edge browser web republish content implement prototype system rewrite logic inject web page enterprise execute browser render time prototype transparently render many familiar web sit contain also successfully translate run large portal application use choose deployment scenario offer manageability benefit update centralize immediately protect client machine organization without installation either web main disadvantage deployment scenario visibility encrypt traffic nevertheless commercial secure compute already exist force traffic cross organization boundary use instead client within organization encryption trade client privacy aggregate organization security encryption critical browser extension web publisher deployment transparently handle encrypt traffic deployment require policy update every client approach still offer advantage rely patch particular require application restart easy roll back prove faulty thus automatically distribute much like antivirus evaluation focus effectiveness design performance implementation analysis recent ie show significantly advance state art exist antivirus alone provide protection one eight ie patch combine two sufficient cover eight evaluate performance page contain evaluation show relative increase utilization client render comparable original page page rest article organize follow section two describe typical browser vulnerability would like filter discuss design section three give rewrite approach detail section four discuss author register policy function section five describe implementation section six section seven give evaluation survey additional potential section eight discuss relate work section nine conclude section ten two motivate example motivate example filter consider vulnerability ie web vol one three article eleven publication date nineteen filter dynamic fig two code snippet identify exploit vulnerability vulnerability ie vulnerable buffer overrun name attribute long frame embed element figure two show correspond snippet code use identify remove exploit vulnerability input function take object represent tag include associative array attribute invoke frame embed tag function determine whether relevant attribute exceed size vulnerable buffer remove attribute defeat exploit goal take filter function apply vulnerable content whether static page dynamically generate script framework could react many ways detect exploit current system simply remove exploit render vulnerability drive filter use patch alternative intermediary prevent exploit vulnerability ie zero false negative disrupt page ie zero false design meet three overview system consist library translate web page safe logic injector modify web page use library use two separate along enforce first translation translate page modify page accord one depict figure two wrap script work second translation defer page render browser depict figure three use invoke depict figure four parse rewrite access document tree interposition layer layer regulate access underlie document tree apply dynamically generate apply dynamically generate script code additionally interposition layer enforce filter exploit know web vol one three article eleven publication date nineteen c reis al fig three translation fig four translation since choose disable script web must ensure protect even without library handle apply logic injector independent user browser due still place disable script make irrelevant along original script code browser control also manipulate document tree security model privilege browser thus focus interpose script document tree allow prevent malicious script exploit know trust browser design adhere protection schneider complete interposition script access document tree must mediate framework tamperproof web page must able modify tamper framework unintended ways transparency apart time reasonable increase resource usage web page able detect change behavior due framework sole exception policy enforcement behavior page contain exploit visibly modify flexibility desire framework good separation mechanism policy make system flexible many web vol one three article eleven publication date nineteen filter dynamic four design give detail discussion script library much previous work use code rewrite interposition schneider schneider al approach heavily influence fact code live name space code manage also several first language smith language like object create use object modify different set member consequence static type different data type assign variable even reference function object second issue must deal carefully assign method new object cause use method bind new object thus interposition must ensure always evaluate intend context third use garbage collector expose language fourth language pervasive reflection feature let script explore code object result must use series interposition method new invocation syntax name resolution management justify describe follow organize framework complete interposition provide complete interposition must mediate possible access allow document object model dom document tree include script subsection detail achieve use script rewrite interpose function call object method call object property access object creation control construct interposition point sufficient mediate script access dom summarize rewrite rule table function object method call support definition global function object function pass reference multiple name could refer executable code sole difference function bind enclose object reference bind time function method create two rewrite function method call interposition rewrite caller rewrite evaluate find necessary rewrite original function method definition first save different name original function method redefine allow interception call save original call redefine function wrapper example foo method object could rename web vol one three article eleven publication date nineteen table sample code rewrite rule c reis al construct function call method call original code foo x object construct x three x refer variable name construct x rewrite code foo x document write x x x three x three x continue object creation new x new foo method could check method invoke benefit rewrite rewrite code function interest modify throughout code however rewrite work case function redefine caller rewrite invocation rewrite call interposition function without change original function definition interposition function look appropriate interposition logic base identity target function method example foo three could rewrite three first check invoke foo although caller rewrite cause pervasive code change interpose function overwrite use hybrid approach date previously mention specifically contain native function redefine alert explorer necessitate caller rewrite first row table show indirectly invoke function list parameter value pass global object introduce contain library code however use caller rewrite alone interpose method call require maintain reference state otherwise eligible garbage collection caller rewrite require maintain map function interest associate interposition logic store map global table would require maintain reference interest every object ever create object may correspond distinct prototype require distinct interposition logic global table reference would prevent reclamation object otherwise eligible garbage collection possibly cause page render normally without require unbounded memory avoid use rewrite maintain necessary interposition logic wrapper method allow unused state reclaim web vol one three article eleven publication date nineteen filter dynamic might seem tempt maintain interposition logic property object rather use unfortunately interpose method create provide reference object contain interposition logic example f interposition logic associate associate f find logic would require global scan object justify use require interposition logic replace original method wrapper save original method property wrapper object interpose object property access object creation method install object first create use thus far justify caller rewrite function rewrite allow function object also must perform caller rewrite method call rewrite method check potential function introduce additional complexity method interposition original method simply call method wrapper original method property wrapper bind wrapper instead intend object avoid problem use swap technique wrapper temporarily restore original method wrapper execution reinstall wrapper object method wrapper return first step swap restore original method one challenge method name may method wrapper may know place original method reassign different name example may wrapper need inform method name call solve problem caller rewrite rewrite method invocation syntax pass name method method wrapper perform swap continue example rewrite method call foo allow swap swap process require additional check handle recursive describe recursive call method would bypass method wrapper swap first call instead method first check see method call wrapper already swap invoke wrapper ignore swap logic original recursive call complete single thread need handle concurrency process object document tree access modify object property read write example page modify assign value individual script tag change modify text property web vol one three article eleven publication date nineteen c reis al interpose action replace attempt read write object call show table apply rewrite rule object property read write possible know statically whether give read write require interposition logic instead use object identity check whether assignment create new script code apply new code need part identity check determine object part document tree call certain library function note ensure use authentic library function malicious create private function script code begin run interpose property access necessary two additional reason first require object first access use technique avoid dom object unless particular method require access second swap method execution must ensure attempt access original method redirect wrapper object creation object must ensure method initialize object create example straightforward check type dom object point lifetime make easy decide appropriate interposition policy contrast determine appropriate interposition policy output constructor best do creation time since otherwise important context lose achieve rewrite new object use method method also responsible interpose function constructor create new executable function follow f new function x return case apply function control construct control construct block loop body construct translate body traditional function function foo translate well construct present special case ability modify scope show table free within block assume refer designate object unless undefined construct purely syntactic sugar thus handle case syntactic transformation tamperproof prevent script tamper challenge logic live name space code manage web vol one three article eleven publication date nineteen filter dynamic address use name resolution management ensure logic inaccessible entail rename certain modify output reflection case variable name common case variable name script remain unchanged however make name inaccessible script prevent tamper global data structure rename variable reference append underscore end name also append underscore name match regular expression ie begin optionally follow number underscore note place limit variable name length append character conflict reflection reflection allow script code explore object well code use two pervasive language feature syntax access object construct first case must hide object maintain interposition state detail give section object state store property object hide use property access interposition specifically call attempt access property name begin simply append underscore name thus return property value original script would see since array indices also use access object must return appropriate value give index second case construct allow iteration object name example set loop iterate property name property object must hide iteration present thus insert check first line iteration loop jump next item property name accomplish use rewrite rule show table transparency framework must also ensure presence transparent original script semantics prevent tamper describe section contribute goal make inaccessible transparency additionally require present script context would absence example support additional reflective feature reveal information variable rewrite virtualize feature ensure expose presence framework next discuss two specific necessary preserve transparency general web vol one three article eleven publication date nineteen c reis al shadow copy script access script code modify interposition preserve intend semantics script retain shadow copy original code rewrite shadow copy store property object interposition property read write allow shadow copy expose script access modification shadow translate require additional care transformation policy may rewrite static must similarly create shadow copy translate directly create object store shadow copy thus persist shadow copy tag attribute later use library example policy function rewrite link may modify attribute tag transformation persist shadow copy look like look property dom object correspond tag interpret string actual property shadow copy attribute script interact shadow copy code modify copy expose change rename also imply require idempotent never apply code already transform preserve context function evaluate string script code current scope occurrence string bind current enclose object thus call within might evaluate differently original context reason rewrite rule function actually complex show table instead rewrite code first check function invoke parameter translate use evaluate correct context otherwise call describe thus code rewrite follow foo x x note function expression foo assign temporary state variable object expression evaluate second time call check special case need native function access native function alert access evaluate within web vol one three article eleven publication date nineteen filter dynamic flexibility final goal support flexible policy enforcement achieve separate mechanism policy mechanism consist rewrite rule translate script code policy consist check invoke rewrite code check critical complete interposition apply string pass function constructor apply string pass assign check always apply regardless policy place interposition logic system make complete example undocumented discover manipulate document tree simply add new policy interpose remain check use enforce flexible vulnerability filter figure two policy function separate remainder code update base intend application provide detail discussion policy function next section five function register interposition point framework function give chance inspect modify script behavior execution allow enforce script behavior comprehensive way section discuss policy function write register framework distribute write implement function policy function take relevant interposition point register function representation tag policy function inspect determine whether modify page logic allow proceed policy function access entire state page framework case additional context require beyond also allow policy introduce new global state function part global object local state specific object policy function code outside framework run without translate thus access framework policy function give control page responsible protect browser exploit part trust compute base thus establish prevent interfere framework vulnerability filter many reasonable find exploit attempt current prototype configure strip offend code page prevent exploit alternatively web vol one three article eleven publication date nineteen c reis al fig five code register policy function vulnerability could redirect page error message could notify administrator attempt exploit specific vulnerability filter discuss section two section policy registration framework expose several hook function register interposition point interposition point include new tag pass browser function call object read write register policy function point use hook policy author comprehensively restrict modify behavior script code web document describe register policy function follow registration function define global object invoke part logic general registration function take representation interposition point name tag along reference policy function encounter interposition point invoke policy function register point policy hook allow policy function register give tag name whenever encounter tag give name page pass object represent tag attribute policy function occur tag render browser allow policy change tag necessary example code figure five would register policy function figure two tag present part token stream tag text without full parse tree policy function free reconstruct subset parse tree gain additional context necessary although yet encounter need author policy hook cause invoke give policy function time instance class give name construct pass list constructor policy function allow alter necessary policy function expect return newly construct object allow policy function wrap object necessary alter behavior method call example use hook restrict creation particular object accomplish register policy constructor web vol one three article eleven publication date nineteen filter dynamic function policy hook cause invoke give policy function time particular function invoke registration function take pointer function interest rather name eliminate need additional mechanism track function approach avoid mention section time function call pass policy function policy function expect call function return result alter return value desire register function call use support simple type check prevent improper pass particular function type check prevent exploit engine discuss section policy hook cause invoke give policy function time method give name give object invoke wrap method first access subsequent method concern mention section policy function take method return result call method alter necessary example use policy restrict number page allow open prevent page flood user new accomplish register policy method policy hook cause invoke give policy function write property give object policy function take name property value write apply change alter block necessary policy function return value case example use policy comprehensively translate link link web page may present tag code also navigate link change property hook use intercept change modify intend destination discuss link translation section eight policy hook similar object property write hook except apply dom object particular type rather take pointer object interest take name dom node act class name allow apply instance give type dom node example policy author intercept change script tag page difficult accomplish since instance tag may know advance instead hook use register policy tag script framework additional registration function straightforward yet encounter need practice web vol one three article eleven publication date nineteen c reis al finally note multiple policy function register function tag hook framework simply call policy function order register policy distribution policy function separately remainder framework update base intend application deployment scenario policy function fetch file separate framework allow framework cache client longer cache expiry time policy function envision centralize service provider vendor could provide policy file multiple provide policy file administrator could act integrator file policy would responsible keep vulnerability date notify new update available scenario analogous current model distribute virus antivirus six implementation implement prototype service deploy proxy cache prototype consist standard security acceleration server library send client transform web document play role logic injector implement c line code library line include comment code devote parse half library devote parse significantly smaller amount code modern web browser imply trust compute base small compare code base protect responsible apply transformation static first insert reference library web document library distribute separate file automatically cache reduce network traffic later request rewrite script transform use client execute figure three depict transformation note require translate implementation component apply use stream model server begin send transform data client entire page receive stream model also mean expect filter vulnerable do attack malicious web page one complexity parse parse must consistent underlie browser inconsistency false false negative check prototype seek match ie behavior test web vol one three article eleven publication date nineteen filter dynamic table vulnerability coverage protect filter antivirus twelve two zero zero three zero zero zero four vulnerability type script twelve image file three four two require filter provide protection refinement future expose logic program would make problem trivial browser start run script page library apply piece script code translate call interposition layer may sometimes require decode script procedure implement publicly available virtual conspiracy require cryptanalysis though yet incorporate implementation final issue translate script originate source file link script tag rewrite source fetch proxy proxy wrap script way script code embed directly page wrap example script source would translate apply client script source file seven evaluation evaluation focus measure vulnerability coverage complexity author vulnerability filter overhead apply overhead run interposition layer vulnerability filter end host vulnerability coverage evaluate ability protect ie critical release patch critical patch year eight ie correspond nineteen ie fall three class ie handle script image file table show many area whether another technology could provide protection design focus script control successfully handle twelve include underlie programmer error higher layer abstraction buffer overrun example script vulnerability handle account three nineteen perhaps surprisingly two web vol one three article eleven publication date nineteen c reis al fig six policy prevent exploit vulnerability three require addition exist filter snort snort shield wang al malformed could trigger layer regardless whether come network generate internally browser able prevent layer trigger generation bad request process image file account remain four protection already available use exist antivirus management deployment cost often incur basis also analyze table term correspond patch eight ie patch release combine standard antivirus filter would provide protection every case greatly reduce cost associate multiple patch absence antivirus filter would provide protection one ie patch author vulnerability filter evaluate complexity vulnerability filter choose three three different class vulnerability object memory corruption mismatch dom object memory corruption filter vulnerability use function show figure two register show figure five object typically result ie object memory ie patch particular object identify implement equivalent require add check tag object tag sometimes function constructor use subset object accessible object tag case appear possible vulnerable object use constructor code object tag filter use show figure six vulnerability result window object function call function outermost scope interposition web vol one three article eleven publication date nineteen filter dynamic fig seven policy prevent treat window object function layer prevent window call function outermost scope since function call mediate hence need filter nevertheless vulnerability depend constraint could simply add filter prevent call object function figure seven show filter could write test correctness vulnerability filter unpatched image pro within virtual machine create web page cause ie crash apply filter cause ie crash upon view malicious web page test fidelity filter use set use evaluation overhead detail section visual find filter change behavior web page desire performance evaluate performance script multiple ie web page embed object server run run contain four one ram within corporate server connect another proxy directly web sit disable cache proxy fix ie client cache contain library consistent scenario translate web sit contain reference library run ten ie process concurrently use ten page ie could render quickly increase load repeatedly initiate page visit every five second use manual observation determine load server reach steady state choose ten page set seventy basis client performance set base sample top one million click return search result spring weight count specifically seventy currently render correctly remain sample encounter due incomplete implementation parse bug measure memory usage show table observe absolute increase usage introduce fifteen correspond relative increase bind throughput inversely proportional web vol one three article eleven publication date nineteen c reis al table overhead virtual memory measure total virtual memory allocate process work set measure memory page reference regularly private measure memory page sharable resource utilization virtual memory work set private unmodified table slowdown ratio execution time translate code original code operation slowdown one two three four five six seven eight nine ten eleven twelve b c string string string split split noop function call b property write minimal syntactic structure moderate syntactic structure minimal computation moderate syntactic structure computation image swap utilization thus compute throughput degradation eighteen show equation one one one fifteen one fifteen one memory usage measure increase negligible amount also find network usage increase slightly detail section client performance evaluate client component implementation interposition layer network load client memory usage latency page render design measure overhead individual translation table list respective slowdown result average ten trial evaluate repeatedly last half second first eleven standard deviation ten less two last case less eight slowdown ratio compute use average time web vol one three article eleven publication date nineteen filter dynamic require per evaluation without interposition framework fourteen measure expect change rewrite hence slowdown slowdown measure case statement examination show translation insert semicolon one change one result seven slowdown measure expect incur slowdown comparable interpreter slowdown detail section four translation introduce additional logic around method call function call property write lead slowdown range slowdown line good al worse achieve rewrite target example schneider pay price previous rewrite deal curious difference slowdown two string additional experiment show difference attribute method require three time much split method also surprise property write greater slowdown function method call property write need guard interpose write dom text property script explore overhead translate code various complexity minimal syntactic structure measure cost translate evaluate simple assignment large slowdown additional work do framework parse construct ast modify ast output new ast program two subsequent moderate syntactic structure measure cost translate evaluate simple loop simply demonstrate cost computation inside simple loop increase cost translate code decrease small fraction overall computational cost last measure overhead perform simple manipulation two image design measure relative importance engine manipulate layout page code swap two image require two property write ie already describe translation add overhead property write nonetheless overall slowdown less eight particular raw time swap image increase suggest even large translation add language construct may still quite small context complete web page summary incur overhead language construct must add logic web vol one three article eleven publication date nineteen c reis al fig eight latency without quite small within context dom embed script design measure overall client experience framework place particular include dynamic parse translation occur page render primarily evaluate performance translate code accomplish task relative untranslated code accomplish task end script instance ie seventy web page ten time reason give evaluation component maintain object ie cache library cache represent worst case client latency page object must fetch network library must fetch include overhead three filter discuss section repeat without framework translation set upper limit time render web page include launch secondary display embed object wait secondary render visually verify programmatic signal render complete indeed correspond user perception page render ie hit several time hit framework translation present framework translation absent discern pattern experiment include factor outside control network originate content expect page time constant rerun experience figure eight show page render without average add seventeen second page render time way contrast standard deviation render time without ten second web vol one three article eleven publication date nineteen filter dynamic fig nine breakdown latency ten page fig ten latency parse figure nine break latency ten page take time render experience average increase latency second require second average without second average second increase latency find second could attribute overhead dynamically translate within ie attribute remain overhead effect overhead evaluate translate code time modify break latency dynamic translation two part time parse ast convert modify ast back string time modify ast find time parse string always seventy overall latency dynamic translation average eighty overall latency figure ten show parse time versus number fit line data yield average parse rate per second variation parse rate observe thirteen figure eleven show memory usage page render without find private memory page sharable client memory metric increase web vol one three article eleven publication date nineteen c reis al fig eleven memory usage client render transform page private memory usage increase average increase quite consistent page cause memory usage increase three also measure increase network load single run page without measure average increase nine less standard deviation network load individual trial due background traffic expect rewrite slightly increase network load add script translation happen client eight motivate application prevent exploit know browser framework general however useful wide variety relate browser security section explore framework use comprehensively translate link aid script sandbox script enable certain measure comprehensive link translation one application outside security involve comprehensive link translation rewrite offer web useful web apache apache foundation case rewrite apply link appear page transfer network link generate script code page rewrite contrast intercept link page user attempt visit whether appear original source page comprehensive link translation useful many example corporate sit product often contain link accessible within provide remote authenticate access may desirable case link must translate use proxy server use link redirect page comprehensively identify web vol one three article eleven publication date nineteen filter dynamic translate whether exist original generate script would allow sit easily export view remote authenticate access similarly link translation policy may useful search provide cache result currently visit cache copy search result original server unavailable embed link image continue point unavailable server policy could translate link cache page redirect search engine cache allow browse entirely within cache deploy search engine combine vulnerability discuss paper search engine cache could provide search browse experience well coral content distribution network freedman al could also benefit link translation fetch coral append domain name policy could easily perform link give page allow transparently use coral navigate web site script another application outside realm security use provide extensible profile functionality many integrate vary across always extend new feature use could offer browser agnostic interface opportunity easily register custom hook log functionality within page code perhaps even importantly allow code run client without require trust client could easily include call trace conditional profile information currently investigate use instrument analyze web wang would allow profile maintain web use practice script useful task beyond browser exploit prevention well example many web sit today host content social network sit sit currently attempt prevent script appear content script could leak private information attacker identify remove script challenge however often leave sit vulnerable script attack address could create sandbox content sit might prevent script run certain page propose al alternatively author sit might want allow certain dynamic content simple script function web vol one three article eleven publication date nineteen c reis al call approve site author police could enforce correspond sandbox otherwise restrict action script page may take content example propose set script action aid finally use enforce user interface browser useful prevent deceptive behavior employ sit example sit use change text status bar hide true destination link open new without location bar use prevent behavior ensure status bar location bar always display authentic information aid determine whether actually visit site expect overall comprehensive interposition make useful security exploit prevention general design support wide range additional well nine relate work first compare protection section discuss relation extensive work code rewrite interposition section remote exploit defense prior work shield wang al propose use filter identify block network traffic would exploit know shield maintain state machine network stack allow recognize packet trigger vulnerability however shield approach address dynamic content script web document since undecidable whether script code document eventually exploit vulnerability share shield focus filter contrast shield use interposition allow handle exploit dynamic like shield also employ predicate specifically detect past present use virtual machine introspection replay joshi al result allow time patch application postpone application patch exploit occur roll back system state apply patch exploit occur instead offer protection patch test otherwise delay administrator vulnerable system buy time even case exploit immediately attempt additionally support flexible deployment example require client browser run inside instrument virtual machine opus al seek address problem patch allow patch apply without restart application opus provide tool increase reliability dynamic patch web vol one three article eleven publication date nineteen filter dynamic development however tool reduce eliminate programmer burden produce correct dynamic patch vigilante costa al focus worm containment automatically detect prevent spread worm traffic vigilante combine rapid distribution alert automatic filter generation along vulnerability detection page pax dynamic analysis song even vigilante admit false negative share speed constraint vigilante since browser exploit require human involvement therefore spread time scale worm therefore able trade speed automatically generate vulnerability filter accuracy filter singh al autograph kim two exemplary use pattern match block network traffic contain exploit pattern match scale high data rat crucial author goal stop worm network choke point script focus seem difficult detect consistently pattern match trivially modify client wang al aim discover web distribute malicious code virtual machine automatically fetch content web use discover exploit exploit discovery complimentary approach provide protection finally number aim sandbox browser effect protect operate system impact exploit include system call interposition al al protect mode ie vista may limit damage user compute environment protect browser allow attack easily conduct exploit cox al take confinement approach one step virtual machine use manifest restrict browser traffic know could help mitigate many browser relate difficulty get manifest widely adopt unclear interposition interposition code rewrite use previous work achieve additional safety otherwise modify behavior exist code code rewrite one several backward compatible choice technique influence performance directly modify execution environment virtual machine highest deployment work instead use level indirection emulation ease deployment incur high performance overhead thus schneider al web vol one three article eleven publication date nineteen c reis al employ code rewrite low deployment smaller performance overhead require emulator characterize interposition target interposition since technical target require different compare approach interposition target must address new combination technical challenge present rule implicit garbage collector pervasive reflection object model imply lack static type machine code many approach focus machine code interface whether rewrite binary emulate fault isolation al rewrite binary code insert check create prevent code write jump address outside fault domain create memory code within process recent al use binary rewrite provide flexible access control additional integrity guarantee server also rewrite machine code case allow program hardware etch al rewrite machine code profile measurement program shepherd al dynamic binary instrumentation tool goal offer profile support program shepherd goal monitor control flow prevent transfer control data might include malicious code use rewrite machine code interface need address four challenge rewrite influence reflection garbage collection type work interpose machine code interface add semantics define term low level enforce memory boundary indeed schneider note difficulty extend rewrite machine code interface enforce internal application interposition target document tree abstraction system call interface much previous work modify user level program behavior interpose system call interface introduce system call interposition simplify task trace emulation al use system call interposition confine untrusted secure sandbox environment note try interpose system call interface violate os semantics side effect overlook indirect al discuss architecture address describe approach provide similar guarantee rewrite code link system call interface also rewrite work system call interface differ goal technique system call interposition guard external web vol one three article eleven publication date nineteen filter dynamic application goal guard resource document tree use rewrite technique interpose system call interface present four technical challenge reflection garbage collection type relevant rewrite example also wrap accomplish interposition method need handle rule need implement swap several piece previous work schneider schneider al include previously mention use rewrite virtual machine interface interface provide good support reason similar work poet mechanism rewrite enforce security express language schneider pervasive reflection rule object model force us develop several need rewrite example rewrite interpose reflection must interpose property read write well loop achieve similar control reflection additionally rewrite achieve complete interposition modify use method without maintain state though previous work allow modify add state simplify policy construction schneider contrast must modify appropriately handle possibility function vice also must maintain state require careful attention interaction garbage collector web script al independently propose rewrite approach improve browser security provide formal semantics subset language prove rewrite process sound ie rewrite code respect transparent ie rewrite affect behavior code respect policy match however technique evaluation different example use edit automata write al present two example explore rewrite protect critical browser focus attention al rely client deployment finally performance evaluation cover many rewrite offer full interposition anonymity service use rewrite engine fail provide either interposition transparency martin web vol one three article eleven publication date nineteen c reis al extension browser allow run additional script document load provide complete interposition exist script code document tree ten conclusion web browser become popular vector attack filter exploit make challenge dynamic nature web content present general framework rewrite page embed script enforce behavior design provide complete interposition underlie resource document tree transparent tamperproof transform content rather support deployment web evaluation show add approach exist antivirus increase fraction ie patch protect network level protection do moderate overhead though focus application filter paper also serve platform new functionality web comprehensive link translation script script would like thank gribble bill alec feedback paper also would like thank anonymous helpful comment reference g p opus patch update security security j p computer security technology plan study vol vol electronic division air force command field apache foundation apache server project w w l j vulnerability case study analysis c p wright c time application security patch optimal large installation system administration conference open source emulation project advisory malicious tag embed client web quest costa j l l p vigilante containment worm proceed symposium operate cox r j g gribble levy h platform web proceed symposium security privacy g c guard system address space proceed symposium operate design implementation web vol one three article eleven publication date nineteen filter dynamic schneider f b enforcement stack inspection pro symposium security privacy schneider f b enforcement security retrospective flexible code safety proceed new security workshop symposium security privacy freedman j e democratize content publication coral proceed network design implementation protect mode vista trap practical system call interposition base security tool proceed network distribute system security conference b delegate architecture secure system call interposition proceed network distribute system security conference r brewer e secure environment untrusted helper security symposium n defeat script injection attack embed proceed world wide web conference b interposition transparently interpose user code system interface proceed operate system joshi king g w p detect past present predicate proceed symposium operate system e wang h j live monitor use adaptive analysis maintain web xi kim ha b autograph toward distribute worm signature v secure execution via program shepherd f virtual machine specification sun g content martin service security bulletin security symposium security symposium security symposium security bulletin security acceleration server foundation security announce j song dynamic taint analysis automatic detection analysis signature generation exploit commodity proceed network distribute system security conference pax pax g lee wong w levy h b instrumentation optimization use etch workshop h lee g wong w b n levy h structure performance j h protection information computer proceed symposium operate web vol one three article eleven publication date nineteen c reis al secure compute scanner l antivirus protection flaw still inconsistent singh c g savage worm fingerprint pro symposium operate design implementation e g r j b n design implementation distribute virtual machine network proceed symposium operate snort open source network intrusion detection system smith r b self power simplicity proceed conference program useful useful virtual conspiracy script r graham efficient fault isolation proceed symposium operate c memory resource management server proceed symposium operate design implementation wang h j c r shield network filter prevent know vulnerability exploit proceed wang ym beck x r c king web patrol strider find web sit exploit browser proceed network distribute security conference n instrumentation browser security proceed symposium program language receive revise june accept web vol one three article eleven publication date