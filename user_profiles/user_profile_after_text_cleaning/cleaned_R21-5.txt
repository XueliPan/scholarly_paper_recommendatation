embed technology symposium lightweight model complex state stream process computer science computer tu abstract last calculus use extensively model analyze embed process continuous stream towards bound arrival process stream bound process capacity serve input model use calculate delay suffer stream maximum backlog utilization functional model although amenable inexpensive analysis limit model capability particular process block write process depend state buffer model straightforward manner lead number recent use model stream process event count automata although model offer better model flexibility suffer usual explosion problem paper show number complex model lightweight manner use feedback control technique avoid explicit state model hence explosion problem propose model analysis therefore extend original functional model useful way cover much problem domain compare previously possible without explicit illustrate utility two case study also compare analysis result obtain detail system significantly time consume one introduction escalate complexity stream process prompt need model analysis go beyond traditionally study literature many process irregular stream rely highly dynamic resource management b two two input stream pen output stream figure one example system model model use standard event model schedule context network calculus framework four seven originally propose model communication network extensively adapt recent model analysis embed process continuous data event stream see five result framework often refer calculus literature design model analyze heterogeneous compositional manner key feature framework use abstraction model time input stream well availability particular time data stream specify constraint maximum minimum number data may arrive every time interval length collection different value capture function l denote lower data arrival process word l specify minimum maximum number may arrive within time interval length clearly function admit rich collection arrival sequence standard event model periodic sporadic periodic jitter turn special case specification resource availability also specify similar fashion l shall specify minimum maximum number process resource within time interval length give function denote l denote l possible compute use purely algebraic bound system maximum delay suffer stream maximum backlog data front resource also possible denote bound l ing process stream may serve input next resource process stream output may denote repeat time output stream compute see figure one figure one show architecture consist n pen process input stream sequentially input buffer store incoming data wait process service render constrain similar service function bound remain resource use process data stream besides buffer delay incur input stream resource various performance utilization resource output jitter maximum delay total buffer requirement system also obtain bound eleven owe functional nature analysis framework involve algebraic allow highly efficient computation system fully compositional manner however model complex state awkward common one service offer resource depend buffer model easily model state information use time automata one nine event count automata six often lead state space explosion apply realistic paper present technique model variety complex state exist framework feedback control mechanism without resort explicit model firstly technique significantly enhance model power framework associate model secondly model system composition multiple abstract component capture relevant well process semantics compute functionally use result thereby attain high efficiency thirdly technique enable schedule model efficiently analyze modular manner case study illustrate method seamlessly integrate current framework time show effect capture state accuracy analysis also provide experimental validation analysis method simulation analysis result obtain match well however analysis significantly faster simulation twelve relate work first line relate work concern develop task event model generalize classical periodic sporadic event model assume fix execution time task towards time automata relate recently use various model analyze task schedule see one eight nine overcome lack model framework propose event count automata six retain abstraction use although model much expressive capable represent wide variety suffer state explosion problem become inefficient analyze large system also extend lately model complex event pattern task activation scheme example ten present method model conditional input buffer particular model task trigger multiple input stream use trigger whenever event available either input stream activate least one event stream thirteen propose way compute delay output arrival function data stream split join system execution follow activation semantics take account data stream data distribution base different type delay correlation jitter response time individual also consider twelve analysis complex schedule schedule task study ten eleven respectively time hierarchical event stream generate communication stack model nineteen propose handle though effect finite buffer study context data flow graph fifteen instance algorithm compute buffer satisfy throughput present analysis schedule multirate data flow finite buffer consider sixteen also use mechanism allow semantics preserve implementation synchronous model loosely time trigger however applicable set also hybrid combine various analysis example unify fifteen two single framework able model use abstract event stream use merge fourteen capture complex high accuracy also integrate use technique provide eighteen achieve higher accuracy use alone efficient use alone method propose plug integrate framework increase efficiency analysis since use analyze number system instead use turn reduce total analysis time thirteen organization paper next section describe basic framework section three present analysis method begin example use illustrate method follow overview analysis technique section section establish theoretical result enable analysis component apply model schedule section section four present experimental result use two case study derive illustrate benefit analysis finally conclude discussion prospect extend study initiate paper two calculus background base min algebra four seven model data stream service network function take value min semiring formally min r commutative semiring zero element unitary element zero consider set f f r zero f f one define follow two f minimum denote min convolution denote f g f r f g min f g f g f g triple f also commutative semiring convolution see analogue classical convolution filter theory transpose min algebra zero element function unitary element e zero zero two important subadditive min denote let f g f f f n f zero e f f n f f g f g follow lemma hold subadditive closure operator lemma one seven theorem let f g h f consider inequation f f g h f h g arrival service curve give data stream traverse system contain single process element let cumulative arrival function ie number data arrive time data item network packet say upper arrival curve r mean number arrive time never important particular case arrival curve affine function represent maximal number arrive simultaneously maximal burst maximal rate consider cumulative departure function stream define similarly number leave system time system provide minimum service curve particular case service curve peak rate function rate system process r per unit time pure delay service curve delay zero otherwise combination two service curve give function r denote zero strict service curve service curve r let last instant packet system performance bound backlog delay easily char framework definition one let arrival function data stream system correspond departure function backlog stream time b delay assume fifo order process stream time zero give arrival curve service curve possible compute maximal backlog delay theorem one four seven let arrival function arrival curve stream enter system service curve let departure function one b sup zero two zero zero maximal backlog maximal vertical distance maximal delay give maximal horizontal distance two function figure two illustrate fact figure two guarantee bound backlog delay bound output stream remain resource system determine use theorem two theorem two four assume stream constrain arrival curve enter system service curve three model complex modern usually heterogeneous network process multiple data stream use complex schedule often process stream depend available service also internal state system one typical example amount memory limit hence internal buffer hold process accommodate certain capacity avoid loss data processor may implement output buffer ie stall whenever buffer full otherwise save resource may proceed process next data stream base share policy case output buffer store currently process stream fill model analysis describe require us take consideration impose among different system original framework present section two express furthermore assume buffer infinite result able represent correctly analyze approach develop recently stream process six seventeen encapsulate state information however analyse become inefficient large due explosion section present functional analysis technique develop top original framework capable capture complex achieve high efficiency shall illustrate method example describe general easily model analyze use approach one output stream arrival illustrative example curve two strict service curve remain resource process stream bound service curve figure three sketch system architecture pip application two video stream decode first stream represent set regular video clip high motion content latter represent set still image fully decode pes display output device paper assume service curve strict ensure positiveness remain service however method restrict assumption result concern single one obtain general result multiple pes use composition example two pes sequence respective service curve one two overall service curve one two see four seven detail result base min plus algebra input stream one input stream two three one two one two output device figure three pip application system consist three pes task application partition map show figure variable length decode inverse quantization task run inverse discrete cosine transform motion compensation task run process first input video stream process second input video stream partially decode stream denote two store buffer respectively process two fully decode stream write buffer read output device one one schedule two stream two use schedule policy one higher priority two implement buffer full processor process two do regardless whether give system architecture interest answer question concern behavior system one maximum backlog buffer two maximum delay experience stream three system guarantee none buffer overflow correct evaluation essential optimize design system mention use standard framework analyze system since implement schedule scheme functional analysis approach construct model system describe input stream system arrival curve process resource system service curve process stream resource represent abstract component whose input arrival curve input stream service curve resource output abstract component arrival curve bound output stream service curve bound resource leave process input stream connect abstract follow flow stream leave right order different stream process share resource top bottom obtain complete abstract model system figure four depict abstract model system architecture figure three figure one two denote arrival curve two input video stream one two three denote service curve respectively similarly four five service curve bind two fully process stream process stream represent abstract whose output arrival curve denote one one two one one two two one two three three three one two four five figure four abstract model system figure three two process output stream one two comprise two abstract c three since process one two remain service connect input c three finally consumption model connection arrival curve abstract follow sequence correspond stream process analysis proceed evaluate abstract component thereafter combine evaluate result analyze component first determine input arrival curve effective service curve component yet know effective service curve service curve bound actual resource use process stream take account state system base obtain input arrival curve effective service curve compute different performance bound component use theorem one two figure four since state dependency succeed effective curve equal one two respectively reason output arrival curve one compute one one use theorem two similarly arrival curve two derive two two hand since process contingent state buffer actual resource use process one depend total available resource also rate output device capacity hence effective service curve three dependent three four capacity effective service curve turn affect remain service curve three describe come section obtain three three apply theorem two compute output arrival curve two input effective service curve exactly four five since two next three section present technique compute effective service curve component take three computation one three account subsequent system section look case process stream component dependent one buffer next component section move one step solve general case process within component dependent buffer state many tandem computation effective service curve schedule use policy subject state buffer system describe section go detail first prove follow lemma use formulation lemma two let f g two function c constant one f g c f c g f g c two f g e f g f g f g f n zero f n proof one let f zero c zero every function f f f f c formula follow operator two f g f g n e g n g f g e g result f g n n zero n zero f n hence simple single buffer section model setup process stream interrupt output buffer full ie do extend exist framework use feedback control mechanism system show figure five consist two pes sequence second one finite capacity pes respective service curve one two backlog exceed service interrupt function respective arrival process entrance system service first output system one two figure five system two pes sequence second finite capacity buffer backlog second exceed one must simple solution ensure put feedback control admit amount data ensure backlog constraint satisfy entrance arrival process become one min one two figure six feedback control ensure second buffer figure six represent system translate follow min one two lead follow inequation min two one min one two one lemma one solution inequality one two one prove follow lemma lemma three effective service curve take account interruption service full one one two one suppose arrival curve input stream maximal backlog delay well arrival curve output stream easily deduce one follow theorem one two multiple buffer sequence suppose several pes sequence buffer finite capacity effective service curve first one infinite capacity depend buffer service curve feedback control induce cycle network show figure seven two three n one figure seven line pes finite buffer consider system n pes process sequentially pen respective buffer theorem three give formula compute effective service curve consider subsequent pes similar network study see seven goal reference compute overall service curve interest real service curve first server order dimension size buffer take account phenomenon theorem three effective service curve one take account feedback control pes give one one b j j n min proof result prove induction step exactly correspond lemma three suppose result hold n pes let us show n one pes system obey follow ai min two n one particular concern min n equivalent n n one replace system n one pes sequence equivalent system n pes n one first pes service curve last service curve n n tie buffer two n remain consequently apply induction hypothesis system obtain service curve first denote fi n f one one e f one consider last factor f f one f two f one f replace f n expression f n n n n f n f e f n lead desire formula finish proof remark formula take account fact line backlog constraint buffer infinite capacity service curve depend service curve j j indeed case fi f analysis bound system easily compute fashion do simple case impose single buffer f j schedule recall illustrative example figure three section resource share two stream one two process policy use dependent state buffer well stream specifically first process one process two empty full analysis schedule policy divide two phase first determine effective service curve use process stream take consideration state dependency obtain effective service curve compute various performance use result present section two effective service curve three use process one take account state dependency compute use lemma three theorem three describe effective service curve use process two also one bound remain resource process one compute use corollary one corollary one give service curve process higher priority stream arrival curve assume effective service curve use process stream take account remain resource give lower priority stream bound service curve proof give zero maximum number process interval length theorem since start process lower priority stream soon process output buffer full amount service give lower priority stream interval length least prove corollary use compute effective service curve maximum backlog maximum delay output arrival curve easily compute use theorem one four experimental case study employ two case study evaluate theoretical result illustrate effect behavior system first case study aim show immediate ramification processor stall buffer system second case study illustrate intermediate effect block one stream another time demonstrate technique use evaluate multiple input stream schedule use schedule policy case study one stream figure eight show architecture consist two pes decode input video stream sequence application partition map onto pes task run task run cod input stream arrive system constant rate initially process partially decode stream subsequently store buffer b process result fully decode write buffer b finally transmit output video device particularly interest behavior show rectangle box input video stream b b output device figure eight application although input bite stream enter system constant execution time task may vary number constitute partially decode also constant consequently stream write b highly assume behavior stream specify arrival curve b variability execution task run capture service curve f f represent clock frequency c implement b stall b full output device read b constant rate r order understand effect behavior system permute different b f observe result change maximum backlog b maximum backlog b compute follow lemma three compare simulate result theoretical technique implement use provide calculus toolbox obtain arrival service curve obtain arrival curve characterize partially decode stream collect execution trace different task simulate version instruction set simulator three trace measure execution demand task derive function x x denote number arrive b time interval zero function x use compute arrival curve partially process stream similarly base execution demand task compute function k give maximum number cycle require k consecutive combine frequency f derive service curve f service curve represent consumption output device give c r analysis result figure nine report estimate value maximum backlog b different f vary buffer b capacity buffer b b b r e f f b e h f g l k c b x l k c b r c f r e b n thirteen fourteen sixteen fifteen frequency seventeen figure nine maximum backlog analysis b b eighteen nineteen f increase process thus lead decline backlog different b however beyond certain threshold frequency value maximum backlog b stabilize fix capacity b happen point b full b process available space b therefore increase capacity b maximum backlog b decrease also illustrate figure thus run processor beyond threshold frequency reduce utilization rate fix memory size designer therefore determine processor frequency correspond buffer system maximize utilization rate processor compare method approach implement simulator use conjunction instruction set simulator three run detail simulation simulate result match well compute use analytical method describe particular analytical bound always less five obtain simulation hand perform analysis use toolbox incorporate method significantly faster pursue pure simulation approach less minute several note also result simulation unable provide formal guarantee maximum backlog may incur system case study two schedule tiple input stream case study analyze example system describe section assume two input video stream arrive constant eight fully decode read output device rate per second set respectively give value fix interest backlog respect different value frequency capacity three use theorem one first obtain arrival curve one two two input stream service curve one two three three pes see section one one compute arrival curve one characterize output stream similarly arrival curve two represent output stream derive two two base one three capacity follow lemma three compute effective service curve process three output stream consider remain service curve three use process second stream deduct one use one maximum backlog calculate two figure ten plot maximum backlog relation capacity frequency observe figure maximum backlog around region highest reversely backlog area fact result show figure demonstrate maximum backlog always proportional frequency capacity thus maximum backlog input buffer correspond lower priority stream exhibit pattern higher priority stream see case study one demonstrate effect feedback control one stream stream share resource table one report total maximum backlog two buffer reference capacity four x ten l k c b r c f r e b n two b r e f f b e h f g l k c b sixteen fifteen fourteen thirteen twelve eleven one nine thirty frequency g three zero c p c f h e p l b f f e b n b e f c r b l c k one figure ten case study two maximum backlog lower priority stream table one total buffer space require total backlog feedback thirty frequency last column table give value case state dependency observe consistently capacity finite impose system total backlog much compute backlog case thus assume buffer infinite capacity may potentially lead inaccurate result show case study therefore important us capture model analysis simplicity assume case study implement single buffer system analysis case impose multiple buffer do similarly except one may additionally need use theorem three compute effective service curve offer processor stream technique present also employ analyze two stream additionally also model give case study use carry analysis use sal symbolic analysis laboratory model checker twenty observe experiment analysis time use much use example case study one use take average ten time compare use system become complex speed near exponential number pes system show analyze use method considerably efficient use explicit model five conclude remark formulate method enhance original framework model analyze variety use feedback control technique analysis purely functional thereby avoid explosion problem face explicit approach since number originally model analyze functionally meaningful integrate propose method hybrid framework eighteen also interest extend technique capture complex instance synchronization stream reference one e schedule time automata theoretical computer science two two r r k r system level performance analysis approach digital three e infrastructure computer system model computer two four p network calculus theory deterministic queue volume springer five l general framework analyse system embed system design date six l x p event count automata model stream process seven chang performance guarantee communication network springer eight e p p w task automata information computation eight nine e l p w analysis use time automata theoretical computer science two ten w l complex task activation scheme system level performance analysis eleven r r scenario aware analysis complex event model distribute twelve r r r improve output jitter calculation compositional performance analysis distribute thirteen k l e performance analysis use correlate stream date fourteen r l combine approach system level performance analysis embed fifteen e lee g synchronous data flow proceed nine sixteen schedule analysis journal advance signal process seventeen c wall w time automata task model eighteen l x p l compose functional performance model analyze heterogeneous nineteen j rox r model event stream hierarchical event model date twenty symbolic analysis laboratory stein r performance analysis complex integration graph compositional performance analysis date l framework evaluate design packet process c p di implement synchronous model loosely time trigger e l quantitative characterization event stream analysis hard e l calculus tool box e l hard journal computer system two p g smite efficient computation buffer multirate real time