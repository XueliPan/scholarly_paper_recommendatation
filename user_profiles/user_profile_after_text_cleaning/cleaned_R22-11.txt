international workshop embed fast instruction set simulation institute compute architecture school university jam clerk maxwell build road unite kingdom abstract instruction set indispensable tool design space exploration development process exist despite recent progress improve speed functional instruction set simulation still prohibitively slow simple program severely limit applicability performance evaluation complex embed paper present novel approach namely prediction cycle count base information gather fast functional simulation prior train evaluate approach arm architecture simulator large set demonstrate capability provide highly accurate performance average error less fraction time simulation one introduction instruction set popular tool among embed hardware variety use enable early exploration architecture design space provide reference model hardware verification equip development platform give widely different come surprise scheme emerge differ speed accuracy level detail model simulator spectrum range slow simulation precise time fast functional simulation time information latter method c ates instruction set level abstract away hardware implementation detail increase complexity new design emerge challenge current simulation technology require fast possible stage design cycle additionally recent compiler technology code sixteen rely profile data steer process require many program work motivate huge simulation speed accuracy functional instruction set example performance gap twelve order magnitude interpretive simulation another factor ten improvement report thirty translation two improve performance simulation still match functional simulation typically operate per second compare functional operate typically million per second higher speed however able provide cycle count collect statistical information instruction count possibly number cache access paper present novel approach instruction set simulation combine benefit functional propose regression model build performance model initial train stage deployment stage use accurately predict performance new program base information available functional simulation evaluate methodology arm implementation embed show achievable prediction error less average international workshop embed program new program simulator functional simulator train data regression solver predictor cycle count train stage deployment stage figure one overview train deployment stag paper structure follow section two present background material regression analysis detail regression base cover section three present analyse empirical result section four follow discussion relate work section five work conclude section six two background section introduce statistical regression use work regression analysis regression analysis statistical method examine relationship dependent variable independent x relationship model function f f x regression function f may form particular choice appropriate functional form regression model f purpose approximate f design decision depend knowledge mechanism generate data example linear relationship x expect would choose linear regression model like n n zero one popular regression model include polynomial wide range nonlinear function frequently independent x factor affect observe value always equal calculate value generate f give x due lack fit error call residual regression model modify accordingly zero two ym n equation system n build follow zero n n one ym zero n n rewrite matrix form x three vector regression x model matrix regression model choose seventy international workshop embed linear function model calculate way make f close possible true regression function f method sum square prediction model observe data ie zero j four x two n x compute value represent estimate regression note linear regression test whether data linear assume data linear find slope intercept make straight line best fit data hence necessary check linearity assumption proceed regression base prediction three section present novel methodology explain exploit regression model predict cycle count previously unseen program assume functional simulator enhance various counter count different type possibly also cache memory access initially available base approach construct performance predictor train stage set program profile later deployment stage performance previously unseen program predict illustration two stag give figure one train stage set execute profile functional program exact cycle count value various counter maintain functional collect together form single data point x soon data available program train set regression solver calculate regression accord regression model store later use enter deployment stage simulator use perform functional simulator simulator use generate characteristic profile vector x program examination regression model previously calculate use predictor evaluate point x result predict cycle count new program present use compiler compile train deployment stag investigation choice prediction accuracy subject future work performance prediction functional frequently maintain statistics may include total number different type cache read miss possibly e g branch detail relate state processor pipeline however usually available use available event counter construct regression model relate observe cycle count result simulation train stage hypothesis record functional contribute towards total execution time program furthermore expect average cost type less constant within single program run across program may necessarily case small program program expect stable average cycle count type instruction cache access motivate us expect linear relationship event counter x cycle count regression line fit set train data fit slope intercept value use predict response specific value x include original set essentially application equation one four empirical evaluation section discuss evaluation approach present empirical result arm instruction set simulator comprehensive set embed tool infrastructure evaluate performance prediction methodology arm instruction set simulation use functional instruction set latter calibrate implementation thirteen core feature pipeline instruction data cache respectively support integer yield time accuracy three support hardware implement library compile use level target arm simulate manner without fact simulator oppose frequently state time write recent release contain functional hence use slightly outdated version international workshop embed counter description instruction counter add sub tst reg reg total nullify total memory page allocate total read read miss total read read miss total write write miss read read miss total read read miss total access total allocate retire total cycle table one overview counter maintain functional instruction set underlie operate system experiment conduct base host platform run detail extract show table one general relate instruction count total break across different instruction type memory system number memory page access access access internal operation state machine finally record total cycle count use train accuracy evaluation table two program take six suit use experiment large number program necessary provide sufficient train data also demonstrate wide applicability cycle approximation methodology represent embed cod notable cod three four include evaluate impact train result model selection selection appropriate regression model linear polynomial various nonlinear function design parameter critical impact well regression function describe observe data hypothesis outline section three cycle count linear function various counter maintain order test hypothesis compare calculate cycle count observe cycle count perform regression entire data set program counter except observe cycle count figure two relationship complete set note prediction yet unseen program take place point analyse well construct linear function capable describe know data point graph figure two clearly show close match observe calculate cycle count data point concentrate near ideal straight line exceptional especially lower end scale calculate find average error detail breakdown distribution show figure two b relative error frequency plot histogram percentage error interval diagram show vast majority program describe small error fact fifty program error less one program error less eight three program error fifteen maximum error however relatively large value summary show linear regression model appropriate describe relationship observe counter cycle count introduction small error observe calculate result inevitable however show error typically small average less five give us enough confidence choose linear regression model predict cycle count observe counter accuracy detail next evaluate performance model compute cycle count new ie previously unseen program use standard statistical cross validation approach single observation eliminate data set use validation data remain use train data process repeat program data set program use validation data result cross validation process entire set program figure three four table three figure three four show similar diagram figure two predict cycle count versus observe cycle count general better cycle count result data point closer straight line origin unit slope four experiment perform cross validation base different international workshop embed suite program twenty sweet ten eighteen nineteen suite three four one thirty sixteen five seven small small line code description per program fifty fifty fifty worst case execution time three six two cryptography radio audio process table two overview suit use experiment calculate cycle count observe cycle count b relative frequency histogram percentage error figure two evaluation linear regression model set instruction counter instruction cache counter instruction cache counter counter figure three result show case instruction count use regression model data point cluster around ideal straight line however error prediction noticeable especially towards lower end scale average error standard deviation quite high value respectively maximum error much higher reach one prediction accuracy recover international workshop embed instruction counter b instruction cache counter figure three cross validation predict cycle count observe cycle count longer run though surprise minor behaviour relative impact small average long program run combine instruction cache access counter produce result diagram show figure three b prediction accuracy significantly improve scheme mean absolute maximum reduce standard deviation respectively inclusion additional memory relate counter improve prediction quality see figure four average error reduce also maximum prediction error observe one significantly smaller control experiment include additional data relate operation state machine model processor pipeline behaviour information typically available functional correspond result show figure four b interestingly additional information small impact mean absolute error improvement cache hand standard deviation importantly maximum error increase suggest include number regression model might always beneficial care must take choose balance number train data point determine train acceptance simulation methodology international workshop embed instruction cache counter b counter figure four cross validation predict cycle count observe cycle count cache instruction cache error dev error table three mean absolute error standard deviation maximum error different parameter set train largely depend amount train deployment stage enter ideally would like able train model small number small apply whilst retain full accuracy section hence evaluate much train require well performance estimate small use train answer question much train require accurately predict performance choose n ninety estimate regression model base train data predict execution time ten figure five find show prediction error ten program various value n different number train error relative stable peak train set size show limit train data median use average function individual extreme would effect arithmetic mean international workshop embed figure five median prediction error ten application train n good prediction accuracy still achievable value n ninety however observe error increase quickly make meaningful prediction impossible suggest exist critical threshold size train set regression base prediction use result demonstrate amount train safely reduce sufficiently small set small program still construct predictor capable predict performance program several order magnitude program train data set result encourage investigate ways identify minimal still representative set train program goal train cost domain interest choice train one application affect prediction accuracy another domain order test domain suite three four comprise include study train base program except cod perform figure six result five program experiment plot prediction range seventeen program symbolic channel router calculation dominate pointer array arithmetic perform limit dynamic storage allocation exhibit different behaviour lot dynamic storage allocation throughout life program little pointer arithmetic dynamic memory allocation likely introduce make difficult predict less dynamic cod average prediction error cod figure six domain prediction accuracy cod train embed thus slightly smaller error cod domain train data result suggest might little impact train domain prediction accuracy however sufficient evidence point confirm speed present methodology shift much work train stage train program execute functional simulator regression determine clearly cost train dominate simulation take several run depend complexity simulate processor core specific choice train program calculation regression however fast typically add second overall train time important train time time require approximate cycle count new program deployment stage prediction involve calculation linear function single point point determine functional simulation program operation five relate work instruction set simulation active research area focus particular fast compile instruction set recently hybrid compile fact short use standard system able measure time international workshop embed simulation combine interpretive compile simulation present relevant work artificial neural network train estimate cycle count new program contrast work base statistical regression open mathematical analysis apart technical difference methodology yield significantly higher prediction accuracy term average maximum error statistical simulation nine base simulation small synthetic program trace derive statistical program profile rather actual program yield accurate performance estimate several order magnitude faster full simulation work share commonality statistical simulation also rely statistical profile various counter maintain functional simulator however different statistical simulation construct synthetic trace feed simulator compute cycle count directly base train data linear regression model program similarity exploit eleven goal transform set independent program relative performance base store previously profile suite approach share train concept work fail provide prediction accuracy may due choose set specific model train noise construction use linear regression model performance analysis processor subject fourteen work estimator expect performance construct base similarly regression model use seventeen construct performance power five use compilation onto virtual instruction set subsequently translate c time execute early work extend six however lack convince empirical result fifteen extend base instrumentation generic executable design support early stag soc design cycle whilst show work well two small simple core flat memory hierarchy questionable approach scale complex memory hierarchy introduce work use train real hardware performance may affect noise due io os activity compiler base approach performance prediction cover seven eight twelve primary goal support compiler select good scenario preservation performance trend better worse higher importance absolute accuracy six summary future work summary paper develop instruction set simulation methodology combine benefit functional simulation use prior train regression base performance prediction approach able exploit statistical information typically provide cache model enhance functional estimate cycle count average error less prediction stage technique rely detail model processor pipeline instruction memory access counter thus reduce level detail simulation able generate performance result speed functional simulation whilst retain much accuracy simulation evaluate technique extensive set arm implementation demonstrate effectiveness predict execution time program even limit train difference find make train data versus different application indicate specific selection train critical technique work future work future work extend present work two reduce maximum prediction error advance statistical may addition cycle count provide user confidence value uncertainty generate result b evaluation latter plan apply methodology across set different embed include complex commercial high performance digital signal addition work integration technique publicly available simulator evaluation industrial suite work contribute towards faster turnaround cycle design space exploration make automatic code viable alternative manual code tune many result strictly necessary good sufficient addition international workshop embed approach particularly useful support fast simulation complex embed slow speed simulation often prohibitive reference one two arc arc tool three suite four e breach g efficient pointer array access technical report university five j r e w l performance estimation proceed design tool cod zero six g w data analysis method proceed performance prediction date two seven p c compiler approach performance prediction use model lecture note computer science eight c j b g fast compiler evaluation use base performance prediction proceed compute seven nine l j e smith k statistical simulation add efficiency computer designer toolbox micro ten j tool challenge proceed international symposium leverage formal six eleven k l l k k performance prediction base inherent program similarity proceed pact six twelve framework automatic construction performance prediction model proceed workshop profile compilation thirteen manual fourteen p k j construction use linear regression model processor performance analysis proceed international symposium computer architecture fifteen k g r h performance estimation framework early use instrumentation proceed date six sixteen p combine selection tile size unroll factor use iterative compilation proceed pact zero seventeen b c lee brook accurate efficient regression model performance power prediction proceed six eighteen c lee nineteen c lee w tool evaluate synthesize proceed annual international symposium twenty c g lee suite g r h universal technique fast two architecture simulation proceed conference design page new york f f r accurate performance estimation use domain classification neural network proceed four w w malik flexible formal model application simulation proceed design test date n p n efficient framework simulation proceed three p n instruction set compile simulation technique fast flexible instruction set simulation proceed design conference p n hybrid compile simulation efficient technique architecture simulation embed compute appear w p n high speed simulation use binary translation proceed mob workshop model simulation thirty j weber w c k fast simulation instruction set generation proceed four v j c h stone methodology proceed