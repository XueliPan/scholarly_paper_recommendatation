maintain mental model study developer work habit institute research international mellon university avenue pa research one way research one way wa wa abstract understand typical tool practice satisfaction conduct two survey eleven interview find many arise force invest great effort recover implicit knowledge explore code interrupt knowledge save memory contrary prevent expensive task switch cause find communication enjoy many advantage contrary documentation make understand design rationale easy find current design document inadequate contrary code duplication involve copy paste code report several type duplication use data characterize draw design tool solution subject documentation management program program integrate enhancement team distribution maintenance general term design documentation experimentation human factor code duplication communication code ownership agile development one introduction must know obtain variety information successfully understand edit code code change design scatter across code four rationale history behind seven slice affect variable value thirteen owner responsible code one currently edit change break code elsewhere change elsewhere affect choose among many record communicate discover information name comment design document allow share current understand future permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee may shanghai china copyright require investment time knowledge future need learn factor pattern minimize documentation burden provide general answer constrain possible become learn many type information solution frequently ask teammate answer two yet teammate interrupt must change task forget relevant interrupt task modern development compute code method field override method average execution time require neither interruption investment error prone documentation maintenance require tool vendor researcher anticipate developer situation need compute many type information may require developer assistance perform series central theme emerge reliance implicit code knowledge go great create maintain mental model code knowledge share communication code avoid use explicit write knowledge design document possible prefer explore code directly fail talk explore code make difficult tool traverse use social network second line inquiry cause lose work cost offset benefit implicit knowledge retention make possible strong yet often implicit sense code ownership practice developer team responsible fix bug write new feature well define section code increase payoff large investment understand code implicit knowledge retention make information difficult uncover particularly code duplication yet view far broadly clone detection literature use qualitative data interview quantitative data two survey investigation breadth exploratory approach preclude detail necessary fully understand topic often leave question answer highlight interest propose promise future investigation first present taxonomy developer activity guide investigation describe study design organizational first result section describe time usage tool usage tool second discuss nature reliance implicit table one read end shorten design write analyze new problem map broad flow code use solve problem create new method source file script get state understand determine information code include input output method call stack look like code rationale behind design decision edit edit exist code return state unit test ensure code behave expect communicate computer mediate communication information relevant cod task code relate include build synchronize code check change overhead code non code description provide include work time code knowledge finally present design tool conclude two activity taxonomy begin investigation characterize code tool biggest rather bring preconceive area focus wish opportunistic let guide us select perceive painful report time tool effectiveness two previous study categorize field observation survey first study nine thirteen large project log every hour year thirteen engage distinguish different life cycle estimation high level low level design test plan cod high level low level test report cod stage despite waterfall spiral model predict spend time cod cod stage report cod half time rest spend associate life cycle stag second study twelve survey observe interview count number time switch one thirteen eight hour reveal frequently execute command follow read source load run read edit note yet clear activity switch translate time spend may frequent brief long infrequent design taxonomy see table one focus specifically code relate motivation behind wish know specifically type use development support also want know whether choose different tool different personal experience hypotheses might find difficult ongoing research also formulate nineteen hypothesize might obtain communicate knowledge three method study consist three part survey tool survey series interview survey work practice survey organization population select study corporation large company whose span wide range market web consumer mobile office productivity office developer tool infrastructure visual studio great plain server roughly roughly work ship code product group include work test infrastructure tool consult research group exclude study within product group three core design engineer program manager test engineer responsible design fix bug write new feature program responsible specify feature write high level feature specification document use write code use write test case test engineer translate feature test case manually test somewhat less common role design engineer test infrastructure work small team individual individual manage lead lead design engineer report manager design engineer manager less frequent include architect product designer usability engineer individual private cub share office write nearly test product group work particular release product divide first milestone program make initial feature release feature work subsequent write initial feature specification document may work bug fix patch previous release try new plan major change several development follow milestone divide less cod phase feature add stabilization phase concentrate fix bug last milestone work involve fix bug release near change become time consume risky test spend time make next version code maintainable see figure one procedure survey first complete number demographic next read activity find table one ask report fraction past week work time spend activity choose among ten plus one two five activity ask percent time activity use set tool use scale combination activity ask rate effectiveness scale finally rat seriousness hypothesize problem use scale question expect misremember misestimate time fraction expect able differentiate across large like value near zero five value near ten forty normalize group fractional sum deploy survey use two ensure design fit tool relevant target population first run three experience survey use protocol adapt survey word structure base feedback second develop reduce version survey include extensive write additional tool deploy pilot survey randomly select receive response two include survey meet criterion tool work select four rat serious average survey see table two design series interview question elicit qualitative information character impact add several general open end question characterize team communication pattern two author attend interview ten conversation three author use note record generate nearly note card card use card sort fourteen place wall thirty foot hallway form group elicit theme trend consolidate across consent eleven card sort identify several preliminary hypotheses develop survey assess hypotheses amenable survey first answer demographic question next answer question size feature team define core group work answer series question code ownership design document understand unfamiliar code code duplication unit test adoption agile practice question communication pattern draw population deal directly code individual contributor lead level survey decide focus work ship code remove analysis subsequent felt survey question informative lack investigate three exclude logistical exclude intern wish generalize professional invite participate survey send reminder several days survey close yet respond compensate entry draw fifty gift certificate survey randomly sample participant pool exclude invite take pilot survey receive include eighteen lead somewhat disappoint response rate attribute survey deploy early many vacation technical survey deployment sheer size survey survey randomly sample pool exclude pilot survey receive survey measure self selection bias ensure sample truly representative survey contain several demographic question since survey randomly sample population expect self selection bias apply equally survey apply study average respondent thirty undergrad degree program current team male report code base write c compare c c reflect older establish code base code base write c interview eleven five pilot survey six lead survey four tool far spend time understand edit exist code report spend time elsewhere tool use frequently correlate tool clearly visible positive linear relationship tool usage effectiveness figure five study exploratory rather hypothesis drive result present descriptive statistics time report use mean standard deviation time breakdown report spend little less half time fix bug write new feature rest fifteen make code maintainable confirm expectation spend much time fix bug vast variability number also demonstrate typical development activity vary greatly across team across figure one eighty sixty forty twenty e k r w f n e c r e p make code maintainable fix bug code overhead edit write new feature understand zero next plan release thirteen figure one time spend fix bug make code maintainable write new feature vary time product plan release design write communicate figure three statistically significant time spend activity negative number indicate inverse spearman rho thin line p five thick line p one r e p l e v e f n e c r e p twenty fifteen ten five zero figure two box plot activity time box bottom internal line top first second third exterior line extend fifteen time region display median time spend activity table one remarkably close figure two dash hop single activity account time engage multiple give week figure four however still individual spend week activity pairwise figure three reveal several statistically significant large activity design code write new code positively correlate edit code go overhead task like build source code management understand exist code negatively correlate design code write new code suggest one either work new code examine exist code time design write negatively correlate suggest work new code activity negative correlation write new code two three four five six seven eight nine number past week figure four engage number give week communicate code suggest work new function class need less information unit test activity find correlation worth note analyze pairwise neglect involve multiple communicate prefer spend time use communication electronic communication figure replicate find nine strong preference yet since increase prominence sophistication instant message make possible short response time interactive communication give number reason prefer communication report question often take days receive response frequently misinterpret mean write without immediate feedback often result less detail recipient require tedious write believe many generalize electronic communication documentation bug still use issue low priority involve multiple people involve average send prior week preference face face communication might limit benefit help discourage use might make difficult encourage retention knowledge unplanned meet happen frequently average per week much less frequently average forty communication within team much common communication across team indicate culture informal communication work well team typically right place locate old report use infrequently code relate task frequently use contact social function go lunch talk family use telephone communication similarly rare design despite availability view code visual tool remain focus code report use source code editor design paper perceive effective figure hypothesize need find detail exist design use source code editor discourage increase use paper even though view effective tool perceive table two list propose survey percent agree problem serious problem top four understand rationale behind exist code switch task manager teammate request aware change elsewhere find code duplicate focus interview discern make difficult several theme emerge go great create maintain rich mental model code rarely permanently record understand rationale behind code biggest problem try understand piece code turn first code fail social network development use variety tool work practice actively look better present theme support survey five maintain mental model create maintain intricate mental code interview know without reference write material talk detail product architecture architecture implement own part history code knowledge never write except transient form sketch one interviewee sum well lot design information keep people head code part h g h seven w l one e n e v c e f f e h g h seven w l one e n e v c e f f e h g h seven w l one e n e v c e f f e h g h seven w l one e n e v c e f f e seven six five four three two one seven six five four three two one seven six five four three two one seven six five four three two one unplanned meet plan meet external internal bug web phone zero five ten fifteen twenty thirty communicate code time paper source code editor visual word processor zero five ten fifteen twenty thirty design code time visual studio source insight visual studio editor tool profiler editor zero five ten twenty understand code time fifteen thirty read code trace high level view run code message zero ten twenty thirty forty understand code time figure see text table two developer rat propose survey present without head different order serious problem agree code understand understand rationale behind piece code understand code someone else write understand history piece code understand code write ago task switch switch task often request manager switch task current task get block aware change code elsewhere impact code understand impact change make code elsewhere link find place code duplicate understand own piece code find bug relate piece code find code relate bug find currently modify piece code team convince spend time rewrite code convince team within make change code depend get enough time senior knowledgeable part code work find find right person talk piece code find right person talk bug find right person review change seventeen fifty fifty sixteen nineteen personal code ownership mental model expensive create maintain strong notion personal code ownership constrain amount code understand detail survey one throughout paper word agree mean participant select either somewhat agree agree strongly agree scale statement clear distinction code code own hand team policy avoid personal code ownership make indispensable promote word one much passion around code code ownership proposition reduce number time developer learn new code base survey average time current code base report six personal code ownership usually tacit ie part mental model write record ownership present often distrust receive conflict information design document issue within team design document usually write developer immediately prior implement change affect solicit input important interview design document describe almost media serve structure developer think artifact seldom read later almost never keep hand survey report different picture design document issue within team feature team write average document prior year keep surprise number reconcile result interview team code ownership moat even personal code ownership notion team code ownership overwhelm agree statement clear distinction code feature team own code own team feature team small state feature team consist people include respondent seem sweet spot feature team report feature team almost always collocate facilitate informal knowledge share one ways maintain mental model team code subscribe message though several express dissatisfaction lack detail provide small feature team strong code ownership form kind moat isolate outside moat define part design document specify interface across moat design document relate issue less common relevant issue within team although average number design document write last year issue significantly less issue p one design document significantly likely keep versus p one greater care take design document reflect important role define moat unit test use important part development process many reason one surprise function defend moat outside agree important benefit unit test isolate team table three form code duplication report frequency importance survey creation aware create challenge size clone repeat work separate implement functionality example copy paste example code yes scatter design decision distribute multiple yes fork copy team code base yes branch branch maintain separately yes language developer different language yes awareness creation different design class investment create abstraction class change architecture convince team make change class many class combine release branch code base class change architecture implementation language fourteen code base thirteen five six fifteen repeat change agree problem nineteen almost team team historian person question code often person developer lead code base new team create mental model scratch require lot energy new team member team whole often newcomer assign mentor often team historian designate first point contact question code mentor help newcomer mental model social network much likely read team design document season team unguided exploration code rare commonly introduce code minimize risk change code review receive extra attention feedback early change make several view fix bug require less design knowledge implement new feature bug fix allow useful work still learn code base team maintain document specifically assign bug specifically newcomer code duplication two previous study five ten focus clone detection tool three lead us expect ask code duplication would discuss copy paste example usage code example code even regale us hard clone press admit copy paste code dubious ways yet respond nothing find example code copy paste interview identify six distinct form code duplication table three correspond table clone type characterize creation mechanism whether aware create clone challenge remove clone size clone survey also reveal percentage make change repeat multiple place otherwise eliminate duplication one week period finally rat difficulty maintain code base cause type clone repeat work clone multiple separately unknowingly functionality one developer report implement small piece functionality another developer also work different problem program manager suggest talk second developer creation view clone difficult developer may make subtly different difficult change study clone type example clone occur usage context code illustrate create make use code copy paste modify expect usually involve small amount code kim al six argue copy frequently diverge difficult predict whether clone would better factor new abstraction scatter clone logical clone involve crosscut change aspect orient program sense four change particular decision require make change many widely disperse code one developer report correctly change one method require change another method hide several call component another report would sometimes make change hope best rely find necessary relate change code fork clone occur team take large portion code another team one developer report wish use code original team ready ship subsequently heavily modify remove functionality need fork occur consume team wish use functionality provide produce team ways produce team unable support ask agree best avoid fork code whenever possible yet face alternative frequently better alternative particularly difficult bug fix consume team must monitor bug fix make produce team fix take much maintenance burden produce team functionality scratch fork branch clone occur must change several branch code base clone strict sense duplicate code rather copy entire code base various stag release one developer report fix bug code use production current version development language clone involve code implement multiple one developer report c c contrast clone detection literature narrow view clone syntactically similar code view clone make change several time include many case involve code syntactically similar single code base clone across code base repeat multiple branch developer perspective many seem similar individual bug fix several place new feature work involve change many different place change crosscut strong team code ownership boundary future empirical work might best serve focus definition repeat work six rationale communication understand rationale behind code serious problem face among survey ask agree understand rationale behind piece code serious problem see table two many rationale problem agree take lot effort understand code implement way whether code write temporary work try accomplish consideration rationale lead us understand understand explore code find many use tool explore code eschew design document interrupt code ownership minimize much must understand rarely document understand lead second serious problem felt frequently interrupt also explore maintain awareness change affect code mean code duplication investigate code rationale investigate piece code turn first code average spend understand time examine source code twenty seventeen use sixteen nineteen examine comment version nine ten examine result eight twelve use trace three fourteen use mean figure word code best source information code however flawless commonly become disorient unfamiliar source code discern relationship observe program behavior source code often difficult code give answer developer need one might expect turn next vast amount information write bug report specs design document emphatically case several factor combine dissuade use design document understand code first find design document frequently difficult design document store internal without usable search facility force manually navigate hierarchic look appropriate design document thus even think possibility design document contain information care worth look search available clear would know correct search term second design document reliably update thus consult document would sure code still conform document would force inspect code second recourse investigate rationale behind code social network developer think teammate might able provide need information name person might walk hall talk developer desire information return office apply information get work information precious demonstrably useful demonstrably hard ascertain code obtain high cost yet exceedingly rare developer write information next person need information must go laborious discovery process plenty reason developer would choose record information overhead check code edit check back possibly trigger review process merge conflict test suite run enough dissuade developer record information comment code express concern information authoritative enough add permanently code check name would inappropriately make hence information tend remain head subject institutional memory loss comment unplanned meet represent interruption least one person recover substantial problem rank second agree case table two recover interruption difficult must remember hypotheses task work risk misremember insert bug adopt various mitigate effect use close office door social cue deflect work complicate task time day infrequent stave interruption moment finish think schedule office sometimes interrupter mitigate impact interruption use instead issue warn ten interruption give interrupt person chance save work context write note many acknowledge many though indicate receive valuable part work culture interestingly two indicate become problem since team adopt agile process bug investigation example report spend nearly half time fix bug bug investigation help illustrate tool interact make fix bug possible also suboptimal ask describe instance difficulty understand rationale behind piece code one developer respond bug investigation narrative single story necessarily general base recollection completely accurate illustrate several theme support interview survey data assign new bug bug track tool developer first reproduce bug navigate ensure error internal error trigger report bug next developer attach visual studio web server set break reproduce error present null reference exception visual studio inspection call stack window developer consider function might responsible produce erroneous value developer switch read use browse developer switch back visual studio change value run time see effect developer make change find exception still produce finally developer browse trace erroneous value one object another object finally third object protect time developer wander code understand primary responsibility make change second developer work high profile feature touch code immediately know second developer would understand code go second developer office interrupt second developer engage discussion rationale behind code walk back office make change base information determine change would work leave new problem walk back table four agile practice adopt team use agree collective code ownership within team sprint ie development cycle last four intentional policy involve internal external deeply design plan scrum meet ie brief daily status meet include estimate chart ie measure time remain sprint intentional policy prefer electronic pair program together problem ie work space team sixteen sixteen ten second developer office functionality cause problem actually relate code third developer work go visit third developer office find third developer away lunch first developer block switch another task lunch return third developer office design discussion functionality behave finally pass first developer bug third developer make fix story illustrate several theme survey interview rapidly switch multiple tool look detail information code first explore code read use unable find answer explore code consult knowledgeable rather specs design document communication strongly prefer switch task block interrupt seek code knowledge development highly social process code ownership within team well understand change crosscut ownership spend vast amount time gather precious demonstrably useful information rarely record future seven openness change development team constantly try new tool work practice optimize work use variety tool job write code use two tool nineteen use three interview find several development team experiment agile practice collection intend make development team gingerly dip toe agile water small number jump see table four report team use two eight practice three twenty four three report team use seven eight practice want continue adopt agile practice agree think team adopt agile development aggressively skeptical fourteen agree team adopt less aggressively adopt specific agile practice felt benefit compel shun design document favor communication design minimally rather front employ unit test developer lead report prefer daily team meet weekly team meet daily meet encourage help assist lead respond block individual progress several team go two adopt entire agile process scrum eleven report use radical collocation collective ownership sprint eight design several observe might benefit tool although empirical work first necessary problem write knowledge design document result constant rediscovery knowledge know work code past solution reduce cost use design document one provide code design document two tool capture informal paper design two empirical question must first answer readable informal note would much subsequent need understand ever explicitly consider original developer problem interrupt lose track part mental model result laborious reconstruction bug discourage frequent solution externalize developer task context examine progress information tool information could also useful documentation future central empirical question determine information consider modification task problem difficult discover consistently change clone solution embed clone instance editor support navigate clone instance nine exploratory study typical tool lead find likely surprise development rely heavily implicit knowledge yet detail examination yield interest find prevent design document use cause duplication deeply social nature development feel exploratory study like important place within engineer keep tool development root real face fight perceive irrelevance academic engineer research eight many find help inform tool development many also need much study finally clear study development generalize professional give diversity large company small company company whose product development commercial future work need understand generality find development ten many thank statistical analysis kim helpful include suggest interview question initial form clone taxonomy ko brad careful read draft helpful author gratefully acknowledge support national science foundation fellowship award first author research grant paper base work carry first author intern human program team research eleven reference one de c r cheng l j sometimes need see wall field study application program proceed conference computer support work six ten two practice engineer search document well people information process management five three k code clone detection system large scale source code seven four g lamping j c lop c j aspect orient program proceed five kim l ethnographic stud copy paste program practice international symposium empirical engineer six kim v murphy empirical study code clone seven p j design rationale use associate eight parnas influential paper engineer note twenty three nine perry n l g people process improvement eleven four ten reuse use program interaction three three eleven k agile development scrum prentice hall twelve singer j n n examination engineer work practice proceed thirteen program slice proceed international conference engineer san unite state march nine twelve fourteen wright g p elicit model expert knowledge decision support vol three