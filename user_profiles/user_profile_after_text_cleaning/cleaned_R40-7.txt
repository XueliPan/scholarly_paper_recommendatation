availability security support use transactional memory computer laboratory university abstract propose use hardware transactional memory non transactional memory purpose show hardware register data conflict detection reuse basic build block reliability security support subject processor architecture parallel architecture general term reliability security design transactional memory reliability security one introduction turn toward motivate research architectural support practical parallel program transactional memory emerge promise technology area one hardware provide manage multiple data detect conflict concurrent one two help provide three necessary feature transactional execution atomicity ability roll back safe system state consistency ability enforce execution order isolation ability limit propagation side effect two main thesis work atomicity consistency isolation use address system challenge beyond concurrency control specifically use improve availability security ease many three metrics equally important raw performance past several architectural develop independently provide support availability security elegant effective scheme throw system create podge difficult use expensive support term hardware resource paper provide integrate hardware design parallel program availability security first instead provide hardware solution issue provide core set hardware system use flexibly combine complementary second provide availability security copyright hold eight june support manner generalize propose support atomicity consistency isolation reuse also support availability security feature paper present integrate design provide architectural support availability security within availability support local global recovery scheme deal permanent loss core cache transient fault communication computation security provide without performance overhead also support isolate execution limit effect suspicious code data safety verify support arbitrary number hardware ability simultaneously bookmark thread program ability step thread forward backward time feature available exist program parallel sequential new parallel program take advantage memory map feature hardware transactional memory do two step first instead try implement feature piecemeal solution reduce feature four basic isolate execution global address protection handler approach allow us lower hardware requirement underlie transactional memory without lose much potential performance benefit hardware accelerate common case support feature second implement use hardware transactional memory isolate execution support transaction global require additional hardware record value belong last address protection use transaction conflict detection mechanism handler base event commit handler abort handler evaluation result show successfully reuse hardware transactional memory provide reliability security support reasonable additional hardware cost three reference one l v wong al transactional memory coherence consistency computer architecture june two k e j al transactional memory computer architecture