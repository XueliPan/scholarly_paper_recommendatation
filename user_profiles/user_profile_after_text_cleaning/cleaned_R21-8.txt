event count automata model stream process x p department computer science national university abstract recently grow interest model target towards design stream process process stream process tend highly exhibit high variability process result classical event service model periodic sporadic overly pessimistic deal paper present new model call event count automata capture time stream model use cleanly formulate relevant stream process heterogeneous buffer also provide basis develop analysis compute process stream different schedule though similar flavor time hybrid automata different semantics lightweight specifically suit model stream process present basic model illustrate model potential apply specific stream process set develop analysis technique base formalism color net finally validate model analysis help preliminary experimental result generate use simulation tool one introduction model specifically target towards stream process recently subject extensive study embed domain see example twelve well computer science large number network packet process naturally model design analyze use stream abstraction often handle multiple potentially infinite stream data run range mobile phone box network widespread use lead new program ten processor eleven design eighteen line paper introduce simple novel model formalism call event count automata study stream process view application partition map onto multiple process pes stream possibly multiple stream data enter get process map onto process stream enter another process two neighbor pes buffer store partially process stream series step stream fully process leave system view cover variety target towards stream process one describe setup wish address question follow form buffer architecture overflow maximum delay experience stream multiple stream process architecture exist pes delay experience give stream less upper bind relate question naturally arise design hardware stream several reason question turn difficult many arrival process stream often tend highly result classical event model periodic sporadic either appropriate tend overly pessimistic process time require data stream vary considerably like video process ratio average load processor high factor ten rat task also vary ie single data item consume task result multiple process data output vice motivate example figure one show application partition map onto two pes first run task second run task cod proceed international symposium five figure one application partition map onto two pes finally input enter system constant rate get store input buffer buffer read first whose output stream partially decode write buffer buffer read second result stream fully decode write buffer read output video device constant rate interest analyze part architecture enclose rectangular box specifically give rate stream partially decode write buffer clock frequency second run rate read would like verify neither buffer overflow buffer underflow one also ask give size minimum clock frequency run although cod enter system constant rate number consume first generate partially decode vary task number processor cycle require produce partially decode also constant therefore first run constant clock frequency stream partially decode get write buffer highly partially decode also require variable number processor cycle get process task therefore answer question necessary realistically characterize arrival pattern stream also variability processor cycle model specify time associate stream recently study seven fifteen nineteen basic idea specify upper lower bound number data arrive within specify length time suppose stream compose sequence data item might bite partially decode fully decode depend stage architecture let denote number arrive say rival process bound arrival curve follow hold time interval therefore lower upper bound number arrive within time interval length typically bound would specify finite number time interval specification would capture class arrival pattern satisfy follow similarly model variable process data service curve specify lower upper bound number process within time interval specify length let denote number service process time interval follow hold bound bind service would typically specify finite number time interval give bound arrival process stream service curve offer seven present calculus use possible compute maximum number data input measure minimum buffer size require size figure one maximum delay suffer item bound time process stream term arrival curve bound remain service term service curve example one two bound time process stream remain service also compute similarly seven stream process multiple pes bound get successively transform result time fully process stream compute compositional manner ie stall also state buffer however calculus present seven purely functional model process stream depend state system example figure one second might implement block write buffer full hence service offer depend service curve hence one two longer use maximum backlog delay experience stream would also depend size buffer consumption process buffer another example amount service offer depend fill level one buffer finally arrival pattern might due behavior external generate proceed international symposium five contribution main contribution paper model call event count automata use flexible arrival service pattern obtain addition use model analyze process stream depend state system example service provide might depend state buffer arrival process stream similarly arrival process stream might depend factor buffer fill level consumption process stream output device generate network constrain arrival pattern apart ability model architectural feature important analysis system designer interest formulate standard verification question addition naturally model wide variety schedule contrast even standard schedule difficult capture within framework calculus develop seven nineteen result compute bound maximum buffer fill delay time process stream tight time automata four use specify arrival pattern task analysis perform use analysis time automata twenty sixteen time automata also use task graph schedule one two however many analysis question throw stream process exact arrival time data relevant rather number arrive within specify interval time relevance precisely record say bear strong resemblance syntactic level time fact rectangular hybrid automata four thirteen however semantic level quite different much simpler become clear explain detail model next section present basic theory section three model network show network syntactically convert color net purpose carry analysis follow experimental case study section four illustrate usefulness model finally conclude section outline several fruitful line future work two event count automata event count automaton capture arrival pattern count number data arrive unit interval count use update count associate automaton guard base x ten thirteen x five x ten c x ten x zero b x five twelve figure two example value count use determine discrete time instance automaton take transition paper guard form atomic predicate form integer count variable part transition assume count reset thus give instant value count variable record number arrive since count variable last reset also specify state automaton rate interval specify current mode unit interval time least arrive finally associate state variant predicate state constrain value count automaton allow stay state example show figure two one count variable arrival pattern represent automaton occur three initial mode least arrive unit time time instant total number arrive exceed enter current count exactly enter current count exceed time follow number arrive mode mode enter never leave thus mode mode mode time mode possible run automaton represent arrival pattern example suggest make use action label model external trigger reactive shall say conclude section basic theory set control mode state initial state assume suitable granularity time fix set count proceed international symposium five function assign state invariant constraint set give exist transition form furthermore satisfy follow range moreover exist transition form rate function assign state interval represent lower upper bound arrival rate system state usual require set transition transition relation set final state event count automaton describe arrival pattern form denote number arrive interval time automaton instantaneously make move could consist stay put current state take transition move new state part move automaton signal number arrive previous unit time interval dynamics capture call associate behavioral automaton whose state form state integer variable valuation assign current value count initial valuation often valuation assign count variable time instance automaton configuration arrive next unit time interval time make move must satisfy follow condition state condition later usage convenient adopt notational suppose notion define expect manner constraint inductively define secondly integer initial configuration valuation satisfy denote valuation give every thus variable start valuation valuation give simply every count finally reset count thus transition relation otherwise count assign define remark order firstly state number arrive unit interval fall range ie arrival violate arrival rate constraint associate simply discard impose convention mainly convenience sophisticate transition relation use state easily record detect rate bound specify state secondly state urgent sense configuration least one transition lead state enable one transition must take automaton stay put current state none transition go state enable choose route mainly convenience also assume implicitly automaton never get stick finally give urgent semantics state really need convenient around let define maximum set maximum number arrive let thus mode arrival pattern specify give set call alphabet set final state definition define note infinite set hence potentially infinite state automaton accept reject sequence finite alphabet bring let sequence run sequence word ing say accept run sense sequence accept automaton accept aube set sequence accept represent arrival pattern specify automa figure two sequence let l follow condition satisfy ton proceed international symposium five basic theory follow fact associate behavioral automaton finite state automaton accept set finite sequence establish use similar much simpler use construct regional automaton time automaton four give main detail let let instance show figure two say two note associate behavioral automaton count variable maximum appear involve variable equivalent de either two equivalent write partition infinite set state finite number equivalence class indeed convenience every count variable clearly number class bound maximum different count value correspond belong equivalence class exhibit behavior follow sense suppose ex configuration furthermore see first observe constraint induction structure suppose atomic constraint form easily es instance hence imply remain case dis clearly hence case since lead pose equally easily let suppose imply consider first case observe thus definition imply relation next consider case form verify exist set easy thus satisfy require furthermore use fact define version finite state automaton word equivalence class contain valuation exist clearly effectively construct use also clear language presentation finite string accept exactly l towards state main result concern let finite alphabet definable exist l note case must form say main result concern state theorem one one let finite alphabet form regular subset two class close three give one effectively determine l empty proof see eight relationship hybrid time automata familiar time hybrid automata four three thirteen would notice resemblance indeed behavioral equivalence define inspire much sophisticate regional equivalence associate time automata resemblance however purely syntactic one since clock time automata use record time interest happen real time system whereas count merely count number arrive unit time interval time arrive within interval interest record represent arrival service curve arrival service curve systematically represent distinction represent arrival curve one represent service curve apart fact former bound arrival process data latter bound process example illustrate main idea consider upper arrival curve show figure three along representation change current state every time instant state associate state invariant true end first unit time interval constraint arrive previous interval also redundantly ensure rate vector associate state verify proceed international symposium five lead state explosion hence one adapt one exist cop state explosion problem order obtain practically feasible analysis goal however lay groundwork build analysis back tool support discuss issue detail section wish show representation network construct use answer various question time stream process system study often question associate stream number common optimal buffer size determine optimal also formulate standard analysis verification use begin brief introductory remark color net color net powerful extension ordinary net attribute associate attribute correspond complex data type transition encode intricate data type fire transition depend number present input place addition color input place must also satisfy impose associate input arc similarly color place transition output place constrain associate output arc transition result constitute flexible powerful graphical notation describe variety communication distribute reactive production work flow process tool nine tool kit develop group university tool kit provide support edit simulate analyze allow draw declare function besides feature incremental syntax check code generation tool kit simulator state space analysis tool use state space analysis tool full partial state space generate analyze detail information concern theory analysis include tool support find fourteen information concern simulation analysis tool find structure systematically encode furthermore exploit regular structure represent arrival service curve encode figure three arrival curve correspond associate transition constraint arrive previous ensure two unit easy see four count read reset cyclic fashion enforce specify upper arrival curve four specify time service curve see section one also similarly represent use network stream process useful compose help buffer suppose denote buffer process processor idea deposit represent arrival process represent pattern whenever behavioral automaton two make transition form remove whereas automaton whenever transition form complex structure consist two communicate via buffer describe net indeed complex network one obtain succinct use color net fourteen instead ordinary net bring detail next section three model use network model stream process different part application run different pes communicate via buffer see figure one goal show straightforward extract executable specification network perform analysis use executable representation deploy color net represent system communicate via buffer get detail wish emphasize possible vehicle serve executable mechanism network choose mainly support good tool environment include simulator nine also wish emphasize global model complex network inevitably proceed international symposium five contain two place one transition illustrate encode may find eight crucial note encode follow purely syntactic construction involve behavioral automaton describe semantics hence encode do efficiently show next subsection composition different correspond also do syntactic fashion model architecture consider architecture model introduce section one ie multiple pes process one stream fashion exchange data partially process stream unidirectional buffer let us first consider single stream case let bound arrival process single input stream bound service offer number pes architecture represent consumption process stream denote input buffer output buffer output device simplicity restrict discussion case two pes ie extension multiple pes trivial intermediate buffer respectively encode different compose single represent full architecture use additional place arc construction follow create three place type integer represent buffer architecture recall two hence three buffer transition add arc transition newly add place represent buffer arc encode arrival data buffer encode consumption process associate outgo incoming arc place integer variable whose value represent number correspond buffer arrive take buffer hence value token place correspond buffer denote number buffer current time addition use another place control order data stream arrive order process different pes arc place transition different add guard manner respect sequential order arrival word ing stream ensure item process process figure four describe arrival process stream process service provide two pes finally consumption output device see figure one initial count respectively four show figure four model complete architecture consist two pes specify four give figure four construction show execution sequence step begin transition follow transition transition finally transition fire encode respectively show figure four one execution step correspond carry architecture one unit time result status execution step represent stable status architecture finish equivalent one time unit execution particular suppose system start time execution step number respectively value leave buffer denote time finish respectively figure five analysis result describe use analyze various architecture process stream describe use set figure five show call compose four communicate correspond compute maximum buffer fill level maximum fill level buffer obtain compute proceed international symposium five c zero zero x zero zero zero x h zero one two two three zero x x zero three four four one k gena input h output x x action let min h end input output x x action let min end one figure five color net correspond specification figure four upper bind value token correspond place particular fill level end value place execution step upper bind value token place check examine best upper bound run state space analysis routine nine give buffer size compute maximum buffer fill level possible verify whether buffer might overflow however case require compute upper bind value token place correspond buffer instead efficient approach would add new place represent error state whenever value token exceed specify buffer size token put new place hence check buffer overflow formulate analysis problem instead resort full state space exploration also possible model buffer implement block write write buffer stall buffer full model buffer extend new transition fire finish one execution step transition check value token place represent buffer exceed buffer size value token readjust maximum buffer size difference original value buffer size add downstream buffer process cascade downstream similarly also possible model pes adjust service depend state system fill level buffer rate data arrive input finally would like point far concern process single stream however framework model process multiple stream straightforward manner detail may find eight four experimental case study section present case study illustrate practicality model describe far towards recall application introduce section one see figure one application partition map onto two process pes input first constant cod process task result stream partially decode write buffer second read buffer run task partially decode write result stream fully decode buffer read output video device constant rate variability execution time task also variability number constitute partially decode stream write highly assume time stream specify arrival curve see section one execution task run second also proceed international symposium five l l l three zero one l k c b r c f r e b n sixty fifty forty thirty twenty ten zero highly variable assume variability capture service curve denote minimum number partially decode process within time interval length run clock frequency assume implement block write buffer ie stall size rate read output device would like compute maximum measure minimum require size note effective service offer second depend state fill level full give obtain general several ways may obtain many case might possible analytically derive function formal specification system environment case simulation analysis might easier problem program analysis along appropriate model seventeen could use derive function however simplicity adopt latter ie approach towards collect execution trace different task simulate execution use model analyze trace derive function stream input buffer obtain execution trace use version instruction set simulator five arrival curve obtain measure execution demand task video sequence take account constant arrival rate compress bite stream input first number allocate encode stream follow procedure first obtain function denote number arrive follow definition arrival derive curve section one typically designer would use multiple representative video clip derive clip satisfy constraint impose time interval function also derive similarly collect trace execution demand pair task execute second choose processor frequency analyze trace derive function use method similar one use derive see also definition service curve section one decode read constant rate also buffer model arrival consumption curve say one two three four six seven eight nine ten five figure six arrival curve service curve correspond different processor however need resort simulation obtain obvious reason figure six show arrival curve service three different frequency value number arrive curve video clip figure note time length less minimum number guarantee process within time interval three frequency value however time beyond number guarantee process may arrive happen different time interval different processor clearly smaller value minimum require size sufficient ensure require size bound consumption rate decode buffer set per second irrespective frequency however even frequency use represent arrival service curve describe use first need fix suitable granularity time choice primarily determine two factor would like reasonably small number define arrival service curve time would like capture variability represent curve experiment define one time unit ie equal sec represent arrival service curve see figure six use define time length result consist count represent number partially decode integer point time initial state also state proceed international symposium five zero gena b k h one zero b b b zero b one e else empty error e input k h b b output b b action let min min h end zero figure eight model part architecture enclose within rectangular box figure one b r e f f b p n e h f l e v e l l l f l k c b r c f r e b n zero zero maximum buffer size b b b b b b b processor frequency figure nine fill level input buffer different maximum buffer size different processor clock upper bind integer variable associate place different size buffer result show figure nine figure show fix buffer size processor frequency increase fill level input buffer decrease incoming data input buffer process faster write buffer read output device constant rate however beyond certain processor frequency maximum fill level input buffer stabilize happen exactly buffer completely fill processor implement block write buffer result maximum fill level input buffer decrease buffer size increase note consequence arrival pattern stream execution highly variable figure seven correspond specify figure six form represent service curve case arrive precede time interval length value guard associate transition conjunction ensure arrival pattern data arrive system till finally state current time bound annotate range represent rate arrive state correspond show figure seven correspond similarly obtain show due space follow discussion section correspond arrival service curve compose single show figure eight simplify representation transition two combine single transition compose model part architecture enclose within rectangular box figure one since buffer read constant rate output device model use separate instead directly encode compose constant rate denote code region transition note place model input buffer buffer respectively place associate two integer denote number data buffer point time time step update depend number gena constant rate consumption output device fact processor implement block write buffer also cod code region transition size input buffer item put place error whenever value integer variable associate place exceed size thus case problem check whether input buffer ever overflow formulate analysis question ie whether exist reachable mark error use tool tool kit nine specify figure eight run state space analysis routine generate state space exploration result compute proceed international symposium five however arrival rate stream rate process consumption rate buffer equal input buffer capture stream model accurately capture arrival pattern stream model use event model constant execution time every data item effect could see base result possible determine optimal processor frequency size input buffer give size available memory run processor frequency higher optimal frequency reduce utilization rate result match well obtain use simulation base transaction level model system architecture write model use version instruction set simulator wish point obtain result show figure nine use purely approach prohibitively expensive even video clip short duration give interest upper bind buffer fill level result obtain simulation provide formal guarantee efficiency issue state space representation analysis state space extract network large practical hence exhaustive exploration state space case study viable option however variety available cop large state space since emphasis paper introduce new framework reasonable explore detail briefly discuss particularly relevant set aim convince reader framework present use realistic number reasonable implementation would interest study part future work special data structure symbolic state space representation six turn extremely useful represent large state space state space however generate gear towards take advantage additional structure offer base specific feature need handle expect specialize form particular data structure call interval decision diagram play useful role context since particularly suit succinctly represent ing function whose consist importantly effect function describe term integer hence accompany interval map diagram hold considerable promise efficiently represent state behavioral automata associate well network automata communicate via bound buffer state space many behavioral wish determine state invariant instance number contain reachable bound constant considerable body work available efficiently generate state space hybrid automata see instance recent work reference therein simplify applicable verify variety important behavioral structural also large body work compute call set fourteen crucial feature structural word depend way place transition connect function associate transition manipulate color set consequently linear algebra state space exploration use compute admittedly interest invariant state space catch nevertheless many interest set especially concern buffer overflow cast language hence invariant specialize associate network powerful analysis tool five conclude remark paper present framework model analyze stream process gear towards accurately model data stream associate process well variability execution associate stream framework allow model different schedule straightforward way possible recently propose eighteen nineteen inspire work several interest thread stem work first would explore state space representation outline section context framework second recall model proceed international symposium five system use single use analysis blow result state space need explore analysis avoid might possible use composition similar eighteen nineteen adapt set give arrival service associate goal compute represent time process stream correspond remain service serve input subsequent process stream next process second stream third would also like model process multiple stream explore schedule issue detail also model certain fraction data belong stream require meet finally add action label transition label use form synchronize capture stream process interact reactive suggest twelve reference one task graph schedule use time automata two time automata schedule use three r c ho hybrid automata algorithmic approach specification verification hybrid hybrid four r l dill theory time automata computer science two five e infrastructure computer system model computer two six r e symbolic manipulation order binary decision diagram compute survey three seven l general framework analyse system embed system design design test date eight event count automata model stream process nine tool computer tool colour net ten mi al stream compiler architectural support program operate page eleven al stream computer eight twelve basten reactive process network international conference embed thirteen theory hybrid automata fourteen k colour net basic analysis practical use volume one two three theoretical computer science fifteen r enable schedule analysis heterogeneous multirate data rate sixteen p w decidable undecidable analysis use time automata seventeen li malik performance estimation embed instruction cache model four three eighteen l rate analysis stream buffer nineteen l characterization model task variable execution demand date march twenty c wall w time automata task model e generate hybrid van p van wolf heterogeneous architecture flexible media process design test nineteen four j w r cache aware optimization stream program conference tool embed k l interval diagram efficient symbolic verification process network design integrate circuit nineteen eight g r traffic model synthesis video twelve one p van wolf ea de design space exploration stream workshop signal process sip san e l quantitative characterization event stream analysis hard proceed international symposium five