learn partially observable action amir computer science department university abstract present algorithm derive action effect precondition partially observable relational algorithm two unique feature expressive relational language exact tractable computation language present permit learn precondition effect include implicit object unstated object example learn replace blow fuse turn light whose switch set algorithm maintain output representation possible model sequence execute action partial importantly algorithm take polynomial time number time step predicate time dependence domain vary language experiment show relational structure speed learn generalization outperform propositional learn also allow establish object light switch permit learn conditional effect realistic complex algorithm take advantage dag structure update efficiently preserve compactness representation one introduction operate unfamiliar act intelligently learn world dynamics understand world dynamics particularly important whose complete state hide partial available example active web perform action page explore build rich virtual learn domain dynamics difficult general partially observable agent must learn action affect world world state change unsure exact state action current successful assume full observability learn plan wang al reinforcement learn scale large reinforcement learn al al approximate problem al copyright c right reserve association artificial paper present approach scale action learn deterministic partially observable focus deterministic relational approach yield strong result algorithm present learn relational schema rich surpass much al many benefit relational approach hold include faster convergence learn faster computation generalization object class learn algorithm use innovative formula representation possible transition model world state transition belief state learn algorithm give sequence execute action perceive together formula represent initial transition belief state update formula every action observation sequence fashion update make sure new formula represent exactly transition consistent action formula return end include consistent model retrieve additional process show update use action take polynomial time exact include consistent model increase formula size constant additive without increase number state update direct acyclic graph dag representation formula conclude overall exact learn problem tractable stochastic take time step p predicate k time maximal precondition length thus first tractable relational learn algorithm partially observable relational result useful deterministic involve many object action web mine learn plan operator partially observe sequence exploration virtual algorithm determine action affect world also object affect action object associate light switch understand develop work also promise relational structure partially observe stochastic might also help enable reinforcement learn research extend reach beyond ex simply structure state space relate work approach amir approach learn effect precondition strip action propositional deterministic partially observable contrast algorithm learn model precondition effect include conditional effect expressive relational language consequently representation significantly smaller algorithm scale much finally algorithm generalize across instance result significantly faster learn result another close approach al learn action model plan output single model build heuristically fashion consequently result model sometimes inconsistent input contrast output exact formula produce account exactly possible transition model within choose representation language furthermore approach accept observe action another relate approach dynamic bay net al approach address complex problem stochastic domain apply em propositional approach consequently limit small also could unbounded discrete deterministic recent relational paradigm enable important advance al de al approach take advantage underlie structure data order able generalize scale well incorporate logical learn present relational logical approach present problem section two propose several representation section three present algorithm section four evaluate experimentally section five two relational transition learn problem consider example figure one present domain partially observable domain agent observe state current room two switch middle room light room unbeknownst agent leave right switch affect light leave right room respectively agent perform sequence action switch leave switch enter leave room action get partial agent goal determine effect action extent also track world furthermore want agent generalize learn switch leave switch cause guess might hold switch define problem formally follow definition relational transition system act p r h act finite set object world predicate action name respectively predicate action also figure one sequence leave part present action actual state right illustrate possible pair time respectively every row fragment relate action sequence star indicate agent location h pow p set world state state p finite set form p p subset p contain exactly true act instance act transition relation r r mean state result per grind h form action state light bulb world one one one p one one one act agent observe state world completely know action change one way determine maintain set possible transition might govern world definition transition belief state let transition transition belief state transition relation state r set pair set r h r r agent update transition belief state follow perform action receive r definition simultaneous learn filter transition belief state action assume logical sentence p one empty sequence two h three r h four j h j h h ai call step two progression step three filter intuition every pair transition new pair action observation discard state pair involve remove set true r h r h r h r r conclude r possible pair include remove note interest deterministic ie every exactly one action fail stay state extension one easy example right part figure one illustrate simplify transition belief state consist three r h pair way update begin agent consider three pair agree initial state light currently leave room suggest different transition chain illustrate way state world change accord one respect specific action sequence first pair suggest action affect light second suggest enter room turn light third associate light flip switch perform action agent observe light leave room observation contradict first pair eliminate belief state three represent transition belief state approach represent transition belief state enumeration intractable apply logic represent transition belief state compactly make learn tractable later show solve logical inference problem maintain compact representation transition belief state action open door open book case object open try capture intuition logical represent transition belief state use grind relational p represent state world proposition represent possible transition informally correspond rule together similar action specification al example schema language cause x x true true ing object cause instance grind represent set cause true rule cause true definition schema proposition form cause f g read cause f g act nary action name n different f effect literal g precondition sentence define g conjunction otherwise take form split several form pat let pat set include set pattern pat p ym p ym word schema transition rule contain instance calculate assign object result grind transition rule cause f g f g p every pattern fluent x become fluent assignment order compute instance may need know object switch control bulb set possible denote see definition transition rule semantics give state grind action result state satisfy every literal f effect activate rule rule whose precondition hold rest change particular precondition hold state stay two rule contradict effect activate say action possible present several represent start basic language language pat basic language schema cause f g f g include instance assignment object relate object need set true include cause true cause clear put block hold another clear one strip domain represent note describe every action affect follow expressive add quantify effect quantify example cause color spray color cause everything robot location paint action affect object pat still f g include symbol pat action thus specify action represent free similarly free appear effect part schema consider universally quantify appear precondition part consider existentially quantify previous example universally quantify existentially quantify relate object need expressive variant range object describe way range action function allow us express default blow fuse turn every light bulb except special emergency bulb turn move rook cause attack every square x except include equality use simpler variant add hide object function pat write extension handle hide hand object object affect action although appear action example rule cause true cause true instance schema cause true flip switch cause light bulb turn note function action change time include relate object proposition specify function di mean undefined every completely specify function possible extend hide object hide object depend action add language new function depend quantify well add example schema cause key open invent predicate sometimes representation world enable us learn transition model example consider predicate x x suffice describe world state learn precondition take x involve x add predicate universal quantification clear x easy express transition rule include affect clear language idea similar use constructive induction predicate invention also combine mention example allow hide object four learn via logical inference section present tractable algorithm solve exactly algorithm maintain formula represent agent transition belief state order maintain compactness formula represent dag direct acyclic graph algorithm apply schema language update possible transition model algorithm overview see figure two give formula p schema language represent initial belief state know nothing true every fluent f maintain formula intuition explanation f value formula update every time step st true f currently hold another formula store knowledge gain far action perform make sure involve fluent proposition p add new proposition language proposition represent initial state fluent involve proposition schema proposition begin step twelve initialize accord use new proposition iterate every time step progress action filter observation procedure update accord see procedure add assertion action possible procedure language involve relate object assume true depend schema language use ai procedure input sequence formula p one f two replace every occurrence f p new proposition line twelve p zero h three four five return ai process sequence p f base p f procedure input action observation one f two three four five six f seven eight f p p action procedure f input f one true two three one sixteen progress action filter observation compute pair effect f regard action two effect f w action possible true w four five return p action procedure f input f one true two three compute pair effect f regard action effect f w f value action true w f four five return procedure input formula one f p replace f pointer figure two update insert use replace equivalent do use relevant node need copy whole formula also add observation use eliminate every iteration update end return conjoin base formula transition relation must satisfy use ensure return legal base v p f f cause f g cause f cause f g cause f g f g f g v v formula relate object must satisfy depend schema language use example build dag figure three see update first action dag figure three formula update node label root dag update bottom nod leave proposition simplify example show two nod two claim switch object x cause hide object h x become claim turn everything currently relate leave switch leave right light respectively nod second layer correspond different case node explanation case hold leave branch describe case action cause fluent hold true precondition hold right branch deal case hold action action change either false precondition hold formula figure three simplify optimization need algorithm f h x cause h x h x cause figure three simplify update first action update closer look give grind action fluent f want update first identify instance affect fluent f correspond denote pair transition rule effect f f instance schema word schema true domain precondition instance hold f hold action similarly pair f need match instance fluent f true action either one schema true precondition instance hold two f hold every schema true precondition hold assert action possible case two pair effect f f precondition hold assume sequence consist possible action agent way know whether action possible need assumption theorem correct formula sequence action h r satisfy ai h r h ai h satisfy proof overview define effect model action time teff logical formula consist reiter describe ways perform action time affect world show equivalent consequence find restrict language teff consequence find do resolve language show calculate exactly complexity order keep representation compact algorithm tractable implement algorithm maintain dag instead flat formula way replace f need update pointer rather copy expression allow us share total length let zero initial belief state always omit length sequence maximal precondition length k min let pair maximal k ber pair action let ra maximal action predicate respectively theorem dag implementation time space formula size zero pair maintain negation nod complexity k p two allow allocate space leaf f ra f two ra two ra k add invent predicate increase pair two pair without existential p one interestingly case allow depend domain size require importantly slightly different implementation strip precondition always executable action maintain flat formula complexity since ra k usually small tractable accordingly note inference result dag difficult relate problem tempo sit projection initial state fully know p use model algorithm compute solution logical formula use sit solver order answer query world state transition model formula represent dag time size proceed inference dag time time time size size size e z l r f zero zero zero one e n zero zero zero one c e e l zero zero find model false schema true schema false fluent true fluent zero zero zero one c e e l zero zero number step number step figure four leave time space several number represent see time space depend size domain slight time due hash table right inference time output several simple query p use algorithm adapt dags create implementation see section five note number formula independent length sequence therefore use sit long sequence also use bias find minimal model preferential bias well study fit easily logical formula five experimental result implement test variant also implement version case action return flat formula addition implement algorithm dags find satisfy algorithm output test randomly generate partially observable action sequence include strip chess safe grid various size range propositional figure four six present result measure time space knowledge rate percentage learn currently knowledge base learn rate percentage learn could learn give sequence schema learn model assign truth value expect algorithm take linear time space sequence length depend domain size figure four importantly simple sit query return relatively fast especially regard contradict sequence naturally complicate query take longer time decrease number also result long inference time domain generate several sequence different observability full observability ten choose forty transition rule random check many learn sequence surprisingly learn inference faster number higher still eliminate model since know action possible another important point learn learn quickly even learn step figure six mainly number action depend size domain exactly number compare decrease knowledge rate propositional approach amir latter generalize across instance number encounter propositional transition rule grow faster learn dunk bomb toilet cause arm bomb clog toilet dunk bomb toilet cause clog toilet true dunk bomb toilet cause toilet toilet true flush toilet cause clog toilet true dunk bomb toilet cause arm bomb bomb bomb toilet toilet clog toilet dunk bomb toilet cause clog toilet true flush toilet cause clog toilet toilet toilet figure five possible model world top five step bottom twenty step another comparison run sequence al one take algorithm fraction second process also output output al know model find several output al inconsistent sequence true model consistent final transition belief state note algorithm return one approximate model whereas algorithm return formula represent consistent model figure five show two model world model find run learn curve e n r e l e h c f fifty zero zero one e n r e l e h c f eight six four two zero zero learn knowledge learn knowledge number step thirty sixty ninety number step figure six block leave learn rate right amir knowledge learn rat algorithm result dag five twenty step respectively return first satisfy assignment second model twenty step refine first one quite close real model try schema language weak model example try world result model eventually six present approach learn action partially observable work formalization problem schema tractable algorithm result compare favorably previous work expect apply specialize adventure game active web crawl semantic web service significantly approach natural bridge machine learn logical knowledge representation show learn see logical reason interest community show one knowledge representation language give rise efficient learn language use logical inference especially resolution theorem prove serve prove correctness knowledge representation make applicable populate knowledge base automatically criticism future firstly work robust noise logical nature limit potential utility ways handle noise affect efficiency inference several need address observability affect learn choice schema language affect also detail analysis convergence correct underlie model need work support defense advance research project agency grant air force research laboratory award real program reference e amir learn partially observable deterministic action model five k de relational reinforcement learn machine learn twelve e reinforcement learn five n k murphy learn structure dynamic probabilistic network koller page learn probabilistic relational model learn probabilistic relational model lecture note computer science howe c ram weld plan domain definition language version twelve technical report yale center computational vision control learn experimentation incremental refinement incomplete plan p singh jordan reinforcement learn algorithm partially observable decision nip volume seven sequential decision make l thesis department computer science brown university technical report j circumscription formalize common sense knowledge artificial intelligence w machine invention predicate invert resolution h l l p learn probabilistic relational plan rule four r reiter knowledge action logical describe implement dynamical press r g reinforcement learn introduction press x wang learn observation practice incremental approach plan operator acquisition page k q yang arm model system learn action model five