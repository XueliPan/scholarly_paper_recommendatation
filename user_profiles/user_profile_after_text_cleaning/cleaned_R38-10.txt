filter dynamic reis j wang abstract filter network data offer fast alternative intermediary patch exemplify shield paper take shield vision new domain inspect cleanse static content also dynamic content dynamic content target dynamic web page become popular vector attack key challenge filter dynamic undecidable statically determine whether embed script exploit browser avoid problem rewrite web page embed script safe insert check filter do rewrite page contain logic apply check dynamically generate modify web content base know build evaluate system perform dynamic instrumentation embed script admit action like filter one introduction web become important interface many electronic service information access personal office task importance web accompany rich functionality extensibility also contribute popularity vector attack year eight critical security bulletin correspond nineteen due flaw explorer ie control one also six security bulletin fourteen correspond period time date primary way defend browser patch however study show deployment patch university often delay patch become available service update patch automatically typically delay enactment patch require application restart delay help home corporate save work schedule additional delay corporate set patch typically test prior deployment avoid potentially high cost recover faulty patch five result dangerous time window patch release patch application often patch gain vulnerability knowledge launch attack one study show large majority exist attack target know four exploitable application level previous work shield address patch deployment problem filter malicious traffic accord vulnerability transport layer vulnerability consist vulnerability state machine characterize possible message sequence may lead attack along message format trigger exploitation application overly long field message trigger buffer overrun key characteristic approach cleanse network data without modify code vulnerable application approach make signature deployment removal need easier patch vulnerability signature deployment automatic rather use deployment model antivirus desirable feature filter motivate us explore potential exploit removal web page shield approach able filter static page treat another protocol layer however challenge lie dynamic page dynamically generate modify script embed page could easily evade shield filter use script generate malicious web content possibly additional obfuscation determine whether association six symposium operate design implementation edge browser web republish content implement prototype system rewrite logic inject web page enterprise execute browser render time prototype transparently render many familiar contain also successfully translate run large portal application use choose deployment scenario offer manageability benefit update centralize immediately protect client machine organization without installation either web main disadvantage deployment scenario visibility encrypt traffic nevertheless commercial already exist force traffic cross organization boundary use instead client within organization encryption trade client privacy aggregate organization security also browser extension web publisher deployment transparently handle encrypt traffic evaluation focus effectiveness design performance implementation analysis recent ie show significantly advance exist antivirus alone provide protection one eight ie patch combine two sufficient cover eight evaluate performance page contain evaluation show increase utilization client render comparable original page page rest paper organize follow section two describe typical browser vulnerability would like filter discuss design section three give rewrite approach detail section four describe implementation section five section six give evaluation discuss relate work section seven conclude section eight two motivate example motivate example filter consider vulnerability ie vulnerability ie vulnerable buffer overrun figure one system script eventually exploit vulnerability undecidable approach cleanse dynamic content rewrite page embed script safe render browser safe equivalent page contain logic apply check dynamically generate modify web content base know end design system perform dynamic instrumentation embed script admit change web page behavior vulnerability signature one policy sanitize web page accord know vulnerability figure one give overview system show transform use set system focus predominant script language use web full fledge system would require additionally rewrite disable script use web protect general approach code rewrite interposition use code rewrite use isolate fault rewrite use enable security police ten stack inspection access control however rewrite script code web pose additional challenge language combination rule implicit garbage collection pervasive reflection require number need previous rewrite work design adhere well establish protection complete interposition underlie resource ie document tree transparency three ten addition general framework support filter example author add prevent certain attempt protect web transform input browser logic injector deploy client six symposium operate design implementation association web function tag actual limit look long attribute value contain name name length contain length remove attribute safe return false indicate exploit return false return true indicate safe tag return true figure two code snippet identify exploit vulnerability name attribute long frame embed element figure two show correspond snippet code use identify remove exploit vulnerability input function take object represent tag include associative array attribute invoke frame embed tag function determine whether relevant attribute exceed size vulnerable buffer goal take filter function policy apply vulnerable tag whether static page dynamically generate script framework could react many ways detect exploit current system simply stop page render notify user vulnerability drive filter use patch alternative intermediary prevent exploit vulnerability ie zero false negative disrupt page ie zero false design meet three overview system consist library translate web page safe logic injector modify web page use library use two separate along enforce first translation l translate page modify page accord one depict figure two wrap script second translation figure three l translation figure four translation apply page render browser l depict figure three use invoke depict figure four parse rewrite access document tree interposition layer layer regulate access underlie document tree apply l dynamically generate apply dynamically generate script code additionally interposition layer enforce filter exploit know since choose disable script web must ensure protect even without library transparently handle apply l logic injector independent user browser due still place disable script make irrelevant along original script code browser control also manipulate document tree security model privilege browser thus focus interpose script document tree allow prevent malicious script exploit know trust browser design adhere well es protection three ten association six symposium operate design implementation head head body script alert script body head head body script alert script body complete interposition script access document tree must mediate framework tamperproof web page must able modify tamper framework unintended ways transparency apart time reasonable increase resource usage web page able detect change behavior due framework sole exception policy enforcement behavior page contain exploit visibly modify flexible desire framework good separation mechanism policy make system flexible many four design give detail discussion script library much previous work use code rewrite interposition ten eleven twelve approach heavily influence fact code live name space code manage also several first language language like object create use object modify different set member consequence static type different data type assign variable even reference function object second issue must deal carefully assign method new object cause use method bind new object thus interposition must ensure always evaluate intend context third use garbage collector expose language fourth language pervasive reflection feature let script explore code object result must use series interposition method new invocation syntax name resolution management justify describe follow organize framework complete interposition provide complete interposition must mediate possible access allow document object model dom document tree include script subsection detail achieve use script rewrite interpose function call object method call object property access object creation control construct summarize rewrite rule table one function object method call two ways rewrite function method call interposition rewrite caller rewrite rewrite original function method definition first save different name original function method redefine allow interception call save original call redefine function wrapper benefit rewrite rewrite code localize function interest modify throughout code however rewrite work case function redefine caller rewrite invocation rewrite interposition function without change original function definition interposition function look appropriate interposition logic base identity target function method although caller rewrite cause pervasive code change interpose function overwrite use hybrid approach accommodate previously mention rewrite contain native function redefine alert necessitate caller row table one show indirectly invoke function list parameter value pass global object introduce contain library code first however use caller rewrite alone interpose method call require maintain reference state otherwise eligible garbage collection caller rewrite require maintain map function interest associate interposition logic maintain map global table would require maintain reference interest every object ever create since object may correspond distinct prototype require distinct interposition logic global table reference would prevent reclamation object otherwise eligible garbage collection possibly cause page render normally without require unbounded memory avoid maintain necessary interposition logic method allow unused state reclaim might seem tempt maintain interposition logic property object unfortunately six symposium operate design implementation association construct function call method call object original code foo x rewrite code foo x document write x object creation new x construct variable name construct x three x refer x x x three x three x continue table one sample code rewrite rule interpose method create provide reference object contain interposition logic example f interposition logic associate associate f find logic would require global scan object therefore use rewrite install wrapper interest insert new replace original method wrapper save original method property wrapper object interpose object property access object creation method install object first create use thus far justify caller rewrite function rewrite allow function object also must perform caller rewrite method call rewrite method check potential function introduce additional complexity method interposition original method simply call method wrapper save original method property wrapper cause original method refer wrapper rather intend object avoid problem use swap technique wrapper temporarily restore original method wrapper execution reinstall wrapper object method wrapper return swap first step restore original method method name may method wrapper reassign solve problem one challenge rewrite rewrite method vocation syntax pass name method method wrapper swap process require additional check handle recursive since otherwise recursive call would directly invoke original method rather swap method wrapper bypass interposition logic nest call end method check see wrapper already swap invoke wrapper ignore swap logic original recursive call complete single thread need handle concurrency process example tree object document access modify object property read write page modify assign value script element code modify change text property interpose action replace attempt read write object call global object show table one use object identity check whether assignment create new script code apply either l value need identity check do call library function reveal whether object part document tree ensure use authentic library function malicious create private function script begin run association six symposium operate design implementation interposition property access require object first access additionally swap method execution must ensure attempt access original method redirect wrapper object creation ensure method initialize case new object creation must also rewrite new object use method method also responsible interpose function constructor create new executable function follow f new function x return case apply code argument function loop control construct control construct block body construct translate body traditional function function foo translate well construct present special case ability modify scope show table one free within block assume refer designate object unless undefined construct purely syntactic sugar thus handle case syntactic transformation tamperproof prevent script tamper challenge logic live name space code manage address use name resolution management ensure logic inaccessible variable name common case variable name script remain unchanged however make name inaccessible script prevent tamper global data structure rename variable reference append underscore end name also append underscore name match regular expression ie begin optionally follow number underscore note place limit variable name length reflection reflection allow script code explore object well code use two pervasive language feature syntax access object construct first case must hide object maintain interposition state detail give section object state store property object hide use property access interposition specifically call attempt access property name begin simply append underscore name thus return property value original script would see since array indices also use access object must return appropriate value give index second case construct allow iteration object name property object must hide iteration present thus insert check first line iteration loop jump next item property name accomplish use rewrite rule show table one transparency framework must also ensure presence transparent original script semantics prevent tamper describe section contribute goal make inaccessible transparency additionally require present script context would absence shadow copy script access script code modify interposition preserve intend semantics script retain shadow copy original code rewrite shadow copy store property object interposition property read write allow shadow copy expose script access modification shadow translate require additional care l transformation policy may rewrite static must similarly create shadow copy translate directly create object store shadow copy thus persist shadow copy tag attribute l later use library example policy function rewrite link may modify attribute tag l transformation persist shadow copy look like look property dom object correspond tag interpret string actual property shadow copy attribute six symposium operate design implementation association script interact shadow copy code modify copy require idempotent never apply l code already transform preserve context function evaluate string script code current scope occurrence string bind current enclose object thus call within might evaluate differently original context reason rewrite rule function actually complex show table one instead rewrite code first check function invoke parameter translate use evaluate correct context otherwise call describe thus code rewrite follow foo x x note function expression foo assign temporary state variable object expression evaluate second time call check special case need native function access native function alert access evaluate within flexible final goal support flexible policy enforcement achieve separate mechanism policy mechanism consist rewrite rule translate script code policy consist check invoke rewrite code check critical complete interposition apply string pass function constructor apply l string pass assign check always apply regardless policy place interposition system make complete example undocumented discover manipulate document tree simply add new policy interpose remain check use enforce flexible vulnerability filter figure two policy function load separately remainder code update base intend application policy function give chance inspect modify script behavior interposition point include property read write function method object also allow policy introduce new global state function part global object introduce local state object specific object policy function also register tag name tag present policy function part token stream tag text without full parse tree also possible policy function parse token stream gain additional context although yet encounter need author five implementation implement prototype service deploy proxy cache prototype consist standard security acceleration server library send client transform web document play role logic injector implement c line code library line include comment code devote parse half library devote parse significantly smaller amount code modern web browser imply trust compute base small compare code base protect responsible apply l transformation static first insert reference library web document library distribute separate file automatically cache reduce network traffic later request l rewrite script transform use client execute figure three depict transformation note require translate implementation component apply l use stream model server begin send transform data client entire page receive stream model also mean expect filter vulnerable do attack malicious web page one complexity parse parse must consistent underlie browser inconsistency association six symposium operate design implementation false false negative check prototype seek match ie behavior test refinement future expose logic program would make problem trivial browser start run script page library apply piece script code translate call interposition layer may sometimes require decode script procedure implement publicly available require cryptanalysis though yet incorporate implementation final issue translate script originate source file link source tag l rewrite source fetch proxy proxy wrap script way script code embed directly page wrap example script source would translate apply client script source file six evaluation evaluation focus measure vulnerability coverage complexity author vulnerability filter overhead apply overhead run interposition layer vulnerability filter end host vulnerability coverage evaluate ability protect ie critical release patch one critical patch year eight ie correspond nineteen ie fall three class ie handle script image file table two show many area whether another technology could provide protection design focus script control successfully handle twelve include underlie programmer error higher layer abstraction buffer overrun script vulnerability handle account three nineteen perhaps surprisingly two three require addition exist filter snort shield malformed could trigger layer regardless whether come network generate internally browser able prevent layer trigger generation bad request process image file account remain four protection already available use exist antivirus thirteen vulnerability type script image file twelve three four protect filter antivirus twelve two zero zero three zero zero zero four table two vulnerability coverage two require filter provide protection management deployment cost often incur basis also analyze table two term correspond patch eight ie patch release combine standard antivirus filter would provide protection every case greatly reduce cost associate multiple patch absence antivirus filter would provide protection one ie patch author vulnerability filter evaluate complexity vulnerability filter choose three three different class vulnerability object memory corruption mismatch dom object memory corruption filter vulnerability use function show figure two register filter three vulnerable tag simple object typically result ie object memory ie patch particular object identify implement equivalent require add check tag object tag sometimes function constructor use subset object accessible object tag case appear possible vulnerable object use six symposium operate design implementation association tor object tag filter conceptually similar function show figure two vulnerability result window object function call function outermost scope interposition layer prevent window call function outermost scope since function call mediate hence need filter nevertheless vulnerability depend constraint could simply add filter prevent call object function test correctness vulnerability filter unpatched image pro within virtual machine create web page cause ie crash apply filter cause ie crash upon view malicious web page test fidelity filter use set use evaluation overhead detail section visual find filter change behavior web page desire performance evaluate performance script multiple ie web page embed object server run run contain four one ram within corporate server connect another proxy directly web sit disable cache proxy fix ie client cache contain library consistent scenario translate web sit contain reference library run ten ie process concurrently use ten page ie could render quickly increase load repeatedly initiate page visit every five second use manual observation determine load server reach steady state choose ten page set seventy basis client performance set base sample top one million click return search result spring weight count specifically seventy currently render correctly remain sample encounter due incomplete implementation parse bug resource utilization virtual memory work set private unmodified table three virtual memory measure total virtual memory allocate process work set measure memory page reference regularly private measure memory page sharable measure memory usage show table three usage increase result potential degradation throughput memory usage measure increase negligible amount also find network usage increase slightly detail section client performance evaluate client component implementation interposition layer network load client memory usage latency page render design measure overhead individual translation table four list respective slowdown result average ten trial evaluate repeatedly last half second first eleven standard deviation ten less two last case less eight slowdown ratio compute use average time require per evaluation without interposition framework operation b c string string string split split noop function call b property write minimal syntactic structure moderate syntactic structure minimal computation moderate syntactic structure computation image swap slowdown one two three four five six seven eight nine ten eleven twelve table four slowdown ratio execution time translate code original code fourteen measure expect change rewrite hence association six symposium operate design implementation slowdown slowdown measure case statement examination show translation insert semicolon one change one result seven slowdown measure expect incur slowdown comparable interpreter slowdown detail section four translation introduce additional logic around method call function call property write lead slowdown range slowdown line good worse achieve rewrite target ten pay price previous rewrite deal curious difference slowdown two string additional experiment show difference attribute method require three time much split method also surprise property write greater slowdown function method call property write need guard interpose write dom text property script explore overhead translate code various complexity minimal syntactic structure measure cost translate evaluate simple assignment large slowdown additional work do framework parse construct ast modify ast output new ast program two subsequent moderate syntactic structure measure cost translate evaluate simple loop simply demonstrate cost computation inside simple loop increase cost translate code decrease small fraction overall computational cost last measure overhead perform simple manipulation dom swap two image design measure relative importance engine manipulate layout page code swap two image require two property write ie describe translation add overhead property write nonetheless overall slowdown less eight particular raw time swap image increase suggest even large translation add language construct may still quite small context complete web page summary incur overhead language construct must add logic quite small within context dom embed script design measure overall client experience framework place particular include dynamic parse translation occur page render primarily evaluate performance translate code accomplish task relative untranslated code accomplish task end script instance ie seventy web page ten time reason give evaluation component maintain object ie cache library cache represent client latency measurement include overhead three filter discuss section repeat without framework translation set thirty second upper limit time render web page include launch secondary display embed object wait secondary render visually verify programmatic signal render complete indeed correspond user perception page render ie hit several time hit framework translation present framework translation absent discern pattern experiment include factor outside control network originate content expect page time constant rerun experience figure five show page render without average add seventeen second page render time way contrast standard deviation render time without ten second figure six break latency ten page take time render experience average increase latency second require second average without second average seventy six symposium operate design implementation association figure five latency without figure seven latency parse figure six breakdown latency ten page figure eight memory usage client second increase latency find second could attribute overhead dynamically translate within ie attribute remain overhead effect overhead evaluate translate code time modify break latency dynamic translation two part time parse ast convert modify ast back string time modify ast find time parse string always seventy overall latency dynamic translation average eighty overall latency figure seven show parse time versus number fit line data yield average parse rate per second significant variation parse rate observe thirteen figure eight show memory usage page render without find private memory page sharable client memory metric increase render transform page private memory usage increase average increase quite consistent page cause memory usage increase three also measure increase network load single run page without measure average increase nine less standard deviation network load individual trial due background traffic expect rewrite slightly increase network load add script translation happen client seven relate work first compare protection section discuss relation extensive work code rewrite interposition section remote exploit defense prior work shield propose use filter identify block network traffic would exploit know shield maintain state machine network stack allow recognize packet trigger vulnerability however shield approach address dynamic content script web document since undecidable whether script code document eventually exploit vulnerability share shield focus filter contrast association six symposium operate design implementation zero twenty forty sixty eighty second second second zero twenty forty sixty eighty shield use interposition allow handle exploit dynamic like shield also employ predicate specifically detect past present use virtual machine introspection replay result allow time patch application postpone application patch exploit occur roll back system state apply patch exploit occur instead offer protection patch test otherwise delay administrator vulnerable system buy time even case exploit immediately attempt additionally support flexible deployment example require client browser run inside instrument virtual machine opus two seek address problem patch allow patch apply without restart application opus provide tool increase reliability dynamic patch development however tool reduce eliminate programmer burden produce correct dynamic patch vigilante seven focus worm containment automatically detect prevent spread worm traffic vigilante combine rapid distribution alert automatic filter generation along vulnerability detection page thirty dynamic analysis even vigilante admit false negative share speed constraint vigilante since browser exploit require human involvement therefore spread time scale worm therefore able trade speed automatically generate vulnerability filter accuracy filter autograph two exemplary use pattern match block network traffic contain exploit pattern match scale high data rat crucial author goal stop worm network choke point script focus seem difficult detect consistently pattern match trivially modify client aim discover web distribute malicious code virtual machine automatically fetch content web use discover exploit exploit discovery complimentary approach provide protection finally number aim sandbox browser effect protect operate system impact exploit include system call interposition seventeen eighteen protect mode ie vista twenty may limit damage user compute environment protect browser allow attack easily conduct exploit eight take confinement approach one step virtual machine use manifest restrict browser traffic know could help mitigate many browser relate difficulty get manifest widely adopt unclear interposition interposition code rewrite use previous work achieve additional safety otherwise modify behavior exist code code rewrite one several backward compatible choice technique influence performance directly modify execution environment virtual machine highest deployment work instead use level indirection emulation six ease deployment incur high performance overhead thus ten employ code rewrite low deployment smaller performance overhead require emulator characterize interposition target interposition since technical target require different compare approach interposition target must address new combination technical challenge present rule implicit garbage collector pervasive reflection object model imply lack static type machine code many approach focus machine code interface whether rewrite binary emulate fault isolation rewrite binary code insert check create prevent code write jump address outside fault domain create memory code within process recent nine use binary rewrite provide flexible access control additional integrity guarantee server also rewrite machine code case allow program hardware etch rewrite machine code profile measurement forty program shepherd dynamic binary instrumentation tool goal six symposium operate design implementation association offer profile support program shepherd goal monitor control flow prevent transfer control data might include malicious code use rewrite machine code interface need address four challenge rewrite influence reflection garbage collection type work interpose machine code interface add semantics define term low level enforce memory boundary indeed schneider eleven note difficulty extend rewrite machine code interface enforce internal application interposition target document tree abstraction system call interface much previous work modify user level program behavior interpose system call interface introduce system call interposition simplify task trace emulation al use system call interposition confine untrusted secure sandbox environment eighteen note try interpose system call interface sixteen violate os semantics side effect overlook indirect al discuss architecture address seventeen describe approach provide similar guarantee rewrite code link system call interface twelve also rewrite work system call interface differ goal technique system call interposition guard external application goal guard resource document tree use rewrite technique interpose system call interface present four technical challenge reflection garbage collection type relevant rewrite example also wrap accomplish interposition method need handle rule need implement swap several piece previous work ten eleven include previously mention twelve use rewrite virtual machine interface interface provide good support reason similar work poet mechanism rewrite enforce security express language ten pervasive reflection rule object model force us develop several need rewrite example rewrite interpose reflection must interpose property read write well loop achieve similar control reflection additionally rewrite achieve complete interposition modify use method without maintain state though previous work allow modify add state simplify policy construction ten contrast must modify appropriately handle possibility function vice also must maintain state require careful attention interaction garbage collector web script aware full interposition web script like anonymity service use rewrite engine fail provide either complete interposition transparency nineteen extension browser allow run additional script document load provide complete interposition exist script code document tree eight conclusion web browser become popular vector attack filter exploit make challenge dynamic nature web content present general framework rewrite page embed script enforce behavior design provide complete interposition underlie resource document tree transparent tamperproof transform content rather support deployment web evaluation show add approach exist antivirus increase fraction ie patch protect network level protection do moderate overhead focus application filter paper rewrite may also enable new functionality asynchronous potential use include eliminate effort currently require modify coral fifteen association six symposium operate design implementation modify cache search result return web search redirect link back cache since original site may unavailable allow appropriately dynamic content community site currently must restrict content static code attach infeasible perhaps offer call trace functionality complex script user interface change could even add make difficult enforce display origin list suggest optimistic rewrite widely applicable technique reference one security bulletin two g p opus patch update security security three j p computer security technology plan study volume vol electronic division air force command field four w w l j vulnerability case study analysis computer five c p c wright time application security patch optimal six seven costa j l l p vigilante containment worm nine eight r cox j g gribble h levy platform web symposium security privacy g c guard system address space f b schneider enforcement stack inspection symposium security privacy f b schneider enforcement security retrospective new security workshop ten eleven eighteen r e brewer secure environment untrusted helper security nineteen twenty protect mode vista server b interposition transparently interpose user code system interface joshi king g w p detect past present predicate ha kim b autograph toward dis worm signature detection security v secure via program shepherd security f virtual machine edition martin service security security bulletin j song dynamic taint analysis automatic detection analysis signature generation exploit commodity thirty pax g lee w wong h levy b instrumentation optimization use etch workshop h lee g w wong b n h levy structure performance j h protection information computer script secure compute singh c g savage worm fingerprint e g r j b n design implementation distribute virtual machine network open source network intrusion detection system r b smith self power simplicity twelve flexible code safety symposium security privacy forty thirteen antivirus protection flaw r graham efficient fault isolation c memory resource management fourteen alert security fifteen j freedman e democratize content publication coral sixteen trap practical system call interposition base security tool seventeen b delegate architecture secure system call interposition server h j wang c r shield network filter prevent know vulnerability exploit ym wang beck x r c king web patrol strider find web sit exploit browser six symposium operate design implementation association