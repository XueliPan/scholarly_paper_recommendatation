hardware reliability abstract challenge stack janapa smith brook university di smith static program dynamic emergency count l e c g l seven ten six ten five ten four ten three ten two ten one ten zero ten abstract power constrain design become increasingly sensitive supply voltage noise propose collaborative approach enable aggressive operate mechanism correct margin layer reschedule program instruction stream prevent recur margin cross program location layer remove sixty minimal overhead thereby significantly improve overall performance subject computer organization general system general term performance reliability optimization hardware one introduction power supply noise impact robustness performance order meet power processor design rely ever lower supply aggressive power management clock gate large current swing current swing couple parasitic subsystem voltage violate processor operate drop voltage lead due slow logic hand overshoot voltage also degradation transistor reliable correct operation processor large voltage swing also call voltage avoid traditional way deal voltage system accommodate voltage swing recent paper analyze supply noise processor fifteen show need operate greater twenty nominal voltage nominal voltage conservative processor design large time ensure robustness however conservative design either lower operate frequency sacrifice power efficiency alternatively propose design average case operate condition provide hardware mechanism guarantee correctness presence voltage mechanism enable aggressive time order maximize performance method sieve figure one static program address responsible large number voltage assume four operate margin trend across expense performance penalty architecture either take measure prevent potentially impend voltage emergency eleven sixteen operate reactively recover correct processor state emergency corrupt machine execution thirteen traditional hardware exploit effect program structure figure one show number unique static program address responsible total number contribute lifetime program stack distribution plot indicate average static program address responsible several even ideal hardware technique need activate mechanism per emergency additionally scheme must ensure performance gain operate reduce margin outweigh therefore rely tune mechanism underlie processor power delivery system thirteen combine implementation cost potential change traditional architectural structure challenge like delay thirteen design test validation become increasingly difficult paper present collaborative approach deal voltage hazelwood brook al fourteen suggest potential collaborative scheme demonstrate evaluate implementation design collaborative approach rely mechanism infrequently possible handle layer dynamically smooth machine activity via code transformation prevent frequently occur ideally mechanism activate per static emergency location therefore time show figure one dynamic optimization five well suit ninety execution time spend ten code figure one show similar behavior respect scheme contrast hardware exploit fact program static emergency one use event categorization algorithm describe al twelve identify instruction give rise emergency permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee nine san copyright binary compiler injection code reschedule pro detection event categorization hardware design emergency detector detect operate margin rely voltage sensor detector invoke mechanism detect emergency recovery detector invoke layer profile code transformation eliminate subsequent mechanism scheme allow voltage occur order identify code transformation therefore require mechanism recover corrupt processor state use recovery mechanism similar find reactive processor error detection correction propose handle soft one primarily base rollback make either explicitly save implicitly thirteen evaluate explicit scheme since already ship production three ten require traditional structure interval cycle several propose variety diverse use hardware seventeen eighteen twenty use handle inductive noise collaboration another novel application hardware however use handle voltage performance large discuss section event history tracker layer require pertinent information locate instruction sequence responsible emergency order code transformation purpose require processor maintain two circular structure similar already find exist first branch trace buffer maintain information recent branch resolve target second data event address register dear track recent memory instruction address correspond effective address cache miss extract information whenever receive notification emergency design pro profiler notify whenever emergency occur profiler identify program compiler optimize record time frequency emergency addition recent event activity extract performance counter use information profiler locate instruction responsible emergency use event categorization algorithm twelve refer problematic instruction instruction event categorization identify base understand along give rise pipeline stall burst activity follow stall voltage drop minimum operate margin due sudden increase current draw violation minimum voltage margin definition voltage emergency figure three illustrate scenario data dependence operation stall processor activity operation complete issue rate increase rapidly several dependent successively allocate different execution give rise voltage emergency sudden increase current draw categorization algorithm associate operation root since cause burst activity give rise emergency algorithm also take account processor activity cache miss branch also execution engine event history tracker dear performance counter emergency detector current voltage sense execution recovery maintain correctness guarantee mechanism hardware figure two diagram propose approach deal prone hot spot scheme dynamic compiler eliminate large fraction dynamic emergency count demonstrate issue rate stagger technique reduce apply code reschedule inject new code dynamic instruction stream program primary follow one design implementation dynamic system suppress recur voltage two instruction reschedule algorithm prevent volt age stagger issue rate three demonstration evaluation general purpose recovery hardware handle voltage even aggressive operate rest paper organize follow section two present overview propose collaborative approach along design detail hardware section three discuss performance result section four conclude paper two collaborative system benefit collaborative approach twofold first recur avoidable via code transformation second collaborative scheme allow hardware relax time margin reduce number net effect better energy efficiency improve performance section first present overview collaborative architecture work highlight critical follow present detail hardware overview figure two illustrate operational flow system emergency detector continuously monitor execution detect emergency activate hardware mechanism assume mechanism restore execution previously know valid processor state whenever emergency detect recovery detector notify layer voltage emergency operate lazy mode wait emergency hardware whenever notification arrive pro extract information recent processor activity event history tracker maintain information cache miss pipeline flush pro use information identify code region correspond emergency subsequently pro call compiler alter code responsible cause emergency attempt prevent future location n e v e r e c r p e r e n e r r c e g l v cache flush ten eight six four two thirty twenty ten one optimization optimization data dependence long latency operation cause pipeline activity stall rapid issue rate cause steep optimization reduce issue rate thereby cause smaller steep cause voltage drop minimum margin smaller prevent voltage emergency figure three snapshot sieve show impact pipeline stall due data dependency operate margin four assume ie min optimization show stall trigger emergency issue rate ramp quickly operation complete b optimization demonstrate code reschedule slow issue rate prevent emergency illustrate compiler figure three illustrate voltage dependent issue rate machine therefore slow issue rate appropriate point prevent voltage propose prevent alter machine behavior via execution throttle eleven sixteen stagger issue rate high issue rate alone insufficient throttle case penalize performance unnecessarily code reschedule better way reduce processor activity exploit raw already exist original control flow graph program compiler attempt relocate raw point follow root emergency thereby constrain burst activity stall consequently prevent emergency alternatively kim demonstrate static compiler target voltage however result complex application execution engine power delivery subsystem therefore static easily across different platform application word static program discuss figure one differ depend platform contrast approach prevent alter program code give rise execution time without slow machine compiler try exploit pipeline delay reschedule decrease issue rate close instruction pipeline delay exist raw war waw hardware optimization like register rename machine optimize away war waw raw dependence kind force hardware execute sequential order compiler try exploit raw already exist program slow issue rate place dependent close one another injection compiler slow pipeline activity insert specify instruction set architecture dynamic instruction stream program however modern discard decode stage therefore instruction affect issue rate machine instead real compiler generate sequence contain raw effect since perform real work approach degrade performance whether compiler successfully move create sequence raw depend move code violate either control data compiler instruction break data work around control clone require move around control flow graph carefully original program semantics still maintain aggressive clone potentially impact performance program increase total number execute run time reason migrate estimate instruction count program likely increase clone illustrative purpose present figure four simplify sketch code correspond activity show figure three operation illustrate figure three correspond divide instruction show basic block four figure four emergency repeatedly occur basic block three along dot loop path four one two three categorization algorithm identify divide instruction correspond c b basic block four instruction compiler identify control flow path use branch history information extract profiler counter recognize move instruction b basic block one two constrain issue rate machine sequence raw compiler also recognize result b live along edge one three clone instruction new basic block basic block five along edge ensure correctness result effect complex actual code sequence reschedule illustrate figure three b slight change current activity cycle result code reschedule dependent pack close one another basic block two issue rate figure three b spike high figure three cache flush ten eight six four two thirty twenty ten one e g e k c b p l one two three four b c zero b one c b five b one two three four c zero b b one c b e g e k c b p l c b c b b figure four effect code reschedule loop sieve consistently occur basic block three along dot loop path four one two three b move instruction b block one block two put dependent closer together thereby constrain issue rate prevent subsequent basic block three pipeline activity resume stall code reschedule alter current voltage profile therefore must careful simply displace one location another arbitrarily move code far away retain original activity code reschedule algorithm search raw start basic block contain instruction program run profiler track give rise voltage use information compiler compute set program p reschedule instruction p search raw start instruction enlarge search window iteratively find raw dependence exploit reach scope function body point give execution complicate instruction reschedule machine bypass raw dependence chain generate compiler enough code available execution hardware schedule window handle choose raw candidate set compute subset element raw dependence chain move require location target long raw dependence chain compiler cause machine schedule window fill dependent code reduce issue rate otherwise compiler must generate multiple set smaller raw dependence chain code compiler move around higher chance render optimization ineffective statically unpredictable among dependence chain three result evaluation system demonstrate effectiveness compiler reduce voltage show impact code change performance show section compiler reduce sixty present performance study section show scheme overcome challenge exist hardware effectively hardware simulator use simulate four show table one modify gather detail current profile use seven voltage calculate convolve simulate current profile impulse response power delivery subsystem work focus power delivery subsystem model base four package four exhibit resonance peak impedance finally assume peak current swing clock rate window thirty ras branch penalty functional eight four fetch width two two eight sixteen cycle latency branch predictor decode width main memory ten cycle bimodal eight cycle latency table one architecture infrastructure use nine compiler framework optimize run time compiler dynamically generate native code code execute directly simulator extend compiler include code injection schedule describe section compiler access complete control flow graph data flow graph utilize run time optimization c evaluate paper come suite eight nineteen due space omit discussion negligible code transformation figure one show number static program hundred therefore compiler rarely invoke execution transform code combine fact compiler profile code transformation separate thread separate core performance overhead original program negligible also experiment observe fraction encounter execution around one across since recompile incur rollback compiler execution fraction small rollback overhead compiler goal voltage emergency elimination one reduce number voltage two ensure performance suffer result code next section factor cost evaluate performance section evaluate effectiveness injection code reschedule main one choice transformation affect performance two transformation introduce new careful injection transformation compiler modify original program contain new simulate instruction immediately follow instruction effectiveness transformation show leave bar figure five bar show fraction remain compiler attempt prevent inject code number reduce fifty method sieve show transformation effective however transformation ineffective across remain analysis reveal injection reduce original program transformation give rise new compiler might occasionally spill fill register generate code adverse effect increase number need simulate also potentially cause architectural like cache miss spill fill code dramatically alter current voltage profile side effect depend number register available use original instruction schedule condition hard predict current voltage activity result inject new code may give rise new observe poorly perform method sieve injection code reschedule injection code reschedule f n c r f g n n e r e c n e g r e e e c n r f r e p e v l e r e l n e p c n e g r e e w three two one zero zero method sieve figure five fraction remain code transformation b code performance transformation cost handle show plot isolate effect code transformation performance section evaluate overall performance factor code performance cost along handle additionally performance original program suffer injection code new code serve original program purpose leave bar figure five b show execution performance program inject code data indicate effect simply add new code prevent severely detrimental performance case sieve performance degrade much large execution indicate transformation effective reduce voltage sieve ten remain compiler must sensitive performance code reschedule compiler approach relocate raw follow instruction suffer severely unpredictable behavior inject code prevent code reschedule superior simple injection follow reason first successfully reduce across illustrate bar right figure five second without dramatically increase execution time program show figure five b analysis also show introduce new compiler inject new code significantly alter current voltage profile instance consider injection transformation code reschedule transformation eliminate approximately number however effect performance two substantially different injection transformation cause original program take twice long execute whereas code reschedule negligible effect original program performance code waste processor cycle reschedule real program code simply prevent overall change performance reschedule code negligible across reduction average smaller around thirty compiler could find enough raw could relocate slow issue rate frequently occur performance evaluation reduce operate voltage allow frequency improve energy efficiency however mechanism associate handle voltage two section demonstrate use dynamic compilation strategy possible leverage voltage aggressive performance gain collaborative approach within four percentage point throttle scheme result present table two bowman al show remove ten operate voltage margin lead fifteen improvement clock frequency six indicate scale factor fifteen operate voltage margin clock frequency assume aggressive operate margin four experiment compare eighteen base scale factor four operate voltage margin assume paper correspond six loss frequency similarly conservative voltage margin eighteen sufficient cover drop observe lead lower frequency take conservative margin eighteen margin reduce four avoid voltage result clock frequency increase could set upper bind frequency gain achievable make simplify assumption frequency translate higher overall system performance mechanism scheme recover emergency roll back execution scheme suffer penalty roll back useful work do whenever voltage emergency occur restart penalty direct function sensor delay system ie time require detect margin violation scheme incur additional overhead associate restore register assume eight cycle register four write port memory state volatile line flush additional miss occur time rollback assume rollback penalty per recovery scheme incur average increase set evaluate figure five performance gain scale operate margin four negligible three minimal improvement performance imply handle voltage successfully aggressive mechanism code reschedule performance gain use minimal gain mechanism combine counterpart propose section two illustrate figure two two compiler discuss section evaluate code reschedule worst voltage drop observe power delivery package eighteen b scheme overhead performance gain mechanism mechanism code reschedule throttle forty thirty table two increase handle voltage net performance improvement scale operate margin factor upper bind performance improvement assume margin scale eighteen four result average measure across since change effectively reduce number discuss section detrimental program performance profiler identify scheme initiate amount rollback penalty associate initially discover transformation thereafter however compiler optimize prevent subsequent program location reschedule algorithm ineffective fix certain emergency point rollback may still arise point show figure five discuss section combine explicit compiler assistance reduce overhead substantially translate net performance gain twenty comparison scheme several propose spread sudden increase current via execution throttle several throttle propose evaluation purpose compare performance scheme frequency throttle mechanism quickly reduce current load frequency system halve whenever throttle turn result performance loss compare throttle scheme throttle per emergency always successfully prevent emergency result oracle scheme suffer rollback cost suffer performance loss due throttle prevent throttle enable improvement performance tighten four percentage point better scheme course scheme represent practical design scheme always successfully prevent important remember realistic suffer tight feedback loop involve detect imminent emergency activate throttle mechanism timely manner avoid emergency either current voltage trigger certain threshold cross indicate violation likely occur unfortunately delay require achieve acceptable sensor accuracy inherently limit effectiveness scheme operate must remain large enough allow time loop respond thirteen contrast collaborative approach suffer scheme leverage hardware already ship production three ten reduce voltage aggressive enable performance gain four conclusion primary contribution work full system implementation design collaborative approach handle voltage collaborative approach reduce hardware associate handle voltage dynamic compiler permanently fix code region responsible hardware provide guarantee via mechanism layer identify code reschedule code prevent compiler eliminate sixty average therefore dramatically reduce recur overhead mechanism show scale operate margin conservative eighteen aggressive four set achieve twenty higher performance within four percentage point throttle scheme grateful anonymous comment work support gift corporation national science foundation grant part st commission framework seven platform project five reference one agarwal al adaptive incremental massively parallel two h r process recovery towards scalable large instruction window three h al thirteen design conference four k al power delivery technology journal nine five v e dynamo transparent dynamic optimization system six k bowman al detection instruction recovery circuit dynamic variation tolerance seven brook v framework power analysis eight bull l smith r practical nine g c parallel dynamic compiler ten al design micro eleven e al simulation control power supply voltage variation twelve al towards approach mitigate voltage thirteen al delay commit rollback mechanism handle inductive noise fourteen k hazelwood brook eliminate voltage via voltage control feedback dynamic optimization fifteen n jam al comparison supply sixteen r brook control eliminate voltage high performance seventeen n j early load retirement eighteen j f j c j cherry early resource recycle nineteen j p k analysis development conference twenty g b continuously record program execution deterministic replay pant al architectural solution inductive noise problem due n pipeline muffle current ramp architectural reduce inductive noise n exploit resonant behavior reduce inductive noise k v ultra defect protection power analysis instruction schedule reduce execution core master thesis state university n j wang j patel restore soft error detection j kim modulo schedule