answer common question code school computer science mellon university avenue pa institute research abstract understand update understand code waste time insert bug detail investigation suggest wide variety could address easily answer question update exist tool answer design feasible update path static analysis compute visualization ask question display result addition ground question answer tailor program analysis data also evaluate usefulness tool use lab field study subject engineer program engineer distribution maintenance enhancement general term human factor verification code navigation program comprehension empirical study science design feasible one introduction successfully edit code make change try understand relevant unfamiliar code tool support activity long design many tool build traverse code slice ten recommend relevant code inspect eleven check method contract four reverse engineer diagram code nine key insight dissertation activity effectively support better model typical developer activity code change task exist tool rely intuition identify challenge face understand unfamiliar code central tenet modern human computer interaction gather copyright hold eight may ing data context nature user activity essential design useful tool two follow approach conduct exploratory study developer activity find mismatch tool developer need design new directly support developer need key find emerge date ask question update link application state change effect base find design static analysis compute feasible update visualization display annotate relevant information thesis contribute one improve model fact find activity two feasible update path analysis three visualization update four evaluation tool usefulness two program comprehension fact find understand developer activity change code observe thirteen lab make two complicate fifteen hour change open source application six explain result formulate theory program comprehension fact find fact belief developer hold code method effect unify construct across several hypotheses program comprehension information code navigation design concern design rationale design verification provide unify account change process seek read use knowledge learn describe code critique believe poor design explain understand change propose implement change useful suggest propose change generate rule implement order understand propose change accurately reject infeasible spend much time try explain true make path choice choose investigate proposal abandon favor another implement proposal see work poor path choice lead abandon better inferior explore code poorly introduce false fail ask question never realize relevant fail test fail find answer unable locate find incorrect answer several report overwhelm try remember discover hypothesize limit number could consider could find key design implication result several seemingly diverse arise challenge answer question code weigh time distraction answer question likelihood would reveal useful often choose stay attempt less risky lower quality change question hard answer lead make implement change realize test proposal would never work waste time investigate implement test infeasible change underlie result abandon change hack bug waste time frustration three update path question find question tool answer analyze question take long time answer bug insert identify twelve question though task design challenge require understand design discover common theme task update update path code connect trigger change application state effect example one task concern open file text editor seven status bar update variety evidence support case observe arise understand update verbalize learn link trigger effect expect occur buffer tell text area hey insert something text area ask buffer fold level point recalculate fold level go buffer ask question update concern get guy get update sure exist tool eclipse find place thing call state false update right right think safe say transaction complete computation update fold state point call require computation result waste time investigation know fold update first invalid line line good excellent let us make sure switch buffer anything addition record transcribe data also manually transcribe every navigation event change method visible screen navigate update also follow infeasible update waste time understand task irrelevant code finally analyze change find bug many also attributable false update specific challenge answer update path question underlie could distinguish infeasible feasible exist call graph view eclipse call hierarchy allow incremental expansion feasible infeasible target call b b call c path b c infeasible guard call c never true context call preliminary suggest show feasible often significantly reduce make conventional difficult use particularly dispatch could follow specific trigger use call hierarchy traverse backwards effect trigger require traverse either trigger begin path find program traverse usually impractical practice guess incorrectly come trigger could understand update interact propose change unchecked investigate could understand class structure make false object ownership object object affect path change result limit two lab task study eight across field lab task also observe update path question control get figure one preliminary visualization method white box show contain class grey box group recur sequence number shade call line either may dash must solid happen may happen two line sometimes spawn new thread thread icon field text read arrow write arrow depict stale data first read edit code may visible longer feasible cross reveal unexpected change exist program analyse program understand dominate slice chop slice set program point affect statement ten feasible useful task objective find divergence actual expect program value locate bug slice tool compute feasible contrast documentation tool describe feasible overlay class structure sequence diagram seven use case map three lack analyse reverse engineer code four feasible update path analysis build tool answer update path question thesis develop static analysis compute propagate false along determine path guard feasible model checker compute current model checker one specialize find low frequency bug therefore may compute precise result generate many slow interactive tool analyse compute set hold program point directly determine feasible design analysis query precise exist analyse less precise faster exist model checker analysis propagate create tree feasible summarize method interior node tree test instruction test fail succeed indeterminate method call nod along path propagate actual pick appropriate path track arithmetic prevent explosion loop task call control dependent arithmetic measure generally hold many update study involve field example field set false later guard sequence lead several effect investigate design propagate field key challenge may address include model separate instance class track use real code make precision performance make five use analysis directly answer question update design allow explore update answer question effect method need call trigger cause particular effect happen visualize feasible update tree method field read field write design visualization support answer question update keep track answer visualization show field ask question express interest hide decide longer interest lay traversal tree execution order annotate update answer question without view source code hope better support generate evaluate change visible information prototype display information observe make use task iterate design show information observe use also explore use filter assert false may help explore specify set trigger rather single trigger may help compare update six evaluate utility conduct lab field study determine ways help ask question effectively quantify magnitude effect hope able quickly answer question backtrack false exploration easily propose better design change reflect global understand design rapidly accurately reject accurately rapidly recover recover work set five field work make change code either use eclipse use combination time spend bug understand influence work also give field observe question able answer directly question still look code answer seven careful reveal update path question ask hard error prone answer exist tool answer static analysis design balance precision performance compute answer common question code eight research support grant consortium fellowship nine reference one ball k automatically validate temporal safety spin workshop model check two h k contextual design press three r j buhr r use case map prentice hall four l j g leaven k e poll overview tool tool technology transfer seven three five j ko b h h exploratory study seek relate collect relevant information maintenance task engineer twelve six j b pro gram comprehension fact find engineer conference engineer seven j g unify model language reference manual eight j g c murphy k de question ask evolution task engineer nine h muller manipulate document structure use shrimp view international conference maintenance ten program slice international engineer eleven p mine version guide change engineer june