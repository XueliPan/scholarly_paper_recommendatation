towards patch process use manifest brad chad wang research contact abstract describe new approach patch identify visibility patch impact key miss component current patch process present suite provide visibility construct manifest additionally use component suite measure actual impact recent patch several important commercial one introduction patch significant source expense frustration staff concern patch destabilize exist concern result significant delay apply release patch publicly announce delay apply release patch allow outbreak highly disruptive worm recent worm patch management tool many patch process commercial security analyzer tivoli management server corporate update offer automatically check availability relevant patch apply ability bottleneck patch process time require test patch subset stability roll patch deploy patch typically want test patch even test corporation release patch one common reason second round test existence previously test even patch know update one two often take advantage knowledge reduce target test load typically exhaustive list library machine may even exhaustive list regular use machine even though accurate inventory recommend best practice management time spend test reflect decision stability vulnerability apply security patch reduce vulnerability also risk cause stop function correctly recent increase worm economic due worm suggest cost remain vulnerable increase may increasingly need focus limit test precisely paper present suite provide visibility patch impact goal reduce test bottleneck conjunction propose patch deployment allow limit test target towards patch likely destabilize machine provide best coverage impact extent adopt allow test bottleneck patch management reduce eliminate goal reduce amount human labor require manage computer principal technique accomplish increase level abstraction interact collect analyze information necessary present system recommend action increase level abstraction example recommend action would patch organization every application directly impact patch present least one enable goal map explicit list need patch need test subset configuration file policy propose estimate likelihood patch destabilize base follow thesis patch one provider impact dynamic load another provider least likely previously test together organization release patch may able test beforehand unlikely able test affect patch proceed international conference autonomic compute four pose concern patch deployment policy propose target test phase patch minimum number machine still provide require coverage impact suite provide infrastructure allow target deployment desire even ability target organization may still sufficient test thoroughly test patch deployment case police also guide deployment patch automatically phase patch roll machine base machine mix run component suite provide sufficient visibility organization avoid patch machine perform one operation instead desire patch immediate deployment delay patch test patch directly affect configuration use identify choose immediate deployment present preliminary result section seven policy would allow automatic deployment large class patch current state art manage still involve detection follow patch two common failure failure patch take effect failure application patch effect enable patch process component suite verify patch successfully case failure observe application guide process help assess whether patch fault figure one show current patch process patch process enable obtain information necessary perform must determine machine whether patch update configuration load system specify organizational policy refer explicit list application application manifest construct manifest trace access persistent store contrast approach approach explicit specification introduce term manifest best knowledge component suite first technology complete respect dynamic persistent store previous work dependency analysis often require explicit dependency specification package manager deb deb sla require correct participation module effective render fragile previous work require participation fall short completeness capture dynamic example hart al work static dependency analysis list live trace would capture dynamic library important future work work legacy explicit dependency information available capture dynamic persistent store occur run system library load current process process retrieve relevant patch retrieve relevant patch test deploy impact analysis test deploy reduce eliminate test verify patch successful repair need impact verification repair fail patch installation failure observe failure observe figure one current versus patch process shade box denote step require system administrator involvement process reduce eliminate system administrator involvement summarize three make towards enable patch process follow first design implement complete application enable impact analysis second identify evaluate patch management target limit test case severely constrain test allow automatic deployment many patch still single patch likely destabilize third identify support adoption path current system administration practice mostly patch process allow organize remainder paper follow section two describe abstract model dependency analysis characterize suite respect abstract model section three describe analyzer process perform track persistent store maintain map section four describe support adoption path today manual patch process towards patch process section five describe provide impact proceed international conference autonomic compute four analysis strategy enable section six describe use verify apply patch take effect section seven describe initial result study recently release security patch analyze effectiveness enable target test patch least likely destabilize update dynamic configuration directly load section eight discuss relate work section nine discuss current implementation plan future work finally section ten conclude two model dependency impact model object depend object mention previously application manifest explicit list application particular application manifest use manifest model patch object affect object patch manifest explicit list object patch update perform patch impact analysis simple query patch depend object potentially update patch current implementation analyze application object file system registry persistent store use configuration information environment configuration file typically use place registry would straightforwardly map environment well amount coverage detect application dynamic configuration file configuration information store registry current implementation could produce give figure two example model sufficient figure two example dependency impact model registry although current implementation target file straightforwardly model due model incorporate extend proceed international conference autonomic compute four communication would simply involve addition edge graph model update individual within configuration file could accomplish split single node represent configuration file collection nod represent individual within file example split technique already present treatment registry could treat every write registry entry update entire registry instead choose represent every item within registry separate object preview discussion patch analysis result section six find many security patch update load system individual justify model approach model treat update potentially destabilize depend update still significantly reduce test many patch three construct application manifest use process load boot every machine want enable impact analysis refer process analyzer construct application manifest trace file registry access every application identify process name map every file registry item ever observe use either read write alternative approach produce trace approach significant advantage two similar application dependency information explicit specification static analysis explicit application manifest yet available commercial one design support patch impact analysis legacy extent explicit manifest become available use place manifest currently construct static analysis tool yet show capable resolve application basis example application may load either one two different dynamic depend environment variable trace effectively resolve actual file load trace static analysis provide different coverage guarantee trace occur exercise code discover desirable property set correctly assess exercise test well production exactly set consider make test currently deploy thirty machine preliminary result memory disk overhead approach acceptable machine subject typical developer precise characterization performance subject future work four towards target improve patch process today several reason first economic importance current install base justify research improve manageability today however two additional reason target legacy research first improve manageability legacy force us adopt approach significant benefit kind approach handle future without require additional development avoid requirement improve manageability become feature system rather cost bear application second benefit improve manageability legacy allow us better evaluate effectiveness approach one difficulty manageability research actual source management cost often visible application widely deploy legacy able validate problem solve significant part manageability problem improve manageability legacy also gain understand ground experience design tomorrow target mention introduction principal technique allow interact system higher level abstraction however clear ever beneficial raise level abstraction high system control patch deployment happen consider example company broadcast world cup give choice patch patch broadcast human operator would definitely make right choice contrast state art allow understand business make one comfortable entrust decision autonomic agent lastly although approach reduce cost associate patch exist approach complementary example increase reliability patch clearly good remove need manage deployment test patch similarly increase test process patch manageability complement ability target test improve approach another five impact analysis impact analysis component develop compose programmatically access depict figure four ideal patch process realize programmatic composition administrator specify appropriate policy govern patch component suite implement policy involve administrator specify policy component although primarily interest enable impact analysis component also describe scenario system administrator interact component directly help system perform current hope facilitate adoption component suite component suite deploy transition patch process primarily matter policy specification task impact analysis component intersect patch manifest application manifest component determine set machine give patch potentially impact obtain patch manifest use publish source information source contain information patch release file use security analyzer determine whether give machine miss patch patch specify file registry patch update close particular security hole although alternative source information programmatically inspect patch executable trace action patch test machine examine system record effect patch publish source convenient us component manifest set patch interest component call patch manifest return list impact base file registry access occur since describe representative system administration scenario enable impact analysis component manage deployment patch large number machine use current tool automatically detect machine require certain patch copy patch target machine impact analysis component allow administrator query might impact machine file registry item result impact decision apply patch proceed international conference autonomic compute four make current tool use apply patch without administrator involvement reduce barrier deploy design also support different performance periodically dependency information central server thereby trade memory overhead production system io overhead central server build global table file registry allow access functionality impact analysis component one caveat slightly less current ie reflect file registry access occur first time last degradation coverage acceptable automatic patch make base data central server refer figure four functionality currently expose load black box manifest button expect periodic approach often impact analysis heavily utilize six impact verification describe impact verification component component design use patch deploy deployment patch management process still require verify patch take effect assign responsibility application failure coincide patch deployment verify patch take effect impact verification component scan volatile state process system currently load component check version load version specify patch manifest automatic verification patch take effect system administrator check manually necessary prevent application load update failure coincide patch impact verification deployment component help administrator assign responsibility failure use component system administrator may quickly deduce whether fail application patch preview discussion section seven many patch update load system case system administrator could assess patch unlikely problem administrator also use component see whether application load recently update mean whether instead might failure seven experimental evaluation discussion impact analysis evaluate tool eight eight recent patch select produce produce independent also one select server application information server use five patch update widely use three patch update load system although yet perform exhaustive categorization release security patch preliminary result split representative many security patch update load system patch evaluate malformed data transfer request service fail certificate validation flaw might permit identity spoof buffer overrun may allow code execution unchecked buffer could enable system compromise vulnerability could allow code execution buffer overrun converter could allow code execution unchecked buffer file decompression function may allow attacker run code unchecked buffer locator service might permit code run first perform impact analysis patch table one show five patch direct impact least one remain three patch impact therefore could automatically apply environment constrain test policy propose value data cell represent number load application update particular patch base preliminary result believe impact analysis could allow many security relate patch apply automatically plan expand scope study include thorough survey patch impact proceed international conference autonomic compute four table one patch direct impact application word excel messenger adobe acrobat reader sixty media player eighty forty zero zero one zero zero zero zero zero two two two two two two two two one one one one one one zero zero application word excel messenger adobe acrobat reader sixty media player eighty forty zero zero zero one zero zero zero one one one one one one one zero zero impact verification evaluate impact verification component three verify successful application patch configuration failure install application failure cause faulty patch test component successfully verify application patch use previous eight patch component succeed coincide patch evaluate ability component aid configuration failure coincide patch installation first apply three patch previously discuss simulate configuration failure registry value corruption affect word environment problem network layer failure affect information server since impact verification component show patch installation impact system administrator problem would fruitfully direct towards different line analysis example strider relate network tool could use isolate problem evaluate scenario faulty patch responsible application failure apply remote access service ras patch unchecked buffer remote access service could lead code execution apply patch could longer connect use network verification component implement task manager extension see figure three show recently patch affect ras service host select impact proceed international conference autonomic compute four suggest patch indeed good candidate problem although identify patch potential useful step narrow process figure three strider task manager extension ras service host select process bottom pane display list recently update load select process middle pane eight relate work work relate fall two main study patch creation dependency analysis tool farmer survey approximately commerce sit determine nearly two sit contain serious percentage unpatched twice much randomly select host presume number significantly lower due patch process increase business pressure vast propagation worm like code red blaster suggest unpatched continue present significant security risk thorough study patch reliability aware undertake al author provide risk assessment model apply patch system patch quickly risk buggy patch apply presume increase patch delay risk compromise increase author also survey common patch time take uncover fix large number dependency analysis tool exist one closely relate work due sun couch tool perform global impact analysis dynamic library base static analysis focus static analysis mean tool require process also mean tool capture call load library name dependency walker similar tool target environment recently limitation even latest version restrict monitor single application rather whole system less directly relate work use trace management task use trace problem determination appear two previous however best knowledge work represent first attempt use trace patch management another relate research topic specification explicit use al argue dependency information traditionally use development process increasingly necessary deployment management al describe approach specify high level use framework hope future approach derive trace use populate nine future work current component suite primarily relate use process name identifier form dependency track future work plan address first replace process name closely correspond logical notion application identify application process problem multiple process comprise single logical application however second limitation handle surrogacy modern support variety one application host another application explorer run control although user might understand logically comprise distinct application payroll administration report tool explorer address surrogacy part work derive better control tool principal limitation dependency monitor monitor communication example notify administrator server impact fail mention access server impact server patch either local remote procedure call also limitation plan address future work ten conclusion construct suite analyze patch impact achieve make follow formulation model dependency analysis construction dependency infrastructure formulation reasonable patch justify approach present preliminary result show test severely constrain approach could allow least destabilize security patch identify deploy automatically provide visibility patch process hope enable patch process significantly reduce load system additionally design easily traditional barrier deployment require infrastructure infrastructure provide value write take advantage infrastructure address build help system perform current better also form infrastructure patch process future plan extend functionality develop characterize performance impact variety deployment hope aid development accommodate legacy reference c p c wright time application security patch optimal e e fox e brewer pinpoint problem determination large dynamic service dependable network track deb das program verification polynomial time program language design implementation june farmer shall dust security survey key host various j hart j amelia analysis validation drift configuration management proceed international conference autonomic compute four c approach manage service resource description framework journal network management vol ten two june configuration management engineer may congressional testimony attack e bailey maximum sun l couch global analysis dynamic library security analyzer framework project sla inside press edition tivoli wang r c change machine lately research technical report wang c j h j wang c yuan z strider approach change configuration management support best paper update figure four impact analysis component top row button load application manifest central server load patch manifest middle row button allow selection interest patch set manifest patch launch query machine run dependency information final row button allow execution particularly common set query impact analysis result proceed international conference autonomic compute four