mark service differentiation traffic one university department computer science abstract service differentiation typically provide loss throughput delay differentiation however service differentiation generally account need traffic characterize couple packet achievable throughput ignore couple may result poor service differentiation level paper show explicit congestion notification use achieve service differentiation traffic class level present traffic mark algorithm use conjunction regulate transmission rate source way packet drop due buffer overflow avoid demonstrate algorithm integrate service architecture absolute proportional guarantee simulation result illustrate effectiveness present avoid packet regulate traffic meet service guarantee provide comparison propose literature key word packet congestion control one introduction since late amount research fourteen devote devise simple scalable differentiation class traffic mainly formulate context differentiate service one framework generally provide loss delay throughput differentiation class traffic however schedule buffer management involve usually take account sensitivity traffic traffic account ninety total traffic five protocol use indicator congestion avoidance control six hence packet lead performance degradation work support part national science foundation grant correspond author address one present address university school information management ca put source furthermore due relatively complex relationship packet throughput seven lack discriminate flow belong service class quantitative loss differentiation traffic aggregate result unpredictable throughput differentiation individual flow effort reduce network explicit congestion notification eight propose additional congestion signal flow allow mark congestion experience ce packet mark ce receive destination data acknowledge packet contain mark reach sender sender reduce throughput loss happen network emergence stimulate research appropriate mark indicate congestion source avoid packet result buffer overflow key idea behind mark congestion occur limit amount lose traffic network instance red eleven preprint submit science twenty thirteen use smooth average buffer occupancy q infer impend congestion q two mint h h mark probability increase q drop q h stochastic fair blue ten use different factor link utilization infer congestion case random exponential mark nine price depend queue occupancy difference aggregate input output rat pi algorithm twelve use model arrival rat fifteen let buffer occupancy converge target value assume knowledge time number flow traverse router mark discuss extent reduce amount network paper try address question since provide congestion signal convey traffic drop explore integrate schedule buffer management service differentiation scheme traffic first explore feasible devise mark algorithm ensure traffic load router remain level entirely avoid due buffer overflow without waste available network basic idea anticipate behavior source track window size time flow router use mark adjust window size flow precisely router predict future router send congestion signal source via goal reduce source send rat loss occur effect present reference mark algorithm track control flow router prevent impend buffer overflow reference algorithm probably implement hardware currently available due computational overhead maintain information flow useful assess viability design address issue note practice small number flow contribute majority traffic conjecture track mark sufficient avoid packet drop base idea filter flow present heuristic approximation reference algorithm expect efficient enough deploy edge congestion likely occur eighteen examine use concurrently pursue avoid regulate traffic meet service guarantee paper organize follow section two fig one overview algorithm time packet arrival router project future infer source send traffic impend buffer overflow predict time packet mark reduce future present reference algorithm avoid buffer overflow section three describe heuristic algorithm section four show propose mark use traffic regulation context service differentiation compare performance reference heuristic section five draw brief section six two reference mark algorithm avoid section describe reference algorithm mark traffic network objective algorithm determine mark traffic flow mark order completely avoid packet due router buffer overflow maximize utilization network capacity throughout section assume traffic use practice one expect mix flow use different make assumption without loss generality since one always reserve fix router traffic dedicate buffer fix portion output link capacity furthermore assume available network assumption realistic future network rapidly deploy relatively recent operate already support description reference algorithm remainder section assume enough available perform need next describe algorithm single router single greedy flow ie flow al two project packet mark project ways data transmit time assume traffic network packet router buffer overflow router estimate congestion window size time flow estimate future traffic project impend buffer overflow infer illustrate fig one case fig one time buffer overflow project time packet loss project algorithm reduce congestion window size source mark reduce congestion window size send rate source reduce impend packet avoid note propose algorithm require change rely reduce traffic load remainder section describe router project future packet explain use mark traffic avoid packet use simplify model single flow generalize propose technique multiple flow different source cross router project traffic prevent let us assume packet cause buffer overflow consider router let denote size router buffer refer input curve total amount traffic enter router time exclude drop traffic refer output curve rout total amount traffic leave router time time backlog router equal rout hence follow constraint rout one assume output link capacity router constant rate c router use thus zero traffic always rout rout c two since two characterize rout whenever backlog algorithm need infer zero ensure one hold thereby avoid impend buffer overflow clearly distinguish know measure value future project value define value project time input curve time project future zero need examine traffic send source infer much traffic receive router discussion consider segment three synonymous furthermore ignore phase since flow unlikely send enough traffic create buffer overflow focus congestion avoidance phase every time receive source source send number equal minimum receiver advertise window size source congestion window size minus number send yet acknowledge two increase every time receive unless mark packet drop infer reception case decrease two last retransmission timer source expire reset one flow back since condition receive source time time difference packet send receive source central evolution depend time due variable queue delay change rout denote value time define series round follow first round start first packet send source end first packet send first round receive k one th round start immediately round end therefore denote start time round source si link recursive equation si within round ie time si source send w si w si min si si furthermore show see seven example nineteen chap absence retransmission timer source mode w number send one th round bound one two w si w w si one three lower bind give fact one congestion signal take account per round eight upper bind reach send round successfully acknowledge destination note three general enough capture behavior issue average one two data since w know router three tell us router want estimate two end host internally express affect present discussion future traffic must able estimate time w si current round denote estimate consider router w si respectively estimate compute follow first time packet receive router current time record second packet arrive router time value initialize three initialize one time initialize time key idea update estimate discriminate round measurement study show flow generally significantly time need receive give round flow four thus monitor time router determine alone new round start specifically constant k one ti satisfy ti k four router consider ti mark start new round four hold ti part round set equal set one set equal conversely four hold router update estimate follow ti one one zero one constant time estimator use source use nine show provide reasonably accurate result point except rare case persistent link failure end vary significantly time thus algorithm rather insensitive selection estimate window size router project future window size specifically time time zero denote projection window size time router compute three method equivalent algorithm twenty four assumption use seven model send rate source confirm experimental four one two one packet mark drop least one packet mark drop five router discover packet mark drop upstream check sequence number five router project window size change end current round value begin next round depend whether packet drop mark current round thus five capture fact signal effect begin next round shall note projection correct round receive router may seem restriction since generally much time need receive give round projection generally accurate give five router project input curve follow expression six maximum segment size flow one zero otherwise router assume traffic send next round arrive batch right start next round projection thus assume scenario practice burst traffic rarely observe next discuss mark algorithm determine arrival time must mark router check flow already mark experience current round test necessary since one packet per round impact flow experience packet mark router verify follow condition hold rout c seven condition test buffer overflow go occur begin next round since feedback impact begin next round condition seven check condition seven violate router mark packet head transmission queue ce mark packet head queue minimize delay need feedback reach source conclude discussion robustness constant k four small k one w extremely large data transmission appear continuous test describe four may able discriminate round router may never infer start new round grow unbounded address problem use safeguard base three follow time ti five ti ti one router infer ti mark start new round even four hold k large k router incorrectly infer packet arrival mark start new round thus underestimate w zero zero projection perform thus traffic mark algorithm degenerate experiment show algorithm quite robust change fact experimental result gather section five k ten nine almost identical obtain value ten k seven one generalization multiple flow next consider general situation n greedy flow use denote estimate time congestion window size maximum segment size start time current round flow respectively let us assume moment router able monitor n flow keep track define flow time eight ie estimate remain time start next round flow iterate projection technique section flow router first compute project congestion window next round flow use five zero project nine x five time define zero five one zero otherwise condition give seven violate eight algorithm mark packet flow j j one ten algorithm mark flow congestion window yet mark experience packet drop current round soon packet mark j set two condition seven mark process repeat seven hold flow one packet mark current round three emulate reference algorithm scalable heuristic information require algorithm present section two involve amount overhead present heuristic approximation reference algorithm use flow filter reduce number track flow employ linear interpolation reduce computational complexity projection algorithm goal design heuristic algorithm edge access router flow filter observe measurement study small percentage flow account large percentage traffic transmit high data rate due one large congestion window two relatively small time description reference algorithm section two generally flow mark reference algorithm thus limit track algorithm expect reference algorithm closely approximate identify use serial multistage filter propose objective multistage filter identify time flow send time interval give threshold zero fix time constant denote sample interval use measurement serial multistage filter propose work follow every time packet arrive router hash function apply source destination address port number flow group bucket depend value return hash function flow bucket hash second independent hash function group bucket type hash operation repeat third time flow belong bucket third hash record memory author show serial multistage filter minimize false ie flow small send rate assume avoid false negative ie flow large send rate track implement flow filter follow use two link list router memory current sample flow previously record initially empty first sample interval flow add pass multistage filter remain empty time copy reset six process iterate every second time router update estimate flow flow use therefore projection nine always underestimate input curve alleviate problem time introduce correction factor whose value update k k positive integer k one p k one denote amount traffic receive router time time denote ratio total amount traffic receive router previous sample interval amount traffic identify previous sample interval note always one case one limit case flow pass filter previous sample interval example second one second eleven know traffic receive router time interval four five identify time projection input curve traffic aggregate set equal sum projection input curve flow multiply correction factor x remark note selection present computational six operation implement efficiently swap two reset pointer fig two linear interpolation heuristic value compute use determine excess traffic arrive router overhead accuracy algorithm sample interval update main memory perform less frequently expense use possibly obsolete data value number record flow x remain small accuracy may poor thus infer tune accord computational power available particular access point large number flow configure relatively large value linear interpolation flow filter limit amount state information record router alleviate computational overhead construct project input curve next describe technique reduce complexity projection nine first instead use individual value congestion record flow construction project input curve consider record flow congestion window size equal mean congestion window size give one x since perform flow filter ignore flow small congestion approximation reasonably accurate p second use linear interpolation reduce complexity construction project input curve illustrate method figure two rather construct whole project input curve value compute intermediary value zero approximate use linear interpolation base value obtain reason select basis linear interpolation instead instance six l reference algorithm linear interpolation heuristic projection take account record flow next seven tell us n n n rout n rout c thus time need amount traffic must reduce prevent buffer overflow algorithm infer number flow mark update project input curve reduce complexity entire projection algorithm one zero mark process perform q q number occur mark time practice however expect couple flow mark upon packet arrival since perform short time make heuristic efficient practice four traffic regulation mark service section build describe section two three describe mark use support service guarantee traffic consider service architecture support service guarantee router basis traffic class service assume admission control signal method control traffic router drop notify source use goal design novel approach solely rely traffic regulation network consider router network output link capacity c assume class n transmit time service rate p n c zero positive backlog let us introduce delay queue delay experience last packet transmit time consider give class n offer bind queue delay class n ie guarantee throughput n time class n traffic n denote n input curve ie total amount traffic arrive time rout n output curve follow two sufficient condition traffic meet delay throughput guarantee time class n seven n n rout n x n c eleven condition eleven violate one reduce n drop traffic since objective avoid traffic drop use describe ensure n always satisfy eleven assume throughput guarantee appropriately choose p n n c propose follow approach time addition input curve flow class n n give six project input curve give n n x also project output curve n n rout n zero rate allocation remain unchanged projection n exact since use projection small value order time assume projection reasonably accurate even change furthermore let us assume delay class n remain roughly constant define project minimum service rat n need time service guarantee delay meet n n n n ensure set service rat require meet service guarantee always feasible must enforce x n n c twelve define eight twelve hold incoming traffic need reduce effect propose first identify set class n n class decrease traffic effect minimum service rate require since p n n c know least one class set class whose traffic need throttle identify mark process carry manner case impend buffer overflow merely replace condition give seven condition give twelve b red c pi w approximate tune pi w exact tune e reference algorithm f heuristic algorithm fig three loss rat figure compare loss rat obtain six reference algorithm discard traffic five evaluation section evaluate propose via simulation use network simulator evaluation three first compare performance reference heuristic second compare performance propose active queue management third illustrate potential propose approach traffic regulation service effect propose two simulation experiment first experiment evaluate efficiency propose approach respect buffer management second experiment evaluate performance heuristic algorithm traffic regulation provide service guarantee experiment one active queue management first simulation experiment consider bottleneck link capacity c ten buffer size b traffic single bottleneck link generate sixty greedy flow flow aim emulate source flow send average period pause average one second two actual number send wait time two exponentially distribute size absence queue transmission delay network flow independent identically distribute random uniformly distribute avoid synchronization effect source start transmit different time uniformly distribute eight tween zero five experiment last seventy second simulate time available entire network compare performance six different router govern bottleneck link use estimate loss rat encounter without active queue management incoming discard buffer full red eleven use red gentle variant minimum threshold mint h maximum threshold h parameter set one weight use computation average queue size set two mint h h choose traffic drop probability one buffer full default red therefore expect cover large range operate condition red instruct use need pi twelve approximate parameter tune account uncertainty estimate number flow router configuration time configure pi algorithm crude estimate number flow use lower bind number flow n fifty maximum r sample frequency yield parameter value four b four target queue length set pi exact parameter tune configure pi algorithm exact number flow use simulation word use lower bind n sixty number flow tight upper bind time r sample frequency get four b four target queue length set note zero five ten fifteen twenty ten twenty thirty forty fifty sixty rate simulation time zero five ten fifteen twenty ten twenty thirty forty fifty sixty rate simulation time zero five ten fifteen twenty ten twenty thirty forty fifty sixty rate simulation time zero five ten fifteen twenty ten twenty thirty forty fifty sixty rate simulation time zero five ten fifteen twenty ten twenty thirty forty fifty sixty rate simulation time zero five ten fifteen twenty ten twenty thirty forty fifty sixty rate simulation time b red c pi w approximate tune pi w exact tune e reference algorithm f heuristic algorithm fig four measure throughput figure compare aggregate throughput see six scheme efficient maximize utilization bottleneck link ten perfectly tune pi reference heuristic algorithm amount traffic pass application layer almost equal throughput total amount traffic receive avoid packet drop exact parameter tune unrealistic practice since impose knowledge number flow time flow traverse router router configuration time reference algorithm reference algorithm describe section two result obtain k ten nine achieve similar result parameter range ten k seven one tend show propose algorithm relatively insensitive parameter selection heuristic algorithm heuristic algorithm describe section three multistage filter consist three stag eight bucket admission threshold set one algorithm monitor loss rat slide window size present result fig three start monitor time ten ignore transient effect link fact network initially empty fig three tell us without active queue management one expect loss rat order twelve fig three b c show red default turn unsuitable traffic mix hand crudely configure pi algorithm drop almost much traffic conversely perfectly tune pi algorithm manage avoid packet drop reference algorithm completely avoid packet heuristic rarely drop thus heuristic algorithm deliver result close reference algorithm next monitor aggregate throughput observe average move window size present result fig four throughput characterize total amount traffic receive transport layer destination characterize nine amount traffic pass transport layer application layer main observation scheme manage achieve aggregate throughput roughly equal capacity bottleneck link furthermore note avoid packet exactly tune pi reference heuristic manage achieve close throughput last monitor queue size average move window size present result fig five surprisingly queue almost always full explain relatively high loss rat red manage stabilize queue length around h observation couple result present fig three indicate red drop even available approximate tune configuration pi manage track desire queue length instead queue almost always full conversely properly tune pi algorithm manage achieve target albeit around target value stabilize queue length primary objective reference algorithm manage keep queue length almost constant around heuristic algorithm keep queue length vicinity magnitude comparable pi controller mostly due fact sample interval set one reduce higher sample expense higher computational overhead zero two four six eight ten twelve ten twenty thirty forty fifty sixty simulation time zero two four six eight ten twelve ten twenty thirty forty fifty sixty simulation time zero two four six eight ten twelve ten twenty thirty forty fifty sixty simulation time zero two four six eight ten twelve ten twenty thirty forty fifty sixty simulation time zero two four six eight ten twelve ten twenty thirty forty fifty sixty simulation time zero two four six eight ten twelve ten twenty thirty forty fifty sixty simulation time b red c pi w approximate tune pi w exact tune e reference algorithm f heuristic algorithm fig five queue figure compare queue router six number service guarantee class delay loss throughput flow rate one two three four five ten fifteen twenty ten one five one four one two one four one two table one traffic mix service guarantee second column indicate number flow third fourth row denote loss rate class n busy period denote delay class n experiment two provide service guarantee next assess effectiveness regulate traffic provide service guarantee effect run second experiment bottleneck link capacity c buffer size b zero traffic bottleneck link consist twelve greedy flow fifty flow follow pattern first experiment greedy flow equal flow absence propagation transmission delay uniformly distribute eighty source start transmit time zero seventy second simulate time available consider four class traffic service guarantee traffic mix describe table one addition flow class contain three greedy flow compare performance two experiment first algorithm algorithm describe two provide delay loss guarantee traffic class regulate traffic second algorithm combine algorithm two traffic regulation algorithm de ten scribe section four heuristic describe section three use multistage filter three stag eight bucket one zero plot delay encounter packet bottleneck link fig six fig six show give traffic mix consider eleven exceed delay bind ten queue delay go high due fact loss guarantee delay bind conflict due absence admission control algorithm two give precedence loss guarantee relax delay bind conversely fig six b show traffic regulation algorithm describe paper use rarely happen two delay exceed twenty next fig seven plot loss rat average length current busy period fig seven show loss guarantee respect notably one bind however see fig six loss rate bind respect expense delay bind fig seven b show addition algorithm section four lose therefore objective completely avoid packet drop meet service guarantee meet finally fig eight present throughput obtain class bottleneck link fig eight show absence traffic regulation severe throughput observe worse throughput bind sometimes violate due fact enough traffic present router fig eight b show traffic regulation stabilize throughput throughput guarantee class one always respect also note manage achieve aggregate throughput equal buffer size zero fifty ten twenty thirty forty fifty sixty length simulation time buffer th th zero fifty ten twenty thirty forty fifty sixty length simulation time buffer zero fifty ten twenty thirty forty fifty sixty length simulation time buffer zero fifty ten twenty thirty forty fifty sixty length simulation time buffer size zero fifty ten twenty thirty forty fifty sixty length simulation time buffer size zero fifty ten twenty thirty forty fifty sixty length simulation time without traffic regulation b traffic regulation fig six packet delay number lower traffic regulation much smaller magnitude without traffic regulation b traffic regulation fig seven loss rat traffic regulation algorithm prevent traffic drop without traffic regulation b traffic regulation fig eight without traffic regulation observe sporadic throughput guarantee traffic regulation algorithm stabilize ensure throughput guarantee respect bottleneck link mean stabilization provide traffic regulation algorithm come expense six discussion investigate whether mark use regulate traffic context service avoid packet due buffer overflow effect first describe two packet mark attempt eliminate packet flow propose approach infer traffic send source track window size large flow accordingly make mark show propose use traffic regulation context lieu traffic police admission control experimental result illustrate potential approach note use improve accurate robust value twenty congestion window size another area improvement reside type filter use heuristic algorithm serial multistage filter use paper appear exhibit good performance work describe indicate par eleven delay simulation time delay simulation time time loss rate class time loss rate class time time multistage filter typically perform better serial multistage filter amenable mathematical analysis false negative use parallel multistage filter could therefore open door analytical evaluation propose help quantify parameter selection furthermore current approach assume extend flavor sack leave future research last heuristic algorithm propose probably efficient enough deploy relatively link link edge network speed order hundred per second belief propose heuristic might still computational overhead important consider deployment core operate speed order per second hence work probably need propose also deploy core network wish thank provide us implementation multistage filter use heuristic algorithm reference one blake black e z wang w architecture differentiate service two n j f quantitative assure forward service vol two new york proceed three c p case relative differentiate service proportional differentiation model network thirteen five special issue integrate differentiate service four p hurley p provide low delay service within best effort network fifteen three see also five k g miller k nature beast recent traffic measurement backbone proceed geneva six v w congestion control seven j v j model throughput simple model empirical validation proceed ten k shin stochastic fair blue queue management algorithm enforce fairness proceed vol three anchorage ak eleven v random early detection congestion avoidance network one four twelve c v v w gong design improve support flow proceed vol three anchorage ak thirteen lin r morris dynamics random early detection proceed fourteen r analysis design adaptive virtual queue algorithm active queue management proceed san ca fifteen v w gong analysis network support flow application red proceed sixteen w fang l traffic pattern proceed vol three rio de brazil seventeen c n j f true derive traffic demand operational network methodology experience proceed eighteen c moon c b f traffic backbone tech rep sprint nineteen w r illustrate volume one read twenty h c passive estimation time computer communication review k fall sack computer review three v packet trace analysis proceed v congestion proceed ca avoidance control c g new traffic measurement account proceed measurement workshop san ca network simulator eight k black addition explicit congestion notification recommendation use gentle variant see red march nine low enhance random early mark algorithm flow control proceed c g new traffic measurement account proceed pa twelve