symposium symposium calculus p department computer science national university abstract calculus framework propose al date subsequently extend al number paper gear towards analysis process various type stream data main strength abstraction arrival pattern event stream specify number may arrive specify time interval framework algebraic use compute system compositional way however main drawback model state information natural way example schedule policy depend certain buffer shift one type data stream another paper extend manner enable state information easily capture limit explosion cause fine grain model time automata model call specify event stream finite automata whose state annotate function specify arrival pattern event stream service available process new framework combine expressiveness model algebraic compositional feature formalism particular system within single mode analyze use algebraic exploration use piece together result obtain algebraically individual show determine typical system focus efficient approximate illustrate advantage use two case study one introduction increase complexity embed prompt need model analysis go beyond traditionally study literature many process irregular stream rely highly dynamic resource management model use standard event model schedule figure one system model context calculus framework introduce four sixteen subsequently extend number paper see seventeen eighteen design model analyze heterogeneous compositional manner key feature rely abstraction model time input stream well availability particular time event stream specify constraint maximum minimum number may arrive every time interval length collection different value capture function l denote lower event arrival process hence l specify minimum maximum number may arrive within time interval length clearly function admit rich collection arrival sequence standard event model periodic sporadic periodic jitter turn special case specification resource availability also specify similar fashion l specify minimum maximum number process resource within time interval length give function denote l denote l possible compute use purely algebraic bound system maximum delay suffer event stream maximum backlog front resource also possible compute l denote bound time process event stream may serve input next resource process stream output may denote repeat time output stream compute see fig one fig one one n denote n process input stream fashion input buffer store incoming wait process explain service provide bound similar possible compute denote bound remain service use process stream apart buffer requirement delay suffer input stream resource also possible compute utilization resource output jitter maximum delay total buffer requirement system bound eleven due functional nature analysis framework involve algebraic allow efficient computation system fully compositional manner however allow model state information natural way result common one service offer resource depend buffer model easily hand model state information use time automata one seven event count automata five often lead state space explosion apply realistic bridge gap expressiveness ease analysis paper extend framework include state information natural way retain fundamental link model arrival process event stream availability resource model finite automata whose state annotate function new framework combine expressiveness model algebraic compositional feature formalism particular system within single mode analyze use algebraic exploration use piece together result obtain algebraically individual system model framework show fig one key difference function replace arrival service automata respectively mode annotate arrival service function represent bound event service rat particular mode trigger transition depend amount time spend current mode external signal generate environment give show service automaton capture time process stream capture bound remain service obtain use input next resource exactly framework thus form basis compositional analysis method similarly use process stream also show use compute buffer space require store wait process maximum delay suffer event stream question involve algebraic use along standard exploration may note closely relate spirit hybrid automata nine result straightforward approach obtain require analysis result translation event count automata five may view simple form hybrid automata however involve high computational cost since fine grain model hence develop approximate analysis efficient conservative instance actual maximum buffer guarantee less upper bound provide use standard analyse time specific combination automaton combine state exploration similar use determine boundedness place net ten also identify special case synchronization arrival service automaton tightly bind help external signal mode change always take place together call synchronous set considerably simpler estimate become also provide experimental validation analysis use two case study twelve relate work two broad line work relate model propose paper first concern task event model generalize classical periodic sporadic event model fix execution time task towards time automata relate recently use variety model analyze task schedule see one six seven overcome lack model framework propose event count automata five retain abstraction use time allow detail model state information although syntactically similar time automata fact hybrid automata use count rather clock get upon arrival however semantically different particular contrast time automata set explicitly record arrival time record number arrive time interval often adequate appropriate abstraction event stream service availability much expressive function use suffer state explosion problem hence difficult analyze large system model network framework propose paper see sit detail model original framework completely stateless thus formalism allow sufficient expressiveness mitigate accompany explosion problem yet another direction relate work focus extend model analysis literature accommodate complex example framework present three allow certain task intentionally change execution type mode change associate schedule technique adapt task within allowable limit order maintain system similarly model propose fifteen allow system multiple mode consist set task possibly overlap system use rate monotonic schedule problem select suitable task system different mode change study eight fourteen thirteen system consist multiple mode consist set task mode change trigger mode change request transition old new mode take nonzero time transition system task old new might produce temporal overload however arrive transition period goal develop ensure violate transition consist suitable mode change restrict mode change time allow synchronous mode change well analysis verify feasibility system different transition contrast approach make simplistic assumption instantaneous mode change however mention arrival service function associate allow arbitrary event stream resource availability model use standard event model finally compositional approach readily fit framework report eleven network heterogenous model event count automata analyze compute suitable different type framework however uniform sense data stream model automata also compute arrival automata thirteen organization paper next section present framework particular define arrival service automata section three develop analysis sketch mean exact expensive analysis present detail approximate compute maximum buffer well output data stream generate process element form arrival automaton section four present experimental result use two case study derive validate accuracy efficiency analysis conclude section discuss prospect extend study initiate paper two arrival service automata formulate version arrival service function particular service automaton consist finite state automaton state associate service function mode change effect associate well guard associate transition guard base time addition also use external signal buffer specify guard arrival service function outline basic idea calculus bind number data arrive service within specify length time arrival function typically specify finite number time interval one k maximum number arrive time interval length specification capture class arrival sequence x satisfy follow x x zero one k fact one often describe arrival pattern via pair arrival function l arrival pattern understand bound l x ti x zero one k similarly model vary processor make available resource pair service function l use specify lower upper bound number process resource within time interval specify length let c denote number process time interval zero service bound l follow hold l c c zero zero bind service would typically specify finite number time interval give bound l arrival process stream service bound l offer resource four present calculus allow us compute minimum buffer size require input side resource maximum delay suffer event bound time process stream bound remain service stream process multiple see fig one bound successively transform time fully process stream compute compositional manner however point calculus present four purely functional model arrival pattern process stream depend state system arrival automata arrival automaton model incoming stream state pair arrival function l associate automaton current mode number arrive time interval length least l invariant form time interval us specify minimum amount time l automaton must spend maximum amount time us may spend enter input signal time interval l associate transition si automaton take transition arrival input signal provide stay si least l longer time assume upon enter new state bound give arrival function associate previous state forfeit give arrival function present state applicable formal definition arrival automata follow n denote set set finite n word member form l l n l definition one arrival automaton arrival automaton sin finite set state sin initial state finite set signal invariant function associate state us arrival function assign give lower pair arrival function l upper arrival function associate transition relation l two one three two one fourteen two l one one two one one five one four six b two ten figure two arrival automaton two one one one two two one three example arrival automaton show fig two capture event stream whose arrival pattern govern two first mode also initial one least two five arrive every time unit second mode least three fourteen arrive every time unit accordingly one l one single constraint namely time interval one l one one five similarly two l two l two one fourteen start zero time four six start arrive faster rate signal external signal presumably generate network interface downstream component generate event stream notice time guard associate transition similarly state invariant associate comply formal definition one introduce use default guard zero purpose complete example automaton enter mode two ten arrival rat slow one associate mode one correspond transition signal conjunction arrival signal b guard two ten assume transition execute urgent fashion automaton mode time one outgo transition enable one enable outgo transition take case one transition enable choice transition take make arrival automaton specify language arrival sequence arrival sequence mean sequence positive represent number arrive unit time interval one bring let l arrival function l specify lower upper bound set time one two k arrival sequence accord sequence positive j one two n j j one two k l thus three two five event sequence accord one specify three four six next let arrival automaton definition one execution sequence automaton finite sequence form sin follow condition satisfy zero n ti positive integer ti arrival sequence accord arrival function associate mode ti exist transition ai si ti say arrival sequence induce execution sequence set arrival sequence language arrival sequence specify arrival automaton example show fig two three two five four seven eleven twelve two arrival sequence seven eleven twelve ing execution sequence one two hand three nine seven eleven two five four arrival sequence second time unit system must hence nine arrive three two five b service automata process resource model service automaton syntax semantics identical arrival automaton except number arrive unit time interval interpret number processor cycle term number process available time interval addition transition also guard specify linear input output buffer associate process element present instance consider multiple data stream one associate input buffer one output buffer show fig one general case one buffer pair stream assume finite set positive integer value b stand buffer b range b buffer buffer constraint conjunctive formula atomic form b n b b n n use b denote set buffer range definition two service automaton service automaton sin b finite set state sin initial state finite set signal invariant function associate state us arrival function assign give lower pair service function l upper service function associate b transition relation new feature mode change also constrain current input output buffer define execution sequence need track current number buffer however require information arrival process deposit input buffer service process remove output buffer hence work detail three analysis consider multistage process event stream show fig one objective analyze behavior system determine maximum various buffer delay experience input event stream time output event stream remain resource stage process event stream start first stage input stream model arrival automaton deposit input buffer b one process process element one service provide one term number process per unit time model service automaton wish estimate maximum input buffer b compute form arrival automaton output stream deposit buffer b first sketch compute exactly five show event count automata use model arrival service function indeed arrival function effectively construct language arrival sequence accept exactly set arrival sequence define arrival function similar hold service function well easy extend arrival service automata thus arrival service automaton effectively construct two define set arrival service sequence furthermore also show five network translate net set reachable mark correspond set reachable network exhaustive analysis net reveal whether buffer become unbounded one also determine buffer bound sequence data stream deposit internal output buffer network use involve network net determine however expensive route difficult achieve hence propose viable conservative approximate scheme analysis sin let b arrival automaton describe data stream deposit let input buffer b one service automaton describe process cycle provide one process arrive b first describe method compute approximately maximum b lead method construct arrival automaton capture process data stream deposit output buffer b start suppose give arrival function specify temporal one two k suppose give time interval l extend follow one one min min min k thus allow many possible arrive time interval length subject specify satisfy similar extension define service function whose define set temporal two one zero zero one one k thus permit service cycle possible provide time interval length subject specify satisfy turn problem compute maximum buffer b shall construct finite tree whose nod form v l b l path root v l latest time system enter v b maximum buffer system enter v compute function l l minimum maximum number arrive process last time system enter v zero follow b l l l one zero set nod wish construct denote c edge relation convenient define transition relation b suppose one suppose one suppose one one l l l l min paper focus synchronous case arrival automaton service automaton communicate buffer must always make move together analysis general set arrival service automata may make transition do similarly slight modification computation function associate node detail may find twelve start sin zero zero zero c usual denote null path declare node furthermore root since event arrive zero suppose v l b c node l l assume inductively define start suppose one path one let l roughly speak l interval signal arrive transition one take thus latest take l l since least l x x arrive last x time system enter v system must stay v least l time minimum maximum number arrive last time system enter one compute zero follow l l otherwise l l min l l l x l x x x similarly obtain substitute addition maximum buffer system enter v b buffer system enter one b l b suppose b value b satisfy buffer constraint combine one obtain b min b b one two l let one interval one l one satisfy two interval two time point one two transition take define l l l one two l latest instant system enter add one l b node c v edge declare unbounded terminal node case ancestor node one l b none guard associate transition contain b n b n n n k zero k b case satisfy k zero declare normal terminal node ancestor node state deem node l l l note k zero system cycle path v denote maximum buffer time system enter one one increase least k none buffer guard transition impose upper bound ie condition hold cycle infinite number time maximum buffer system enter one become hand k zero maximum buffer well arrival service function associate repeat one time bound similarly satisfy function bound function hence need consider successor nod consider next transition v mark v visit outgo transition v already explore repeat process nod c visit claim finite tree whose construction terminate finite number step suppose otherwise exist infinite path since finite appear infinitely often contradict construction every node v state ancestor terminal node present exactly hence finite node c mark visit exactly hence construction terminate finite number step buffer analysis compute maximum buffer b declare buffer unbounded unbounded terminal node first compute maximum v attain node v follow suppose v l b l l us us maximum number arrive interval length end system v x x zero x v min us us come condition x arrive last x time system enter v x arrive x time system v analogously minimum number process interval length end system v l v min x l x zero x l v l thus buffer system v v v addition since b maximum buffer system enter v buffer v v b l maximum buffer b result v v v follow maximum buffer b maximum v v c delay analysis compute maximum delay data stream base instant system node v l c l zero maximum number arrive v minimum number process l v v v v one l c l l let v set v thus maximum delay event arrive minimum v zero v v result maximum delay event arrive system node v delay v min v l v zero v v maximum delay event stream maximum delay v v c v l arrival automaton output stream maximum buffer system bound compute arrival automaton representation process data stream deposit output buffer b see fig one end derive l v give lower bind number arrive upper bind number process interval give length end system v v l v v c do use similar derive v describe compute v c arrival function v bound process event stream system v v l v let v c instant system v number process v moreover upper bound maximum number process subtract minimum number process zero first observe time system either v ancestor node v one l b v l l thus minimum number process l v secondly maximum number process exceed v zero v two l b l l result v min v min v v l v v v v l v v l v v v denote path lead v similarly also compute l v v c v v v let set nod v c contain state set state set arrival automaton sin initial state invariant associate state us arrival function associate l min l l v v zero us transition relation define use edge relation transition relation specifically suppose one transition set edge construct use transition one add empty transition relation construct combine service automaton capture service provide two compute maximum buffer output buffer b thus system level analysis whole cascade carry compositional way note service automaton remain service curve service automaton represent residual service cycle one process data stream arrive b except state associate service function compute one computation furthermore transition additionally guard buffer constraint come one derive analysis bound obtain conservative actual bound less equal compute four case study present two case study illustrate effect mode switch time system case study also serve demonstrate approach improve performance estimate realistic stream process first study analyze processor operate two different mode switch two steer input buffer second study examine system resource allocation adapt arrival rat incoming event stream case study analyze maximum buffer buffer well delay input stream compare result monolithic framework additionally use event count automata compute optimal order compare relative accuracy case study one fig three show application partition map onto two process one two processor one run task two run task cod input enter system store input buffer b b first process one correspond partially decode store buffer b process two result stream fully decode write buffer b prior transmission output video system cod input event stream device figure three application arrive constant one operate two different depend state input buffer b initially start frequency change higher frequency whenever buffer b fifty capacity one guarantee maintain frequency time switch back zero zero one one zero b c two zero arrival automaton input stream c service automaton b service automaton figure four model fig three frequency two assume operate fix frequency system interest compute maximum buffer b give rate incoming input stream clock f zero two well capacity b obtain arrival service function collect execution trace different task simulate execution use version instruction set simulator two trace measure execution demand task video sequence consider constant arrival rate compress bite stream input one number allocate encode stream base execution demand derive function x give number arrive b time interval zero x compute arrival function l input event stream accord definition arrival function section similarly base obtain execution demand task compute function first k give minimum maximum number cycle require k consecutive combine deduce correspond service function zero l one one service function two l two represent process capability two compute analogously use execution demand task frequency f two zero one l zero one two use model application depict fig four arrival automaton event stream single mode outgo transition mode associate invariant zero arrival function calculate service automaton model one two associate zero one respectively correspond service function obtain zero one transition guard buffer constraint b c c half capacity b soon least c buffer b automaton switch zero stay unit time unlike one second single mode associate service function two invariant zero analyze buffer b first compute arrival automaton output event stream generate one obtain help analysis technique describe section three result next compose service automaton second derive maximum buffer b use standard follow standard approach event stream model l arrival function describe since mode switch explicitly model framework maximum resource offer one assume upper bind zero one whereas minimum resource offer one assume lower bind l one word service offer one model service function l one l min l one zero might expect two model service function two analysis model follow standard associate framework four zero zero l zero l analysis result fig five report estimate maximum buffer b increase method standard method exact method use frequency f one choose frequency f two result show obtain fix value however experiment value show similar performance pattern three show figure buffer get smaller move leave right reflect expect behavior system give fix input stream input buffer decrease function processor frequency observe maximum buffer correspond correspond method value always smaller standard method illustrate chain effect mode switch one output stream subsequently buffer b capture characteristic system method able achieve optimal result give one vice indicate signal b accordingly service automaton change two two one associate service function one l one provide lower level service two two provide higher level service service automaton second structure except service function associate different two associate service function two l one model system consist arrival function l service function l maximum l minimum l define case study one fig seven show maximum second figure seven case study two maximum buffer analysis buffer standard figure bubble denote buffer diameter higher buffer observe bubble correspond fall nicely inside correspond standard method similarly maximum delay event stream standard give fig eight show correspond optimal value since coincide value thus version improve accuracy analysis comparison standard approach significantly efficiency evaluate efficiency method measure average run time compute maximum buffer three might expect standard cost least computational effort come next average second surprisingly average exact method order magnitude figure five case study one maximum buffer analysis method hand standard estimate pessimistic case study two case study examine system resource offer adapt change average arrival rate incoming event stream use common signal system architecture previous case study two pes process event stream sequentially event stream arrive two different rat stream arrive rate minimum li maximum time switch rate whenever input interface detect change one rate another inform processor emit signal upon receive signal processor switch correspond level service fig six show arrival automaton event one two one zero two zero b b arrival automaton b service automaton figure six model case study two stream service automaton first show figure arrival automaton two one correspond two arrival rat r one mode si associate arrival function l obtain base rate use method describe case study one additionally si associate invariant li give lower upper bound amount time automaton stay mode transition automaton figure eight case study two delay analysis three g c g l elastic task model stream use one begin study compatibility ie safely connect together via buffer reference one e schedule time theoretical computer science two two e infrastructure computer system model computer two rate control four l general framework analyse system embed system design date five l x p event count automata model stream process six e p p w task automata information computation eight seven e l p w analysis use time automata theoretical computer science two eight g change operational context schedule information eleven nine theory hybrid automata ten k colour net basic analysis practical use volume one two three theoretical computer science eleven l x p l compose functional performance model analyze heterogeneous twelve calculus report department computer science national university technical thirteen j real mode change survey new proposal fourteen l sha r j k mode change schedule one three fifteen shin kim k performance analysis multiple mode embed design conference sixteen l framework evaluate design packet process design conference seventeen e l quantitative characterization event stream analysis hard eighteen e l hard journal computer system two summary demonstrate case study simpler model efficient achieve high accuracy hand exact method explore complete search space often suffer inefficiency able extend standard model term expressive power incur acceptable additional computational cost method enable accurate analysis state information exploit standard much efficient possibly less accurate fine grain model five conclude remark formulate extension call arrival service automata arise set syntax similar hybrid automata describe complex arrival service pattern associate arrival service function mode use external signal time case service automata buffer perform mode switch sketch exact analysis perform set also provide detail description base approximate analysis method use basic system compute accompany experimental evidence validate analysis interest explore model set multiple data stream process process element case automata represent remain service well schedule come play also interest establish tune arrival service automata order obtain desire system level term buffer delay challenge useful establish bound degree say buffer well time complexity analysis finally arrival service automata appear expressive convenient mechanism describe network process data