empirical study information flow web computer science engineer university san abstract dynamic nature web give rise possibility privacy violate information flow present empirical study prevalence flow large number popular one design expressive information flow policy language allow us specify detect different flow code two implement new information flow engine within chrome browser three use enhance browser conduct empirical study global top four flow steal location hijack history sniff behavior track survey show several popular sit include global sit use flow information browse behavior find show step must take mitigate privacy threat covert flow subject management compute information security protection unauthorized access engineer verification validation general term security experimentation privacy web security information flow web application dynamic analysis rewrite history sniff one introduction enable deployment rich fashion code source permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee ten copyright different mutually distrust potentially malicious however lack protection isolation sport several extremely dynamic language feature isolation like policy domain object model dom object uniformly apply application consequently proliferation also open possibility variety security paper present empirical study prevalence important class call information flow general class include several different attack independently propose study literature one steal code include particular site say display advertisement access information host web page include location bar sensitive information store page thus ad code malicious sensitive piece information leak ad lead variety routinely observe attack like request forgery two location hijack manner similar case dynamically load untrusted code influence document location influence value store string read dynamically generate request consequently dynamically load code navigate page malicious site exploit bug browser fully compromise machine mount attack three history sniff application share access single history file cache cache twelve lead possibility history sniff attack fourteen malicious site say learn whether user visit specific say merely induce user visit end attack use fact display link differently depend whether target visit six attacker create link target hide part page use browser dom interface inspect link display link display visit link target user history sell service allow collect browse history use history sniff four behavior track dynamic nature allow construct particular user interact web page include example precise information user mouse click scroll behavior part text highlight simply include event track mouse keyboard activity information send back server compute statistics interact give web page several company sell exploit flow track information example allow precisely track mouse compute aggregate heat map base move mouse allow track text copy service allow gather information without indication additional information gather take place believe understand page navigation result click link cause information send server believe understand action like mouse image silently verify belief require user study hope data collect help inform discussion privacy flow information flow merely theoretical academic interest indeed possibility history sniff prompt discussion span eight comment prevent history sniff three finally culminate recent fix two lengthy process illustrate importance flow web twenty difficulty design without break legitimate despite knowledge flow possible even likely little actually know occurrence wild example many extract kind information popular sit use like construct obfuscate evade detection lack empirical data prevalence flow hamper development deployment effective increasingly important class attack main contribution paper provide concrete data answer question exhaustive empirical evaluation several flow large number popular carry study three step first design expressive information flow policy language allow us specify detect different flow code section essence language allow us describe different flow specify sit within code taint inject sit certain taint must block example specify steal flow inject secret taint block taint flow control code specify location hijack flow inject untrusted taint onto value originate code block taint flow document location field specify history sniff flow inject history taint field contain style attribute link block taint flow send message network specify behavior track flow inject behavior taint input register trigger user behavior second implement new information flow engine chrome browser unlike previous information flow ten thirty eight engine use dynamic rewrite approach taint inject propagate block within rewrite code section although rewrite perform inside browser implement approach require understand browser ast data structure none complexity thus addition support extremely flexible flow policy specification language approach simple implement readily incorporate inside even though taint propagate oppose natively overhead approach prohibitively high approach add average sixty seventy total page load time fast network worst condition test overhead efficient enough exploratory study additional simple could even feasible interactive use section three third use modify version chrome browser conduct empirical study global top four flow steal location hijack history sniff behavior track result reveal interest prevalence flow wild find instance location hijack popular sit find several third party ad leak find several popular sit include global site make use history sniff information browse history case obfuscate manner avoid easy detection also find popular sit track click mouse infrastructure track even though observe actual flow experiment finally find many sit exhibit flow build infrastructure use like thus study show popular web twenty like sophisticate ad target rife different flow hence press need devise flexible precise efficient two information flow present approach dynamically enforce information flow example illustrate use generate propagate check taint information enforce flow focus information flow enforcement mechanism detect many flow wild provide bulletproof protection mechanism although current system could eventually lead protection mechanism discuss section seven space reason defer formal treatment rewrite algorithm technical report fifteen load f x function function figure one code web page consider figure one suppose code distillation web page belong domain web page text box whose content retrieve use call function show function intend call initialize use page function call user click particular button page dynamically load code last line code figure one call load use dynamically obtain string string pass effect execute string order update web page advertisement tailor particular user malicious code suppose string return call string pass execute overwrite page particular set variable use prefix query string refer attacker site user click search button get set attacker site thus user redirect compromise machine similarly dynamically load code user leak password sensitive information policy language flexibility dynamic nature make difficult use exist isolation first information hide like private field could use isolate dynamically load code indeed primary reason popularity language absence make easy rapidly glue together different distribute across web second asynchronous nature web make difficult enforce isolation via dynamic access control indeed example malicious code do mischief depart well user click button cause page relocate thus reconcile safety flexible dynamic code composition need isolation prevent untrusted code view affect sensitive data approach isolation information flow control eleven isolation ensure via two step first developer provide policy describe value affect affect second language compiler enforce policy thereby provide isolation framework information flow policy specify define taint injection sit check sit taint object string denote provenance give piece information site correspond invocation method f x receiver object site contain concrete pattern one match different concrete value later reference order allow sit match field read write model use getter setter particular model field read use call method take name field argument model field write use call method take name field new value make write easier allow simple syntactic sugar express sit x use translate x x e translate x e injection site p inject stipulate taint add taint object output method call describe site long condition p hold example follow injection site unconditionally inject secret taint point read true inject secret make readable use follow syntactic sugar p omit assume true result injection site express inject secret one check site p block v stipulate site condition p hold expression v must contain taint allow guard p taint check expression v refer pattern get bind within site p omit assume true example consider follow check site two block secret two two field reference special field add framework every object indicate script create object check site therefore ensure value taint secret ever assign object create script originate confidentiality specify inject special secret taint confidential check taint flow input object control code originate policy could formally specify use one two integrity specify inject special untrusted taint untrusted check taint flow input trust policy could formally inject untrusted one block untrusted one specify even finer grain refine taint information individual expressiveness policy language allow us quickly experiment different flow within basic framework could also lay foundation protection mechanism policy enforcement nature dynamic code load make precise static policy enforcement problematic impossible predict code load thus approach carry enforcement fully dynamic manner rewrite code order inject propagate check taint appropriately although know use approach protection twenty current goal actually protection bur rather find many flow possible one primary concern ease flexibility set approach useful particular implement approach require understand browser ast data structure none allow us quickly build modify prototype need furthermore keep framework clearly separate rest browser give us flexibility quickly port approach new chrome even different policy enforcement framework automatically rewrite code use specify injection check sit ensure taint properly insert propagate check order enforce flow policy first use check resp injection sit synthesize around correspond ensure input contain resp output taint taint specify correspond taint whenever correspond guard condition meet second rewrite code dynamically propagate taint object flow program via procedure call take special care ensure correct propagation presence tricky feature like asynchronous call rewrite strategy strategy enforce flow extend browser function take code string string load return rewrite string contain perform injection propagation check taint thus enforce policy ensure code web page appropriately rewrite evaluate ensure nest properly handle follow implement rewrite function procedure browser source language c function box function box function box function unbox unbox check untrusted load box box load figure two rewrite code comment block denote original version rewrite block call within use name rewriter wrap within call ensure rewrite evaluation rewrite procedure invoke code figure one emit code show figure two rewrite procedure rewrite statement expression figure two write original code comment rewrite version next step rewrite code illustrate taint inject check propagate integrity property specify influence injection inject taint extend every object two special field taint achieve wrap object inside call special function box take value create box version value field set indicate object originate taint field set empty set taint uniformly object include function one assign one pass parameter next use specify injection sit rewrite code order conditionally populate taint field method call match sit however integrity injection site match anywhere code far taint inject yet inject code get load ad server check call site match specify check site insert call special check function call check predicate check site condition function check pass check expression v taint correspond match check site function determine whether taint check expression contain prohibit taint halt execution example consider rewrite version assignment body match check site integrity policy rewrite insert call check call execute halt program message taint value form untrusted propagation next consider rewrite instrument code add propagate taint function call object box taint carry directly create hold box value example call use box version argument hence pass taint function assignment unchanged side function call whose result already appropriately box binary must little work many binary string concatenation require unbox handle extend code new object call name use object accumulate taint compound object support two first x add taint second x create box version x box taint accumulate clear return version x use direct field several use object explain later example consider rewrite version add taint resp assign unbox version fresh temporary resp next concatenate unbox string assign result finally call box add taint store return result code load model load rewrite box string add field result indicate domain string load example consider code load name store temporary box result store fresh temporary add field hold value evaluate example consider operation last line code figure one string load rewrite version box version string store rewrite ensure string get execute actually rewrite assume originate effect ensure taint properly inject propagate check within dynamically load code code assume ease exposition field taint read write remove code place track attack prevention suppose load operation return string rewrite code invoke rewrite function string yield string box untrusted inject taint value return implicit ie read yield value pass thus argument pass carry taint untrusted flow assignment inside execute finally button click trigger call taint flow value return call finally check assignment halt execution flow violate integrity policy thereby prevent redirection attack rewrite confidentiality example illustrate rewrite enforce integrity case confidentiality differ taint inject check taint propagate identical fashion inject taint rewrite add secret taint result read confidential object check taint rewrite insert call check write ie setter code originate untrusted check halt execution value secret taint flow untrusted location robustness even though primary purpose tool far evaluate exist flow scenario need worry malicious code try subvert system framework fact protect internal data structure maliciously modify particular tool disallow user program reference field use taint track specifically since framework track read write variable field simply stop program try read write internal use track information flow indirect flow rewrite interpose code pass string argument string originate rewrite function thereby ensure code rewrite next look rewrite handle indirect flow due control start data structure dynamically track indirect flow describe key affect indirect flow indirect taint stack track indirect flow augment taint set object stack name rewrite ensure indirect taint add remove indirect taint stack code enter leave block new control function use gather taint embellish object direct taint top direct taint stack indirect taint store throughout indirect taint stack latter ensure assignment also propagate indirect taint hold point assignment branch branch form first assign rewrite guard new temporary push taint guard onto indirect taint stack taint reside indirect taint stack either branch evaluate thereby taint happen inside branch entire branch expression evaluate rewrite code pop taint thereby revert stack set indirect taint branch evaluate example expression z x zero ensure taint z flow x assignment occur inside expression rewrite consider branch z unbox x box zero ellipses denote string pass omit call check brevity rewrite ensure taint guard z indirect taint stack inside branch taint add box version zero use assignment thereby flow x pop branch finish revert indirect stack state prior branch indirect implicit flow example illustrate limitation fully dynamic approach track indirect flow induce take branch one implicit flow occur due branch example branch precede assignment initialize x one observer saw x value one branch would able glean bite information value z rewrite indeed fully dynamic analysis seven fail detect prohibit implicit flow function call rewrite add indirect taint parameter function definition parameter hold indirect taint hold start function body taint push onto indirect taint stack function begin execution furthermore rewrite ensure function indirect taint indirect taint stack caller pass indirect taint parameter event subtle information flow example foo handler event fact foo execute contain information mouse hover part page capture flow indirect flow trigger test within dom event dispatch loop one e e e e capture flow thus trigger event simply inject taint output ensure taint flow indirect taint parameter register handler bind full describe section give overview approach enforce information flow implementation handle include challenge language feature like function implementation also incorporate several subtle detail pertain taint store propagate unbox object taint field add naive strategy box object break several several dom function require unbox object refer reader accompany technical report fifteen detail three implementation performance evaluation section present implementation information flow framework chrome browser describe several experiment quantify performance overhead approach implementation implement rewrite function c method within chrome invoke code get send execution engine thus implementation rewrite every piece include load script tag execute execute change web page via library implement pure modify resource loader chrome insert library code every program access library insert web page ordinary use script tag code load chrome run normal mode taint track mode taint track modify chrome track taint flow user surf describe three important perform optimize bar first important optimization implement two frequently execute use line c namely taint unbox second stack pop follow push pop taint store top stack cache object top stack pop reuse object next push thus avoid create new object push call every assignment remove object creation provide site rank one two yahoo three four five six seven bing eight nine ten eleven twelve thirteen twitter fourteen fifteen go average total eighteen one seven eighteen zero eleven w taint k w zero zero thirteen one thirty two zero seventy zero zero eleven zero nine zero zero zero eight zero twenty w location w zero two zero seventeen zero zero figure three flow result subset global last row summarize result sit save third also cache field read optimize library example whenever property reference several time library store value property temporary variable reuse value produce save despite fact use compiler engine employ set stress experiment use standard confidentiality location integrity evaluate efficiency approach effect require amount taint propagation location heavily access use front page latest global top list company rank base traffic global top vary widely size heavily use one code successfully run dynamic analysis page global top list visit many manually make sure function properly measure efficiency check two important site first remain confidential site second influence another site depend definition another site unfortunately use exactly domain name often lead many false alarm look like single fact agglomeration several different domain name example refer many major include code moreover relatively well know safe traffic statistics reference many one may want consider safe thus consider three ie three another site one policy state whose different current one consider different site two policy policy except domain consider consider three policy policy except global list common consider source experiment treat reference three different safe mainly consist statistics advertisement use evaluate performance system condition leave exact criteria trust give site future work rewrite framework make trivial consider different need alter notion equality check do inside detect flow figure three show result run dynamic information framework global top list use space show subset average row table follow site rank name rank global list total number line code include code sit format pretty printer number line code sit taint number dynamically create taint value describe confidentiality policy location describe integrity policy indicate policy violation indicate flow ie policy satisfaction three depend apply policy policy policy w policy dash table entry mean value table entry entry immediately leave code change visit thus run enhance chrome ten time gain confidence tool manually inspect every program flow detect confirm every flow indeed real variation base number line code sit decrease move policy policy policy note case example code sit almost total line code figure four slowdown leave page load right code come domain reference one hence include would help add would difficult us systematically decide thus use policy may correspond undesirable flow amount code decrease move w number dynamically create taint value also decrease rate large drop code lead correspondingly large drop number taint value create moreover expect number policy also decrease show last line table go seventeen see violation policy time information flow technique perform dynamically important evaluate performance overhead approach measure performance use two metrics total page load time run time modify chrome browser allow us measure one time spend execute site two total time spend display site figure four describe time time total time ten code base perform track confidentiality integrity average represent average time ten five bar represent run time smaller bar mean faster execution five bar normalize time unmodified chrome browser display time unmodified chrome browser indicate one mean leave bar represent technique us ing original version library use policy remain bar bar represent single change bar immediately leave optimize use version library rather original version change policy change policy change policy trivial policy trust execution time leave chart figure four show execution time expect bar get shorter optimize add remain bar consider progressively inclusive mean taint generate propagate check data figure four show original library slow execution significantly anywhere average optimize library provide performance gain original library provide slowdown various provide additional gain gain relatively small understand limit much help use bar essentially correspond every overall seem even best case scenario help much overhead approach approach need track flow regardless number external sit total execution time right chart figure four show total execution time enhance chrome load web page run script collect fast network large university faster network figure four time web page essentially hide overhead run thus use fast network figure four essentially show worst case approach see optimize bar significantly faster bar also see bar provide load experience four empirical study history hi jack next present empirical study prevalence history hijack popular recall link correspond visit user typically render differently link correspond visit user essence attack work insert invisible link web page inspect certain style link example color field thereby determine whether user visit particular know possibility attack hitherto know prevalent real popular use information flow framework detect study prevalence attack large set show history hijack use even quite popular formalize history hijack framework use follow information flow two inject secret one two block secret two particular whenever compute style link read use return value mark secret whenever value send network use second parameter actual data send taint summary result evaluate prevalence history hijack run information flow framework use two front page global top visit sit automatically implement simple web page direct browser successfully run framework sit total fifty slowdown history sniff follow code slow factor total page load time fast network increase overall find sit inspect style use infer browser history sit report transfer browser history network confirm actually history hijack one sit global top real case history sniff report transfer browser history framework confirm case real history sniff table one list site give rank description site code come list inspect browser history one table one extract visitor browse history transfer network many seem try obfuscate example inspect list source encode form decode right use statically insert web page dynamically generate way make hard understand history sniff occur look elsewhere paper use list rank site h f f h adult news traffic fun news forum music adult tech fun finance sport health fun host h adult news movie movie fun travel news h content movie sport movie finance host h fun f movie music news food fun sport fun car tech finance religion h content content movie adult h inspect twitter six twitter six nine eight table one perform real sniff otherwise specify abbreviate source history sniff code f indicate code come respectively h indicate code come site static code also find many make use handful particular case confirm sniff sit use code fourteen use code figure five show attack code exactly find code create obfuscate list inspect line one show part list actual list site code decode name line six create link target site page line read color link one k zero one two g three k four k five six f zero f f f one seven h false eight j nine ten eleven l j twelve thirteen fourteen fifteen sixteen seventeen eighteen l e e else e one l null color e twelve e h true nineteen twenty h b g array c id b c figure five attack code find create line finally test color line eighteen color indicate visit link h variable set true turn cause link insert list g visit sit line twenty list flatten string line image add current web page encode flatten string name image line flow figure five color property e array visit sit g actually indirect flow pass two line eighteen twenty framework ability track indirect flow allow us find attack note however framework find flow sit test actually previously visit already run experiment top global sit history none test sit visit g array would remain empty violation policy would observe even though fact user empty history would leak example precisely implicit flow limitation mention section case history sniff sit flag framework seventeen false manual examination source code behavior allow us conclude real case history sniff seventeen sit twelve contain code complicate understand remain five sit contain history sniff suspicious behavior detect monitor network access framework report sit provider description social advertisement advertisement sit inspect fourteen table two suspicious depend provider either inspect style purpose history sniff many irrelevant value taint handle indirect flow stringent policy investigate possibility history hijack also look sit simply read compute style link uncover additional read style link send network unfortunately framework cover corner case information flow discuss later immediately conclude sit transfer browser history even certain style information send network still possible absence send data use reveal information browse history example site send browse history link visit server could learn certain link visit without information transfer client thus better understand behavior additional inspect detail categorize two bin suspicious suspicious sit sit sit exhibit would categorize suspicious behavior particular suspicious inspect large number external link link dynamically generate locate invisible find many embed develop another inspect browser history systematically table two show use sit give name provider description provider number sit embed number inspect average sit embed notable menu develop inspect around average activate deactivate menu item depend browser history sit remain sit seem simply inspect history remain nineteen sample code complicate us fully understand sit seem incompleteness current implementation would miss information flow induce certain browser example consider code z result value z insert array array join string use method join even though implement wrapper object array track array read yet implement complete set thus case even though result taint current engine would discover would straightforward although create precise accurately reflect propagation taint moreover current implementation track information flow dom although recent track information flow dynamic tree structure could adapt address limitation even implementation perfectly track taint value program execution approach would still miss certain history hijack attack example attack use style sheet set font visit link much size unvisited link place image link use observe image render attacker determine whether link visit attack use layout information would currently hard capture use information flow engine attack fact even use example allow style visit link background image specific link background image locate attacker server observe image request attacker infer link visit without use despite source incompleteness information flow framework still use diagnostic tool find real case history sniff wild run experiment global top find sit really perform history sniff one sit global top also find several sit suspicious behavior even though current tool allow us conclude full certainty sit transfer browser history five empirical study attention track also conduct empirical study prevalence track popular code install relate mouse keyboard collect detail information user give information transfer network enough take naive approach simply prohibit information transfer network event handler execute since gather information accumulate global variable send network bulk attack actually use information flow framework detect track use follow framework inject secret inject secret inject secret one two block secret two front page global top one challenge perform empirical study automatically observe track one somehow simulate keyboard mouse activity instead actually simulate keyboard mouse instead choose automatically call event register relate keyboard mouse click scroll copy select end web page include common piece code automatically traverse dom tree current page systematically trigger handler event object appropriately synthesize handler another challenge many sit track activity accumulate information locally send information bulk back server regular use timer timer sometimes set span several wait several per site observe flow would drastically increase amount time need run test suite furthermore also hard know long wait issue addition call keyboard mouse event also automatically call timer event successfully run framework top total two overall find network transfer flag transfer information network transfer however many visually obvious user particular many use change appearance item example common display different image mouse move thumbnail possibly display version thumbnail although flow use track mouse activity less worrisome user see change web page mouse movement occur hint something send server ideally would like focus covert track user track without visual cue happen oppose visible track visual cue two however automatically detect covert track challenge would require know activity cause visual change web page instead use simple heuristic develop observe handful sit perform visible track particular observe information send server visual change server respond relatively large amount information example new image hand hypothesize covert track server would respond substantial amount data result network transfer find information flow tool filter response assumption flow likely visible track filter leave sample top ten rank among sit real case covert track ten sit sample summary result run information flow framework use could view heuristic charge sit privilege user attention data rank three eleven fifteen nineteen site soso description content portal portal search engine search engine click click click click click click click table three top seven perform real behavior sniff rank site wire description news music entertainment news search engine copy copy copy copy copy copy copy table four perform real behavior sniff use find seven actually perform covert keyboard mouse track able reliably replicate seven list table three site give rank short description track covertly one may surprise see click track covertly user click link clear visual cue information send network target link know user click however list click track covertly mean additional track click send information click another server know user click link search page click record event handler without visual cue happen list table three visit front page track occur search result page notable example table three site covertly track click mouse behavior many link front page send information web statistics site case visible track ten sit sample three actually case visible track despite filter heuristic one case server respond small image less response case server respond small command cause web page case clear visual cue information send server case use track sit filter flow report find seven use behavior track product develop track copy sit seven list table four library monitor copy event visitor copy content web page library insert page copy content thus contain within subsequent paste contain paste text thereby drive traffic use framework discover client copy content also transfer sit suspicious investigate several event also find site exhibit suspicious behavior particular every article site front page event handler collect global data structure information article mouse pass despite fact information never send network still consider case suspicious infrastructure present fact collect information locally six relate work information flow seven noninterference eleven use formalize isolation nearly three several static guarantee certain input flow certain output include type model check one analyse eighteen expressive capture dependent type system allow specification mostly static enforcement rich flow access control include dynamic creation information unfortunately fully static applicable set part code become available analysis run time often rely presence underlie program structure static type system several author investigate use dynamic taint propagation check use specialize hardware virtual machine four binary rewrite rewrite five nineteen late engine thirty implement data taint module ten track single taint bite different piece data module abandon favor sign script today rarely use web twenty part lead many alert result show due prevalence flow popular web twenty question design efficient flexible usable flow control revisit recently al thirty modify browser engine track taint bite determine whether piece data sensitive report attack data send domain page domain eight use similar analyze confidentiality browser approach provide different point design space particular expressive framework handle integrity confidentiality framework carry multiple taint different source time rather single bite taint downside approach implement use rewrite strategy rather modify result performance overhead dynamic rewrite approach information flow also investigate theoretical set five nineteen work distinguish theoretical advance term experimental evaluation focus implement approach work large number popular sit evaluate prevalence flow one way ensure safety client disallow unknown script execute sixteen however likely make hard use dynamic content finally al present formal semantics interaction build rewrite framework dynamically enforce security seventeen quite different information flow require instrumentation enforce isolation possibility history sniff first raise academic community decade ago nine original form history sniff use time difference retrieve resource cache previously retrieve one general many form history sniff possible base link decoration example set background property visit link work even disable together genuine utility visit link decoration provide reason history sniff difficult address comprehensively thirteen propose solution twelve propose solution two fix recently deploy browser potential history sniff recently prove enormous fourteen however since date public disclosure regard use history sniff publicly available tool detect expect today many malicious sit prefer simple robust approach query link compute style accordingly data flow focus sit use approach detect goal paper draw attention use clandestine history sniff popular sit mean false negative acceptable future work hope extend tool detect form history sniff well seven future work paper propose information flow framework evaluate performance framework evaluation show performance information flow control acceptable give engineer optimization still impose perceptible overhead also present extensive empirical study prevalence information flow steal location hijack history sniff behavior track information flow framework find many interest information flow include case real history sniff global top despite incompleteness one direction future work scale study information flow study could perform crawl web go beyond web sit could look information flow moreover would also like investigate prevalence security attack lead information flow like request forgery another direction future work extend current framework become bulletproof protection mechanism primary purpose tool far observe exist flow wild scenario need worry malicious code try circumvent system however additional work framework could possibly lead protection mechanism well purpose would soundly cover possibly form information flow include implicit flow flow induce dom browser addition would also need better performance deliver practical browse experience however believe careful extensive engineer possibility framework could lead practical protection mechanism eight material base upon work support national science foundation grant find express material author necessarily reflect view national science foundation nine reference one information flow analysis logical form r editor proceed volume page august two l baron prevent attack user history visit three bug visit support allow query global history may four j chow b k understand data lifetime via whole system simulation blaze editor proceed security page august five information flow monitor back proceed computer society six clover time attack web privacy seven e lattice model secure information flow nineteen five eight v analyze information flow browser c proceed page computer society nine e w schneider time attack web privacy editor proceed page press ten definitive guide j x song dynamic taint analysis fifth edition august eleven j j security security model proceed security privacy page computer society twelve c bortz j c protect browser state web privacy attack c proceed page press may thirteen invasive browser sniff c proceed page press may fourteen l feasibility web browser history detection c editor proceed computer society may fifteen r h dynamic information flow technical report university san sixteen n defeat script injection attack embed p p proceed page press may seventeen h h instrumentation practice g editor proceed volume page eighteen lam martin v b j secure web static dynamic information flow track r de moor proceed page press nineteen j dynamic security monitor k v proceed sec sept twenty l v b conscript specify enforce security browser proceed security privacy page computer society c program explicit security editor proceed volume page fourteen automatic detection analysis signature generation exploit commodity proceed f v information flow inference j c editor proceed page press n p k wang n ghost browser analysis n editor proceed track information flow dynamic tree structure back p proceed volume page sept k talwar j foster detect format string type editor proceed security page august g e j w lee secure program execution via dynamic information flow track k editor proceed page press secure information flow safety problem c editor proceed volume page sept n j bridge j chang r g j g reis august rifle architectural framework security j p proceed micro page computer society thirty p f n e c g cross site script prevention dynamic data taint static analysis w c proceed g smith verify relative secrecy reps editor proceed page press n instrumentation browser security editor proceed page press