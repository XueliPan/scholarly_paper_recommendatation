answer control flow question code institute research school computer science mellon university abstract empirical edit code reveal follow control flow lead poor change waste time bug design static analysis compute control flow help quickly accurately visually answer common question code subject engineer program engineer distribution maintenance enhancement general term human factor verification program comprehension empirical analysis study one introduction successfully edit code make change try understand relevant unfamiliar code tool use many different approach support activity tool build traverse seven recommend relevant code eight check method three reverse engineer diagram code six identify new tool use modern human computer interaction approach study challenge face understand unfamiliar code central tenet modern human computer interaction gather data context nature user activity essential design useful tool two observe thirteen code edit task analyze question take long time answer bug insert task design challenge require reverse engineer design code key observation many experience arise specific challenge answer update path question exist tool refine find ask control flow question five update path control flow connect trigger user input event generate control flow user code change program state field write framework call example open file trigger repeat update copyright hold eight status bar base find design tool automatically answer question two update path question follow update understand call path functionality relate similar tool eclipse call hierarchy provide tree control explore chain method call however view include feasible infeasible often make difficult identify feasible event dispatch cause huge even though infeasible infeasible also result test could never succeed along path allocate object incompatible type code guard flag often store field also could follow specific trigger use call hierarchy traverse backwards effect trigger require traverse either trigger begin path find program traverse usually impractical give force guess come trigger often lead incorrect often could understand multiple update interact propose change unchecked investigate try use avoid navigate infeasible question possible answer use time step lead call hierarchy even though follow infeasible question could answer use could inspect find trigger instead make false often arise false include believe method would call data update slow expensive effect downstream method downstream effect superfluous object own could pass downstream change code rely false lead bug construct local understand problem propose change could never work exist program analyse program understand dominate slice tool traverse slice set program point affect affect backwards slice statement six slice tool compute feasible model checker compute feasible current model checker one specialize find low frequency bug therefore send view figure one visualization method white box show contain class grey box lay execution tree call line either may dash must solid happen occur loop two line field text read arrow write arrow depict stale data first read edit code may longer feasible cross reveal unexpected change compute precise generate slowly use interactive tool analyse compute hold program point eliminate infeasible dynamic analysis base eight depict single concrete trace set trace feasible trace three analysis visualization design analysis tool allow accurately ask answer update path question phase one modular analysis propagate phase two information use construct per method feasible user ask question phase three compute abstract execution trace trigger method phase four filter trace answer user question phase one analysis propagate source fork constraint source field read return value propagate symbolically whenever flag object type test use attempt resolve test possible path fork create analyze separate reduce exponential path blowup uncorrelated test dead remove identical join analysis track class unlike model checker intentionally track arithmetic greatly reduce path blowup task contain call control dependent arithmetic measure generally hold phase two use information construct method method consist nod list method later reference summary nod end test link field true false successor nod summary join subsequent differ phase three abstract interpretation use compute abstract trace root trigger method phase four use trace answer question select ask question happen investigate ask question design depict answer preliminary show figure one four summary reveal control flow question ask hard error prone answer use exist tool analysis visualization tool help quickly accurately answer control flow question code reference one ball k automatically validate temporal safety spin workshop model check two h k contextual design academic press three l j g leaven k e poll overview tool tool technology transfer seven three four f j ball visualize program execution five j g c murphy k de question ask evolution task six h muller manipulate document structure use shrimp view seven program slice eight p mine version guide change june