international symposium international symposium feedback control real system performance kang oh department computer science sing h son department computer science state university new york kang university son abstract challenge process timely fashion use fresh data current stock price since may considerably vary due dynamic contention transaction timeliness data freshness may compete system paper propose novel feedback control model support desire data service delay manage size ready queue indicate amount backlog also propose new update policy adapt freshness cold data differentiate manner base temporal data access update pattern unlike exist work feedback control performance actually implement evaluate feedback control adaptation real model stock trade performance evaluation undertake experiment consist client thread concurrently request service stock quote trade portfolio update manner experiment system support desire response time bind data freshness process significantly number time compare test one introduction aim process timely manner use fresh temporal data current stock price traffic sensor data represent real world status reduce difficulty develop stock trade agile manufacture work support part grant traffic control support logical temporal consistency data via exist unaware time data freshness ie data temporal consistency show poor performance eighteen nineteen challenge provide data service since may dynamically vary due contention also transaction timeliness data freshness may pose conflict user give higher priority temporal data update transaction timeliness improve cost potential freshness reduction one contrast transaction timeliness reduce temporal data update always higher priority user feedback control recently apply manage performance presence dynamic two eight thirteen produce promise initial result however exist work feedback control performance base generally exist work base nineteen hence model real system little prior work one nine fourteen evaluate data management real system address problem design implement soft call seven send server request stock quote trade user portfolio update find considerable result experimental result real system seven server process data service request periodically pull update stock price yahoo finance one consider pull model stock quote service yahoo finance usually provide push service data source data directly measure achieve transaction timeliness data freshness unlike exist transaction process performance council paper extend generate also develop novel approach feedback control performance adaptive temporal data update implement evaluate approach extend knowledge work first design implement evaluate feedback control adaptive update scheme real although associate individual excessive service delay may many leave thus need control response time support desire service delay bind develop novel feedback control model manage size ready queue data service request generally size ready queue increase load increase case transaction process transaction due contention inside hand ready queue size decrease base observation model relation ready queue length response time note control model develop paper different previous work thirteen feedback control model thirteen aim support desire utilization feedback control scheme paper intend support desire delay bind data service addition develop new update policy eight efficiently manage freshness temporal data approach balance update user transaction consider user data need current service delay differentiate freshness among temporal data approach significantly improve transaction timeliness overload compare exist approach adaptive temporal data update eight approach nineteen temporal data update fix rate regardless data access pattern system severely overload admission control also apply incoming apply admission control freshness adaptation improve success ratio ie fraction submit finish within desire delay bind data service performance evaluation create client thread send data service request server soon client thread finish send data service request server start measure response time wait transaction query process result server receive service client wait time exist trade quote request paper fix number client thread shorten range time middle experiment randomly create additional range stock market may happen especially market status volatile give approach support desire response time data freshness significantly improve success ratio compare test overall performance analysis show feasibility feedback control real system remainder paper organize follow section two describe architecture feedback control system also give detail description adaptive update policy control model tune process discuss section three performance evaluation result present section four relate work discuss section five finally section six conclude paper discuss future work two architecture feedback control overview section architecture feedback control procedure discuss moreover freshness adaptation admission control feedback loop discuss figure one show architecture feedback control q response time error monitor block queue block transaction handler commit user update stream dispatch ready queue figure one architecture consist feedback control adaptive update admission control transaction schedule concurrency control performance monitor performance monitor compute response time error ie difference desire response time bind query update e k response time controller q k k figure two response time control loop response time measure every sample period base error feedback controller compute require ready queue size adjustment q measure delay longer desire bind ready queue size need reduce vice accord q adjust necessary meet desire delay bind one configure selectively turn performance evaluation purpose support data freshness periodic temporal data update schedule figure one receive higher priority user similar eighteen eight queue schedule manner user transaction arrive require finish time equal sum current time relative deadline ie desire service delay concurrency control currently apply two phase lock provide three underlie transaction block abort restart due data conflict block wait block queue conflict transaction finish ready queue data conflict resolve commonly use schedule concurrency control commercial theme work show feedback control support desire delay bind system without special instrumentation transaction process take approach since exist commercial support schedule concurrency control neither popular operate underlie ideally however one replace transaction schedule concurrency control provide library address performance deployment issue investigation reserve future work feedback control procedure system start operate time zero let represent sample period feedback control k one sample period time interval k one sample instant equal time domain performance monitor compute error e k k k average response time query finish k one sample instant controller compute q k queue size adjustment need support k one base e k description overall feedback control procedure follow step one sample instant delay controller compute service delay error e k k step two compute e k controller compute control signal q k base e k q k apply exist arrive time period k one overload q k zero need reduce backlog due contention q k zero jump step four detail discussion controller design give section three step three q k zero apply adaptive update policy subset cold data whose update higher access result period p cold data item increase new period p new accordingly increase q k p new p p since update period extension similar effect reduce service request rate repeat step q k zero freshness adaptation possible detail discussion adaptive update policy give section step four new ready queue size support time interval k one q k q k one q k thus ready queue size decrease q k zero vice apply technique bind queue size zero define system q k zero set q k zero also make q k q k apply admission control arrive k one hence incoming drop upon queue length already equal q k due backlog freshness adaptation feedback controller show figure two aim support desire response time bind suppose overload update reduce base notion flexible validity eight gracefully relax absolute validity eighteen design maintain temporal consistency data data di absolute validity interval update period p support freshness di eighteen temporal data update access update ratio r compute temporal data di base update frequency ie access frequency eight r access f f one di hot r one otherwise cold paper develop novel freshness management policy activate temporal data update access pattern well system status adaptive update policy converge balance r one arbitrary temporal data di di update often access achieve balance temporal data update optimize naturally differentiate freshness temporal data accord user transaction need data frequently access update frequently vice also approach specific single application applicable general data service detail description adaptive update policy follow overload increase update period cold data di p new min two p r update period relaxation bind determine administrator application stock trade r one cold data di update period increase p r long p r accord two consider since application administrator may want update period cold data di avoid update period di increase bind rarely access approach quickly react freshness example previously cold stock become popular due market status change two take minimum p r ensure p new paper set ensure every stock price update least every update period di increase adjust f flexible validity interval di f new new f initially f new similarly system freshness upgrade hot data paper evaluate freshness degradation since mainly consider overload condition future analyze performance impact freshness upgrade increase update period overload one reduce potential contention temporal data update user expedite overload management phenomenon observe performance evaluation section four degrade freshness overload need linearly search first cold data item increase update period accord two thus worst case time complexity n n number temporal data approach contrast previous work eight data sort descend order r update period cold data r increase first fix amount repeat next r data hence time complexity approach propose eight n sort r value freshness degradation differentiate consider update access pattern paper consider example specification specify administrator data service application accord service delay need smaller equal overshoot transient response time longer desire smaller equal support challenge potentially involve severe data resource contention settle time time take handle overshoot decrease delay back paper settle time desire shorter equal general overshoot settle time fifteen paper aim support small overshoot overshoot small relatively long settle time acceptable section four show closely support stringent specification give future also consider evaluate performance management scheme consist feedback control adaptive update admission control three model system section take systematic approach design tune data service delay controller due systematic model tune describe section meet via feedback control section discuss model via relation ready queue size service delay section system identification fifteen six apply derive model use result transfer function derive section use transfer function controller tune via root locus method fifteen support desire average transient service delay specify support stability system queue length response time paper derive model discrete time domain use arx auto regressive external model fifteen six widely use identify computational system dynamics six ten eleven specifically model relationship data service delay k delay k queue size q k measure previous sample k aid k k three n n one system order determine size historical system dynamics data use unknown model ai three derive via system identification fifteen six system identification objective minimize sum square data service delay prediction base ready queue size client thread concurrently send data service request one hour client send service request wait response receive transaction query process result wait time time randomly select range note large operate range every client time submit per second total submit time way model high performance data service deal widely vary control model tune valid operate range beyond operate range feedback controller may may support desire performance fifteen six analyze robustness feedback controller outside operate range reserve future work feedback control admission control freshness adaptation apply thus accept incoming data service request update temporal data highest frequency specifically stock price update every equal stock price update per second total least square estimator predict response time every base queue length response time statistics data observe window whose size determine system order define three approximately eight zero zero arrive use large number data aim moderate stochastic nature recommend six perform first order fourth order system model analyze accuracy result use root mean square error common accuracy metric fifteen six unfortunately one hour first se fourth order system model large unacceptable since desire delay bind large prediction mainly due wide operate range express range time describe since large number vary time prevalent transaction process consider alternative approach accurate specifically use square root value performance data similar five correspond se second order model nearly order magnitude better value previous result use raw queue size response time value another accuracy metric one variance response time prediction error usually model eight consider acceptable six consider se result use square root value ready queue size response time consider acceptable variance actual response time reject first order model due poor se value third fourth order model improve se approximately two compare second order model thus choose second order model due relatively low complexity derive second order model k k one k two k one k two four k delay predict observe period base actual delay queue five six length value measure k one th k two th data service delay controller design response time controller derive transfer function take fifteen six four represent relationship ready queue length service delay algebraic manner z z z z z z k z q k four algebraic manipulation get follow transfer function g z z q z nine give transfer function six design data service delay controller use pi proportional integral controller select pi controller since p controller remove steady state error fifteen six controller eliminate nonzero error combine p controller fifteen six use derivative controller sensitive noise fifteen six data service potentially involve transaction data conflict efficient pi control law use response time controller compute control signal q k sample instant q k q k one one e k e k one seven error e k k sample period show figure two give q k q k q k one queue length adjustment need support desire response time k one transfer function pi controller obtain take seven describe relation controller input e k controller output q k c z z z one eight one one one need carefully choose support desire average transient performance specify tune need derive transfer function one derive close loop transfer function use transfer function controller control system fifteen six give transfer function g z six pi controller transfer function c z eight close loop transfer function f z obtain standard way fifteen six f z c z g z one c z g z nine paper set sample period several per second arrive experiment thus quickly react support desire response time bind give f z via root locus method fifteen locate root denominator unit circle support stability close loop system support select close loop pole correspond four performance evaluation section evaluate approach several see whether support describe section two describe experimental follow average transient performance result server run dell dual core one memory run two dell one three memory one four memory every machine run kernel server connect via switch communicate use protocol client machine run client thread therefore client thread continuously send service request server sixty time client thread issue query stock price large fraction request stock quote stock trade forty time client uniformly request portfolio update purchase sale transaction time transaction access fifty data initially temporal data ie stock price update every one experiment run fifteen generate vary load describe section follow begin experiment time uniformly distribute thus approximately per second arrive server five range time suddenly reduce model change table one test approach open feedback control pure admission control feedback control hence one per second arrive server result randomly increase five maintain end experiment fifteen alternative approach generate increase number client thread use fix range time paper choose change time less overhead create number client thread fly result give immediate impact apply server performance consider four approach show table one open basic three without special performance control facility thus represent system overload apply admission control incoming proportion response time error apply admission control incoming accord control signal compute feedback loop however apply adaptive temporal data update apply adaptive temporal data update admission control accord control signal compute feedback loop except open test approach close connection client thread send busy message client thread connection establishment take longer approach reasonable impossible support case five experimental run perform test approach different seed uniform random number generation section average five run present ninety confidence average performance average response time approach show figure three open average response time average response time achieve respectively result observe support desire response time bind specify accept incoming query open become overload fail support c e e e n p e r e g r e v five four three two one zero open figure three average response time show better response time open via systematic feedback control provide shorter response time open however support observe admission control insufficient manage overload involve physical resource also data contention adaptive temporal data update reduce contention user stock price update result effective overload management discuss cost adaptive update policy freshness reduction average sixty update extend experiment remain stock price data update every thus support timely total n c n r f r e b n one eight six four two zero open figure four normalize number commit query show figure four process number among test approach process fifteen commit process within thus approximately commit zero open time sec b time sec c finish within desire delay bind figure four show total number commit number timely finish within normalize correspond number figure significantly outperform open process time open performance close open much worse result observe admission control insufficient overload management discuss ad admission control even less effective observe admit either many two show oscillate performance transient response time c e e e n p e r c e e e n p e r c e e e n p e r thirty twenty fifteen ten five zero thirty twenty fifteen ten five zero thirty twenty fifteen ten five zero transient performance zero c e e e n p e r p r e c c e z e e q twenty fifteen ten five zero zero fifty zero zero time sec b transient success ratio zero time sec figure six transient response time zero time sec c transient queue size zero time sec figure five transient performance subsection present transient performance test figure five figure six show transient response time test approach measure every sample period substantially outperform term transient response time show figure response time overshoot open transient response time half experiment show figure six figure six b six c considerably reduce transient response time compare open frequently violate desire delay bind large amount begin figure five response time high mainly due overhead involve lot disk access data structure however transient response time ie horizontal bar figure five time two relatively large overshoot time period overshoot decay less three sample satisfy figure five b show transient success ratio measure number timely per second denote number finish within every second also transient ready queue length plot figure five c figure five b success ratio relatively low result ready queue build increase transient response time begin show figure five b five c note may serious problem since real stock trade may choose accept service request phase take less three show figure five achieve generally increase success ratio process backlog accumulate show figure five b figure success ratio range test achieve much lower success compare due widely oscillate transient response time show figure six maximum transient success ratio open maximum success ratio maximum success ratio note maximum success ratio describe show figure five c maintain queue size steady manner except period maximum queue size begin data service request show figure range request time period note queue empty since feedback control signal positive accept request time interval response time shorter desire bind queue length range request queue size increase since time considerably reduce experiment observe feedback controller effectively manage queue size support desire delay bind summary significantly enhance average transient data service performance compare apply feedback control efficient adaptation five relate work work base nineteen little prior work data management one nine fourteen seven actually implement evaluate real however publicly available result hard perform research real system address problem develop seven significantly extend paper discuss conceptually work recent work feedback control include two eight thirteen aim support specify utilization deadline miss ratio data timeliness imprecision paper develop new control model support desire response time data service request work also different exist work work implement evaluate real system paper propose new temporal data update policy efficiently manage freshness manner different previous work eight al one observe transaction timeliness data freshness data imprecision similarity concept two four apply reduce update overload certain data value change less specify threshold correspond update drop overload approach complementary approach performance could improve adaptive update policy augment data similarity imprecision concept reserve future work unit seventeen sixteen propose adaptive query update schedule optimize user preference profit respectively however aim support delay bind critical data service al twenty determine via queue control theoretic appropriate number allow concurrently execute system however work aim support neither desire response time bind data freshness essential data service lack formal discussion controller design stability analysis feedback control apply manage performance various web server ten twelve eleven approach however may directly applicable consider issue data freshness six future work may considerably vary due dynamic contention challenge process timely manner use fresh data current stock price traffic data also transaction timeliness data freshness may compete system paper propose novel feedback control model support desire data service delay manage amount backlog also propose new adaptive update policy adapt freshness cold data efficient way base temporal data access update pattern unlike exist work feedback control performance actually implement evaluate feedback control adaptation real stock trade experiment feedback control system support desire response time bind data freshness embed technology symposium fourteen lin c design first international workshop issue fifteen c l h digital control system analysis design edition prentice hall sixteen h query update schedule international conference data engineer seventeen h unit transaction management international conference data engineer eighteen k international journal distribute parallel one two nineteen k h son l c data service volume twenty b e determine good level external schedule proceed international conference data engineer page sixty performance transaction process council k p characterization traffic electronic commerce research three twelve design transfer protection thesis university k j r schedule temporal data semantics edge data engineer fourteen five yahoo finance process significantly number time compare test thus paper show feasibility feedback control real system future continue enhance feedback control data service quality adaptation scheme transaction schedule concurrency control scheme reference one b h b apply update stream soft system two j h son specification management support imprecise three three oracle product family high performance available four data similarity process control symposium five n r draper h smith apply regression anal six j l tilbury feedback control compute sons publication seven k kang p h sin j oh h son performance evaluation international conference embed compute eight k kang h son j manage deadline miss ratio sensor data freshness knowledge data engineer sixteen ten nine kim h son j performance evaluation technology symposium ten c f j h son feedback control approach guarantee relative delay web proceed seventh technology symposium page eleven c x wang c gill feedback control schedule orb proceed embed technology symposium page twelve f c l sha x feedback control prediction relative delay guarantee web embed technology symposium thirteen j oh k kang approach model performance management