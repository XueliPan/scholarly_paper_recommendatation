conference compositional analysis lee department computer information university lee paper present model develop new compositional analysis contain multiple algorithm construct interface single application present method compute interface composite application present use constituent case study adaptive stream system demonstrate analysis offer precise result compare unimodal analysis introduction increase scale complexity embed prompt need advance analysis facilitate design design paradigm large complex system first decompose smaller simpler develop independently complete system use abstract away internal achieve design interface abstraction interface composition must adhere principle ie establish system level besides functional behavioral embed concern resource demand necessitate time analysis compositional ie analysis do combine component abstract time component level hold compositional analysis therefore topic great interest within embed community numerous propose six seven fifteen sixteen continuously extend typically assume static system execution semantics fix set stream always active demand fix amount resource abstract away event communication system replace resource demand place system event stream abstraction adequate stable pattern practice however often require operate multiple exhibit vastly different resource demand modal exhibit wide spectrum embed range aircraft control adaptive stream smart network stream server example often need process several concurrently include audio video graphics process well task research support part grant grant become adaptive may adapt select different encode algorithm depend network connection may also synchronize one another intentionally inadvertently due network condition system mode may characterize different set task different data arrival rat different schedule policy mode switch may instance due interrupt buffer system exceed certain incoming event another component may also trigger mode switch receive component behavior communication need take consideration internal event trigger may encapsulate resource demand behavior response incoming external need expose component interface paper propose framework compositional analysis execute multiple concurrently hierarchical schedule policy single process resource present automaton model model technique analyze compositionally model refine previously propose automata model describe eleven design complete system architecture process load resource availability concern application load execution semantics service function resource availability characterization calculate analysis make model declarative suitable open model assume task reset system move new mode however take account task unaffected mode change result analysis precise importantly extend analysis framework eleven new compositional analysis hierarchical key summarize follow describe model refine previously propose model eleven better represent application semantics without specification resource supply compare eleven model also employ realistic mode change protocol task affect mode switch need reset switch new mode characterize two general ways handle pending event stream mode change present composition semantics context hierarchical schedule propose interface representation hide task schedule detail expose time guard external require synchronization component interface state machine state augment service function represent resource requirement correspond mode application develop method compute capable accurately capture effect mode change resource transitional method also consider buffer condition time guard derive service requirement mode unlike previous pending buffer mode change must finish immediate destination mode hence cascade pending technique design general case discuss however case restriction impose certain illustrate utility model compositional analysis use case study adaptive stream system compare obtain result unimodal compositional analysis relate work several compositional analysis propose unimodal see one six sixteen seventeen nineteen support multiple level hierarchy schedule fix priority deadline first broadly divide two classical periodic sporadic task model b task model former often model periodic bound delay explicit deadline periodic six sixteen seventeen resource latter present use service function capture minimum resource interval give length four nineteen approach abstract away communication allow analysis achieve base calculation resource model use demand supply bind function formalism describe multimodal however useful system development accompany host analysis compute component well detect communication resource use composite system hence previous become insufficient addition several propose extend model time analysis literature accommodate example framework present three allow certain task intentionally change execution type mode change different mode change study eight fourteen eighteen thirteen develop paper ensure violate transition single component mode change protocol similar one propose eighteen general require buffer execute mode switch take place remain buffer several subsequent mode switch worth note study mode switch consider compositional analysis multiple hierarchically schedule finally recently propose extension framework twelve different compare model shall present paper arrival service automata twelve aim model independently complex arrival pattern event stream resource availability pattern follow relatively allow simple process semantics process semantics different task schedule explicitly capture adapt dynamic application model study paper resemble model propose knowledge resource eleven except supply fact method propose compute suitable resource supply already give best knowledge paper first attempt consider compositional analysis organization paper next section revisit compositional analysis unimodal section formulate model composition semantics present interface representation generation technique section follow interface composition section v describe case study section conclude paper compositional analysis unimodal section revisit interface computation unimodal component develop four nine nineteen extend result compositional analysis unimodal consist multiple unimodal share resource hierarchical schedule policy system description basic model unimodal system consist finite set task run single process element process input event stream produce output event stream task input buffer store input stream output buffer store output stream unshared task task process input fifo manner soon task complete process event remove event input buffer write result output event output buffer figure one depict unimodal model system three task share resource b denote input output buffer ti unimodal system task always active attribute stay constant throughout system execution task characterize b fig one unimodal system architecture model single mode task identifier associate input buffer b associate output buffer execution demand relative deadline priority use zero otherwise arrival function input event stream respectively give maximum minimum number arrive associate input stream interval length zero arrival function input stream ie term number execution backlog buffer time refer number execution require process buffer time assume granularity time choose arrive discrete point time unit resource supply execution time unit mainly concern shall refer wherever single function apply schedule give set active number execution provide resource within time interval schedule policy compute number execution allocate interval schedule often make discrete point time either next time unit new event arrive denote execution requirement task finite set task system component denote w set describe general notion schedule policy require define precise semantics hierarchical schedule note definition capture schedule however analysis present next assume schedule definition one schedule policy schedule policy function w n w n take input finite set w w integer k n denote number resource available time duration new event arrive return result number resource provide w duration word w k function g w n g w give number execution allocate w w g w k greedy process suppose task system denote b backlog ie number execution require input buffer time suppose k number execution available interval new event arrive number execution provide interval min k b example one fix priority consider set task schedule ti higher j denote backlog priority time suppose k number resource available interval new since resource first allocate one verify number min resource unit hi allocate ti two n thus hi w k g g ti hi min k k b hierarchical schedule unimodal hierarchical schedule framework system partition tree schedule hierarchical manner illustrate figure two internal node tree represent composite component whose leaf represent elementary component finite set task system component schedule policy schedule may differ parent schedule policy component c resource component component task fig two hierarchical schedule system component c compositional analysis unimodal consider elementary component c consist set task schedule schedule policy denote f set function f n n interface c minimum service function f none input buffer overflow recall service function specify number execution available interval length zero suppose order task service function allocate task must least equal demand bind function give zero recall specify maximum possible execution require interval length input buffer overflow size zero thus minimum service function require task alone define zero size one size b denote capacity buffer b hence interface c service function c suppose assume without loss generality ti j word total resource first allocate remain resource give combine one imply minimum service ti ti zero one n function require ti ti denote service function f require task arrival function remain service function process task least give four sup thus interface c c service function next consider component c comprise schedule use let interface one assume higher priority c j j interface c minimum service function c give one automata execute multiple operation perform unique functionality set task active attribute well schedule policy system execution vary respect mode system currently change one mode another trigger time guard event model automaton short complex system compose collection share resource hierarchical schedule policy model time guard b one fifteen external event five c three twenty one b ten thirty fifteen two buffer guard fig three example automata finite automaton whose state represent operate transition represent mode change mode state specify set task correspond attribute active mode schedule policy use schedule task transition trigger external event interrupt condition buffer associate task time constraint denote set b zero b b n definition min r two finite set task application finite set mode form denote set active task schedule policy say active active min initial mode set buffer b b invariant function assign mode interval minimum amount time system must stay mode maximum amount time system may stay mode require one set signal trigger mode change transition relation transition r form origin destination external signal trigger transition guard input buffer interval relative instant system enter transition enable application urgent multiple transition enable concurrently select one fig three depict example ti correspond task thereby associate buffer time attribute however different initially system mode active schedule system detect least three twenty time new task arrive arrival function change input buffer five move mode system deactivate least important task execute together mode change whenever transition enable system move instantaneously new mode new effect new incoming immediately unchanged task appear affect mode change new old task appear old mode arrive new mode new input new task appear new mode change task whose modify may arrive pending input buffer old change task may handle differently depend application generalize two case physical pending time ie execution demand deadline associate old mode preserve new mode one physical pending preserve new mode time follow modify associate task new mode note execution demand event depend current mode system event arrive system case mode process case rest paper assume former case however result latter establish similar simpler fashion assume also task follow specify new mode regardless event process lastly system mode active task mode common require delay system move new mode do add intermediate mode time invariant equal delay old task zero arrival function old task process new mode add task active task set new mode assign arrival function zero function composition automata compositional analysis consist multiple run concurrently reason mean composition two type without resource share paper shall focus composition independent execute resource schedule policy b mode composition let one mode two mode suppose share resource schedule policy consider time interval new event arrive automata suppose processor k resource available execute definition one number resource allocate one two k one k two respectively one two result number resource allocate task g one one g two otherwise define k g composition denote mode definition three let one one two two two asynchronous composition denote min r set define min initial mode one min l l set buffer invariant one two set external trigger signal transition relation define follow one l one two l two one one two two r one min l l min transition two one one one min one transition r two one two one min two transition r two one one set task system note case possible enter time enter time l already spend l time move one immediately least one time unit move immediately one move new mode time l capture case similar obtain time associate transition case synchronous composition define similarly however synchronize transition allow ie case compose mode transition associate interval associate two component transition similar unimodal case compositional analysis begin system partition finite set hierarchically schedule difference elementary component hierarchy system model hence first compute interface capture resource subsequently generate interface composite component compute interface representation resource requirement component c capture resource interface finite state machine state augment minimum service function demand c different service function associate different state interface represent different resource c different set transition interface signify service change request component trigger signal time invariant resource share set external trigger signal word expose communication hence allow detection communication resource use composite system interface composition hand internal form buffer exist component unobservable abstract away replace service function interface enable information hide time limit interface complexity definition four resource interface resource interface component c finite state machine sin r finite set state characterize resource requirement one c sin initial state f service map specify state minimum service function must guarantee c set external signal set transition transition l r represent change resource requirement component ie trigger signal time interval l transition enable transition r instantaneous state urgent example fig four show adaptive stream process system consist audio application video application besides change accord network condition ie upon presence one external unload load congest resource interface system give service function fig five figure give minimum fifteen connect unload load unload load unload congest one one load mid three tam ta id mid four id task b audio application c video application unload fifteen unload load unload congest load load fig four model concurrent stream system fig five interface composite component resource must provide correspond instance minimum service function must guarantee audio application encode data use algorithm video application send data fifteen frame per second illustrate figure buffer hide information necessary synchronize ie time network condition expose interface present method compute interface introduce technical result need computation follow um denote b pending mode change system move one mode another may pending buffer characterize two intertwine term capture former specify execution demand time latter specify backlog definition five demand bind function demand bind function buffer b mode denote b specify zero maximum number execution demand pending b system enter whose within time instant system enter definition six backlog backlog buffer b mode denote b give maximum backlog b system enter fig six give example demand bind function backlog figure arrow denote point event arrive must finish mode b b two five mode change time zero two five ten fig six demand bind function backlog observe latest instant pending must complete b b call deadline b since maximum backlog b system enter total execution demand pending follow corollary hold corollary backlog b give b b deadline b due pending old execution demand require old new buffer initial period system enter new mode often usual execution demand require later time interval call initial demand define absolute time begin instant system enter new mode definition seven initial demand bind function initial demand bind function buffer b mode denote b specify zero maximum number execution demand b interval zero relative instant system enter one easily verify overall demand bind function buffer b mode give maximum execution demand b interval length system b b zero b b active b zero otherwise imply lemma proof available ten convenience denote b active task associate b mode b zero b active b size b b b lemma minimum service function require b ensure b overflow b meet system b b b active zero zero otherwise compute initial demand bind function buffer b mode compute respect execution path lead suppose p path initial mode min min b inactive precede p b zero zero b b otherwise let p along task associate b change ie k one b zero b zero unchanged one k p b b immediate ancestor p time fig seven service function path lead illustrate fig seven li interval relative instant system enter mi system move mi ie li mi l l interval associate transition mi k let k li minimum maximum total amount time system spend move path call precede path b p denote p definition eight overall service function p give b b path p end specify minimum number execution allocate b interval length immediately system enter b lemma suppose service function allocate b mode mi one k zero p b min k xi xi li xi zero xi li k proof consider interval length immediately system enter see fig seven let xi number time system spend mi total number k xi let j execution give b mode interval begin system spend zero time j li time mode mi j thus x zero li xi j hence lemma lemma suppose instant system enter take p maximum number execution demand pending b system enter need interval x x x b b x p b fig eight demonstrate result state lemma detail proof find ten b one b x x fig eight demand bind function path lemma let buffer guard associate transition b b satisfy let b zero p n x p min p x b b x sup b b proof lemma available ten recall b x denote maximum execution demand arrive b time interval length x system mi give b x x task associate b active b x zero otherwise lemma state relationship initial demand bind function lemma b b p b otherwise p p p b b b min b b b x p b x p x sup proof lemma establish use similar lemma observe computation consider complete path start result tighten take minimum compute value start mi one k c compute service function mode path let mode reachable path p let precede path b p ie p b base lemma compute demand bind function p b initial demand bind function p b b p apply p b corollary imply backlog b ie p deadline b b p b p b derive minimum service function p b require b without consider task use lemma b b active task order buffer meet require b active buffer b p zero um otherwise worst case system may stay um time case event b miss deadline overall service function require minimum service function p require mode assume system enter p compute p fashion do unimodal case first assume ti higher priority j denote buffer associate ti arrival function ti p overall service function sum service function require buffer ie p suppose overall service function p one n one verify p one n ti equality occur p comprise single mode min compute p p p p p p p n result proceed compute interface c elementary component c c application model computation interface composite component make multiple outline next section basic consider c min r compute interface c idea allocate little resource possible mode c maintain active task well buffer overflow condition system mode resource need sufficient take care initial execution demand pending system enter mode consider precede section achieve construct reachable tree c explore c start initial mode root tree reachable mode tree along path p compute service function p b require buffer b overall require p add service function p set reachable explore transition l c backlog b satisfy buffer b system exploration reach mode visit newly compute service function less equal recently compute value mark leaf otherwise update service function maximum recently compute value newly compute one explore repeat process reachable explore denote b recently update value service function require buffer b respectively superscript p involve refer new value compute path p exploration procedure mode buffer b c initialize zero b zero zero start initial mode min since buffer initially empty input buffer b c b zero b zero zero include min p first element set explore p min b computation node v p first remove v follow technique outline section compute service function p b require input buffer b overall service function p respect p p mark v leaf node otherwise assign b resp maximum current value p b resp p proceed explore outgo transition follow b b p p outgo transition l compute input buffer b c backlog l l l add p b satisfy input buffer b c case also compute p b b maximum current value newly compute associate p additionally mark reachable mode b assign bin b p b c termination condition exploration process stop reachable explore ie zero since number pending buffer upper bound size buffer service function always upper bound newly compute value always equal previously compute one reach fix point finite number step word computation always decidable interface c recall c min r interface c finite automaton c min r reachable c f state associate service function equal fix point value compute transition l r transition l r l l exploration procedure compute value service function ensure buffer correctness compute interface follow directly soundness result establish section v interface composition consider component c consist n share resource use schedule policy assume higher priority c j j let resource interface one n resource interface c composition respect give c define follow let one one two two two two resource asynchronous composition denote state machine sin r set state sin f service function associate initial state state define one two one two one two set service change signal transition relation define follow l one l two one two min l l min one transition r two one r one one min transition two two one min transition two two r one one case synchronous composition transition allow l l one verify give minimum service guarantee similarly interval associate transition indeed capture time interval correspond transition enable example consider show fig four b four c interface structure except state associate service function buffer guard component abstract away interface composite component depict fig five obtain compose use composition technique observe expose communication able eliminate illegal composite state interface composition instance combination invalid composite component rule interface composition case study section present case study smart network embed system support multiple concurrent adaptive stream shall show case study compositional analysis framework use model analyze optimize adaptive camera audio video audio sender feedback via network receiver fig nine adaptive embed network system fig nine depict overall architecture consist two end data via network sender video phone capture live encode send network receiver receive data provide feedback regard delay packet loss sender use transport control protocol base feedback application adapt audio video send rat accordingly assume audio application manager adapt application switch three compression different pulse code modulation adaptive delta modulation linear predictive cod run time depend network condition similarly video application manager adapt video application send lower frame rate case network congest higher frame rate network unload sender additionally run critical system task highlight fig ten shall focus evaluate send system specifically shall estimate minimum resource must guarantee system do compute resource interface system use analysis unimodal c resource system task audio video fig ten hierarchical schedule sender show fig ten sender employ hierarchical schedule partition two schedule use higher priority component comprise audio video schedule use higher priority execution semantics model depict fig four section iva component contain three task schedule kernel task always execute network search task initiate connection lose network protocol task execute maintain connect network next fig four b run audio encode task ta audio manager task tam tam always higher priority ta mention ta switch three compression scheme capture three state since encode time task order magnitude longer task audio application select algorithm current backlog audio input buffer one third buffer size denote b figure soon buffer half fill application mode second switch back ie encode scheme assume similarly show fig four c consist video encode task video manager task higher priority task assume change two different send rat whereas remain unchanged camera capture video sample rate equal rate ie fifteen deadline set equal respective period ie fifteen base sample rate execution time p b frame five compute input arrival function term cycle audio task ta set constant period deadline twenty ratio execution time set two remain task assume periodic equal use unimodal due adaptive system unimodal model longer capable describe system behavior precisely therefore resort approximate evaluate two approach consideration initial backlog buffer mode change occur assume initial backlog equal size buffer buffer must overflow hierarchical schedule tree remain case nevertheless set task instead time ta choose worst value since either run instant time substitute single task whose equal maximum rest task take original unchanged value worth note approximate approach might exist however think sophisticate prove technique would require much effort countervail model convenience unimodal model analysis result interface component show fig five section iva state correspond valid combination audio video associate service function present service particular mode observe effect internal trigger mode change ie buffer guard original automata fig four b encapsulate compute service function interface hand time guard expose interface use synchronize higher level interface c entire system achieve compose eight state correspond eight service level require system depend traffic condition shall focus three highest service function unimodal invalid ten twenty thirty forty fifty sixty fig eleven unimodal service fig eleven show service function compute use unimodal approach contrast three highest service function c note exhibit unpredictable behavior cross service function c multiple point clearly ignore mode change effect model unimodal technique fail safely bind service requirement mode system unimodal twenty zero one e l c c three n e e r q e r e c v r e n fifteen ten five zero zero n e e r q e r e c v r e n e l c c three zero one ten nine eight seven six five four three two one zero zero fig twelve unimodal service take consideration initial backlog due mode change second approach improve upon term accuracy illustrate fig twelve compute service function service function interface however pessimistic average observe rate seventeen eighty higher three highest service level c use fall compute interface also provide valuable system behavior use optimize system instance service requirement system use scheme much higher twice use even though process load time fig twelve show process load concern effective optimize video application instead audio fix video frame rate switch increase three process load switch increase thirty process load thus better adapt finally interface easily adapt use dynamic frequency voltage scale one may instance derive frequency correspond rate service function adapt different base condition guard different state conclude remark propose automata model technique enable compositional analysis design result extend exist work two dimension performance analysis compositional analysis compositional analysis unimodal model applicability benefit propose technique demonstrate smart network stream system would interest investigate abstraction refine interface compute composition one potential direction would abstract state share similar service function transition trigger common set limit size interface without sacrifice accuracy reference one k f f advance hierarchical event stream model two control packet audio three g c g l elastic task model adaptive rate control four n l e rate analysis embed five mitra l time analysis stream one six lee compositional analysis framework use resource model seven shin lee incremental analysis hierarchical eight g change operational context schedule information eleven nine k l l g c adaptive power management event stream ten l lee compositional analysis eleven lee time analysis mix twelve real time calculus thirteen j real mode change survey new proposal fourteen l sha r j k mode change schedule one three fifteen shin lee hierarchical schedule framework virtual cluster sixteen shin lee compositional schedule framework seventeen shin lee compositional schedule framework periodic model embed compute seven three eighteen n l reliable mode change fix priority schedule date nineteen e l design priority schedule