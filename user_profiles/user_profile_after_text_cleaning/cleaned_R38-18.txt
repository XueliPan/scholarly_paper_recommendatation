strider approach change configuration management support wang chad j wang chun yuan research abstract describe new approach call strider change configuration management support strider approach without rely use state potential cause differ program use state trace actual state use statistical behavior model noise filter strider approach instead link vague relevant action model management support term individual name piece configuration state provide precise information computer use configuration demonstrate strider approach reduce problem several order magnitude make root analysis possible introduction change configuration management refer task configuration change maintain healthy configuration state change configuration support refer task perform repair bring back healthy configuration state configuration occur computer large install base large number available package prove daunt task large number possible lack fully specify golden state make problem appear intractable particular configuration cause data share persistent store present great challenge share store may serve many purpose may contain naturally share file system may allow different time discover integrate provide user experience may allow install new default exist may allow individual register system service reuse base may allow individual register host provide mechanism ideally approach could greatly task every os component every application would accurately fully specify set configuration data program use health configuration data must among os information could use compose dependency information golden configuration state practice study show declare maintain accurate every machine unique configuration problem exacerbate create forward installation script perform task effect capture declare motivate need allow management support exist legacy provide smooth migration path ideal future accurately paper describe new approach strider achieve core strider computer accommodate base knowledge well derive experiment discovery use state trace main strider follow also serve outline paper first three strider key handle complexity analysis attack mess mass filter apply allow us decompose seemingly intractable solve strider component second introduce strider process conceptual use various strider solve different include configuration cation change audit san ca strider approach wang al third describe strider strider present strider string together implement process evaluate performance discuss presentation focus discussion particular type important configuration data registry provide hierarchical persistent storage name type generally applicable configuration store discuss end paper strider begin describe three strider use configuration ie result misconfiguration example illustrate problem decomposition analysis configuration failure occur program modify piece configuration data time later program another program read modification experience persistent failure repair application restart machine failure exhibit form program crash program error box simply deliver service computer support engineer typically perform analysis configuration base knowledge past experience similar try search web use search string construct way attempt describe search highly imprecise often result large number irrelevant article guarantee repair action suggest article would actually configuration data relevant failure question strider propose analysis primary approach give configuration failure represent high dimensional state vector configuration data example machine typically around registry configuration failure due faulty entry represent vector contain entry main challenge problem entry reduce dimensionality level handle develop mechanical exclude irrelevant current failure develop statistical filter relevant less likely root potential small subset perform precise computer subset potential fix optionally use imprecise symptom later stage help rank importance match information retrieve give name registry entry answer follow two question one function entry provide information help understand function entry may associate entry application os component mainly responsible update therefore potentially use correct cause entry may also identify entry noise viewpoint configuration management entry unlikely label filter noise discuss detail third strider principle two know associate entry quickly point support article know cause entry information useful also apply correct registry application computer populate today experience experiment record registry access trace configuration action well future attack mess mass apply first principle allow us decompose problem three mechanical statistical develop second principle provide decomposition mechanical part every machine start approximately registry installation process majority give freedom flexibility grow registry way want configure machine differently different set freedom flexibility help create large install base also create mess every machine unique configuration machine interact unique way example default file behavior extensible browser may depend particular combination system configuration failure occur lack golden state vector particular unique configuration hand typically present major obstacle strider make observation absolutely golden state may necessary program fail due configuration problem particular machine san ca wang al strider approach particular time suffice state vector either another machine past machine program work space domain mass ie large install base offer high probability one find healthy machine analysis time domain periodic state snapshot feature system restore often provide good state vector past analysis give good state vector bad state vector mechanical strider operate follow first perform state operation two obtain consist must capture root difference program behavior second ask user fail program action perform trace record consist configuration data actually use input current fail execution finally intersect two potential current failure illustration three show figure one preliminary result experiment show since trace mostly orthogonal number intersection often several order magnitude smaller full vector describe bad state decompose mechanical part strider state state trace state intersection utilize various take advantage mass example good state vector available past machine one machine use multiple state intersection reduce size candidate set similarly application failure occur multiple machine state trace machine intersect together narrow candidate set even state available intersect multiple trace may help eliminate part execution trace due system irrelevant deterministic application failure target caveat warrant order elaborate succeed root configuration failure must single entry fix set differ every pair fortunately experience root cause indeed responsible many state state trace distinguish strider approach approach instead rely full specification absolutely golden state provide use state trace scope essentially partial specification portion configuration state actually access code path take fail program execution use state take advantage good state relevant failure state past machine program fail filter immediate mechanical part strider large class update read frequently mean appear trace also appear intersection high probability thus consistently inflate size final candidate set phase computer state rank noise filter filter rank candidate set figure l strider process san ca strider approach wang al usage count cache seed random number window position use relate information strider make observation consider state instead configuration state mostly interest configuration machine healthy presence update configuration failure occur operational data less likely root contrast configuration data change often machine history change recently since application last know work likely root lead concept state rank base inverse change frequency assign candidate intersection score inversely depend change frequency effort accord score rank optionally score threshold filter noise ignore sophisticate statistical analysis additionally take account abnormal data content improve effectiveness observation apply analysis clearly class registry always contain different data different machine example data may function computer name user name user security globally unique hardware address constitute natural biological among machine less likely root cause configuration much like human simply responsible natural diversity human think genetic disease even though frequently appear genetic sick healthy people summary approach start large complex problem registry contain many many change fortunately apply filter principle source complexity tend filter allow us focus simpler registry likely significant distinguish strider approach approach instead rely specification operational data versus configuration data use behavior monitor statistical model derive distinction similar statistical also use predict potential analyze large number state flag deviate normal majority problematic require special attention note registry entry strider filter noise one always construct entry fact root false negative false inherent statistical empirical result far indicate noise filter essential deal allow successful large class discuss noise filter detail later section strider process apply three strider allow decomposition problem five strider state state trace state intersection state rank computer paper use term strider process refer conceptual use strider build block specific way specific type problem figure one illustrate strider process phase state result fail application trace intersect produce candidate set rank filter state rank module report gather know emphasize repeatedly appear report false phase perform entry candidate set yield one follow three type information one support article describe know fix entry two user perform configuration action potentially correct data content entry three information application own entry next describe two strider process different demonstrate flexibility provide strider approach configuration certification process address important scenario scenario would like answer question whether operational machine still conform configuration eligible product support service strider process would involve state operational machine certify machine follow noise filter know unrelated certification state rank adjustable threshold could provide time spend determine conformance time waste provide support nonconforming machine falsely determine conformance could store information regard hardware speed determination nonconformance next describe change audit process scenario target process would like answer question form change san ca wang al strider approach machine since last week strider process would involve state trace write noise filter control size audit file state trace capture additional information process context make change information typically available state state rank would distinguish significant configuration change lesser would store map information translate group better presentation strider implement functionality first three strider strider limit form state rank component part computer also include state tool default take two system restore input produce file contain registry exist different data well exist one system restore standard feature machine automatically save registry select file configuration store approximately every number available depend maximum amount disk space allocate system restore set hard drive default tool also support registry hive example configuration failure occur one user account occur another user account machine root reside registry hive peruser hive two take less time reduce number false report state trace tool implement driver default intercept record every registry call make application os component support include exclude filter trace line contain contain respectively specific also support log certain call type example perform log call provide comprehensive change audit state intersection tool use generic tree data structure maintain set hierarchical name take multiple state file multiple state trace file input state entry input file insert tree mark id source file mark input file report intersection result extend functionality state trace tool beyond registry include configuration store file configuration file data structure use compute intersection ideally machine run strider tool state rank component compute score base change frequency dictionary local machine machine configure use different way change behavior configuration state may different build dictionary time would feasible would involve invoke state operation every pair consecutive could take several five per pair today implementation currently include static dictionary strider executable use static score dictionary state rank dictionary build analyze change main machine one author experience far indicate dictionary appear effective rank commonly update registry may miss many application change plan replace another one build multiple machine increase coverage make representative long run would like service run every machine continuously update local dictionary optimization registry change frequently repeatedly appear false report filter noise filter step insert right intersection invoke intersection code read entry input file insert entry tree structure second noise filter step invoke intersection gray score conservative default threshold change frequency ten static dictionary addition rank order rank also apply assign weight appear trace base intuition later part trace may simply result execution divergence cause bad value currently part map information build executable onetime experiment perform commonly use configuration action record correspond registry update use trace tool reverse use provide time map information obtain experiment actual experience plan build web service enter query information web service also use implement support article part currently compile list web page support article san ca strider approach wang al experimental result clearly strider approach would work follow worst case large percentage registry change every day large percentage use every application action result large candidate set human could reasonably handle present empirical result section show worst case first present registry change five machine study typical size state set present result experiment evaluate effectiveness additional state trace intersection rank use ten case list experiment trouble allow experiment reproduce machine group run strider produce result use configuration user interface control panel inject whenever possible use direct edit registry remain case choose machine machine use daily basis important would exhibit regular registry change use test machine lab little activity would produce better invalid result also study sensitivity result respect choice machine inject preliminary result also discuss one restore available display calendar object start due miss entry two image choose send mail recipient option longer offer resize option box due miss registry entry three outlook user always ask upon exit outlook whether want permanently delete delete folder due four print print printer always produce print due set five ie explorer ie browser longer offer automatically save option feature find six media player open function would fail registry entry change zero one corporate seven instant messenger would significantly slow client disable corporate eight ie proxy ie machine corporate proxy set would fail machine connect home network nine ie ie work option may automatically without user knowledge user would present cache page instead default start page launch ie ten ie would unexpectedly group explorer group due addition registry entry registry change behavior common perception registry contain amount undocumented configuration information access frequently various os knowledge study present section first quantitative study change behavior addition provide problem study serve useful guide general community well study registry two first look aggregate change behavior registry long period time range days number roughly determine number available restore per machine next look daily behavior registry observational period expect strider frequently apply good bad close together time therefore expect daily behavior registry good guide performance state part strider machine study consist four developer one knowledge machine daily use figure two show registry change statistics observe across five machine entirety observational present number registry value end period machine vary almost machine number days registry value observe never change operational remain one two l four five nineteen figure two registry change statistics one ten thirteen san ca wang al strider approach e one nine three z one three z g b e ten c nine b b e one one b two e e three nine e one figure machine one registry change time days figure machine two registry change time days figure machine three registry change time days figure machine four registry change time days days figure machine five registry change time figure three registry daily change without noise filter four five machine one two three five registry ever change apply noise filter ie fi fi exclude registry entry change ten time period machine yield number registry change potentially range machine seven registry change look machine history detail find majority change due single large installation one day registry change exclude single large installation calculate registry change percentage find change drop total registry size number suggest need machine state pair side large installation ie either would likely result number potentially significant comparable number find state one machine small change percentage entire period state period must cover large installation need rely intersection component reduce complexity discuss turn attention daily behavior registry figure three illustrate daily behavior across five machine may take multiple reason manually system prior system restore service periodically careful ensure include one per bucket analysis therefore size show figure three correspond gap average spike machine four size due single large installation mention previous paragraph clearly visible near begin observational period across five machine median number change registry value give day apply strider noise filter median number drop demonstrate additional power noise filter apply change take consecutive days follow simple explanation although percentage show figure two may seem six change frequently appear much often daily result noise filter effectively identify comprise large portion daily unlikely reflect change b es h tin g e n e figure four b present experimental result effectiveness strider san ca strider approach wang al ten case approximately seven days apart along horizontal axis four x print f registry size figure case one five ten one ten e z e e z registry size rank figure case ten figure four effectiveness registry size average number registry value two number value state result intersection total number registry value appear report consist intersection trace exclude report whose score default threshold rank order rank root list effect step process evident figure typically state reduce dimensionality two order roughly around intersection reduce another two order magnitude twenty even three case state could provide reduction period cover significant installation intersection still effectively bring number twenty noise filter provide additional three case ten intersection figure reduce number seventeen fifteen thirteen fourteen respectively final rank summarize effectiveness strider actual root identify number one candidate six ten case number two two case number three one case rank ie proxy case fourteen would require manual analysis effort filter false currently investigate ways group together relevant final aid manual analysis sensitivity analysis perform additional experiment study result variation machine examine time let time good bad vary three seven fourteen days vary machine consideration across five machine study system case one case two media player case six case seven three days three three three three days three three three three three three three three three three three machine one machine two machine three machine four machine five l seven fourteen seven seven fourteen seven fourteen one fourteen seven seven seven seven fourteen two two two two two two two two two two two two seven one fourteen seven fourteen seven seven fourteen one seven fourteen seven seven fourteen seven na na na j j j one two two two two three three three days three figure five sensitivity analysis number final rank san ca wang al strider approach examine four case system restore case one case two media player case six case seven rank result present figure five find strider robust factor study although vary factor impact three four case choice machine affect rank although rank remain number three better every case case machine five case six find vary offset time seven fourteen days cause rank drop one two although current version strider primarily target conduct preliminary experiment find useful well use ten case two different machine configuration failure introduce one machine make target program action fail action succeed one figure six show result first observe current state tool less effective scenario reduce number two contract two order magnitude case least two factor contribute one different machine simply different set program two registry appear different different machine name contain information currently investigate set map rule eliminate latter fortunately intersection operation remain effective reduce number case noise filter slightly half case static dictionary build analysis may suitable scenario expect separate dictionary base analysis registry entry among large number would improve filter step apply still mostly effective eight ten case root rank number ten better case ie proxy case root rank respectively future work section discuss additional issue factor potentially impact effectiveness strider cover performance present previous system restore x outlook print x registry size figure case one five f g l nine nine e c e z one zero ten one registry size figure case six ten rank figure six preliminary result effectiveness san ca strider approach wang al section discuss several current version strider successfully provide diagnosis outline future work direct address general challenge ensure mechanical capture root understand current noise filter exploit mass final step analysis capture root case fairly clear application execution trace media player case trace case trace use case except case trace ie explorer include difficult determine one offend application although usually achieve good rank trace capture direct ie registry access make target process may miss root contain indirect example case stopper design stop interfere normal web site entry access separate process rather browser process plan enhance process dependency track capture indirect without resort use trace addition indirect pose another challenge strider implicitly assume entry must access synchronously time interval state trace however possible trace application read entry trace start example ten case application action user trace contain root cause remain case require trace application launch well application action lead observe failure study effect strider always use longer trace since application launch avoid miss root perform experiment replace trace longer trace case six would drop rank two nineteen respectively still acceptable may require significantly effort depend whether additional false easy filter manually direction develop efficient trace log relieve responsibility start stop trace similarly may incorrect good state due either incorrect memory state application failure would state result thus intersection miss root solution encourage select good state direction develop statistical automatically multiple good bad relieve burden noise filter discuss previously statistical inverse change frequency rank false naturally introduce possibility false negative although difficult provide conclusive noise filter introduce significant false negative without large number failure case experience show work well practice allow root analyse oftens describe several could potentially defeat strider current noise filter strategy plan refine filter rule encounter false negative revisit design gain concrete evidence significant number root cause actually fall category usage counter example behavior trial package may change usage count exceed certain threshold window position example entry suppose remember last position application window may display information example server connect may root client application failure last file open may document process program fail upon launch cache web page may undesirable behavior browser data application data may update basis environment may occur user try restore data current strider noise filter would mistakenly filter data data couple single registry entry may contain operational data configuration data example encounter case word use default editor outlook document navigation option could option control registry contain binary blob binary blob apparently contain operational data well low score incorrectly filter noise originally ie gray report later determine contain root investigation negative san ca wang al strider approach discover change frequency dictionary build strider executable update assign entry high score reflect fact entry identify root actual configuration failure exploit mass four order magnitude dimensionality reduction typically achieve mechanical step strider significant start point us handle complexity however encounter case noise filter order rank fail offer final reduction another order magnitude leave investigate case final report still contain root analysis remain difficult plan address challenge exploit mass collect large number registry plan generalize statistical analyse across multiple particular contain data clearly deviate normal majority rank higher also enhance trace enable log analysis large number machine build report behavioral model beyond registry although focus strider generally applicable share persistent configuration store operate system platform currently extend strider implementation provide configuration due change file implementation utilize log information system restore detect file change use filter driver trace file access part application action reuse tree structure compute intersection use file change frequency state rank rely information contain temporary file know noise provide file belong os point support document know certain file similar also apply machine configuration generally appear file example user account information address many x server typically h although many configuration file use single program os facility quite configuration file share multiple program subject similar configuration window registry notable example contain map mime type command handle display edit particular type mime f may want install file program use display edit file type therefore handle common file could write conflict configuration file another example rather separate daemon type connection example finger listen port incoming listen port start instance appropriate daemon demand connection come individual require add entry remove entry upon two use port may conflict addition may environment user configuration practice may result conflict environment conflict result faulty application typically resort application repair problem strider help root potentially provide less disruptive repair avoid future problem relate work body work relate management specification quite large general approach provide tool allow system rule system behavior configuration monitor action correct detect lack compliance give rule enable system converge specify strider complement approach adopt approach discover unspecified rule proper system operation gradually build issue gossip provide extensible framework monitor distribute gossip process run participate client gather analyze system data report interest central server although gossip also maintain knowledge base know index information state san ca strider approach wang al refer condition system service quite different precise configuration data state strider recent position paper describe vision problem diagnosis system automatically capture computer state behavior necessary characterize problem match information problem store structure strider project focus develop actual root analysis configuration use state trace information characterize symptom use secondary information still provide user many define user expectation version strider provide automatic search support observe approach effective large number support write structure format store concept identification deviant behavior normal majority apply statistical large number sample emerge several recent al describe automatically extract correctness rule source code rather flag use statistical rank inspection effort al propose sample infrastructure gather information large number actual program experience user community base predicate guess elimination use isolate deterministic bug statistical model use isolate correlation al present intrusion detection system build model normal registry behavior train show anomaly detection model identify malicious relatively high accuracy low false positive rate pinpoint root analysis framework apply data cluster analysis large number trace tag perceive status determine subset likely summary propose strider approach change configuration support build evaluate system base approach approach allow decomposition complex five strider use build block various context primary example configuration demonstrate combine state trace intersection rank effectively narrow list many case continue build computer provide precise configuration state know function knowledge capture structure enable even effective root future work include provide trace type configuration state increase coverage collect number state program trace enable advance statistical analysis reduce strider dependence manual step evolve strider management framework would like express sincere thank shepherd l couch valuable feedback wang wen record map data provide registry change behavior analysis people contribute configuration case author wang project lead strider network group research since receive electrical computer engineer university work ai research interest include management fault tolerance distribute chad development lead past five work multiple os management previously chad work several build deploy management real world currently research chad reach currently member network group research member laboratory computer science receive mathematics graduate university master degree computer science join research work media management group reach san ca wang al strider approach c approach manage service resource description framework journal network management vol ten b x jordan bug isolation via remote program sample program language design implementation configuration management engineer may r problem tool bailey e maximum j swift b n use diagnose computer sun l couch global analysis dynamic library system restore asp inside press edition sept j bootstrap ping infrastructure wang c r comparison configuration dependable network j wang researcher network group research research interest network security system management compute large scale distribute system design receive computer science c chun yuan associate researcher research receive computer science university science technology china research interest include project lead researcher research member technical staff obtain university current research interest focus distribute system reference f e j detect malicious monitor anomalous registry access fifth international symposium recent advance intrusion detection mid burgess site configuration engine compute vol eight p church k w w gale comparison enhance delete estimation estimate computer speech language vol five couch elementary dear apply logic program convergent system management process e e fox e brewer pinpoint problem determination large dynamic service dependable network track c r human genome nature group b bug deviant behavior general approach infer code operate p es seven good j population species estimation population vol forty nineteen v gossip system service hart j j analysis validation drift san ca