centrifuge integrate lease management partition cloud service alec research abstract make cloud service responsive critical provide compel user experience many sit include address need deploy pool operate purely state unfortunately current partition request across server pool network load lead frustrate program model request state may arrive different lease technique provide better program model assign piece state single server however server pool host extremely large number grant lease per item require lease support prior lease paper present centrifuge lease manager solve problem integrate partition lease management centrifuge consist set link replicate state machine assign responsibility data include lease centrifuge implement deploy production part live mesh commercial cloud service continuous operation since cloud service within mesh build use centrifuge require line code need introduce subtle distribute consistency cloud service become ever complicate kind reduction complexity increasingly urgent need one introduction responsiveness critical deliver compel cloud service many sit include address simultaneous need scale partition user data across pool operate purely state process directly memory yield low latency sit achieve reliability use work do separate service replicate reload data server pool event failure unfortunately current build server pool lead frustrate program model many sit use load distribute request across pool load force programmer handle difficult corner case request state may arrive different lead multiple potentially inconsistent example video service data partition might individual video address conference rendezvous server lead select different rendezvous point thus unable connect even need deal drastically increase burden service video example developer could reduce chance two nod would fail rendezvous implement quorum read write case face support reconciliation problem know difficult seventeen paper describe centrifuge system build server pool eliminate distribute complexity allow service focus logic particular service centrifuge implement lease management partition use replicate state machine lease technique ensure one server time responsible give piece state three partition refer assign piece state server request send appropriate server support partition replicate state machine implement membership service dynamic load management partition additionally require mechanism deal state loss centrifuge address need explicit support recovery notify service indicate state lose need recover machine crash lose lease centrifuge recover state use different state recreation one recover variety storage even rely republish state system rely client republish approach take live mesh service describe detail section four combination functionality allow centrifuge replace load simultaneously provide simpler program model provide lease management partition valuable application developer lead challenge implement centrifuge server may hold millions may naively support lease one item allow flexible load management could require large number dedicate solely lease traffic contrast integrate lease partition allow centrifuge provide benefit lease without associate cost particular integrate lease partition allow centrifuge incorporate follow lease range lease convey partition assignment lease range specify contiguous portion flat assign single lease internally centrifuge partition algorithm use consistent hash determine range lease avoid problem lease fragmentation allow manager change length range lease load would fine simultaneously keep number lease small contrast traditional model request lease manager potentially degenerate require one lease item lease also lead change lease instead request individual lease simply ask lease assign finally lease partition perform manager need separate two task lease protocol implicitly convey result partition algorithm centrifuge implement deploy production part live mesh commercial cloud service continuous operation since march active use five live mesh component service span describe section four centrifuge successfully hide distribute complexity component service service build line code without need introduce subtle distribute consistency reconciliation cloud service become ever complicate reduce kind complexity increasingly urgent need summarize paper main demonstrate integrate lease partition provide benefit lease server pool without associate cost show cloud service write simplify use centrifuge provide performance result centrifuge production well evaluation remainder paper organize follow section two describe design implementation centrifuge section three explain centrifuge example application section four describe three cloud service simplify use centrifuge section five report behavior centrifuge production evaluate centrifuge section six describe relate work section seven conclude two design implementation design centrifuge motivate need server pool centrifuge design support execute arbitrary application logic particular data item hold centrifuge help route request server assign lease give piece data enable computation data nature data cover lease could rendezvous information currently connect session queue message wait user currently furthermore centrifuge store data behalf application run server ie centrifuge distribute cache instead application manage relationship centrifuge lease data centrifuge knowledge application data know lease common design pattern industry server pool spread millions object across additionally design even heavily load object require much less one machine worth process power result object fully handle one machine hold exclusive lease thereby eliminate usefulness lease centrifuge grant exclusive lease simplify internal design two figure one use centrifuge link talk centrifuge manager service without compromise usefulness application domain centrifuge architecture show figure one want send request link library want receive lease process request link owner library video example web server would link library forward request particular conference rendezvous information appropriate server link owner library communicate logically centralize manager service implement use replicate state machine high level job manager service partition flat key among link owner manager service map key space range use consistent hash six virtual nod per owner library manager convey owner library subset map ie partition assignment use lease protocol refer technique lease centrifuge manager control key space partition assign lease directly range associate partition result manager avoid traditionally associate lease new owner library contact manager service manager service recall need lease owner grant new owner library centrifuge also reassign lease adaptive load management describe detail section finally contact manager service learn entire map enable route request owner briefly explain usage centrifuge walk use live mesh service three figure two often divide multiple component service service request frequently require communicate multiple service centrifuge design replace internal network load use component service describe detail section four wish publish link library server give topic host use hash topic name key host link owner library receive lease base hash topic name server event publish make call library get address appropriate server host topic send publish message server server receive message check owner library hold lease particular topic forward event subscribe party centrifuge design service route request originate terminate within depict figure two often include many internal service example report divide application multiple internal service news profile group section four describe live mesh application similarly contain multiple internal service use centrifuge request originate outside web use centrifuge require additional rout step request first traverse traditional network load balancer arrive web link library forward link owner library manager service describe manager service first present high availability design present logic lease management partition adaptive load management two map lease caller library server owner library lease leader group manager service server owner library caller library caller library server owner library one load balancer internal load balancer one service one service one service two service two client client internal load balancer two leader become unresponsive responsive start broadcast message leader one reply switch back send request one leader learn manager nod external configuration file update new manager nod place service configuration use deployment three five run allow service continue operate event two machine group require three five operational order form majority one become leader take communication simplicity hereafter refer current leader manager service manager partition lease load management implement partition lease management manager maintain set one per pool manage contain table consistent hash range currently lease owner every lease range associate lease generation number new owner contact manager manager compute new desire assignment range recall lease range destine new owner grant new sixty second lease range new owner become available show section sixty second lease good fit deployment environment removal owner similar support incremental protocol convey change assignment lease manager also maintain change log lease table change log periodically truncate remove older five describe communication manager library manager owner library section respectively centrifuge implementation also include two feature yet present version run production state migration adaptive load management state migration refer appropriately notify nod lease transfer migrate state along lease though load management find network load aware support lease state migration support adaptive load management report incoming request rate load adaptive load management algorithm use load add subtract virtual nod owner ten mean load figure three manager service one set run group provide state store leader election protocol another set act either leader current leader execute logic partition lease management communication leader election high availability manager service high availability design depict figure three high level manager service consist two set one set provide group set act either leader detail group use elect current leader set provide store use leader current leader execute logic around grant lease owner partition use communicate owner simply every time leader receive request require update internal state commit state change group respond caller deal case leader become unresponsive periodically ask group become leader new become leader read state group resume process previous leader leave high availability design use implement leader election protocol highly available state store complicate program logic run leader thus split minimize write deterministic code within group similar division responsibility also use chubby lease manager three four logical level simply send request every leader ever get response leader efficiency send request server believe leader unless server four three leader leader group yes renew leader lease commit state update leader lease manager service maintain constant number virtual nod overall example one owner ten mean load virtual node subtract add owner even owner ten mean load particular load management algorithm pluggable allow implement centrifuge require future library maintain complete though potentially stale copy lease table every range know lease generation number owner node hold lease due use consistent hash require current centrifuge deployment virtual nod per range tiny amount link small size one reason library cache complete table rather try cache name frequently look use lease table two purpose first server link library ask send request give piece state library read potentially stale answer local copy lease table second lease generation number range change library signal loss notification unless flag set state state cleanly migrate another owner high level loss allow link library republish data back server pool section three four describe use loss detail protocol learn incremental change manager lease table contact manager every thirty second example depict figure four example manager record change note log sequence number three change log change split range nineteen b c lease generation number short modify well contact manager two indicate know change manager send change apply change copy lease table send sufficiently old manager truncate log lease table change longer remember old manager reply snapshot current lease table manager also send snapshot entire lease table whenever efficient send complete change list practice observe behavior figure four example protocol manager system bring many rapidly join total size lease table small limit amount additional data manager need send system experience rapid change owner membership owner library owner know range currently lease send message request renew lease every fifteen second manager manager lease sixty second three consecutive lease request lose lease spuriously expire lease request signal owner liven specify lease owner want manager send back response contain range renew new range decide grant owner grant distinguish owner restart accept extension lease previously own example restart owner receive renewal lease x refuse renewal manager learn lease free cause manager issue new grant range thus trigger change lease generation number change lease generation number ensure manager log lease change reflect owner crash thus guarantee appropriately trigger loss every message manager contain complete set range owner hold lease although consider incremental protocol send change find send complete set range make development lease protocol significantly easier example reconstruct long series message exchange manager log file piece together owner manager get bad state instead message complete set five manager change log nineteen twelve lease table current one twelve lease table current one nineteen nineteen twelve two figure five lease protocol owner manager guarantee safety property one owner hold lease give point time assume clock rate synchronization lease range could simply look previous message current message see implementation generate correct message furthermore use consistent hash message still quite small lease range per owner one per virtual node range represent use add per lease message deal clock even include complete set range every lease message still two subtle issue lease protocol first subtlety guarantee lease safety property key own one owner give point time centrifuge assume clock rate synchronization clock synchronization particular assume manager clock advance second time take owner clock advance sixty second assumption allow centrifuge use technique depict figure five previously describe twenty owner guarantee believe hold lease subset time manager make lease unavailable one owner start hold lease receive message manager two owner timer start manager timer sixty second owner clock assume take less time second manager clock deal message race second subtlety deal message race explain benefit reason message race use example involve lease recall lease recall improve ability manager quickly make lease available new join system new lease hand single message round trip instead wait sixty figure six without care message race lead violate lease safety property centrifuge prevent include sequence number lease message manager owner use sequence number filter message race figure seven manager owner use sequence number filter message race message race occur wait random resend second lease expire however lease recall introduce problem lease recall lease grant pass problem depict figure six owner receive lease recall request drop lease send message acknowledge lease recall manager manager since change mind send new lease grant manager need way know safe act lease recall lease grant solve problem implement protocol hide message race program logic manager protocol add two sequence number lease message depict figure seven sender message include sequence number recent sequence number hear remote node manager receive message owner contain manager recent sequence number manager know owner send incoming message six owner request lease manager lease one grant sixty second second hold lease second lease unavailable nod unless recall second manager grant lease eight lease owner manager lease since return lease give someone else lease nine owner manager owner ten manager owner eleven manager owner ten manager owner eleven manager owner twelve manager owner eleven manager drop drop wait resend wait resend message get owner twelve manager owner twelve manager owner process previous message manager manager drop race message owner owner likewise prevent kind message race depict figure six either party drop race message wait random message forward progress resume one node message receive side counterpart initiate resend depict figure manager receive new message owner manager state likely change manager may send new message owner race message manager owner permanently discard guarantee previous message owner still valid manager may longer want grant lease owner finally protocol also include session nonce show prevent owner send message crash connection new sequence number previously send message receive interpret context centrifuge design work within management paradigm incremental unit capacity cluster thousand machine current service use centrifuge part live mesh application follow paradigm deploy number cluster individual cluster presume good internal network connectivity communication cross wan connection use cluster determine centrifuge must able support machine within single cluster also level sufficient meet centrifuge goal replace internal network load management paradigm never share across cluster show section five centrifuge scale well beyond point thus investigate optimize implementation loss notification rationale one alternative design loss replicate state across multiple owner nod primary benefit alternative design could obtain higher availability node would need wait republish data lose nod fail however would first replication handle widespread correlate benefit term simplify loss notification mechanism still need second additional cost ram need void lose key key owner bool key key bool key key void grant revoke figure eight centrifuge divide owner part omit asynchronous call call relate dynamic load balance state migration give relevant hold multiple copy state different nod give infrequency node seem unlikely benefit replication outweigh cost hold multiple copy ram finally implementation would significantly complex term manager logic around lease partition well owner logic around perform would add requirement owner action become deterministic centrifuge notion action application perform owner nod three simplify version centrifuge show figure eight divide call export library call export owner library explain use service show figure nine run example wish make use service must link library server example wish send message subscribe particular topic example message subscribe one server call one get back server responsible subscription list semantics return hint return stale address address server longer responsible subscription list staleness catch request reject server use owner manager rapidly propagate update lease map library retry short reject request system quiesce ie join leave system call return correct address seven general pattern one check request arrive correct node two check exist state stale three perform arbitrary operation state four check lease continuously hold store lease number create state discard state turn stale return result bool subscribe key address one check correct node key return false two check exist state stale key discard state turn stale key reset prior state stale store lease number create state three perform arbitrary operation state case simply add subscription store lease number key add address key four check lease continuously hold key return result return false return true figure ten subscribe operation use owner old subscription list may stale ie may reflect execute list therefore old subscription list discard step three perform arbitrary operation state store state along lease number case subscribe operation add address list newly store lease number check future call subscribe step four return result caller generally send result node lease lose operation progress caller simply return false need clean state invalid future call subscribe either fail clear invalid state find store lease number less current lease number note throughout sequence step point server request lease give item instead server simply check lease assign mention section one departure standard lease manager novel centrifuge critical allow centrifuge provide benefit lease grant lease small number range example focus use lease within single service lease number also use figure nine explain centrifuge use service subscribe operation node crash link library may wish learn crash republish data lose example figure nine server respond loss notification subscribe message mention section manager enable assign new lease generation number range hold crash node even assign back crash node recover learn lease generation number change manager signal appropriate range owner owner part allow server perform operation guard lease manager may assign particular lease owner owner must prepare fail operation lease call force manager give lease give key owner code subscribe operation show figure ten code use lease guarantee request give subscription list serve single node time node operate stale subscription list ie subscription list time node own lease node hold lease continuously general pattern use owner show top figure ten request arrive server step one call check whether serve request call succeed step two validate previously store state compare current lease number lease number state last modify server hold lease continuously old lease number equal owner library current lease number check succeed server hold lease con eight six server subscribe library server responsible twelve owner library subscribe one server n subscribe library server responsible owner library communication service example server link owner library include lease number request another service service guard stale message process request include lease number greater equal previously see lease number technique also describe previous work lease example one pattern use chubby lease number call chubby three last part owner upcall may use initialize data structure new range key space grant garbage collect state associate range key space revoke thread schedule effect upcall may deliver short time lease change occur four centrifuge support live mesh service centrifuge use five component service part live mesh application component service build live mesh application provide number feature include file share synchronization across activity share file virtual host allow manipulate file web browser connectivity remote include nat traversal remainder section describe three live mesh service use centrifuge enable particular scenario explain service simplify leverage lease semantics centrifuge finally discuss common live mesh service influence design centrifuge example three live mesh service particular scenario focus one user two one home one work run live mesh client point user want connect directly work home retrieve important file home give new address user enable work find home home need publish new address work need learn change figure eleven depict component service enable scenario first home send new address publish new request server server call use home figure eleven three service within live mesh application enable work connect home acquire new address key rout request device connectivity server track address home device connectivity use owner library key store address device key update address device connectivity server send message new address server track home device connectivity status device connectivity server use home key call also use owner library key key store subscription list want receive connectivity status update home finally server send message contain device connectivity update subscribe client device subscribe client user work may message rout queue server subscribe client device maintain persistent connection appropriate queue server message immediately push persistent connection subscribe client device later come case depict work figure eleven send message request request arrive rout appropriate queue server respond message contain new address service source message send queue message describe change object client previously subscribe device connectivity status example queue also use owner library key store message queue key queue also link library receive nine seven device connectivity device connectivity publish subscribe publish subscribe web server web server queue queue publish new message home work device connectivity server crash receive loss notification queue server put notification queue client device state store server crash allow client device quickly learn need republish address poll reread client address resubscribe learn future address change within assume persistent intransitive connectivity machine therefore device connectivity queue talk centrifuge manager renew lease also able eventually send message initial message send fail perhaps library slightly stale information server simply retry short period time nature server pool crash always result crash server lose copy data service currently use centrifuge rely centrifuge loss two purpose trigger client recreate lose data within server pool poll object relevant change message may lose client already know small set object need poll previously subscribe use service queue service use deliver change message loss service rely client state recreation sufficient state useful client pick one example client last publish address irrelevant furthermore reliance recreate state allow service forgo expense store redundant copy state disk within although centrifuge also compatible recovery storage lastly although power lease simplify distribute storage forty thirteen three next several section elaborate lease also simplify service tightly integrate storage live mesh service device connectivity service main simplification use lease device connectivity service update logically occur single server mean never multiple document multiple contain address single device never multiple document need write logic reconcile document need add simply aid document reconciliation time address update although may feasible design good reconciliation heuristic device address yet another tax developer additionally device connectivity service also use store data besides address reconciliation become difficult data become complex use lease allow developer avoid write reconciliation address data queue service queue service main simplification use lease service provide strong guarantee message successfully either client receive client know lose message must appropriately poll allow server consider finish message give queue service server deal possibility client device neither receive message even learn lose message silent message loss could particularly frustrate example home could publish new address without work ever learn change lead connectivity failure queue service guarantee prevent problem provide guarantee queue service rely one copy queue give point time contrast multiple copy queue server might believe successfully deliver message client device ever connect another copy queue read message may feasible build protocol address issue alternative ways perhaps use counter version centrifuge lease mechanism avoid need additional protocol ser vice use lease service similar queue service service use lease provide follow strong guarantee message accept service subscriber either receive message know miss message detail lease enable guarantee service essentially describe section queue service ten live mesh service briefly discuss common live mesh service influence design make centrifuge live mesh service use centrifuge store relatively large number small object memory server perform object relatively lightweight result design centrifuge rely statistical many small object allow centrifuge operate variable length range rather provide directory service optimize move individual none current live mesh service need support data process load individual object near capacity entire server service would find statistical much less effective enable one might consider centrifuge load balance algorithm different dynamics different partition algorithm support replicate object across multiple another aspect centrifuge design motivate need live mesh service capability recover state rather storage within state store owner nod live mesh service cache data original copy know client client address device connectivity service need recover state lead design loss deliver nod rather build recovery functionality directly owner nod finally show section five machine live mesh production environment infrequent observation combine fact large ram still reasonably expensive lead decision recover state rather replicate state across multiple owner nod five evaluation mention introduction centrifuge deploy production part live mesh application since section examine behavior centrifuge production interval stretch early early march time approximately centrifuge approximately centrifuge preview result find centrifuge easily scale meet demand deployment section use examine centrifuge ability scale beyond current production environment figure twelve network load leader centrifuge manager service deploy production well message drop due race production environment centrifuge manager bottleneck system focus observation behavior component first examine behavior manager focus behavior manager surround security patch steady state behavior figure twelve b show leader server granularity hour observe network utilization low though slightly higher current leader give point time burst network utilization take new leader low network utilization observe provide evidence implementation easily meet current need case leader change relevant administrative log show security patch roll require restart cluster patch lead leader change server two server three patch lead rotate leader role quick succession server three resume eleven leader role end event second security patch lead multiple change leader examine dynamics detail section security patch examine fifteen month period see frequently lose lease due crash network disconnect unplanned event owner crash make portion key space assign owner unavailable owner lease expire use lease mention section expect unplanned owner quite rare observe total ten lease entire fifteen correspond individual owner mean time unplanned lease loss ie due action system administrator validate expectation unplanned owner quite rare finally number return less ten follow seven lease hour three lease show owner recovery replacement cluster management system sixteen reasonably rapid also examine one aspect lease protocol detail month interval describe section lease protocol incorporate simple mechanism prevent message race compromise lease safety invariant lease recall detect race drop message expect message race common repeat message drop might lead one lose lease motivate us examine number message drop due race detection show figure twelve c first observe message race occur burst new take leader role however fifteen server three continuously hold leader role twelve message drop observation validate expectation message race rare steady state security patch figure thirteen examine hour window thirty second granularity three rotate leader role one three restart approximately server two take leader lead slightly higher utilization significantly higher network utilization server network utilization peak almost significantly steady state around ten approximately server two similarly restart lead server one take leader finally approximately server three take leader role server figure thirteen even leader manager service deploy production capture network load owner restart two know last change leader role occur server two restart point case restart precede spike utilization likely due apply patch figure thirteen c show number live see leader number live dip approximately time change leader reflect patch apply one group apply another group modest interval figure thirteen b also show network utilization continue experience burst well new take leader role additionally examine manager log find network traffic due likely restart need get entire lease table leader figure thirteen show even period abnormally high churn observe load leader manager service small offer evidence centrifuge implementation meet current demand finally investigate one double check stability observe manager also reflect owner success rate arbitrarily choose approximately time period period manager service observe churn time twelve role instance total server instance manager group manager device connectivity five three eight one one five three table one centrifuge configuration particular owner experience zero fail call million consistent intuition stability observe manager result call owner always succeed subsection evaluate centrifuge ability scale beyond current production deployment particular use present production set evaluate manager load restart rapidly production patch preview result find manager easily scale number rapid rate restart consist forty run duo processor ram server operate system table one show configuration approximately ratio device connectivity choose base ratio deploy production make minor performance counter implementation device connectivity order run many instance server examine ability centrifuge support rapid patch rate across number conduct two separate experiment first experiment restart course second experiment restart interval compare production patch section restart approximately twice many nod half much time one hour experiment measure network usage leader manager service figure fourteen show result even restart leader average light utilization network usage go five base conclude centrifuge implementation support current deployment comfortable margin figure fourteen network load manager leader rapid restart large number six relate work centrifuge integrate lease management partition system make easier build certain service accordingly divide discussion relate work lease partition infrastructure build service lease technique use lease provide consistency date back two gray work v file system thirteen section survey three lease closely relate centrifuge frangipani lease manager forty approach chubby three use support volume lease grant lease many object time frangipani implement scalable lease management service run multiple lease lease handle different subset total set lease centrifuge scale use different technique expose novel lease receive none lease within range centrifuge design allow pool need large number lease support single lease manager however centrifuge frangipani one could imagine apply frangipani technique scale centrifuge create multiple centrifuge handle different subset lease like centrifuge chubby implement lease manager funnel single machine rely layer high availability chubby design use primarily leader election practice typically maintain around thousand lock support three contrast centrifuge directly provide partition lease range partition enable centrifuge replace internal network load thirteen restart support centrifuge functionality use chubby would require modify chubby incorporate centrifuge include partition functionality alternatively one could imagine extract partition functionality exist system five modify support centrifuge partition algorithm deploy additional service alongside chubby volume lease protocol grant lease group object file file system volume web page serve single server centrifuge differ volume lease least two major ways first centrifuge dynamically create new object group send new range none work volume lease investigate dynamically create centrifuge dynamically split merge range underlie majority logic around partition policy modify range lease mechanism convey modify range secondly work volume lease include lease manager volume lease design cache coherency protocol system might might incorporate high availability stand alone lease manager partition three closely relate piece prior research partition partition subsystem five network load nine partition thirty lard system already compare centrifuge partition subsystem part comparison chubby main contrast centrifuge network load network load include lease management attempt add lease management requisite high availability would constitute major addition possibly mirror work do build centrifuge centrifuge implement partition use client approach previously take many lard system compare prior work contribution centrifuge demonstrate combine partition lease management simplify development service run server pool though great deal work aware system explore integration likely often focus scale peer provide lease key space view incompatible goal contrast centrifuge incorporate lease manager provide better program model server pool centrifuge aim scale infrastructure service great interest within industry research community provide better infrastructure service two twelve fifteen eleven much interest direct storage five dynamo eight sinfonia one fourteen form representative sample centrifuge design support server pool server pool may want leverage storage system support reload data event crash also benefit partition lease within server pool distribute cache widely study often context remote file seven ten nineteen eighteen six commonly use today centrifuge differ centrifuge cache centrifuge infrastructure make easier build service run pool centrifuge component distribute cache serve class example service describe section four devote logic state management decide state expire state lock evaluate access control rule logic something service developer would want abdicate generic distribute cache contrast service leverage centrifuge provide service lease partition seven conclusion service enormous commercial importance centrifuge provide better program model server pool validate use centrifuge build multiple component service within live mesh commercial cloud service service continue increase complexity increasingly vital greatly appreciate centrifuge design mallet mike particularly wish thank work implement leader election state reliability prier work improve quality centrifuge fourteen thank crain help us share compute cluster finally thank shepherd anonymous insightful feedback draft paper reference one k merchant shah sinfonia new paradigm build scalable distribute seven proceed symposium operate two web service three mike burrow chubby lock service distribute six proceed symposium operate design implementation four make live engineer perspective seven proceed symposium distribute compute five fay chang dean c mike burrow e distribute storage system structure data six proceed symposium operate design implementation six frank morris ion storage one proceed eighteenth symposium operate seven wang e cache use remote client memory improve file system performance proceed conference operate design implementation eight jampani peter dynamo highly available store seven proceed symposium operate nine ten j e morgan h anna r henry levy global memory cluster fifteenth symposium operate eleven fox steven gribble eric brewer scalable network service proceed sixteenth symposium operate twelve engine thirteen g gray r lease efficient mechanism distribute file proceed cache consistency twelfth symposium operate fourteen steven gribble eric brewer culler scalable distribute data structure service construction zero proceed symposium operate design implementation fifteen steven gribble welsh rob eric brewer culler n r j hill r h z mao ross b architecture robust service computer network four sixteen autopilot automatic data center management operate review two sixty seventeen marc peter approach reconciliation divergent one proceed twentieth symposium distribute compute eighteen benjamin c ling fox case session state storage layer proceed workshop hot operate nineteen benjamin c ling fox four state beyond soft state first symposium network design implementation twenty practical use synchronize clock distribute distribute compute six four live meet live mesh live messenger c woo g f cache proceed international conference management data nick murphy marc boxwood foundation storage infrastructure four proceed symposium design implementation jeff napper virtual machine proceed international conference dependable network banga peter willy request distribution proceed base network eighth international conference architectural fifteen support program operate thirty mark scalable network one proceed rhea timothy handle churn four proceed annual technical conference peter pastry scalable decentralize object location rout one proceed international conference distribute marc optimistic replication compute survey one scale scale note scale architecture g static analysis meet distribute enable replication six proceed workshop hot system dependability ion morris chord scalable service one proceed b terry alan j mike j carl h manage update conflict bayou weakly conin replicate storage system fifteenth symposium operate forty timothy k lee frangipani scalable distribute file system proceed sixteenth symposium operate yin lin use lease support consistency proceed international conference distribute compute yin lin volume lease consistency knowledge data engineer special issue web eleven four sixteen