unit cache replacement cache one two university mellon university abstract make c publicly accessible increasingly important discipline biology astronomy however contention centralize major performance bottleneck limit cache reduce contention distribute cache improve performance cache propose cache query unit cache replacement cache object choose various class query exist cache storage organization cache statically de approach adapt cache storage change require prior knowledge transparent application experiment fourteen million query astronomy demonstrate seventy reduction network c reduce query response time factor three compare alternative cache replacement one introduction collect analyze vast amount observational data astronomy map spectral object fraction sky require several storage data make available remote process example one federation astronomy part telescope two however face impend crisis federation expect expand roughly dozen today hundred near future three furthermore member sloan digital sky survey four accumulate data astonish rate cache attractive solution increase availability performance distribute five study cache context use cache six cache replicate object attribute table view cache deploy near query serve locally reduce network cache service query cache ship query evaluate two experience cache indicate query evaluation performance cache also critical despite network bene poor io performance cache may result inferior overall performance cache lack indices vital io maintain index cache prohibitively expensive give one index construction time consume two cache data continuously change three indices consume space pollute cache replicate data paper extend previous work network c reduction cache six explore ways simultaneously improve query execution performance cache exist cache model storage organization employ cache either tie de six table five vertical horizontal fragment base table seven eight view nine work differ previous cache approach two ways first explore dynamic cache storage take account information improve query performance second evaluate alternative cache replacement term network c reduction bene propose technique choose unit cache replacement adaptive model employ query prototype combination attribute access class query serve logical unit cache replacement query adaptive de dynamically base access pattern query appear useful c available particular constantly new experiment conduct make cult identify static set frequently access object query change storage organization part cache replacement decision prototype optimize c class query change storage layer change accordingly make unnecessary reorganize cache content periodically improve query performance experiment show query result factor three reduction query response time compare cache table vertical partition table also exhibit low cache pollution high network save especially true low cache size forty less network c generate compare next best method emphasize paper introduce new cache algorithm present technique specify unit cache replacement improve performance without inherent merit cache two cache c describe framework use study approach explain choose unit cache replacement relevant cache three cache environment one federation astronomy application cache drastically reduce network c web locate close proximity serve interface user query member federation show figure one portal communicate member via wrapper interface wrapper interface allow member remain autonomous heterogeneous currently build cache prototype cache reside portal utilize wrapper interface transfer data process query collect schema information contain rich variety range aggregate identity spatial query submit large community user query either execute locally cache ship however execute query generate lot network c wan query result transfer back user goal cache object data transfer cache user lan query mediator bypass cache n l n w b q fig one cache employ cache six develop primary goal cache environment network c reduction query six economic framework network currency network c reduction goal decision ship object cache represent investment cost load object recover expect network save query access object fail yield positive network save economic model bypass ie ship execution also respect unit cache replacement replacement perform individual table query extension make storage management part cache replacement decision storage management important cache operate cache data continuously change cache space constrain es data bene cache consider data layout disk impact query execution performance query capture data useful cache also data organize disk four choose unit cache replacement granularity cache replacement impact overall network performance six network performance govern utilization cache space general cache object ne granularity increase maintenance overhead example data granularity choose level individual cache space need maintain among cache hand coarse granularity degrade cache utilization empty large portion cache object replacement ten query performance govern effective cluster data cache best cluster obtain group cache semantic cache however semantic cache require exhibit query locality true astronomy six furthermore split coalesce containment check cult consist complex query range query seven thus perspective query performance cache replacement must perform granularity table vertical horizontal fragment however object de design process concern eliminate redundancy update addition access pattern naively choose choice cache granularity force logically relate rarely access together store together cache hurt query network performance contrast unit cache replacement adaptive group manner change query access pattern overall cache performance improve three relate work section summarize work cache de ne static dynamic cache replacement also review several design improve query performance include vertical partition materialize view cache replacement cache provide greater availability increase performance quality service guarantee five several high performance cache allow de unit cache replacement seven nine cache table seven allow cache declarative cache table correspond table column materialize view similar unit cache replacement achieve nine de cache group eight use view however unit cache replacement also unit cache replacement static adapt change find adapt storage cache content change unit cache replacement time improve query performance five cache replacement semantic cache support adaptive unit cache replacement eleven cache perform group spatially relate de set predicate condition exhibit high semantic reuse unlike cache scheme susceptible poor cluster semantic grow shrink size adapt change judicious data placement accomplish preserve spatial locality data frequently access together improve query performance static scheme ten semantic cache attractive maintain semantic description data feasible consist mostly simple query seven also exhibit semantic reuse data contain result query later reuse allow check query containment cache data eleven however astronomy comprise nest query function complex join unsuitable semantic cache importantly c exhibit little semantic reuse frequent syntactic reuse six ie c data experience little reuse query request data group exploit syntactic reuse cache group design vertical partition es io placement storage layer improve query performance twelve seventeen early work introduce notion frequency attribute access together evaluate placement twelve thirteen eighteen data group together apply cluster algorithm value recent work suggest value actual io cost poor predictor query performance propose sophisticate cost model estimate io cost perform fourteen fifteen fifteen design tool improve query performance vertical horizontal partition query describe vertical fragmentation partition also disjoint multiple may replicate data column materialize view allow arbitrary vertical horizontal base table materialize view concrete table derive underlie base enable io access framework manage materialize view provide balance storage overhead performance nineteen view make compact store record base relation materialize demand however specify appropriate view create optimization technique use data warehouse provide one solution view selection twenty goal exploit share data set query view identify additional view transient permanent materialization use share intermediate result improve performance optimization successfully apply view maintenance optimization execution however evaluate share six increase complexity query optimization query prototype cache increase optimization cost query evaluate single prototype moreover optimization apply know fairly static high overlap across query neither query four query prototype cache section provide formal description query method specify query take input set query q output set p serve unit cache replacement query match exactly one prototype whereas prototype derive set relate query de let set table table consist set attribute let set attribute j th attribute relation let q set query th query fifteen introduce concept query access set subset attribute single relation r reference query q query rede ne query access set set attribute every r reference query q let de set attribute reference query query prototype cache consider query equivalent access set attribute set query query identical make equivalence class prototype p represent unique equivalence class thus cache prototype set attribute reference query load cache one unit demonstrate concept query use three query derive astronomy four select galaxy two z select ra select top one ra example show two unique query query access set identical ra seven discussion materialize prototype cache group attribute belong prototype allocate unique set relation storage layer spatial locality among attribute belong prototype preserve storage share overlap attribute query service cache match prototype rewrite address cache furthermore load evict prototype simply require correspond add drop two worth note query rarely disjoint attribute appear multiple introduce attribute replication overlap share storage prototype also contain attribute multiple table one option store attribute multiple table compute cross product store result single table however utilize cache storage unwisely storage require scale exponentially number join instead store attribute belong different separate table compute join query execution theoretically number query large equal min query n number attribute reference practice query provide compact summary even millions query find much science conduct prepare query via custom script iterate access combination attribute observation exploit work active proxy cache acknowledge cache query arbitrary syntax cult query submit form exhibit handful distinct type semantic information query capture compact set query cation parameter value provide approach apply general query distinguish arbitrary user query performance query improve query performance cache reduce amount data read disk since contain attribute reference query access much faster access entire base table query reduce scan cost ensure data request query read disk also query execute single prototype number join never number table query access besides improve performance query execute cache query perform well term network contrary use entire table cache replacement unit query avoid unnecessary transfer attribute reference although partition also property six suffer effect evict single eight column group access together render cache ineffective entire group cache pollution load redundant unused object adversely impact performance evict useful object pollution limit applicability query general since disjoint cache allocate storage duplicate number high single prototype serve enough query provide positive network save overlap high attribute replication quickly pollute cache five experiment experiment use query trace sloan digital sky survey major site four trace consist fourteen million query generate nearly network c data release four io experiment reasonable time take ten percent sample roughly size evaluate query three cache replacement table logical group determine vertical partition column cache store relate table rather store column separate table query performance latter approach disastrous use relational adapt exist vertical partition cache traditionally partition take input representative set query output alternative io schema thus partition design different set cache improve query performance rather network usage nonetheless expect technique improve spatial locality among access together group relevant cache choose fifteen vertical partition algorithm experiment ensure unit cache replacement adaptive periodically update column group rerun algorithm new query also restrict input algorithm query result size greater one economical cache query small result size experiment use run server main machine main memory two disk server use one disk log store second disk query upon analyze trace discover query provide compact representation entire fourteen million trace consist owe schema reuse limit combination repeatedly access moreover handful capture eleven unique describe entire six unique generate network c query occur frequently correspond nine generate network c latter dictate cache replacement whereas former query performance measure query performance deploy cache sample use entire fourteen million query input cache cache size set one sample use small relative cache size appropriate cache likely fraction several storage available figure two show performance query execute cache cache query result best performance average query response time three time faster query performance unit cache replacement average response time total query result size table column vertical partition query prototype response time average page read page read zero zero zero zero zero zero zero r q e r e g p l c g l e g p b k eight f e e n p e r r q zero table column vertical partition query prototype table column vertical partition query prototype unit cache replacement unit cache replacement fig two query performance unit cache replacement lack prior knowledge limit effectiveness vertical partition partition algorithm take query input fraction query execute cache result mismatch execute cache provide input partition algorithm also measure logical page read compare sequential access performance unlike physical read buffer fragmentation disk affect logical read trend consistent query response time query employ layout data incur page read network save figure three compare network performance unsampled different cache various cache size query outperform column cache cache size lower two table cache lag ten far behind enormous size table mean cache size less five handful object cache table cache use cache size increase column cache exhibit slight advantage query cache three query prototype cache generate network c versus column cache vertical partition cache also perform well good job group provide positive network save fig three network c unit cache replacement network cost without cache conspicuous feature cache size lower two query prototype outperform column cache large margin generate forty less c explain effect column cache make poor replacement low cache size cache resident time shorter object frequent result mix cache lower probability satisfy incoming query cache pollution query pollution arise attribute replication table vertical partition cache provide network save pollute cache group yield positive network save figure four show cache pollution unsampled different cache attribute replication query remain five lower part sharp rise six cache size impact network save cache space fully utilize immediately sharp drop previously large cache load displace several smaller result large pollution remain fairly stable afterwards number cache increase cache vertical partition exhibit pollution query partition design cache always separate attribute provide network save eleven fig four cache pollution percent cache space utilize unit cache replacement six future work present approach specify unit cache replacement c adaptive experiment illustrate query achieve superior query network performance little cache pollution however susceptible cache pollution high attribute overlap address consider merge share attribute order strike balance query performance cache pollution vertical partition cache promise unlike query susceptible high degree attribute replication however directly adapt exist partition cache unsuitable optimize query execution cost consider network cost extend partition optimize multiple cost future finally plan extend query support update twelve reference one malik ar web service approach federate two gray j science telescope prototype new computational science presentation conference three gray j p malik j c j public access sloan digital sky server data four sloan digital sky survey five q c h woo h cache six malik burn r bypass cache make c good network seven c c h b cache table pave way adaptive cache eight p j h j cache server nine team cache approach ten dar franklin tan semantic data cache eleven j cache scheme ar twelve hammer b heuristic approach attribute partition replacement thirteen g j vertical partition design nine four fourteen approach vertical partition relational nineteen eight fifteen schema design large ti c use data partition sixteen effective approach vertical partition physical design relational sixteen two seventeen yang b integrate vertical horizontal partition physical design eighteen ra vertical partition design graphical algorithm nineteen n incremental access method concept cost analysis sixteen three twenty optimization thirteen one mistry h p k materialize view selection main use optimization p extensible query optimization ye propagation size join result q proxy cache web sit e optimal cache