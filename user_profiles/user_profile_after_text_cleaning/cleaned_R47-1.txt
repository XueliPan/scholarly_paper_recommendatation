user interface bind department computer science department computer science information engineer national engineer university lee department computer science information engineer national university abstract separate exist build tool complex duplicate many function specialize build data put unnecessary burden since application usually handle data paper propose solution separate bind construction concentrate bind builder propose system support construction build tool furthermore propose mechanism neutral result multiple support propose solution moderate effort current implementation support two type subject design tool user general term design user interface author one introduction nowadays become de standard electronic data exchange order exchange information without misunderstand many develop define structure content semantics document ordinary need graphical user interface create document one also affiliate institute information science two also adjunct faculty institute information science permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee ten unite kingdom copyright compliant vocabulary rapidly increase number emerge apparently need construct effectively construct scratch simply expensive application deal data structure deal issue complex data quite therefore adequate tool support need exist build tool one twenty assist provide data layout suitable data structure manage process data structure bundle together make exist complex big separate traditional thirty specialize build data support construction data since application usually need data separation put unnecessary burden require learn additional build tool also incur integration effort due different source paper propose solution separate ie bind data construction completely exist traditional quite mature appear need reinvent wheel concept mind propose mechanism concentrate support bind relate leave construction traditional propose mechanism provide support design time visual tool provide create bind run time simple function transform data data vice provide base bind collect design time case propose mechanism rely traditional builder create bind concentrate propose mechanism would simpler easier use exist result implementation would relatively lightweight compare exist without introduce effort require integrate finally without duplicate function propose mechanism may incorporate easily furthermore concentrate bind propose mechanism neutral result propose solution capable support multiple moderate effort illustrate current implementation support two type quite different next section provide survey relate work section three overview architecture propose example present section four illustrate functionality propose design propose report section five follow section six finally last section conclusion future work include two relate work graphical structure document focus many research work since late eighty nine ten fourteen undoubtedly popular type structure document nowadays five six eighteen nineteen aim simplify author document eighteen nineteen build editor base introduce many multiple view edit author complex document work roughly categorize author help different author build tool need support application program various application program may desire provide layout tool specifically design one two eleven twelve seventeen twenty example may provide specific display choice node schema work provide support manage deliver result data one twelve eleven generate base twelve base swing two twenty generate use keep validity output data essential therefore exist typically require schemata validation research work focus generation valid data eight fifteen sixteen work relevant author viewpoint builder mainly encompass two layout bind former sophisticate quite mature thus focus latter intend extract builder independent component tool besides able utilize exist work different render bind approach freshly new adopt example common provide create bind relational record thirty bean bind technology aim create bind various type however author aware research bind specifically note approach adopt work although exist different user interface cover control data layer cost hand cover data layer result behavior stable create bind three overview name work stand user interface bind contain visual tool set code show figure one visual tool mapper allow make design typically use builder mapper take application project set schemata input create bind information output drive application major code library take bind information create mapper input provide simple function populate data load update data user input data merge hand application free interact data use appropriate desire support current implementation support two type provide develop swing provide support deliver web page adopt mapper tool kernel figure one architecture note mapper take application project input actually set file ie class file file mapper process file without concern file produce produce file word mapper depend specific depend standard jar file format part figure one show application drive service depict precisely application locate single machine adopt concept different realization support web architecture illustrate figure two web application execute one server refer server deliver web page web browser usual host another server refer server course possible server server actually refer host machine web browser issue request execute browser library provide set access provide issue request server library server receive decode request bridge service originally data store server server obtain data server load post back modification merge server communicate server server act server server client quite different server support web architecture keep separation server server may adopt different server side without interfere word web application may adopt long execute client browser matter server technology adopt server back data server browser figure two architecture four example section illustrate use mapper example well know purchase order schema adopt example mapper first developer use mapper specify desire bind make design typically use builder example use builder create swing create form mapper depend specific design usually complete one may modify design outside mapper build project request mapper reload project file current design reflect mapper immediately show figure three leave panel ie panel mapper show containment hierarchy right panel ie schema panel show hierarchy attribute group sequence choice iteration give schema multiple schemata load one switch one schema another design schemata may modify outside mapper reload mapper upon request create bind one simply select component panel schema node schema panel execute create bind command context menu bind show figure four show developer first select desire bind class among bind class available select component schema node pair content bind vary depend bind class developer select developer complete creation bind fill figure four bind class select map property object source property component target thus one select desire source target note whether mapper operate project make information present type thus use mapper way project type figure three main window mapper figure four bind process bind creation modification possible create inappropriate even wrong bind may application work abnormally instance multiple bind schema node data may overwrite unexpectedly mapper thus perform check issue redundant bind multiple bind nod unbind require nod unbind structural nod report warn mention mapper may reload design schema upon request design schema modify outside mapper may make exist bind invalid bind apply old component schema node longer exist new design schema become invalid remove one exception rule old component schema node may rename new design schema discover possible rename mapper reload ask old nod new update bind base rely provide service mainly provide follow one two three load populate data iteration filter select subset child group iteration load validation check input data associate schema type four merge update data user input data function apply either iteration filter load validation merge give component element word application need issue function compound without traverse constituent individually code purchase order example invoke new public class extend private bind public void element po bind new po two five filter validate private void first instance load file create mapper store information bind schemata project invoke initialize data structure main class provide bind service create instance pair dom element component along instance must pass constructor case dom element po pass instance root element purchase order schema component pass current object one simply invoke load populate data case may appropriate load subset iterative data use select desire iterative group iteration node accept four refer component bind iteration node two integer two five indicate start index number iterative iteration node load last parameter filter filter filter return instance support two type input data validation invoke validate perform validation immediately many instruct monitor focus event perform validation whenever focus event catch input find decorate use style specify figure five show screen capture swing version purchase order example finally save button click method execute perform merge update data figure five purchase order example semantics load merge need explanation invoke display use populate load create association screen execute merge check association current component associate still exist current component use update component associate longer exist remove removal component correspond component associate exist new create component use populate newly create finally execution merge update association include newly create removal interpret traditional insert delete update apply individual data merge operation incorporate apply descendant complex element make update complex extremely simple free insert delete update use swing execution merge reflect one single operation note load merge operate bind pair data unbind data affect word intrusive unlike exist build tool allow application mix data data freely support web deliver web page show figure two compose execute web browser server host code version purchase order example zero two filter first instance initialize different due initialize instance server name project id page load require set respectively run server must configure store project support name project server locate information project capture mapper instance initialize one create instance conceptually similar except target different developer must supply pass parameter method identify current bind instance use update data post back server specify server via server obtain data post back result data use configure iteration filter load invoke specify page server load accomplish task send request server upon request data populate specify page data send fill page web browser issue request figure six show screen capture page purchase order example server specify contact figure six purchase order example sample cod page input data validation submission result data head script type validate function form form script head body id form id return form body implicit object define represent bind instance current page involve provide follow one two three instance return configure perform validation provide two type validate instruct monitor specific event perform validation event fire hand invocation validate perform validation immediately merge instruct server perform merge without send result data specify result edit data instance allow submit instruct server perform merge send result data specify sample code event listener bind event form click submit button invoke since server send result data along via standard post request use technology net receive process request sample cod receive result data head meta content title page title head body string data string body show purchase order example need minimal knowledge use write glue cod data tedious input validation individual developer thus concentrate logic appearance application build five system design show section three currently include consist mapper support general principle design code share also reuse mapper show figure seven support multiple partition part core part swing support show figure eight partition provide extensibility support another platform flash simply add flash support stack keep core intact except library program mapper use addition dom use four extensively represent schemata data validate data schema type use thirteen support mapper figure seven code structure mapper swing support support core figure eight code structure one four data structure fundamental swing ie instance component instance represent web page case developer may inform type element specify attribute instance indicate element table use display iteration operator descendant two instance abstraction component three represent containment hierarchy initially define separate class case show separate instance however instance component use member another instance expand accord representation instance create mapper swing create use reflection create parse file representation schema nod include attribute group tree structure instance also instance recursive element may expand number time construct accord schema use four display main window mapper represent instance bind instance latter represent compound component use display set attribute load merge issue compound instance contain ancestor nod nod bind compound component represent part compound element parse tree structure correspond instance produce representation exist element parse accord instance produce full instance trim accord instance show figure nine compound element correspond compound element provide data nod well schema nod five six element figure nine data structure bind bind refer data first one distinguish two type bind bind bind instance bind instance may incur multiple bind instance presence iteration operator bind support data map conversion may need data map conversion provide bind class support bind class support bind correspondence subclass instance correspond subclass bind instance capture mapper show figure four different may different data require different user data input mapper thus provide class enter various type bind correspondence two type data bind class structural bind class data bind class support data map conversion data content structural bind class represent structural follow data bind class abstract class map dom node object abstract class map data object four object subclass map data object object via prescribe subclass map object enumeration type object type subclass map object type list object type map one iteration node respectively see section six map iteration node object container div map choice node object type define bind template pair schema node component bind template cover bind schema node component pair schema node component copy bind cover schema node component involve must type involve structural bind class list follow since leave bind class appear general instance apply div swing general layout div leave developer full control applicable component implement simple interface public interface string string void string item one two three four five six one two three four associate choice operator simply support selection choice member impose constraint implement component may display enable reuse bind instance purchase order example type display type panel one create associate panel create associate create bind associate panel copy bind associate panel reuse bind save developer work refer panel course set bind class extensible always create bind class extend exist need frequent though bind class know mapper reflection addition normal bind describe far support bind null value see figure four attribute may optional present may empty content null value may display empty string special form provide null value value case normal bind class use together developer desire validation would generate valid data output valid data conform define schema structure data provide assure validity generate data mapper validity structure data guarantee provide exist bind hand provide event check validity input data describe section four validate need check input data associate type information validate input data straightforward since type information keep server side run client side type information directly available naive solution use technology access type information client side however approach introduce heavy performance since validation request issue frequently solution serialize type information format make available design time mapper extract type information store part project context use format show false false false require true name decimal prefix variety atomic method web page type information browser part web page actually type information bind schema nod serialize minimize overhead validation execute client side efficiently without introduce network traffic merge run browser data must merge data server cause issue present first server associate data submit define design time user may update submit data server associate data submit time data submit last time second order find easily appropriate protocol submit data conventional form submission protocol appear work since submission pair contain enough information issue add attribute employ submit data server process file design time mapper generate attribute id element automatically element attribute id uniquely identify element uniquely identify perform follow web browser one two create snapshot current snapshot record hierarchy input data enter rely technology transfer snapshot along bind instance server post protocol request receive server reconstruct accord receive snapshot invoke update data input data finally method submit server send result data along specify via method security concern since run memory space security issue however web browser server server communicate security concern thus critical point section three architecture three communication channel web browser server server server server since web browser server standard security build consider security sufficient channel web browser server server need establish security server server channel server communicate server server act client server server thus principle implement standard security server server include authentication support implement base three six limitation basically complete development mapper host work system documentation release gradually first real application author ongoing research project management human task standardization effort area include several sophisticate schemata represent human task logical people group use develop schemata task definition tool use process take root element result schema tree nod include operator nod nod develop eight present update attribute schema tree represent exclude schema nod type current support bind except one bind schema nod recursive structure schema nod involve recursive structure figure ten show two frame task frame top main frame main frame divide two part side pane list human task set table select human task definition task window divide four part topmost part show basic information task several people assignment rule group pane follow pane presentation information task finally list show bottommost table note presentation panel information show first table actually join two different name one iteration subject another common language hand content deadline table unioned two different represent start build sophisticate completion respectively identical structure interestingly join unioned table happen correspond join union relational respectively construction demonstrate use developer effort minimize exploit bind collect mapper aggregate load merge provide expect use project near future separate bind construction data novel elegant however without limitation short appropriate seven document edit appear require couple document seven conclusion future work paper present mechanism create bind design modular lightweight result implementation neither dependent builder tightly couple technology result system thus easily exist help work would able construct effectively efficiently two base current work author see follow possible future one provide appropriate recursive structure schemata support integrate work exist provide eclipse support bind create web four three figure ten two frame eight reference one adobe adobe designer two three apache four apache five epic editor six c document computer network r b structural adviser document author three proceed symposium document engineer new york e g smite g editor user interface manipulate structure document electron origin four three seven eight nine ten r quint v j eleven edit structure document electron origin one one designer twelve thirteen fourteen ko b citrus language simplify creation structure code data five proceed annual symposium user interface technology new york fifteen shih n l wang j avoid syntactic extreme markup sixteen wang j shih n handle syntactic editor three proceed symposium document engineer new york seventeen shih l generate user five proceed symposium document engineer lecture note computer science vol new york eighteen j r edit document eight proceed eighth symposium document engineer new york nineteen j r demonstration edit framework eight proceed eighth symposium document engineer new york twenty visual studio b r past present future user interface tool interaction seven one oasis web service human task eleven oasis quint v interactive system structure document manipulation text process document manipulation quint v c structure author environment web computer network six quint v author complex document four proceed symposium document engineer new york n model base user care proceed annual symposium user interface technology new york sun bean bind thirty sun sun sun swing dom schema sixty