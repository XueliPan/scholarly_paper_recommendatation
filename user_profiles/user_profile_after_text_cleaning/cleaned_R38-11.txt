trace technique identify cause chad wang university research abstract run time privilege significantly increase vulnerability compromise application become system compromise address problem present novel trace technique identify cause ie application privilege evaluation number show trace technique significantly help fix also help system mitigate impact local system policy change one introduction principle run privilege necessary accomplish task hand much previous work seek build better conform principle six eighteen unfortunately adherence principle quite low run time group privilege similar execute command root system increase severity security face compromise user application become system compromise threat acute widespread attack user level network common include seven web browser exploit nine ten instant message client exploit eight many run privilege fact use require privilege article list furthermore problem span many user type play bob builder anyone file tax corporate connect corporate network use mote access service use setup build environment addition cause individual require privilege exert social pressure run privilege social pressure exist two reason first incompatible often fail mislead error message without privilege spend significantly time second number incompatible sufficiently great start one separate account privilege set script semiautomatically inconvenience paper describe trace technique identify cause make easier fix mitigate technique ie require source code identify cause enable two important fix easily face number challenge identify understand large project must often modify code write insight fail security check additionally commonly encapsulate system call sometimes available binary form make opaque simply set often require many narrow source code line responsible single incompatibility contrast trace technique allow single test pass produce list exercise code provide additional information beyond source line object name access control list call stack symbol file present evaluation suggest information significantly reduce total time require fix system mitigate system policy change make change run reduce privilege technique six trace technique enable faster identification relevant cause miss name privilege evaluation suggest often allow system modify system policy previously incompatible run without privilege use trace dynamic technique imply standard set trace technique identify exercise code achieve good code coverage may require additional use sophisticate test generation technology three sixteen nineteen trace miss unexercised code perfect completeness section five discuss reason prefer trace static even though static provide perfect completeness particular problem identify evaluation eight demonstrate accuracy usefulness trace technique technique require source code able include evaluation demonstrate accuracy show log security check unrelated good soundness bypass remain log check allow application run without privilege empirical test completeness demonstrate usefulness first show number security check responsible small base trace knowledgeable conclude information help fix remainder paper organize follow section two provide relevant background information security model section three describe implementation section four present evaluation section five discuss relate work section six conclude discuss plan future work two background security model describe security model comparison security model token represent security context user inherit process create user token contain multiple security one express user identity rest group user belong group backup group similarly attach user id set group process order implement mechanism add another two user point real user id effective user id save user id eleven support notion bite typically follow different convention implement privilege functionality example historically bite unprivileged user could invoke process could read write mail spool protect os file developer would typically write service equivalent daemon user would interact use local procedure call one would implement interface simple executable send command line service via service model allow service start demand dormant service occupy memory case token also contain set privilege enable disable shutdown privilege two privilege grant respectively change system clock shutdown system conceptually privilege use grant apply particular object access individual object regulate use access control list contrast typically use group implement name privilege example membership floppy group grant access floppy drive create equivalent privilege one might create group create executable set group give permission support slightly different file typically associate file owner group store access right owner group contain many access pair file system access pair use grant one user ability read write object another user ability read object another group ability read object attach file object accessible handle registry semaphore plan nine access control make uniform across export file system security check function interface security check complex identify small set security check function instrument take several step assure completeness read source code consult senior architect examine kernel call stack observe application base step success identify evaluation section good confidence set function identify note complexity security unique previous work discuss security eleven fourteen five function identify role security subsystem present figure one function circle denote function input output purpose discussion change function name make intelligible use check privilege hold enable token use enable disable privilege use check whether user access particular object determine also perform access check request read write object flow function check handle table see whether ability perform operation previously grant handle object create use internally security particular directly privilege incompatible often use fail early application check user hold grant membership group fail intercept direct application check necessary us determine later interest set check cause course developer attempt fix incompatible application would find remove check obvious modification three identify implement trace technique identify add two service pack one kernel security check monitor noise filter security check event logger security check tiny fraction unmodified system performance overhead add security check negligible effect overall system performance apply technique developer system administrator start tracer run incompatible application privilege stop tracer tracer run security check monitor noise filter component apply conservative noise filter algorithm keep security check might responsible actual log check do security check event logger component trace apply separate log validation step describe detail section figure two show security check monitor noise filter ing develop simple noise filter algorithm specific identify motivate follow observation large number security check fail run without noticeable impact speculate fail check come attempt acquire object right require proper function yet manage investigate noise filter algorithm identify call succeed privilege fail without false negative ie eliminate true log entirely eliminate false attempt acquire object right need fall back acquire object right without apparent adverse effect noise filter algorithm assume user run application privilege security subsystem intercept security check initially allow check pass unmodified check successful token contain membership group noise filter temporarily remove membership token perform second check second check fail security check event logger call although implementation differentiate membership nonmembership group would straightforward configure component handle group backup group convince approach merit perform quick experiment collect three trace regular office one primary machine result trace summarize table one trace set security check would log apply noise filter algorithm column label difference much smaller total number fail check remain fail check still constitute conservative check correspond though check probably many examine hand practice expect tracer run much shorter identify describe section four require trace less thread process compare identical token privilege user id group one id group group n id group privilege one disable security ace one allow read ace two allow write desire access ace n allow execute privilege n shutdown enable succeed target privilege target privilege compute grant access success grant access object pointer handle table entry object file registry key succeed privilege hold enable succeed privilege hold desire access succeed figure one security check function security check trace one trace two trace three check security user token privilege without privilege difference table one trace security check twenty second manually inspect log also yield two unsurprising first security check tend occur burst right new process start second potential cause appear cover entire range security check access check semaphore registry key privilege check many noise filter algorithm depend fact underlie security subsystem stateless certain call modify natural alternative approach modify security subsystem would modify access file system socket however stateful nature would make approach noise filter either difficult impossible example call would require close file attempt reopen different set appropriate appropriately handle call arbitrary object would even challenge maximum allow function call either explicit list desire access read write call special argument maximum allow ask allow access privilege grant additional access object might seem necessary log call maximum allow potential however would quickly lead large number false example start application one evaluation call start trace run privilege stop trace start validation run without privilege stop validation security check monitor noise filter security check event logger log security check monitor noise filter validation mode figure two trace validation time maximum allow access call return different access base whether user privilege fortunately call observe maximum allow occur object handle creation object handle create access grant cache later call compare cache access allow us avoid potentially large number false due maximum allow modify interface incorporate noise filter algorithm retry successful request see whether would succeed without privilege apply noise filter algorithm interface require maintain small amount additional state object handle object handle create maximum allow initialize additional field handle result maximum allow remove privilege later call object handle desire access compare actual grant access request log desire access allow actual grant access security check event logger implement security check event logger modify event trace kernel component already allow log registry access page fault disk io security check log entry indicate current process name monitor security check function target privilege desire access grant access stack dump return address kernel stack object name obtain object name call difficult obtain information perform security token backward pointer security object indeed security create programmer without reference object though practice rare obtain object name exist logger walk back along kernel stack traverse frame pointer frame traversal stop function frame know contain object name information write log technique require kernel compile frame case service pack one currently implement retrieve object name five function know particularly common parent sufficient give us good coverage allow us give evaluation section return object name access check one trace check log validation perform separate validation step confirm code manage exercise detect trace technique could directly modify code evaluation instead modify behavior security check monitor noise filter change security check validation step reverse trace step run without privilege previously log check make succeed otherwise would fail application work without privilege log check cover cause though might seem possible mitigate use validation technique change outcome certain security check often effectively change several reason urge caution approach first legitimately require privilege object access retain strict complicate factor may kernel object whose significance less clear file registry key secondly require ad min privilege free change application behavior many ways change may require significantly work alternative application behavior finally architecture security check monitor noise filter component require table determine whether change outcome particular security check place better efficiency avoid step need maintain additional state security indeed exactly currently handle file system registry four evaluation evaluate effectiveness trace technique eight failure draw real include small utility program video game document process development tool span spectrum include preschool home purpose evaluation understand effectiveness technique produce small set security check responsible incompatibility understand helpful would developer seek fix incompatibility system administrator seek mitigate experiment trace use account privilege find encounter quickly interactive find need trace application script trace entire run application validate log use second account without privilege find cause evaluation fall three insufficient granularity privilege application design programmatic enforcement unnecessary privilege overly restrictive three section require elevate privilege either store secure location necessary correctly configure allow access appropriate fixable small code change appear possible work around manually relevant bob builder game bob builder fix video game design young three user attempt start game without privilege error message appear state insufficient privilege tracer intercept check application would fail user privilege fifteen check survive noise filter five unique among fifteen check show table two two point first entry log likely incompatibility first error message mention process second local machine portion registry use store use validation technique confirm hypothesis although hear application directly anecdotal evidence point common mistake lead incompatibility easily fix use peruser store incompatibility also simple mitigate modify system critical information store bob builder section registry yet deduce explorer also generate log mention previously technique sometimes generate false several use build environment configuration tool must privilege use current version tool user without privilege run attempt change source code directory receive permission deny message trace start finish yield seven log show table three security check one notice immediately trace launch series process first hypothesis c source code directory responsible incompatibility change manually however run second time revert require privilege second hypothesis child process change confirm change manually remove executable allow user without privilege use learn consult remove user account build tree produce consistent build environment across user account change produce consistent build environment without require privilege trivial indeed next version already slat change incorporate incompatibility easily mitigate system administrator script system administrator easily modify use compile code security function process object name program table two unique log bob builder require order complete system administrator still could write separate script reset run greet greet document process application trace greet record potential cause summarize table four total security check validate log find first three class log security check must succeed application usable without privilege security check remain two class appear false fail check appear easily fixable seem reflect standard mistake store scope indeed next rename version picture system administrator perspective second third class security check use standard tool first class require use validation technique finally large number example illustrate benefit require one trace identify insufficient privilege granularity application design three section functionality appropriate functionality usable privilege however fail accommodate operation design consequently usable without privilege thank four bring many attention remote access service ras ras program corporate remotely connect corporate network run ras without privilege lead error message roughly one minute program start reproduce problem technically challenge lab allow us easily fake remote environment ras assume trace small script replicate core ras behavior validate result use real ras program remote location trace small script generate seven log security check six seven check relate file registry key eliminate cause use validation technique cause last check succeed allow script real ras program run without privilege analyze one security check detail saw script interpreter attempt enumerate network call function get class define home network configuration manager function check user privilege use function export internally call kernel function tool learn ras enumerate network switch run newly create virtual private network enumerate network enumerate current user design usable privilege ras seem face two possible incompatibility service could perform work behalf ras thus allow user switch run alternatively alternative present allow enumerate network particular user one might satisfy switch user run system administrator would restrict address problem use validation technology one check privilege succeed would roughly equivalent first possible developer example illustrate may result nonintuitive security check library indirectly check access lower level security function process object name security action enable security privilege check security privilege enable determine user privilege table three log security function three eleven additional object name security action determine user privilege program picture table four summary log greet mentation case like even benefit trace require source code however actually access application source code able construct entire sequence call responsible incompatibility within ras application group whose change power configuration share scenario one could add new user group make user configuration dominant user log console however even modification power configuration would still unavailable unprivileged user power configuration power configure per user store user profile however privilege require change power application allow privilege change power account user attempt change power without privilege receive access deny error message trace action lead five log check total two log check validate one incompatibility discuss internal surmise power configuration present difficult policy issue certain call peruser yet impact one user power option time turn hard disk may interfere run log time share scenario one could reasonably want power change depend person use machine user versus user speculate might possible better handle issue add privilege double click clock corner present pictorial clock calendar find handy tool use want answer question like date last may unfortunately attempt launch clock without privilege lead insufficient privilege system time error message even one want launch application script grant privilege might difficult command line readily available trace action lead three log check show table five total validate privilege check incompatibility discuss case internal surmise original clock design use manner privilege check would provide good place branch display privilege miss incompatibility appear fit model mitigation system administrator security function process object name security action enable privilege table five log figure three error message start game without privilege programmatic enforcement unnecessary privilege two section programmatically enforce user possess privilege appear function perfectly well check bypass discuss reason detail context application game action game ship three install disc disc play disc must drive game work user without privilege attempt play game mislead error message figure three pop claim drive empty trace action generate three log total check fail user without privilege three log show table six error message mention drive hypothesize third log entry responsible incompatibility verify pass check alone allow game play without privilege example illustrate present user mislead error message receive response mislead error message lead us believe failure mode anticipate speculate may simple program oversight program attempt acquire certain unnecessary access could easily fix incompatibility also could easily mitigate system administrator use validation technique tax calculation release intuit run without privilege generate error message state privilege necessary use application trace application generate eleven log total security check eleven log break one entry three semaphore four registry key three surprisingly use validation technique discover cause call succeed sufficient allow use application extensively without privilege succeed run complete tax form print file yet receive response two different reason believe might cause insert check first publicly available transcript discussion intuit customer service representative suggest require privilege quick fix solution data privacy concern privilege convey complete control system leak information application represent increase exposure private data user view information already privilege second reason consider code path execute generate failure user lack privilege balance believe evidence point check privilege explicit decision application require privilege five relate work common approach increase system security sandbox scope individual compromise decrease common include virtual machine fifteen system call interposition one fourteen thirty restrict file twelve work differ prior art invent new sandbox develop new technology better implement exist sandbox instead trace technique design help system make use exist sandbox unprivileged user previous work investigate security function process object name program table six log build rebuild better conform principle least privilege thirteen al show separate privilege unprivileged part privilege separation would reduce vulnerability several security hole later discover song describe tool significantly process use static analysis privilege five technique complementary trace technique could potentially use automatically produce require common assumption much work part program investigation legitimately require ability perform privilege operation contrast investigation suggest many case requirement application run privilege context trivial bug case requirement application run privilege context reflect design flaw argument application require privilege two eight case evaluate ras power previous research focus new model access control role base access control type enforcement mandatory access control twenty development particular exist recognize require amount work trace approach like might help policy development provide insight particular violate particular access control consider previous work use static analysis two commonly cite alternative dynamic trace major strength static analysis achieve trivially dynamic often require sophisticate generation exercise code exercise code possible however one previously attempt apply static analysis problem indeed believe static analysis would difficult impossible least three reason first underlie property check function system fix target standard practice base deployment environment actual depend state virtual document map different different depend current user second investigation show privilege sometimes occur flow control pass multiple static analysis become increasingly difficult scope analysis increase lastly static analysis typically require source code sometimes additional use portion code available binary format common situation system also due common use closely relate previous work current developer practice identify privilege trace file system registry access deny seventeen technique go beyond monitor complete set function within security subsystem implement sophisticate noise filter strategy evaluation section four justify importance advance identify system call trace sometimes similarly use access trace technique differ system call trace sophisticate noise filter significantly smaller code base must correctly understand order correctly capture access system call trace must monitor function security expose os need monitor five function security subsystem recently propose alternative approach eliminate encourage run without privilege initiate practice help code base develop scratch difficult incorporate large code base even development new trace technique provide several additional benefit run without privilege individual test pass uncover multiple identify bug unknown cause additional helpful information provide complete call stack symbol file present object name six conclusion future six e without many run privilege significantly increase vulnerability compromise user level application become system compromise address problem introduce trace technique identify cause technique catch exercise code evaluate trace technique use eight incompatible eight span variety user type exhibit variety reason underlie base subsequent conclude trace technique make fix mitigate significantly easier future trace technique would provide even value integrate development ability set also believe log validation technique highlight need utility configure security associate object file registry key addition aid system mitigate utility would convenient finally speculate trace technique like could fruitfully apply operate thank research assistance insightful comment particular beck bill brad dan wang rich ward alec reference one use behavior class confine untrusted security two k use compiler catch security hole security privacy three ball test generation case study research technical report four k brown security hall shame five song automatically partition program privilege separation security security seven advisory eight instant messenger client contain buffer overflow parse nine critical ten explorer update control disable eleven h dean security twelve c g c pu p v parsimonious server security thirteen c secure daemon fourteen trap practical call interposition base security tool fifteen b j chow virtual platform trust compute sixteen b botella automatic test data generation use constraint solve proceed international symposium test analysis page seventeen eighteen j j wing measure relative attack surface proceed workshop advance security also technical report august nineteen find bug constraint solver proceed international symposium test analysis page twenty p meet critical security proceed symposium certain program work correctly log use limit user account retrieve connection connection asp package p proctor harden security harden tack ing n improve host security system call security n p prevent security p provost development fifteen handbook access mandatory gribble h levy measurement analysis university environment thirty r tal ben delegate secure system call interposition tax administrator privilege w postfix overview ym wang r c gatekeeper monitor extensibility point management proceed j yang extensible expressive system language statically check security