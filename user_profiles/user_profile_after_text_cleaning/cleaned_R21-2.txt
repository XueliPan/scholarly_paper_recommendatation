model buffer data refresh semantics automotive computer information science university computer tu lee abstract automotive consist multiple electronic control run distribute control connect communicate via share bus resource arbitration also communication medium couple execution task result jitter stream exist system result buffer require bus however buffer often implement different semantics fifo queue straightforward buffer scheme data refresh stale data overwrite freshly sample data traditional time analysis use compute delay automotive model fifo buffer result return pessimistic delay resource estimate reality overwrite data get process system paper propose analytical framework accurately model data refresh semantics model exploit novel feedback control mechanism purely functional nature result scalable involve explicit state model use model estimate various time performance metrics automotive network consist buffer implement different data handle semantics illustrate utility model three case study automotive electronics domain subject embed general term design verification performance model analysis buffer management one introduction automotive typically consist collection electronic control connect multiple communication bus implement various platform use execute multiple distribute control obtain input various research support part cognitive automobile permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee ten copyright data refresh r n e finite fifo fifo infinite infinite r c figure one network buffer different semantics hence information process propagation form stream originate terminate pass various bus although typically sample data periodic task also periodically activate resource arbitration bus couple variable process demand task introduce jitters data stream result buffer need place various position architecture bus give setup two predominant data handle semantics implement buffer first first fifo data lose history transmission order data important data stream contain incremental information speed increase car buffer manner data refresh semantics buffer restrict size stale data overwrite freshly sample sensor data semantics use data recent value interest actual speed car however model buffer overwrite analysis system turn challenge problem mostly ignore past ignore overwrite acceptable stream encode video data store buffer exist data never overwrite fact overwrite data loss desirable however many control stale data useful replace newly sample data neglect overwrite case lead pessimistic estimate computation communication resource since overwrite data also assume process model paper develop analytical model network contain buffer implement semantics see fig one model motivate previous work model analysis process continuous data stream use calculus framework sixteen extend framework use novel feedback control mechanism enable model complex state information case deletion exist data buffer fresh data main challenge model overwrite stem relatively complex overwrite process data buffer overwrite freshly sample data typically data refresh semantics require explicit model use time automata see eight lead state space explosion problem also report context model process data stream six main contribution suitably modify framework appropriate abstraction feedback control construct avoid model nevertheless accurately capture complex buffer refresh semantics importance problem recently point number study eleven buffer overwrite discuss bridge gap synchronous semantics model level asynchronous nature implementation semantics tag one use model buffer implement data refresh semantics paper two extend model loosely three however direct towards study functional correctness system paper model data refresh semantics quantitatively capture load system volume actual data process system goal factor computation time system delay suffer message need quantitatively capture performance analysis also point seven develop top network calculus four theory communication network domain framework five use paper extensively adapt model analyze heterogeneous compositional manner see seventeen central concept framework use arrival function model time data stream service function capture availability specifically data stream model pair arrival function l denote upper number data may arrive time interval length similarly resource model pair service function l specify maximum minimum number process resource within time interval length give arrival function input data stream service function resource one compute use purely algebraic various bound system maximum backlog data buffer maximum delay suffer input stream arrival function output stream service function remain resource output arrival function feed input next resource whereas remain service function use process next data stream arrival service function framework admit much collection arrival sequence resource pattern classical event resource model periodic sporadic bound delay algebraic feature also enable efficient computation system performance fully compositional manner however standard formalism assume unbounded buffer size model buffer scheme dependent state buffer mention assumption unrealistic also prevent applicable many common practical data refresh semantics implement buffer smaller buffer size number data process downstream next actuator fig one certain data overwrite therefore process subsequently ie beyond buffer implement data refresh fig one case assume data lose standard framework result higher system load hence pessimistic time bound resource estimate paper extend exist framework model analyze buffer implement ing fifo well data refresh semantics key idea technique use combination concept virtual processor encapsulate data overwrite scheme feedback control mechanism capture overflow analysis rely solely algebraic thus compute efficiently technique propose significantly enhance model power exist framework associate model six eight time modular fully compositional case study illustrate method seamlessly integrate current framework time show effect capture buffer overwrite accuracy analysis also provide experimental validation analysis method simulation worth note however analytical method faster also able provide guarantee bound system achieve use simulation relate work first line work target towards come formal domain time automata relate employ model task schedule hard eight well process data stream six although model highly expressive often suffer state explosion problem apply realistic effect finite buffer study context data flow graph ten instance algorithm compute buffer satisfy throughput present eighteen analysis schedule multirate data flow finite buffer study twelve use fifteen mechanism allow semantics preserve implementation synchronous model loosely time trigger mention two three eleven propose model data refresh although functional correctness perspective main investigate communication clock synchronization data semantics preserve distribute time trigger platform asynchronous communication do mean tag structure one hold information freshness level data enforcement tag ensure correctness data value unlike framework deal functional system impose system instead provide compute time relate performance presence data refresh address two three eleven lastly various data management also investigate handle overflow condition bound buffer instance fourteen identify four different overflow namely drop drop drop random drop present framework analyze number drop data average delay process data refresh semantics consider identical drop policy relevant automotive involve transmission sensor data extend analysis data management propose fourteen worth note method purely analytical thus applicable case approach fourteen fail provide guarantee time bound method also work faster compare simulation time consume organization paper next section describe basic framework section three focus analysis technique basic data refresh semantics follow extension data refresh semantics section four present case study section five conclude section six outline future work two background framework develop base min algebra four model data stream process use abstraction specifically arrival pattern stream model cumulative function give number arrive time interval zero set arrival pattern stream represent pair arrival function l l specify maximum minimum number data arrive stream time interval length word zero zero l similarly service pattern resource capture cumulative function c c denote number process resource zero set service pattern resource model pair service function l l give maximum minimum number process resource time interval length respectively formally let r set real number let f set monotonic function ie f f r zero f f r set real number minimum operator f denote define f g f usual r similarly f g f g r min sup exist set f f h h similarly l f h l h definition sup also similarly define set r f g f g define min convolution follow f g f r f g zero f g zero one verify follow result f g g f f g f g c f c g f f g h f h g let f zero zero zero f n n zero min subadditive closure f give f f zero f f n f n n n zero g theorem four theorem give f g f inequality h g f h one unique maximal solution give h f denote composition two x x linear idempotent operator fix g f define f g g f zero follow hold four f f one convolution define f g f r f g f g sup f g sup f g f g f g zero f g zero next let zero zero zero closure f define f f zero f f n f n n n set natural number f n n zero similarly context often assume upper arrival service function subadditive lower arrival service function function f f subadditive f x f x f x r additive f x f x f x r function make subadditive take subadditive closure paper assume give upper lower function refine satisfy analysis require pair upper lower function satisfy causality ie include infeasible bound specifically give pair upper lower function f f l must zero f l f l x f x f zero x lastly maximum vertical horizontal deviation distance two function f g f give f g sup f g zero f g sup zero f g zero two three performance bound unbounded fifo buffer consider input data stream arrival function l process resource service function l suppose buffer store data input stream infinite capacity let input arrival pattern stream correspond output arrival pattern five four l maximum backlog input buffer maximum delay experience input stream give l l respectively output arrival function remain service function compute follow min l min l l l l zero zero l l l five six seven eight terminology refer conventional unbounded fifo buffer describe method propose next section bound buffer data refresh semantics subscript stand result compute method lastly arrival pattern stream also know function use interchangeably paper three model finite buffer data refresh semantics extend capture contain buffer implement data refresh semantics buffer bound incoming data store buffer order however incoming item arrive buffer buffer full data item head buffer fresh data item write end buffer example one consider buffer b size three give b item arrive arrive order overwrite b contain three recent data give system goal compute standard metrics mention since assume infinite fifo buffer analysis result become overly pessimistic presence data refresh present extension model analyze data refresh semantics include compute maximum delay experience input stream consider section arrival function output stream section remain service function process stream section extend method analyze mixture fifo data refresh semantics section buffer management scheme section four note maximum backlog buffer implement data refresh semantics either buffer capacity maximum backlog compute whichever smaller single input stream consider system consist single input stream process process element give fig two show figure upon arrive system stream write buffer b process assume input stream model arrival function l resource availability model service function l data refresh semantics implement buffer b finite capacity input stream b data refresh figure two system buffer data refresh semantics basic model let arrival pattern input stream c service pattern correspond arrival pattern output stream denote effective input function ie specify number arrive zero overwrite since capture process actual output function observe dependent input stream b c virtual processor control data go system data refresh discard figure three virtual system equivalent one fig two original arrival pattern also service pattern c size b compute arrival function bound employ feedback control mechanism arrival pattern process stream use feedback information control data go system original system fig two recast equivalent system additional virtual processor front b see fig three serve admission controller split original input stream capture two separate stream former model effective input function con process latter model input function two consist overwrite discard data lose hence notion delay guarantee contain many possible ensure none overwrite ie buffer b never overflow essence data refresh semantics buffer original system capture completely process semantics virtual processor result correspond buffer virtual system behave exactly like unbounded fifo buffer note impose additional delay input perform real process example two fig four show effective input function output function solid line correspond give input arrival pattern service pattern c three figure fill black circle represent go system capture unfilled pink circle represent discard capture two blue rectangle correspond item process capture c number associate blue rectangle denote index correspond item process note second third rightmost blue waste nothing process b one b b b b b nine b b twelve b three four b ten nine b eleven eleven unused unused seven six eight five ten nine eight seven five two four one three two one j item k discard k buffer b full item j arrive b b one two three b two three four b five six seven b b b b b eleven b b ten time figure four actual data go system one verify item six arrive buffer full b three four five therefore item three overwrite item six write buffer b four five six similarly four six overwrite seven nine arrive respectively thus virtual system discard three four six arrive metrics original system analyze base virtual system outline come fundamentally maximum delay compute base condition data refresh occur obtain remain service output arrival function first compute service function v effective function possible b never overflow fig three v use derive arrival function v v apply derive remain service function since b behave like infinite fifo buffer v also combine form overall service function e entire system derive arrival function process stream base e compute maximum delay recall virtual system fig three denote delay experience input item arrive time lemma state two basic bound due data refresh bound show fig five b buffer item e arrive c e b time instant b fully process instant e b hence l zero two bound depict fig six shall prove zero l intuitively mean delay input item go system bound maximum horizontal distance l see fig six corollary consider input item e arrive time since least l zero item e process latest first instant word amount time require l process e satisfy process zero zero l l figure five upper bound delay output data item thus twelve hold hence lemma lemma let b number buffer b time ie b min min min zero zero c c b ten proof consider item call e arrive time observe e overwrite item b b full b contain e overwrite process next arrive otherwise would overwrite k th item example fig four item five must process item eight arrive thus delay e satisfy nine min zero time b currently buffer e include thus amount time need process b ie min zero c c b result min since upper arrival function upper service function c c zero observe buffer hold process interval length hence number overwrite zero give minimum result follow corollary hold turn imply lemma corollary define min lemma let f k min zero f k f f k zero zero l min l l twelve proof recall l lower arrival function thus l zero zero definition imply zero eleven min zero l l similarly since l lower service function c c c l zero zero hence zero min zero l b two zero e one two time zero one two time l l zero l time figure six maximum delay experience input stream minimum l l l lemma imply theorem give delay experience input stream theorem maximum delay experience input stream give l l l min fig six illustrate delay computation give theorem theorem delay bind give theorem tight proof denote l l give f g f r define f g horizontal distance f g time ie f g zero f g denote h f g first instant f g least ie h f g min zero f g construct input arrival pattern constrain service pattern constrain item fully process time word exist zero c c c result output function offer service pattern first condition specify amount time require fully process item arrive time second state arrive interval imply item arrive time overwrite interval since min give arrival service function l l hence exist zero l let ie h l define l otherwise define l zero since l x l x zero x l zero hence valid arrival pattern input stream construction valid service pattern since subadditive l l zero indeed l l l l l result l l hence h l h l always false imply zero mean resource offer zero use process thus correspond output function satisfy zero hence recall h l word delay item e arrive besides l imply l hence number arrive l mean e overwrite result construct system consist achieve delay give theorem compute output arrival function recall effective input function capture indeed process see fig three lemma state relationship two function lemma effective input function bound l proof sketch since none overwrite zero b let f function map input output assume f monotonic f f number pass admission test ie overwrite time interval number original enter system interval word zero zero recall hence zero min f f thirteen fourteen hence input function actually go system maximum solution fourteen theorem f apply one section two equivalent f denote x x z since f map service function f equivalently f c similarly arrival function imply thus hence c rewrite similar also imply l prove lemma lemma derive directly bound establish lemma hold true due l v v l v lemma let v v l l v valid upper lower service definition l thus l l v v overall service function give input stream data e compute output arrival function refresh base e e l l l v hence v theorem arrival function output stream data refresh semantics implement input buffer give l min l min e l l l e l e l e e e l e l sixteen e fifteen note unbounded e lemma refine effective output arrival function ensure property l causal relationship proof easily establish base definition upper lower arrival function detail available thirteen lemma let l denote min l zero zero seventeen eighteen l output stream smaller valid upper lower arrival function l compute remain service function since v l v upper lower service function virtual processor lemma effective input function bound output arrival function give v l v min min v l v l v v l l v v use v input arrival function v derive remain service function conventional case since buffer overflow l v l l v l v zero zero analysis accuracy overall system specifically provide output arrival function hence ensure accurate analysis subsequent pes theorem take account data refresh able capture service unused overwrite thereby guarantee service lower priority stream theorem nineteen twenty thus remain service function buffer implement data refresh semantics give l heterogeneous mixture buffer semantics section show one apply present previous section analyze heterogeneous different buffer semantics compositional manner demonstrate integrate directly conventional guarantee overall analysis least tight alone consider consist multiple input stream namely process sequence pes fix priority schedule policy buffer system either infinite fifo buffer finite buffer data refresh semantics example show fig seven example finite buffer size data refresh semantics hand b one unbounded fifo buffer give system would like compute standard metrics discuss previous section input stream input stream two data refresh two fifo two subsequent buffer semantics infinite fifo finite data refresh figure seven mixture buffer semantics consider first fig seven suppose si higher priority j j resource first give remain give denote arrival function service function respectively apply result obtain single stream case compute maximum delay use theorem output arrival function use lemma remain service function use process next input stream also compute use nineteen twenty base analyze take consideration semantics infinite fifo buffer apply however implement data refresh semantics analyze use do analysis repeat reach time output arrival function produce feed input arrival function repeat analysis respect semantics input buffer b one compute output arrival function feed input subsequent correctness compositional analysis see combine enable complex mixture different buffer type analyze compositionally claim introduce loss term output arrival function j obtain apply overall effective service function part system comprise j ie convolution individual effective service function lemma let output arrival function fig seven compute use respectively l l proof sketch since hold e l e thus e definition min e thus e l due lemma e theorem min prove e e since g g f l let f f f f l f f l f f g f g f l always true hence e thus define lemma theorem let denote resp maximum backlog maximum delay output arrival function resp use input arrival function proof since input buffer simple infinite fifo buffer analyze use let two service function follow lemma l two l sup two l two l sup two since zero zero thus remain prove similarly theorem let remain service function process compute use l l proof first f g f f g zero f zero sup f x sup thus f zero g zero similarly f zero g zero g x g zero recall l l v zero l l zero v v min v l v v thus l v word l l l hence l v zero l zero definition first show l v l v min l v l v zero l zero l indeed l l v v l v l v l v imply l v l v l l l l v l v always hold due v l v l imply l v l v zero l zero word l result l v four buffer man semantics data refresh semantics consider thus far item arrive input buffer full item buffer discard also know drop fourteen extend analysis method buffer management semantics define fourteen first consider drop policy incoming discard buffer full observe number discard data refresh semantics identical since number discard specific affect number process number process give time interval case hence system produce number output semantics word output arrival function remain service function refresh semantics give lemma nineteen twenty note semantics input item write buffer overwrite hence delay experience input item bound maximum amount time require process item use argument data refresh semantics case imply maximum delay experience input stream min l l base similar one could also obtain analysis result drop drop random fourteen random item buffer discard buffer overflow multiple pes multiple input stream fix priority schedule implement mixture semantics also analyze compositional manner detail section five case study present three case study demonstrate applicability analysis first show technique use compute bound amount data guarantee go system buffer implement data refresh semantics second illustrate effect buffer size freshness output data traction control application last one present sensitivity analysis variation maximum delay experience input stream respect change input case study one output guarantee data refresh case study analyze bound output stream system describe fig two use technique section simulation simulation setup use event simulator generate arbitrary input event trace comprise different event type vary process cycle first keep finite buffer implement data refresh semantics interest event hence size buffer set one processor process buffer greedy fashion set run frequency f five observe output arrival pattern r process stream f obtain arrival service function base generate trace derive arrival function l input stream slide window size along time axis determine maximum minimum number generate across execution generate compute function k l k give maximum minimum number processor cycle require process k consecutive service function processor obtain function frequency f use l f use l input arrival service function compute output arrival function use simulation analytical upper output arrival function compute correctly upper bound output simulation trace r upper output arrival function give similarly lower output arrival function give correctly lower bound r however give wrong bind compute value output simulation trace hence take account buffer refresh method give upper bind conventional time avoid invalid result face conventional closer r figure eight guarantee output stream different input buffer size seventy forty b one b two b five b eight b ten b fifteen figure nine effect buffer size system throughput effect buffer size output stream throughput fig eight depict lower output arrival function obtain technique vary input buffer size input stream show figure lower arrival function correspond lower buffer size locate one correspond space show detail result f n c n f l v r r r e w l n e v e e r p e h eighty sixty forty twenty zero zero p h g r h n zero one n e v e buffer size buffer size increase overwrite thus process also observe figure output arrival function buffer size b ten b fifteen coincide happen input process buffer size also large impact minimum throughput system illustrate fig nine initially double size buffer throughput increase nearly factor two however increase factor reduce increase buffer size throughput finally converge value b ten buffer large enough avoid overflow case study two traction control system strong acceleration lead wheel spin especially poorly prepare traction control system prevent spin drive wheel provide optimal traction fig ten depict traction control system application map architecture would like analyze fix priority fix priority two one one two c r residual bus figure ten traction control system architecture system consist wheel speed sensor cluster two compute traction control actuator perform wheel brake receive value sensor cluster process current slip execute task process slip value send via message task compute brake force accord input slip value especially wheel go spin subsequently brake force value send via wheel brake actuator perform brake application therefore prevent wheel spin delay system short important recent slip value available compute brake force recent compute brake force value send actuator achieve buffer configure buffer allow update content new process value case previous value could transmit bus accord schedule policy may happen many message higher priority transmit bus certain period time due event trigger higher priority message transmit change system state besides second application run message send bus accord fix priority schedule give system interest fresh value arrive actuator derive calculate maximum delay message transmit sensor actuator color path solid blue line analysis result employ method nine model policy use bus residual bus depict fig ten consist n strictly periodic message higher message priority define infinite delay one delay one delay four delay four l e n e n e x eighty sixty forty twenty zero one three data refresh semantics two conventional figure eleven maximum delay actuator task priority give analysis assume low speed bus provide data rate fix frame length every frame system sensor task period ten additional jitter two finite buffer data refresh semantics fix size one variable size fig eleven depict correspond maximum delay experience message originate sensor actuator vary size buffer compute assume data refresh longer delay less fresh data illustrate figure accord message may experience unbounded delay overly pessimistic take consideration buffer size data refresh semantics method give finite delay also observe figure increase buffer size delay increase data become stale expect buffer small keep recent data case large buffer base often appropriate keep buffer size small freshness data critical contrary require high throughput often need sufficient memory maintain desire level quality service case study three sensitivity analysis evaluate robustness method well relationship input system metrics study sensitivity analysis respect input stream towards consider single input stream process system implement data refresh semantics examine impact input jitter variation delay output stream ideal periodic point p jitter window size j arrival input data item time figure twelve periodic sensor stream jitter show fig twelve input stream arrive constant period p average however arrival time may deviate within interval length j call jitter surround ideal periodic arrival point besides model input source strictly periodic jitter also often use mean capture possible period measurement input stream input stream b b bus data refresh message delay figure thirteen example system sensitivity analysis system description fig thirteen show architecture system periodic sensor stream period p jitter j upon arrive system store input buffer b prior process processor output stream one write transmit buffer b transmit bus denote b unbounded fifo buffer however b implement data refresh semantics assume b fix depth one bus provide data rate input stream period ten variable jitter j experiment vary j zero seven step five compute correspond maximum delay experience input message constant bind message delay h e r f e r fourteen twelve ten eight six four two zero one b e c n e r e p x e l e x zero five ten fifteen twenty thirty forty jitter input stream figure fourteen effect input jitter message delay fig fourteen depict maximum delay experience input message correspond different input jitter value show figure maximum message delay increase linearly increase jitter input stream expect jitter increase may arrive fix interval time increase worst case resource demand input stream result jittery stream experience maximum delay hand maximum delay stabilize input jitter exceed certain value ie j three figure convergence delay guarantee due enforcement data refresh semantics specifically since service function pes change maximum process stay constant regardless input demand high load scenario high input jitter value maximum number wait buffer limit depth buffer since excessive input discard due data refresh semantics hence input jitter go beyond certain threshold maximum number indeed process limit service function buffer size result maximum delay remain constant jitter continue increase sensitivity analysis one derive correlation input system behavior jitter use accommodate possible input measurement tightness delay result linearly proportional tightness input jitter value however guarantee bound constant accuracy despite pessimistic input measurement lastly result also showcase interest system easily visible otherwise instance data refresh implement maximum message delay longer influence input load load maximum service provide add buffer size contrary number message overwrite susceptible input especially input load high base observation one also determine maximum acceptable system guarantee delay constraint minimize amount data loss worth note effect various design would possible use alone six conclude remark present analytical framework model analyze buffer implement data refresh semantics analysis tight base solely algebraic compute efficiently compositionally easily integrate exist framework extend analyze similar buffer management also illustrate utility method use three realistic case study automotive domain plan extend theoretical result establish paper capture complex system dynamic schedule stream complex buffer update scheme seven reference one al heterogeneous reactive model capture causality correctness loosely two al communication sample distribute three al loosely base four p network calculus theory deterministic queue volume springer five l general framework analyse system embed system design date six l x p event count automata model stream process seven n k j j compositional framework path delay calculation automotive different path semantics eight e p p w task automata information computation eight nine w l complex task activation scheme system level performance analysis ten e lee g synchronous data flow proceed nine eleven l design embed control synchronous model engineer eight twelve schedule analysis journal advance signal process thirteen l x r schneider lee model buffer data refresh semantics automotive fourteen j ray p data management embed system fifteen c p di implement synchronous model loosely time trigger ten sixteen e l hard journal computer system two seventeen w l quantitative characterization event stream analysis hard eighteen p g smite efficient computation buffer multirate real time