control energy performance general environment offer power performance control author propose voltage frequency prototype design implement deploy real system achieve energy save seventy percent energy power become primary issue modern processor design processor face increasingly vex power thermal challenge reduce average maximum power consumption avoid thermal maintain voltage regulation quality addition static design time power management dynamic adaptive become essential increase gap demand recent propose study many hardware address dynamic power performance control higher level compiler application also take active maximize power control effectiveness actively manage power performance thermal article explore power control general environment particular look one control mechanism dynamic voltage frequency scale expect apply control mean well dynamic compiler system compile modify optimize program instruction sequence run base dynamic include daisy dynamically instruction set five figure one show architecture general system system serve extra execution layer application binary operate system hardware system interact application code execution apply possible beyond regular performance dynamic compiler also apply energy allow direct control mode set access special mode set register dynamic compiler simply insert mode set application binary code execution slack exist idle cycle wait w clark university janapa dan university colorado boulder lee corp brook university publish computer society micro top pick binary system optimization performance optimization os hardware figure one general system architecture serve extra execution layer application binary os hardware memory scale voltage frequency save energy little performance impact dynamic compiler access information program code structure well system information scheme offer unique feature advantage present exist approach see detail work one first develop voltage frequency exist research control fall one two hardware os approach approach hardware os typically monitor particular system statistics issue queue fix time choose future time time predetermine independent program structure control might efficient adapt program phase change one reason program phase change generally cause invocation different code thus hardware os might able infer enough application code attribute find effective adaptation point another reason program phase change often recurrent loop case hardware os scheme would need detect adapt recur phase change repeatedly scheme apply code adapt naturally program phase change hardware scheme fix lack adaptation exist compiler work focus mainly typically use profile learn program behavior analysis linear decide code limitation set obtain time might appropriate program profiler actual program different reason behind statement depend program turn program behavior term depend system machine architecture configuration program input size pattern example machine architecture cache configuration memory bus speed affect much slack idle time exist also different program input size pattern affect much memory must use must use thus inherently difficult static compiler make adapt factor con use system information make must also point disadvantage technique every cycle spend optimization cycle lose execution therefore challenge design simple inexpensive analysis decision minimize optimization cost reference one g al dynamic frequency voltage control multiple clock domain ann press two use dynamic voltage scale workshop complexity effective design zero three f process cruise control event drive clock scale dynamic power management l architecture synthesis embed case two press four j j positional adaptation application energy reduction ann l computer architecture three press five design implementation evaluation compiler algorithm energy reduction program language design implementation three press six f malik dynamic voltage scale limit program language design implementation three press micro environment develop design framework implement prototype integrate dynamic optimization system deploy optimization system real hardware platform allow us directly measure current voltage accurate power energy read evaluate system experiment physical forty spec olden evaluation result show achieve energy example seventy percent energy save five percent performance loss spec design framework several key design issue consider optimization environment candidate code region selection cost effectiveness want optimize frequently execute code hot code addition relatively slow process voltage transition rate typically around one per one want optimize code therefore design choose function loop candidate code dynamic optimization already equip lightweight profile mechanism identify hot code example profile every possible loop extend exist profile infrastructure monitor identify hot function loop candidate code region important step decide whether apply beneficial whether region operate lower voltage frequency save energy without significant impact overall performance determine appropriate set dynamic optimization system analysis decision algorithm must simple fast minimize overhead analysis use typically time consume appropriate work follow analytical decision model design fast decision algorithm use hardware feedback information code insertion transformation decision algorithm find beneficial candidate code region insert mode set every code region entry point start every exit point restore voltage level one design question many adjust want program exist choose single code region program avoid excessively long analysis time ten design identify multiple provide addition code insertion dynamic compiler perform code transformation create example merge two separate small code one big one conventional performance interact check code merge harm program performance correctness operation block diagram figure two show block diagram optimization system overall operation start dynamic dispatch patch original binary code deliver hardware execution system execution mode cold code execute dynamic optimization system monitor identify hot code apply optimization hot code either conventional performance occur system execution mode code execute finally code transformation desirable query regular performance check code transformation feasibility decision make first insert test decision code candidate code region entry exit point code collect information number cache miss memory bus code region sufficient micro top pick start dispatcher monitor dynamic cold code execution hot code execution os hardware figure two operation interaction block diagram optimization system memory operation operation execution time figure three analytical decision model asynchronous memory access time number execution cycle concurrent operation number cycle dependent operation f clock frequency information collect test whether code region decide whether apply beneficial save energy little performance cost appropriate set candidate region key observation support beneficial existence asynchronous memory system independent clock many time therefore identify execution slack stall idle cycle wait completion memory scale voltage frequency save energy without much performance impact figure three show analytical decision model base rationale extension analytical model propose categorize processor memory memory asynchronous respect frequency f denote memory operation time operation time divide part one run concurrently memory part two dependent final result pending memory operation time depend frequency f denote concurrent operation time number clock cycle concurrent similarly denote dependent operation time figure three show overlap period slack time define slack time ideally concurrent operation slow consume slack time follow model want compute factor candidate code region thus original clock frequency f new clock frequency f voltage scale accordingly introduce new concept call relative slack time define slack time total execution time case figure three see relative slack frequency reduction system without affect overall performance frequency reduction one proportional relative slack time derivation detail give follow equation one p k zero loss p k zero loss total time f n total time maximum allow performance loss express percentage constant coefficient depend machine micro b c figure four processor power measurement setup run system unit b data acquisition unit c unit intuitively equation mean scale factor negatively proportional memory intensity level term include positively proportional intensity level term include estimate time equation use hardware feedback information hardware performance counter example processor estimate first time ratio equation use ratio two number number implementation deployment experience implement prototype propose integrate real system evaluate conduct physical power implementation implement algorithm develop use pin system basic platform pin dynamic instrumentation compilation system publicly available rogue modify regular pin system make suitable convenient dynamic refer modify system optimization pin compare standard pin package feature support dynamic adaptive code replacement instrument code update replace trace code region selection addition unlike standard pin compiler base execute generate code take approach execute mix original generate code example configure first patch instrument profile original code coarse granularity function call selectively generate code perform profile optimization dynamically compile code loop inside function therefore less operation overhead regular pin outline prototype system operation follow one instrument function call program loop main function monitor identify frequently execute code two find candidate code region hot execution count greater certain threshold test decision code start collect information decide code region three code region remove instrumentation code insert mode set resume program execution hand code region insert four medium case candidate code region exhibit mix memory behavior probably micro top pick contain check whether function contain loop dynamically generate copy function identify instrument loop inside function five process deployment real system deploy system real run system figure show hardware platform development board contain processor use maximum clock frequency sixteen two cache one unify cache board bus ram six express pair sixteen v fourteen v twelve v ten v v v voltage transition rate one per one accord os kernel update implement two kernel provide support control read form system call run system allow accurate power figure four show entire processor power measurement setup include follow four run system unit figure isolate measure voltage current signal isolate measure power rather entire board power want deterministic accurate result unaffected random factor board use main voltage regulator output sense measure current go bulk capacitor measure voltage unit unit figure reduce measurement noise accurate read measurement noise source board inevitable noise typically far higher frequency measure signal use filter reduce measurement noise data acquisition unit unit figure sample read voltage current signal capture program behavior especially require fast sample rate use national instrument data acquisition system maximum aggregate sample rate set sample rate per second channel sample length adequate read process unit unit figure host log machine process sample data every one second unit send collect data host log machine via cable log machine process receive data use regular run national instrument process data configure various task monitor raw data record power energy computation experimental result experiment choose performance loss target five percent result frequency would lower allow aggressive energy save conversely smaller would lead higher conservative voltage transition time set threshold code region fifteen million cycle processor make least three time voltage transition time evaluation use previous use also include suit addition include several olden popular integer study program memory behavior use compiler obtain application binary compile optimization level two test reference input set run completion power micro table one information obtain spec average number per million retire total total micro average cache average average memory total hot region miss retire name millions millions five jacu seventy ten set eight twelve eight twelve fourteen v e g l v w r e w p sixteen fourteen twelve one eight zero ten five zero zero performance result report average result obtain three separate run table one show program information result obtain system spec program elliptic partial differential table list total number hot code program total number identify code region show total number retire code region single invocation average number cache miss average number memory bus average number retire obtain figure five show part voltage power trace run insert directly five code indicate table adjust voltage frequency adapt program phase change specifically program execution enter code region scale clock frequency voltage default sixteen select set eight program enter next code region clock frequency switch twelve power trace also interest initially fluctuate around value eleven w various program execution enter code power drop dramatically level low w experimental result show optimization apply code lead considerable energy save percent little performance loss five percent two four six two four six time second figure five partial trace voltage power spec run energy performance result figure two show view addition regular dynamic performance optimization system isolate contribution optimization report energy performance result relative system without want mix effect optimization underlie dynamic compilation optimization system develop university colorado addition comparison report energy result obtain static voltage scale scale supply voltage frequency statically micro top pick p z g four six one r p v five seven one c c g six seven one f c one eight one f r c six eight one r e r p seven nine one k b l r e p three five two p g four five two x e r v five five two n e two five two fourteen two p z b six five two f l w zero zero three e g r e v h b f b three e h l e h r e e r e p r e w p e g r e v b n e c r e p n e e v r p p e sixty fifty forty thirty twenty ten zero ten n e c r e p n e e v r p p e sixty fifty forty thirty twenty ten zero ten w two zero one r c two three zero one v c one zero one l r g seven zero one two r h four zero one three b r five two one p one four one p p p p five four one e g r e v five e v w six four one e w p w eight six one w one seven one l r g two seven one l p p three seven one e seven seven one l e g g l eight seven one r nine seven one c e r e c f seven eight one p eight eight one c l nine eight one three f one nine one k c r x zero zero two p one zero three e g r e v e k q e three eight one l p p zero one one c figure six energy delay product improvement olden b c obtain static voltage scale get roughly amount average performance loss result choose f fourteen static voltage scale voltage set point system produce average performance loss close five percent figure six show energy delay product improvement result obtain static voltage scale result take account optimization overhead time require check code region result lead several interest first term improvement outperform wide mar gin nearly second energy performance result individual suite vary significantly one percent seventy percent fourteen percent twenty percent individual vary widely proportion particular program almost except hence nearly immune attempt table two summarize average result suite show result result improvement result represent three fivefold better micro table two average result suite versus performance energy energy delay product degradation save improvement suite olden seven seventy sixty three improvement result present additional experimental result include basic overhead another overall result figure six table two show propose technique address energy performance control problem well attribute promise result design efficiency advantage approach experimental result promise could improve support available example logic identify predict execution slack propose field would make computation easier accurate another support mechanism would counter keep track processor unit power consumption voltage addition additional would make design effective experiment force select unnecessarily high voltage frequency set many code lack intermediate step six propose technique orthogonal approach advantage make effective complement exist help us work toward hardware collaborative power management scheme addition design framework methodology describe applicable emerge thermal control framework offer great promise adaptive power performance management future micro thank kim hazelwood helpful development design framework methodology also thank anonymous useful comment article support foundation graduate fellowship work also support part grant reference one use dynamic voltage scale workshop complexity effective design zero two g al dynamic frequency voltage control multiple clock domain ann press three f process cruise control clock scale dynamic power management l architecture synthesis embed case two press four v e dynamo transparent dynamic optimization system program language design implementation zero press five k er daisy dynamic compilation architectural micro top pick compatibility ann l computer architecture press six l al execution layer dynamic translator design support ann micro architecture press seven al pin build program analysis tool dynamic instrumentation program language design implementation five press eight q al dynamic compilation framework control energy performance ann press nine garnett infrastructure adaptive dynamic optimization l code generation optimization three press ten design implementation evaluation compiler algorithm energy reduction program language design implementation three press eleven f malik dynamic voltage scale limit program language design implementation three press twelve r al processor performance technology j vol seven two may thirteen al early experience olden l workshop parallel compute fourteen b field r hill slack maximize performance tech l computer architecture two press candidate university computer science department research interest include design control electrical engineer university student member professor electrical engineer university research interest include computer architecture focus mobile compute university university electrical engineer senior member member w clark professor computer science university research interest include computer architecture clock time digital clark engineer apply science yale university computer science university janapa pursue department electrical computer engineer university colorado boulder research interest include design dynamic code transformation deployment everyday compute computer engineer university dan assistant professor department electrical computer engineer department computer science university colorado boulder leader research group code transformation research interest include modern compiler optimization multithreaded multicore architecture design electrical engineer university principal engineer corporate technology group lead research team compilation dynamic binary research interest include computer binary micro dynamic security safety enhancement via compiler binary tool computer science state university member lee president wireless technology previously work participate work describe article research interest include compiler technology network semiconductor fabrication lee mechanical engineer university brook assistant professor computer science university research interest include power model design hardware embed computer brook university southern university electrical engineer member direct question comment article computer science university information compute topic visit digital library