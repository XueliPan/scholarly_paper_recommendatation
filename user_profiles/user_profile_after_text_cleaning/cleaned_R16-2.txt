voltage smooth characterize mitigate voltage noise production via thread schedule janapa kim smith brook advance micro research university smith become dominant challenge design voltage variation especially daunt happen rapidly measure characterize voltage variation run r duo processor sense voltage processor run multithreaded determine average supply voltage swing processor far processor operate voltage margin large guarantee correctness penalize performance power efficiency investigate quantify benefit design processor rather voltage swing assume mechanism protect infrequently occur large voltage today resilient design could yield performance also show future gain could lose increase voltage swing intensify frequency characterize activity lead voltage swing within multicore show thread phase different program mitigate error recovery future resilient processor design inductive noise error resiliency voltage droop thread schedule hardware reliability introduction device feature size scale operation strict power performance become challenge presence parameter process thermal voltage require processor operate large operate guarantee correctness condition rarely occur level robustness come cost lower processor performance power efficiency era processor design supply voltage variation emerge dominant problem aggressively use clock gate reduce energy consumption nonzero impedance power delivery network combine sudden current due clock gate along activity change lead large change supply voltage run time voltage beyond operate margin lead time processor must always avoid voltage operate margin must large enough tolerate absolute voltage swing today production use operate voltage nearly nominal supply voltage work do v j student fig voltage noise increase future fig need noise inefficient trend indicate need grow order accommodate worsen voltage swing processor performance power efficiency suffer even greater extent today fig show swing future relative today process voltage swing double technology node fig summarize performance degradation associate show voltage margin today node translate loss peak clock double voltage swing imply loss peak clock frequency owe increase circuit sensitivity lower therefore operate voltage sustainable long run industry recognize trend move towards resilient processor design rather set operate voltage margin accord extreme activity power virus relax operate voltage margin typical level voltage swing emergency circuit dynamically detect correct time way use aggressive maximize processor performance power efficiency bowman al show remove operate voltage margin lead improvement clock frequency abundant recent work architecture recent circuit reflect impend paradigm shift architecture design resilient processor architecture design still paper focus understand benefit infancy power delivery package assume gradually scale accord study package response current stimulus go subsequent stimuli inversely proportional power budget detail ring oscillator consist technology nod voltage supply technology peak frequency design use sense silicon voltage duo processor perform program analysis characterize voltage noise production processor find indicate aggressive could enable performance gain however gain sensitive three critical factor cost aggressive margin program improperly set first two machine lead degrade performance sometimes even beyond conservative design characterize design space illuminate future resilient processor need logic maintain benefit resiliency build recovery scheme require intrusive change traditional architectural structure add die area cost addition complicate design test validation order alleviate complexity propose thread schedule layer allow leverage recovery scheme enable reduce rat assume hardware provide study efficacy thread schedule anticipation large voltage swing project future voltage noise trend reduce capacitance exist processor develop solution mitigate voltage noise begin understand activity within processor lead voltage swing study voltage noise real processor enable reveal publish simulation use stimulate processor highly specific miss branch examine quantify effect various stall voltage noise instance pipeline flush cause single branch cause voltage swing time idle machine multicore execution lead voltage noise interference processor experience increase swing core active run therefore either need greater multicore multiple core active simultaneously system need tolerate frequent error however effectively noise compatible thread together across core dampen swing base understand relationship stall voltage swing construct metric call stall ratio enable layer infer noise activity use exist hardware performance counter also explain existence voltage noise phase like program execution phase recur pattern voltage droop overshoot activity response change behavior summary paper characterize multicore noise activity real chip present rigorous study identify benefit resilient design voltage noise provide mechanism dampen voltage noise future processor underlie enable follow measurement extrapolation tap two unused package pin sense silicon voltage demonstrate validate ability study processor voltage noise activity real execution unintrusively moreover break package amplify magnitude voltage swing production processor extrapolate study voltage noise future characterization voltage noise combine noise measurement setup handcraft hardware performance counter study activity within processor lead large voltage swing mitigate voltage noise via thread schedule take advantage voltage noise phase propose investigate demonstrate benefit thread smooth voltage noise multicore chip simulation result thread schedule reveal alleviate error recovery future resilient architecture design sec explain sense voltage production processor operate regular environment use setup study resilient architecture design condition sec challenge identify lead us towards understand activity within cause voltage fluctuate turn motivate us evaluate thread schedule sec mean dampen voltage noise multicore finally conclude paper remark sec v measurement extrapolation introduce new methodology measure voltage production processor unintrusively explain sense voltage use rather rely specialize equipment validate experimental setup reconstruct impedance profile system compare data well past literature use setup describe new mean extrapolate voltage noise future remove package work chip finally show determine operate margin processor use previous voltage swing do primarily use either custom voltage transient test tool kit simulation approach severe prevent us observe voltage noise real processor run full program operate production tool replace processor encompass package platform validation purpose test connect voltage pin via low impedance path use v v b sense voltage use differential probe ultra low load c measure sense voltage use oscilloscope gather oscilloscope data use external system connect network fig measurement setup sense measure voltage within processor execution time harness enable limit characterization voltage noise phenomena like resonance manual external current stimuli require custom hardware publicly available since tool replace processor impossible correlate program execution activity voltage noise system simulation overcome limitation integrate processor package model power consumption model simulation primary vehicle voltage noise research past several however analysis via simulation suffer like length program execution one study extent model representative real moreover integrate simulation focus single core execution model today multicore era important characterize effect across core lead voltage noise benefit setup describe allow us measure voltage within processor without special experimental even importantly setup allow us run entire suit real program completion rather rely simulation observe activity millions best knowledge nothing publicly know noise real run actual production especially multicore processor study r duo processor platform methodology framework describe serve basis evaluation throughout rest paper constrain analysis processor setup general methodology extensible system well methodology unintrusively sense voltage near silicon isolate low impedance processor pin processor package expose two pin processor power grind v v respectively pin typically exist validation reason allow sense test voltage control voltage transition dynamic voltage frequency scale thermal power management fig illustrate connect sense measure gather data pin go order ensure minimal measurement error maintain high signal fidelity use measure impedance b impedance data fig measurement validation compare impedance derive machine versus well establish data differential probe sense voltage oscilloscope measure probe data high frequency match probe scope store measure read memory use highly compress histogram format internally support therefore allow us gather data several correspond activity several commit program well beyond simulation reach every interval remote data collection system transparently gather scope data network validation order validate experimental methodology construct impedance profile duo system compare data impedance plot show relationship current voltage noise see fig use study noise processor typically voltage regulator module package rely information build robust power supply match need processor follow methodology prescribe construct impedance profile chip however replace generation technique loop run processor loop consist separate draw draw instruction sequence al explain determine amount current individual draw leverage technique determine set use within loop body across modulate execution activity loop control current draw frequency fig impedance profile construct use approach system two important validation relative compare impedance data p b p c p p e p f p g p h p p j p k p l p p n p p p p q p r p fig f land side processor show package remove extrapolate voltage noise g l capacitor value manner chip alter white box cross correspond remove r voltage droop response reset signal point observe first impedance peak around resonance frequency match large body prior work describe typical power delivery network second small graph embed within fig correspond appropriately previously publish data measure result default cap fig closely correspond result within scale graph conclude validation experimental setup utilize b study future voltage swing grow future processor extrapolate study effect resilient architecture design amplify voltage noise production processor reduce package capacitance cautionary note reader manner remove package capacitance translate absolute representation voltage noise look like future nod gross estimate may nonlinear effect consider nevertheless technique suffice heuristic resemble trend line fig method suffice approximately study effect voltage noise future across diverse range observe full program use real processor basis ship capacitance dampen voltage swing reduce impedance power delivery network externally visible land side package processor see fig since voltage product current impedance give current stimulus particular frequency magnitude voltage swing smaller smaller overall impedance package capacitance decrease impedance increase cause much voltage swing within processor magnitude activity fig quantify relationship package capacitance impedance system experience much impedance across frequency range see line correspond reduce cap figure system much smaller impedance see default cap system peak impedance well damp whereas time much reduce cap decap removal remove create range five new show decrease package capacitance identify successive use subscript follow word describe amount package capacitance leave behind decap removal instance p retain original p retain original package capacitance decap removal verify operational stability subject one aggressive test use program stress processor execution continuously monitor execution processor package contain different capacitive decap removal determine individual value show fig identical value share color white box illustrate manner alter processor lower capacitance instance eliminate remove half kind capacitor effect determine impact decap removal voltage swing stimulate processor reset signal reset turn processor cause sharp large sudden change current activity reset processor idle run idle loop operate system since impedance across p p vary differ level package capacitance magnitude voltage swing also vary response stimulus oscilloscope screen correspond different core supply moment reset signal measure use experimental setup previous section p fig experience sharp voltage droop brief amount time voltage quickly recover package capacitance progressively decrease go p package capacitance altogether p voltage swing get also extend longer amount time p experience drop several cycle fig lead time prevent processor even boot however processor fail stability test fig summarize voltage swing across relative p safely normalize data swing idle machine across negligible however noise diverge activity occur fig show one instance divergence response reset trend figure roughly fig knee curve around p p rely future nod p representative today c margin margin voltage tolerate transient voltage swing minimum voltage execution error occur work discuss performance result utilize aggressive voltage rather utilize therefore need determine lower margin duo processor margin approximately nominal supply voltage order determine value progressively processor maintain clock frequency ultimately force processor functional error detect processor fail multiple copy power virus voltage fig across show swing fig cumulative distribution voltage sample across program noise production section discuss voltage noise program run completion use experimental measurement setup section summarize noise profile multithreaded prior provide analysis later section section cover extent operate voltage absolutely necessary follow motivate evaluate aggressive voltage design analysis include p p p therefore characterize design context today also project future operation operate voltage margin overly conservative determine run experiment include spectrum spec parsec program consequently believe draw comprehensive investigation representative production bias towards favorable outcome fig show cumulative histogram distribution voltage sample p plot deviation sample relative nominal supply voltage line within graph correspond run voltage droop large see min droop marker therefore margin necessary however occur infrequently voltage sample within nominal voltage marker fig identify range small fraction sample lie beyond region although magnitude overshoot also large see overshoot significantly less frequent especially future nod therefore primarily focus droop b design operation optimize condition rely mechanism handle three critical factor determine performance operate voltage margin set cost roll back execution voltage voltage margin fig typical case improvement across range recovery cost p show substantial room voltage fig swing future increasingly slant compare p see fig voltage noise grow p b p section evaluate factor influence peak performance performance model order study relationship critical inspect performance gain allow voltage since analysis base current generation processor support aggressive model performance resilient system give voltage margin every emergency trigger recovery penalty processor clock cycle execution record number determine gather scope histogram data execution compute total number cycle spend recovery mode cycle add actual number program cycle gather cycle count aid hardware performance counter use combine number performance lose due allow penalize performance extent utilize aggressive voltage margin boost processor clock frequency therefore net gain bowman al show improvement operate voltage margin nominal voltage translate improvement clock frequency assume scale factor performance model tighten voltage margin alternatively could use improve lower dynamic power consumption recovery cost fig show performance improvement range voltage assume specific recovery cost recovery cost reflect prior work razor pipeline error detection recovery mechanism recovery penalty clock cycle leverage exist queue reorder buffer modern delay instruction commit long enough verify whether emergency occur typical delay around cycle al propose scheme predict use program activity rely optimistic mechanism guarantee correctness current production typically take clock cycle complete recovery alternatively recovery compute also emerge possible exploit inherently statistical nature tolerate without hardware fall criteria therefore target general case hardware robustness must optimal order resilient architecture design operate successfully aggressive margin optimal margin must exist margin necessary design processor towards specific design point presence diversity fig data average program run include multithreaded exhaustive combination sweep pair every every suite despite heterogeneous set execution profile find possible pick single static optimal margin one performance peak per recovery cost otherwise would see multiple maxima complicate trend note unique optimal voltage margin however find range optimal small across although possible achieve even better result per basis methodology likely negligible least relative gain fig every recovery mechanism optimal margin depend cost recovery mechanism gain vary recovery relax optimal scheme aggressive consequence able experience better performance however overly aggressive set operate voltage margin beyond optimal cause rapid performance degradation occur frequently penalize performance thus benefit begin diminish recovery high even push beyond original conservative design ie margin duo correspond improvement refer dead zone diminish gain extrapolate benefit resilient design future nod use p p anticipate alarm decrease correspond performance gain diminish gain due worsen voltage swing future experience many compare p identical fig show distribution margin optimal cost voltage voltage spread p b p c p fig performance improvement design use various recovery cost voltage margin voltage sample around typical case margin p p notice sample p pack tightly around nominal p also line tightly bind together today p system voltage sample fall comparison sample violate margin p p respectively quantify impact illustrate diminish gain performance better rely fig include additional comprehensive sweep error recovery cost versus operate voltage intensity correspond amount performance improvement see large pocket performance improvement p voltage margin quickly diminish go p p compare blue region fig fig fig respectively retain level performance improvement today p require future make use recovery instance fig could use recovery mechanism p reap improvement performance p would achieve tenfold reduction recovery cost implementation p require even cycle per recovery maintain improvement problem implement recovery severely intrusive razor scheme require invasive change traditional structure moreover add area cost make design validation even complicate already today therefore advocate mitigate cost investigate hardware guarantee major benefit recovery form already ship today tolerance moreover emerge leverage reuse hardware task test way aid efficient typical case design c understand droop overshoot first step towards mitigate error recovery via understand activity lead voltage noise stimulate one core within p duo processor highly specific ways use quantify perturbation effect independent individual processor nominal supply voltage subsequently extend analysis multicore even act isolation within core interfere across core lead much voltage swing single core stall lead voltage swing quantify effect handcraft follow processor stall cache miss translation buffer miss branch run loop activity recur long enough measure effect core voltage demonstrate exhibit steady repeatable behavior fig snapshot core voltage processor experience miss switch frequency voltage regulator module background activity embed within recur voltage spike correspond miss cause voltage within processor swing stall execution momentarily cause large drop current draw result finite impedance power supply network voltage shoot nominal value processor may also experience correspondingly strong voltage droop follow initial overshoot consider cache miss event time take service miss pipeline activity ramp current drop voltage overshoot miss data become available functional become busy surge current activity steep increase current cause voltage droop magnitude voltage swing vary depend type event summarize across relative idle system fig idle system observe ripple therefore voltage overshoot droop distinctly noticeable measurable mi fig miss cause overshoot fig effect supply voltage fig impact event interference across core case fig show branch amount voltage swing compare maximum voltage swing time multicore activity across core cause interference lead transient voltage swing much use set characterize effect simultaneously run multiple processor core run one specific capture magnitude swing across entire chip core share power supply source fig effect interference across two core normalize magnitude swing relative idle machine correspond core core core active voltage swing worsen maximum swing fig whereas test increase context conservative design allocate sufficiently large tolerate absolute swing increase imply proportionally necessary compensate amplify voltage swing multiple core active number core per processor increase problem worsen within context resilient design rat go however maximum voltage swing vary significantly depend couple across core depend pair chip may experience either constructive interference destructive interference context paper constructive interference amplification voltage noise destructive interference dampen voltage noise relative noise one core active swing discuss example constructive interference occur core run pair event event always lead smaller swing sec iva show example destructive interference swing two core simultaneously active smaller single core execution constructive interference problem multicore since individual core within processor typically share single power supply therefore transient voltage droop anywhere share power grid could inadvertently affect core droop sufficient emergency processor must initiate global recovery across core recovery come hefty price performance degradation therefore mitigate voltage noise multicore especially important mitigate voltage noise order smooth voltage noise multicore mitigate error recovery section investigate potential voltage thread technique hardware provide guarantee recover reduce frequency invocation thereby improve performance reduce rollback recovery way thread schedule complementary solution hardware due lack exist hardware analytically model investigate solution thread schedule voltage noise different schedule policy motivate call droop focus thread across core minimize droop technique exploit voltage noise phase introduce discuss first demonstrate schedule thread performance finally demonstrate thread enable rely recovery scheme provide error tolerance rather invest complex scheme typically suitable versus commodity everything section build towards ultimate goal improve efficiency future use p processor voltage noise phase similar program execution phase find processor experience vary level voltage swing activity execution assume voltage margin purely study focus widespread future may kim al show design fact worsen voltage noise similarly processor test split versus power supply find voltage swing much core operate independently relative idle os voltage swing b c fig droop activity complete execution program show phase like experience simple well complex phase respectively fig droop activity show heterogeneous mix noise level along correlation stall b noise phase droop strongly correlate stall ratio visually observe relationship voltage droop activity stall overlay stall ratio droop per cycle quantitatively linear correlation coefficient droop stall ratio high correlation performance counter data order voltage noise imply applicable voltage noise thread mitigate voltage noise combine different noise phase together goal generate destructive interference however must carefully since could also create constructive interference demonstrate effect setup slide window experiment depict fig resemble convolution two execution one program call prog x tie core run uninterrupted program completion execution spawn second program call prog onto core however program allow run completion instead prematurely terminate execution second immediately relaunch new instance correspond run run run n fig repeat process prog x complete execution way capture interaction first second program prog voltage noise phase within prog x periodically analyze effect take prog complete system two core prog x prog together maximize run thread count keep core busy evaluate setup use fig show run ie second core idle relatively flat noise profile however constructive interference occur slide one instance another instance see constructive interference fig time frame droop count nearly double around per cycle destructive interference well start execution second execution number droop version even though core actively run expand analysis entire spec suite find destructive constructive interference behavior exist characterization purpose fig show droop per cycle across three different plot average interval use margin since activity correspond idle machine fall within region thus allow us cleanly eliminate background operate system activity effectively focus voltage noise program test amount phase change vary program program experience phase effect noise profile stable around droop per clock cycle contrast go four phase change voltage droop activity vary per clock cycle lastly go complicate phase change fig oscillate strongly frequently droop per cycle every several second voltage noise phase result change stall activity program execution quantify voltage noise vary time use metric call stall ratio help us understand relationship processor resource utilization voltage noise stall ratio compute counter measure number cycle pipeline wait stall reorder buffer reservation station usage drop due long latency cache miss even branch provide elegant stall ratio event track activity fig show relationship voltage droop stall execution window across window start begin program execution droop count vary noticeably across program indicate heterogeneous mix voltage noise even interestingly per per per stall ratio setup experiment b noise profile c noise profile fig setup study voltage noise phase b voltage noise profile run single core core idle c noise profile instance per setup c schedule noise versus performance active area research development multicore manage share like processor cache prior work area focus optimize resource access share cache structure since similarly processor supply voltage share resource multicore system multiple core share common power supply source voltage emergency due one core activity penalize performance across core global necessary therefore power supply performance improvement well intuition behind thread schedule voltage noise activity one core stall voltage swing sharp large drop current draw maintain continuous activity adjacent core also connect power supply thread schedule dampen magnitude current swing way prevent emergency either core stall schedule voltage noise different schedule performance schedule performance typically involve improve miss rat reduce cache stall since stall voltage noise correlate one might expect performance schedule mitigate voltage noise well interference data fig point uncore lead vary voltage swing additional must take account therefore propose new schedule policy call droop focus mitigate voltage noise explicitly reduce number time hardware recovery mechanism trigger decrease number thus reduce associate performance due lack resilient hardware perform limit study schedule approach assume oracle information droop count simulate compare schedule policy per cycle base schedule use sensible use schedule since measure system throughput maximize throughput moreover fig show apparent preferential bias towards either minimize maximize droop droop activity spread uniformly fig droop variance across single core dual core schedule recovery expect optimal cost cycle margin improvement pass tab design analysis optimal schedule well fig illustrate range droop program every program circular represent voltage droop per cycle one instance run ie noise activity triangular correspond droop count two instance run together simultaneously commonly know destructive interference present data even fall noise activity exception destructive constructive interference observe across entire suite relax definition destructive interference multicore room improvement expand become comparison half opportunity perform better destructive interference fig confirm room dampen swing sometimes even enough surpass noise activity processor operational viewpoint mean run processor utilize aggressive even multicore contrast nothing do mitigate voltage swing multicore analysis sec indicate need grow run prog x core prog run per per time offset good bad per fig policy impact droop performance relative fig increase number schedule tab pass entire suite make suitable comparison normalize analyze result relative droop count since remove inherent focus benefit evaluate different setup batch schedule experiment job pool consist pair program enough saturate dual core system pool schedule interval choose combination program run together base active policy order avoid preferential behavior constrain number time program repeatedly choose constitute one batch schedule addition deterministic droop schedule also evaluate random schedule schedule experiment require knowledge run phase gather data necessary across program droop continue use hypothetical voltage margin track number emergency occur execution use ratio feature gather data program combination fig show result test marker correspond one batch schedule four fig helpful draw ideally want result since imply droop better performance good performance bad performance droop good droop bad performance random schedule worst random run cluster close center graph effectively mimic also uniformly distribute respect noise compare schedule give better performance however since completely unaware droop activity marker approximately average droop value random schedule droop policy aware voltage noise therefore able minimize droop case also see slight improvement performance reduce recovery voltage noise grow severe become harder resilient meet design target tab illustrate point p processor recovery cost table contain optimal margin associate performance improvement aggressive margin margin system experience maximum performance improvement design ie duo processor margin determine analyze performance across test setup meet target voltage swing get frequency increase lead error turn penalize performance constrain analysis multicore subset trend become apparent examine across different recovery cost recovery cost schedule meet expect performance criteria word pass recovery go beyond cycle number schedule pass quickly diminish multicore system thread improve number schedule pass demonstrate run droop schedule performance model see sec determine number schedule pass across suite fig summarize result recovery cost droop schedule perform well increase number pass schedule respect schedule lead improvement since reduce number cache stall mitigate emergency however target cache alone insufficient eliminate significantly reduce interference across core therefore scheme diminish see decrease trend line comparison droop schedule consistently outperform cycle beyond see emerge trend line emphasize droop schedule perform better cost indicate intelligent voltage thread schedule necessary mitigate recovery especially scheme however may beneficial incorporate awareness well since performance benefit therefore propose balance performance metric sensitive recovery cost value n small scheme since recovery penalty relatively small fraction performance bottleneck case weigh heavily likely lead better performance contrast n bigger compensate recovery coarse random droop increase cost cycle droop grain scheme way attempt maximize performance even presence frontier lower quadrant fig illustrate range improvement case metric useful implement different grade recovery scheme base class processor typically use recovery scheme despite implementation therefore smaller recovery penalty commodity like likely rely metric allow dynamically adapt recovery cost v conclusion duo processor show voltage noise dominant issue future design condition increasingly compromise performance power efficiency resilient design optimize rather operation back hardware become essential emerge design hold great promise short term outlook doubtful grow voltage swing lead frequent voltage overhead become major performance bottleneck show increase number core per processor make voltage noise worse noise interference among core constructive voltage noise altogether irregular destructive interference smooth supply voltage recur stall behavior produce periodic voltage noise phase base demonstrate via simulation thread multicore mitigate thread know interfere destructively thank industry specifically many contribute work grateful anonymous work fund gift national science foundation grant find express material author necessarily reflect view reference n jam al comparison supply al understand voltage chip use distribute network date international technology process structure w al predictive technology model early design exploration k bowman al detection instruction recovery circuit dynamic variation tolerance de al relax architectural framework recovery hardware fault al razor pipeline base time speculation micro al delay commit rollback handle inductive noise b al design time lation grind al architectural core salvage multicore processor tolerance bull al arm processor use detection correction transient error tolerance adaptation variation j al resilient adaptive core dynamic variation tolerance voltage processor power delivery de sign socket al platform impedance charac use tool al approach handle inductive noise date al pipeline muffle current ramp architectural reduce inductive noise exploit resonant behavior reduce inductive noise al design validation power delivery circuit digest technical paper symposium k al power delivery technology journal r al control eliminate voltage high performance core extreme processor duo processor series v al instruction level power analysis optimization signal process k al correlation power delivery network impedance system power supply impedance profile measurement use clock gate c al parsec suite characterization architectural pact v j al voltage emergency prediction approach reduce voltage al design micro n r al stochastic computation h al n j wang al restore soft error detection dependable al continuously record program execution deterministic replay w kim al system level analysis fast use switch al symbiotic job schedule simultaneous processor operate system schedule chip multithreaded dissertation j mar al contention aware execution contention detection response r al use os improve performance multicore micro al address share resource contention multicore via schedule al predict cache contention chip architecture f j al predictable performance synergy os