improve error report use ha j v e e porter l department computer university abstract error occur complete request action result problem input configuration environment error report allow user understand correct problem unfortunately quality error report decrease become complex layer take cryptic error message give program struggle fix use search support improve error message receive ambiguous otherwise insufficient error indicator component introduce clarify system improve error report application behavior clarify use minimally invasive monitor generate behavior profile summary program execution history machine learn classifier use behavior profile application behavior thereby enable precise error report output application evaluate prototype clarify system ambiguous error message generate large modern like latex kernel performance cost less one user kernel prototype correctly least application result ambiguous error report accuracy degrade significantly clarify classifier latex error message less accurate classifier latex error message finally show without human effort build classifier clarify provide support experience problem tell five might problem average five clarify identify experience problem subject distribution maintenance enhancement enhancement general term documentation management reliability support error report profile classification machine learn permission make digital hard copy part work personal classroom use grant without fee provide copy make distribute profit commercial advantage copy bear notice full citation first page copy otherwise republish post redistribute list require prior specific permission fee seven june san copyright c introduction one bad error report inconvenience large part modern support cost come time waste bad error message define message provide sufficient information user fix problem timely fashion one recent study conclude percent system administrator time may spend follow blind suggest poorly construct unclear message six time require administer modern compute cause cost administrate configure update machine surpass cost hardware improve error report keep computer ownership cost improve satisfaction error error behavior program behavior successful completion task specify user include bug program match program specification also error program fail consistency check user enter bad input system program produce error report usually text message box inform user request action complete crash program output null error message user must interpret error report figure get program complete request often resort search support like information consider follow model error report give application set e set r error report unfortunately one element r correspond multiple e e error report often ambiguous across multiple cause example operate system use return code signal diverse error condition attempt create file whose name already exist directory attempt put rule rout table conflict rout table current state define set statistics application r r could uniquely determine proper e e even though r alone fail fact r might need alone might suffice introduce clarify system improve error report clarify consist two part monitor component classifier interpret output clarify monitor program use minimally invasive like read program memory count function call clarify output behavior profile clarify collect behavior profile generate program experience particular error train machine learn classifier recognize application error also clarify monitor application black box component clarify deploy behavior profile b behavior classification model construction train behavior profile machine learn algorithm human label profile machine learn classifier better error report figure one clarify consist monitor classifier represent process consume produce data clarify monitor component generate behavior profile summarize execution history component section show machine learn classifier train behavior profile section b show train classifier behavior profile produce improve error report write improve error report describe error behavior fix work around e e classifier train do small minority clarify support engineer reproduce user get improve error report behavior profile clarify reduce problem improve error report problem error figure one show major clarify classifier time component execute clarify generate behavior profile behavior profile include information control flow data value program execution simple behavior profile would include count function execution count often function return zero train machine learn classifier happen section figure one machine learn algorithm take label behavior profile input produce classifier classifier take behavior profile input output label label could error code lengthy description problem resolve classifier improve error report train classifier recognize specific generic error report label data available clarify employ support method pair experience similar nontechnical get improve error report clarify section b figure one clarify behavior profile give precise information error resolve machine learn classifier use feature behavior profile determine error classification feature value particular statistic like number time function decode audio frame call execution player application value zero indicate error audio frame ever play paper system combine monitor machine learn novel way improve error report new profile technique call profile represent accurately average exist profile function profile path profile evaluation clarify prototype large mature program currently produce unclear error message confuse error behavior compiler operate system evaluation include deployment clarify introduction support pair experience problem next section provide example use clarify motivate design present section section six describe ambiguous report section seven contain evaluation clarify prototype section eight review relate work section nine conclude two improve error report clarify example section provide example elucidate motivation clarify benefit example also provide motivation section discuss clarify design section clarify scenario popular player write joe draw include many support limit support forum mail list notification new release additionally invite joe draw directly support forum many request help zero reply recent request include title problem play sound tend fail without print diagnostic message imagine two grandpa use clarify improve error report assume post message play grandpa post sound problem note user name change post subject line figure problem want donate solution support community use clarify find audio data corrupt indeed run without produce audible output problem could occur store file flash drive fail clarify enable grandpa nontechnical user benefit diagnosis technical step one clarify assume grandpa ie already link clarify modify application make produce behavior profile require source code reasonable assume distribute along standard distribution channel step two collect behavior profile clarify run corrupt file interface simple fail query user go wrong enter produce sound output due corrupt audio frame data source file check file content probably corrupt binary problem description behavior profile generate fail support site step three train classifier moderator support site would read error description group behavior profile profile experience problem human loop ensure language error report clear understandable guard malicious inept less central authority desire peer reputation system replace human moderator support site moderator build new classifier behavior profile submit need profile build many manage classifier build every new error report build day step four use classifier instead post sound support forum grandpa run binary grandpa fail hear sound hit special help key behavior profile support site grandpa behavior profile provide detail error description tell file corrupt data discussion program behavior clarify enable user community improve support also enable improve support build distribute label problem report vista documentation new problem report control panel item say ask provide additional detail problem create solution provide eighteen clarify scenario present computation occur server classification happen client client latest classifier definition server might periodically connect server classifier update like modern virus checker update virus definition file information cache locally client diagnose without connect network treat like black box change error report generate source code maybe change would accept joe draw timely fashion maybe program develop people commercial difficult impossible change example motivate follow question ad dress succeed section feature collection section three information clarify collect section describe content behavior profile deployment security section four grandpa run minimally instrument executable fast enough daily use produce behavior profile sufficient detail currently know contribution support site mean grandpa figure kind listen minimize human effort section five clarify give address grandpa even contribute label even figure problem detect similarity user even without train machine learn classifier behavior profile assume also profile classifier train diverse usually generalize better one train homogeneous section measure many label profile necessary train accurate classifier experiment require profile per error type three behavior profile clarify collect expressive feature cost expressive feature machine learn algorithm use discriminate different error robustly intuitively expressive feature capture detail control flow important data value cause particular er behavior profile key function path caller predicate return value predicate value time call time invoke time occur time execute time execute count table one summary type feature collect clarify behavior instance incorrectly format pass web browser correlate execution function attempt every possible interpretation input declare error program often one might think execution indication error behavior however highly mature factor program like reuse code purpose produce warn correct compilation every program examine simple error condition execution give function presence give return code hold clarify collect feature count use code instrumentation require source code recent like three static dynamo rio four eleven dynamic instrumentation like instrumentation tool sun thirteen dynamic provide opportunity insert small amount instrumentation code operate system low cost clarify must limit number feature collect error behavior usually correlate small number feature collect large number feature require machine learn algorithm winnow large set feature relevant feature push limit many machine learn often cause address space exhaustion unreasonable section discuss clarify strategy collect information control flow data value control flow clarify count feature relate control flow control flow good indicator program behavior general information clarify collect control flow accurate model program behavior accuracy come price greater memory overhead one form behavior profile count execution function call sit another count use path profile five encode information control flow expensive collect function count clarify also introduce new profile method call profile summarize call behavior function caller call behavior contain control flow program represent less intensive gather clarify use count count preserve rare often program make unique sequence function call output cryptic error report crash clarify use unique call signature behavior use figure two example profile leave side diagram rightmost dynamic call tree point direction function call right side feature collect function c return feature combination call sequence function c caller event eight penalize importance rare code especially program run long time evaluate number approach behavior profile different performance overhead level execution detail function profile first method use function profile sometimes call function call profile function counter function execute order function call retain function profile efficient tend accurate behavior set unique function associate second method profile similar counter associate call site rather call target direct call differentiate among call sit path profile third base behavior profile method path profile describe ball five program path within procedure unique sequence basic block counter path execute path profile distinguish amongst program result different control flow within function control flow something function profile profile fourth base profile technique profile since function program one process step dynamic call tree good representation program behavior however size whole dynamic call tree enormous impractical use classification directly count number time particular call sequence occur current function caller count sequence every function return loop approximation depth two call tree figure two show example dynamic call tree pattern count arrow indicate call direction leave sibling call right sibling tree show call b b may call function behavior ignore call c c call e function c return call pattern c c e call pattern c caller b c therefore one counter entire pattern c caller c e b c implement efficiently function get correspond call site function reduce number use bite assign per basic block call basic block happen order share basic block call together single path function return counter concatenation function caller also counter loop clear current function way remain compact path profile able preserve information within function preserve information call context concatenate caller order function call decode graph distinct call context tree two respect call sequence experimental result section seven show support high classification accuracy data data value provide robust characterization error behavior though implementation greatly increase number feature thereby cancel benefit instance associate return value call sit clarify count call site return value pair function distinct return value increase number feature encode increase complexity classification task considerably machine learn performance accuracy confront large number feature predication standard technique reduce feature space data value define nine predicate apply clarify data return value predicate map raw value feature value predicate indicate whether raw value equal zero equal one one small large positive negative integer pointer stack heap small large positive negative arbitrary value absolute value less small value absolute value greater neither stack heap pointer large profile predicate return value profile predicate return value count pair call sit predicate return value return one hundred time return one feature large count feature equal one count one stack scrap stack scrap behavior profile rely dynamic data value execution instance rather control flow insight behind stack scrap stack contain control flow history form return address residual memory current stack pointer status information like function return cod moment program return error code execution pause range memory allocate program stack traverse feature vector represent instance execution create apply predication word stack range representation trade fidelity convenience compactness compare control flow scraper obtain stack heap bound dynamically differentiate stack heap stack scrap unique clarify feature source require instrumentation source program impose little overhead also least accurate feature source four deployment issue section discuss different deployment clarify address security issue clarify deployment forensic live clarify deploy two ways improve error report program give live deployment improve fix set error report forensic deployment live deployment instrument entire executable sacrifice performance collect data entire application behavior forensic deployment collect data know help fix set error report security clarify improve support raise security issue would like keep data way use private want divulge information structure control flow support history product current support suffer problem vista new control panel item call problem report seventeen refinement current support program malfunction send partial memory dump send user better error report however dump send contain arbitrarily sensitive data credit card information privacy statement currently discourage concern privacy use service sixteen clarify decision tree evaluate clarify behavior profile way learn information relate error nothing support history control flow application vendor provide decision tree learn nothing user execution security detail separate paper nine system allow tree nod attribute securely evaluate second computation vendor second computation time fifteen user five minimize human effort clarify require label generate faulty error report order train machine learn classifier even without classifier clarify help describe support execution mode clarify use classifier section next describe distribute work label profile among support community nearest neighbor support clarify need certain number label build accurate machine learn classifier exact number quantify section train classifier clarify use search match similar behavior profile instance give address support user problem understand send behavior profile site run clarify site return five opt system likely experience application behavior system might give particular address three time take step make sure overwhelm put list result section show search sometimes highly effective accurate general build classifier label behavior profile clarify classifier must build label behavior profile three ways label do support organization label approach human resource intensive provide label label profile distribute work across many people enable malicious inept add noise form incorrect label grade support staff peer reputation like do current support support engineer write script generate many variant input problem input exercise problem share label use method evaluate clarify require input guarantee accurately model input six clarify intend improve error report complex evaluate clarify choose common program nonexotic error condition lead mislead nonexistent error message common provide shoddy error report make clear motivation clarify also use clarify program span boundary contain code interact kernel interaction across protection boundary create challenge error report due fix difficulty pass memory object across boundary section summarize problematic report explain behavior underlie error underlie behavior clarify intend discover program gnu c compiler popular compiler contain automatically generate source code experiment use version execute compiler phase use file output draw pool file kernel distribution corruptor script randomly modify correct source code exhibit mistake four error class add semicolon else clause cause compiler fail else omit close curly bracket switch block cause end file error deletion semicolon yield generic syntax error often different line remove semicolon misspell also generate generic syntax error error class result confuse imprecise error message player three failure file format error try play file corrupt tag store format tag artist name corrupt frame frame data corrupt clarify classifier distinguish three failure normal execution application give consistent error message error case latex latex typeset program widely use research community error report know obscure rubber tool filter latex output make comprehensible user however many latex error message generic many vary root cause make difficult understand go wrong fix latex ambiguous error case many summarize describe one illustrative example fifteen contain explanation class table array separator character latex print obscure error message extra alignment tab change latex book latex support recommend check number user receive error book helpful enough suggest miss end row symbol previous line forget double error report error report unique misuse cline command directive draw horizontal line table result message one cline refer nonexistent column table make cline mistake get error message almost support say due one two possible cause even though third possible error report bias likely leave user execute less likely scenario scratch head potentially long time kernel evaluate applicability clarify across boundary choose three depend kernel mount popular open source application packet filter network address translation packet mangle data structure user application interface error report interface kernel user simplify interaction kernel allow anyone create kernel module use error report infrastructure make error report interface rigid force kernel reuse error cod like code mean file user try create already exist new packet handle rule create conflict current rule ambiguity especially confuse attempt add new packet handle rule return string file exist default string error code c library first behavior class include misuse table produce generic invalid error second class misuse mark jump target third class absence kernel module necessary handle user request fourth error class use forward chain name exist kernel return error code last three class cause application print name control content kernel rout table similar report also use error report standard first error class add rout rule conflict exist rule second add address conflict exist address third entry conflict rout table entry produce error due bug kernel module error message first second error class answer file exist due use overload return code mount mount remote server complicate operation involve different kernel communication wonder error report generate mount cryptic first error class specify wrong port number produce unrelated error message support read second error class mismatch server client third error class server case mount program print program register mount er four five five four five seventy na na na na na na na na na table two size clarify behavior profile second third show number instance program number error class remain show number feature behavior representation show table since always nine feature kernel generate first two behavior profile due kernel instrument error message make sense remote procedure call daemon find proper program handle user request might obvious normal fourth error class version configuration mismatch server client test error message mismatch low version one high version two problem detect version mismatch error message report wrong version number likely confuse user diagnose problem complexity clarify table two summarize complexity clarify program least three ambiguous mislead error class one normal class ambiguous error class one normal class general accurate profile feature instance function latex call sit profile accurate function profile approximately equal number instance per error type distribution intend model frequency bug occur field rather train classifier distinguish among give case seven evaluation evaluate clarify accord four criteria accuracy performance train cost first clarify must correctly program share ambiguous error message accuracy summarize ratio behavior profile correctly total number profile section perfect classifier would correctly identify error scenario behavior profile validation classification model examine decision tree generate clarify section show tree test program feature intuitively correlate observe behavior accuracy clarify must come acceptable performance cost measure section successful deployment clarify system incur minimal overhead cost label expensive collect determine error type give instance require considerable human effort section show many label behavior profile require generate clarify classifier absence label data clarify employ algorithm pair experience problem section section show data use clarify deploy lab performance latex mount forensic six three ten eleven eleven live twelve seventy forensic eleven thirteen na na na live na na na table three slowdown program run clarify use forensic deployment know train live deployment new find deployment finally section examine accuracy clarify scale number error class robustness clarify demonstrate relatively high accuracy obtain latex class classification accuracy clarify use decision tree decision tree nest leaf correspond single class prediction advantage decision tree continuous like support vector machine ease interpretation possible engineer validate classifier base knowledge program structure context experiment clarify decision tree accurate although clarify instrumentation compute feature describe program execution task error message accomplish analyze feature see relatively small size high accuracy clarify decision tree contrast optimize entire feature logistic regression support vector yield model lower accuracy optimize subset feature rule learn boost decision stump yield find competitive decision tree figure three show accuracy user kernel several different behavior table report accuracy use cross validation standard technique evaluate partition five section classifier train test five time train four section data accuracy test remain fifth average five test report accuracy classifier decision tree build use implementation algorithm find weka machine learn package profile demonstrate best overall accuracy profile path profile accuracy every profile accuracy kernel accuracy help improve error report evaluate sample present result sample sample rate ten generous use sample example sample function count record one every ten function call uniformly random sample result stipple part bar achieve lower classification accuracy data almost every poor accuracy sample confirm intuition sample wrong approach program behavior clarify must sensitive rare table three show performance live forensic profile time run ram freely available static binary translator architecture experiment modify assembly code program count call sit exactly way binary modification tool would count know address single instruction counter reside memory map file result collect program termination run several input obtain run time long enough measure accurately compile file distribution decode frame file latex process five file total line average user time three remain row table three show run version kernel kernel behavior profile build use dynamic instrumentation package standard use expensive form instrumentation use collect function profile profile performance overhead low profile forensic live live deployment overhead profile modest less live deployment overhead much higher live deployment require instrument entire binary forensic deployment choose feature train run indicate necessary know set cheap collect reside function call infrequently use publish machine learn algorithm nineteen use train data find minimum cost tree whose accuracy within one tree increase performance live forensic dramatic overhead smaller begin reduction smaller forensic overhead program less one high cost kernel account higher overhead relative program forensic deployment effective mean deploy behavior profile like reasonable level performance cost verify machine learn model machine learn train without domain knowledge regard underlie semantics program behavior possible classifier fail miserably unseen data classifier examine feature semantically unrelated behavior make sure clarify use program feature intuitively relate examine several hand train use function profile profile player show figure four tree show behavior profile provide different clue classifier underlie behavior function profile tree compose simpler set rule depict control flow across four error class root tree function mad layer provide near perfect discriminative information error class mad layer routine part library call audio frame run since format among format support successfully decode audio frame library never call mad layer tag delete routine differentiate corrupt tag class tag parser library dynamically allocate memory represent tag free tag delete tag parse fail memory tag allocate since tag parse c r c c ninety eighty seventy sixty fifty c r c c ninety eighty seventy sixty fifty forty mount figure three figure show accuracy classifier use distinguish error case base behavior profile classifier build use different behavior profile function profile profile path profile profile profile predicate return value stack scrap figure also present sample function profile call site profile sample rate ten stipple lower bar stack entry succeed corrupt frame case tag delete never call free tag memory make absence discriminative class audio library default error handler error default use application specify one specify error handler presence function indicate corrupt audio frame absence indicate corrupt tag case finally perform subband frequency inversion odd sample line call frequently part normal process decode audio frame data corrupt frame function call less frequently decision tree algorithm find appropriate threshold value separate normal corrupt case decision tree build profile data combination data source function profile profile use presence library function decode frame side information call utility function mad bite read indicator successful audio frame decode lack call pattern reliably indicate file format error corrupt frame class differentiate normal class threshold value function call successful decode audio frame data discrete cosine transform function function scan encapsulate process read file rule decode wherein scan call function call number stream manipulation read mad timer set provide discriminative power combination similarly complex control flow pattern main corrupt tag error class decision tree node whose rule involve main get tag differentiate normal error condition handle tag decision tree node whose rule involve scan discriminate successful unsuccessful audio decode high level pattern expose rule combination fail tag parse successful audio decode precisely describe corrupt tag error class many label behavior profile need use clarify train label behavior profile label profile generally require human effort minimize general train label train instance result less accurate model class ten twenty fifty accuracy creation time table four accuracy time create classifier number increase latex section investigate classification accuracy amount train data use build classifier figure five plot classification accuracy latex function number instance use train include distinct error class algorithm use build decision tree surprisingly robust fifteen per class algorithm achieve accuracy look legend figure five see achieve accuracy within one maximum small subset train data require example need instance attain accuracy level within one accuracy reach use available per class human need label behavior profile individually train set use script induce program input produce large number train little human involvement however induce script necessarily accurate model clarify would see deployment section analyze clarify scale number error class increase latex unique error message evaluate behavior one third possible latex table four show model creation time classification accuracy scale number error class increase consider error class vary size size pick ten random error class run experiment curve show graph average result size see number error class increase accuracy drop decrease acceptable function profile profile figure four decision tree produce dot line take normalize count feature value less equal threshold solid line take greater threshold threshold determine automatically decision tree algorithm different node tree clear box feature feature normalize function count profile feature normalize count represent symbolic tree name bracket function name nod call tree shade box error class consider number increase factor eight train time model increase thirty eighteen number error class increase ten increase hinder since model train greater practical concern execution time need evaluate decision tree largely determine amount process do client end experiment show time execute model average maximum imperceptible almost application clarify scale nearly one hundred error without much loss accuracy substantial increase process time nearest neighbor support contrast decision tree use clarify rely small subset feature rely average feature example distance two instance popular metric use search function average square difference pair feature value c r c c e g n e c r e p ninety eighty seventy sixty fifty forty thirty twenty ten zero thirty ten zero ten twenty thirty forty fifty sixty seventy eighty ninety number instance per latex error class figure five curve show accuracy increase number train instance per error class increase latex class text graph give minimum number train instance need achieve accuracy within one accuracy obtain use train data mount na na na na na na table five absence label train data clarify use algorithm base feature scale table show expect number correctly neighbor search distance function particularly susceptible scale among various feature clarify feature take vastly different scale feature may count ten may upwards one million furthermore feature count function length program execution independent program execution example feature call many time longer file contain many particular construct shorter file section call roughly constant number time thus take value independent program execution length overcome scale challenge clarify employ linear feature scale method feature line fit correlate feature value correspond program execution length x define sum feature value give execution instance feature value normalize scale difference feature value fit feature value f x scale factor determine variance result feature one note feature correlation program length linear regression step effect final normalize feature value table five give expect number correctly neighbor nearest neighbor search return five neighbor eu distance use many class latex table five class accuracy search somewhat lower case number neighbor return deployment begin understand performance clarify deploy environment create version latex include static instrumentation small generate information deploy version latex user base six period three deploy version latex encounter distinct error input range seventeen error class able correctly latex error experiment limit unclear ambiguous message nearly fifty program behavior correctly much difficult small number error eight relate work first contrast clarify several appear similar clarify improve error report program behavior find program bug twenty one fourteen ambiguous error message return code might meet specification program standard error report clarify attempt find root program fault twelve program crash ten thirty seven aim application behavior help developer get better error report happen remainder section compare clarify problem diagnosis program behavior clarify help problem diagnosis program behavior problem diagnosis group research correlate system error report problem diagnosis forty clarify currently focus forensic terminology build model sequence system call clarify use data program allow deal involve user code also use sequence system call build model though model detect host system call good representation certain type program behavior many program make call spec every name system call wrapper function clarify detect system call detect function call wrapper function give input source determine program behavior statistical bug isolation correlate application behavior application behavior bug build model clarify statistical bug isolation require special compiler insert invariant check program clarify record small amount data continuously statistical bug isolation sample insert get good performance section demonstrate sharp loss accuracy clarify use sample statistical bug isolation must eliminate clarify analogous struggle gain enough train instance isolate program behavior create error condition could use together gather statistical data crash provide better error message crash twenty use dynamic program detect program behavioral indicate program bug performance slowdown clarify much faster program behavior anomalous stack use many remote diagnostic like crash analysis thirty gnome seven system stack harvest crash ten technology deploy tool motivation similar clarify human effort need match different program clarify diagnose range crash operate behavior profile source data stack program behavior program behavior receive attention engineer literature al identify similar motivation clarify also investigate behavior clarify accurate accurate compare complete system design address problem improve error report al eight model behavior model use control flow basic block use active learn cluster model model use make insensitive rare clarify need sensitivity rare rare often characterize error sample result section al evaluate method space small line program al use program behavior graph feature model clarify use data relate program control flow number program behavior graph grow quickly program size become intractable even small program use evaluate method characterize phase behavior use basic block execution count maintain accuracy architectural simulation execute type program behavior detect occur much longer time clarify detect reduce fifteen dimension maintain accuracy clarify must sensitive small localize change behavior form signature error behavior see table two clarify feature verify use random projection reduce feature count like dramatically reduce clarify accuracy program five use analyze program behavior path spectra approximate execution behavior occurrence frequency individual spectral use identify portion program execution differ different input notably test path spectra focus identify path several program run whereas clarify novel use path profile use machine learn identify common error class clarify profile much efficient nearly accurate path profile nine conclusion present clarify system improve error report operate system external program clarify prototype accurately efficiently behavior enable improve error report thank cook help write thank peter stone feedback draft paper research support gift phoenix compiler group grant cognitive information process program grant reference one k j c j l wiener p performance distribute black box land two g ball j r exploit hardware counter flow context sensitive profile page june three agarwal first fault diagnosis reconstruction distribute control flow june four v e dynamo transparent dynamic optimization system page five ball j r efficient path profile micro six r e e p p l field study computer system analysis system management tool practice work seven j gnome utility eight j f j j active learn automatic classification behavior nine e porter secure remote diagnostics review ten sheng g l n wild ing j p quickly find know five page via symptom match eleven timothy garnett saman infrastructure adaptive dynamic optimization twelve find latent code via machine learn program thirteen mike fourteen identify bug use anomaly detection six fifteen latex error class sixteen corporation privacy statement error report service seventeen corporation report solve computer eighteen corporation information send report problem nineteen v ha j e decision tree learn forensic classification twenty lam track bug use automatic anomaly detection j g k r l empirical investigation relationship test behavior program spectra journal test verification reliability vol ten three j v turner utility compute current market assessment outlook technical report h foster experiment effectiveness test adequacy criteria kernel probe n j wen w wang combine high level symptom low level state information configuration fault diagnosis b ax jordan bug isolation via remote program sample b naik x jordan scalable statistical bug isolation c x yang j han p mine behavior graph bug data mine corporation overview thirty corporation crash analysis p w j sun b wang support failure report r program machine learn morgan reps ball das j use program profile maintenance year problem h page rubber rubber timothy brad automatically characterize large scale program behavior response use delay proceed security symposium august ariel barton p miller dynamic instrumentation commodity operate system page h j wang j c r wang automatic misconfiguration e frank data mine practical machine learn tool morgan san forty c yuan n j wen j li z wang w know problem diagnosis event trace c yuan n j wen j li z wang w know problem diagnosis event trace j serrano w cain accurate efficient adaptive call context profile