improve concurrency memory snapshot chi computer laboratory university abstract propose memory snapshot improve concurrency build top hardware transactional memory allow easy development system concurrent garbage collector dynamic profiler subject processor architecture parallel architecture general term performance design transactional memory memory snapshot one introduction bring abundant parallelism commodity however lack concurrency prevent us fully exploit additional hardware core alleviate problem important develop architectural tool help exploit parallelism search tool find memory snapshot particularly useful improve concurrency two basic concept use widely file reliable storage snapshot image large particular moment time provide consistent view constantly mutate later use several memory snapshot propose usefulness performance limit rely two paper propose memory snapshot system support memory arbitrary lifetime consist multiple disjoint memory single call interface system take atomic snapshot isolate snapshot memory update snapshot image share multiple thread operate snapshot data use normal goal allow algorithmic simplicity easy code management performance time provide program way manage semantically unnecessary contention share data concurrent system often case thread need access recent consistent version data thread try update data recent result example memory profiler need consistent copyright hold eight june view object reference graph recent time use memory profiler save recent image object reference graph fast atomically safely analyze graph parallel application thread work image graph additional cod time waste synchronization application profiler thread easy unskilled understand concept memory snapshot use improve concurrency easily potential include limit fast concurrent backup parallel program concurrent garbage collection dynamic fast support use hardware build snapshot image gradually key observation reduce hardware cost hardware find architectural transactional memory one promise technology use hardware support atomic execution without need manual synchronization user code hardware cost dramatically reduce share hardware data three interest garbage collection dynamic profile take advantage fact garbage always garbage take memory snapshot perform collection without interference application thread run parallel profiler take snapshot stack profile whole memory memory profile application make call memory update widely use efficient data share incur overhead share data need copy take snapshot data copy execute copy operation background job another core main benefit use allow us use additional core hide overhead without complex code manage main application three reference one l v wong al transactional memory coherence consistency computer architecture june two p optimal snapshot algorithm five theory compute