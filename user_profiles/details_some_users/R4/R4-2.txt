Incorporating Domain Knowledge into Topic Modeling

via Dirichlet Forest Priors

David Andrzejewski∗†
Xiaojin Zhu∗
Mark Craven†∗
∗Department of Computer Sciences, †Department of Biostatistics and Medical Informatics
University of Wisconsin-Madison, Madison, WI 53706 USA

andrzeje@cs.wisc.edu
jerryzhu@cs.wisc.edu
craven@biostat.wisc.edu

Abstract

Users of topic modeling methods often have
knowledge about the composition of words
that should have high or low probability in
various topics. We incorporate such domain
knowledge using a novel Dirichlet Forest prior
in a Latent Dirichlet Allocation framework.
The prior is a mixture of Dirichlet tree distri-
butions with special structures. We present
its construction, and inference via collapsed
Gibbs sampling. Experiments on synthetic
and real datasets demonstrate our model’s
ability to follow and generalize beyond user-
speciﬁed domain knowledge.

1. Introduction

Topic modeling, using approaches such as Latent
Dirichlet Allocation (LDA) (Blei et al., 2003), has en-
joyed popularity as a way to model hidden topics in
data. However, in many applications, a user may have
additional knowledge about the composition of words
that should have high probability in various topics.
For example, in a biological application, one may pre-
fer that the words “termination”, “disassembly” and
“release” appear with high probability in the same
topic, because they all describe the same phase of bi-
ological processes. Furthermore, a biologist could au-
tomatically extract these preferences from an existing
biomedical ontology, such as the Gene Ontology (GO)
(The Gene Ontology Consortium, 2000). As another
example, an analyst may run topic modeling on a cor-
pus of people’s wishes, inspect the resulting topics, and
notice that “into, college” and “cure, cancer” all ap-

Appearing in Proceedings of the 26 th International Confer-
ence on Machine Learning, Montreal, Canada, 2009. Copy-
right 2009 by the author(s)/owner(s).

pear with high probability in the same topic. The an-
alyst may want to interactively express the preference
that the two sets of words should not appear together,
re-run topic modeling, and incorporate additional pref-
erences based on the new results. In both cases, we
would like these preferences to guide the recovery of
latent topics. Standard LDA lacks a mechanism for
incorporating such domain knowledge.

In this paper, we propose a principled approach to the
incorporation of such domain knowledge into LDA.
We show that many types of knowledge can be ex-
pressed with two primitives on word pairs. Borrowing
names from the constrained clustering literature (Basu
et al., 2008), we call the two primitives Must-Links
and Cannot-Links, although there are important dif-
ferences. We then encode the set of Must-Links and
Cannot-Links associated with the domain knowledge
using a Dirichlet Forest prior, replacing the Dirichlet
prior over the topic-word multinomial p(word|topic).
The Dirichlet Forest prior is a mixture of Dirichlet
tree distributions with very speciﬁc tree structures.
Our approach has several advantages: (i) A Dirich-
let Forest can encode Must-Links and Cannot-Links,
something impossible with Dirichlet distributions. (ii)
The user can control the strength of the domain knowl-
edge by setting a parameter η, allowing domain knowl-
edge to be overridden if the data strongly suggest oth-
erwise.
(iii) The Dirichlet Forest lends itself to eﬃ-
cient inference via collapsed Gibbs sampling, a prop-
erty inherited from the conjugacy of Dirichlet trees.
We present experiments on several synthetic datasets
and two real domains, demonstrating that the result-
ing topics not only successfully incorporate the speci-
ﬁed domain knowledge, but also generalize beyond it
by including/excluding other related words not explic-
itly mentioned in the Must-Links and Cannot-Links.

25Incorporating Domain Knowledge into Topic Modeling

2. Related Work

We review LDA using the notation of Griﬃths and
Steyvers (2004). Let there be T topics. Let w =
w1 . . . wn represent a corpus of D documents, with a
total of n words. We use di to denote the document
of word wi, and zi the hidden topic from which wi is
generated. Let φ(w)
j = p(z = j)
for document d. The LDA generative model is then:

j = p(w|z = j), and θ(d)

clusters, respectively. We borrow the notion for topic
modeling. Informally, the Must-Link primitive prefers
that two words tend to be generated by the same
topic, while the Cannot-Link primitive prefers that
two words tend to be generated by separate topics.
However, since any topic φ is a multinomial over words,
any two words (in general) always have some proba-
bility of being generated by the topic. We therefore
propose the following deﬁnition:

θ ∼ Dirichlet(α)

zi|θ(di) ∼ Multinomial(θ(di))

φ ∼ Dirichlet(β)

wi|zi, φ ∼ Multinomial(φzi)

(1)
(2)
(3)
(4)

Must-Link (u, v): Two words u, v have similar prob-
ability within any topic, i.e., φ(u)
for j = 1 . . . T .
It is important to note that the probabilities can be
both large or both small, as long as they are similar.
For example, for the earlier biology example we could
say Must-Link (termination, disassembly).

j ≈ φ(v)

j

where α and β are hyperparameters for the document-
topic and topic-word Dirichlet distributions, respec-
tively. For simplicity we will assume symmetric α and
β, but asymmetric hyperparameters are also possible.

Previous work has modeled correlations in the LDA
document-topic mixtures using the logistic Normal dis-
tribution (Blei & Laﬀerty, 2006), DAG (Pachinko)
structures (Li & McCallum, 2006), or the Dirichlet
Tree distribution (Tam & Schultz, 2007). In addition,
the concept-topic model (Chemudugunta et al., 2008)
employs domain knowledge through special “concept”
topics, in which only a particular set of words can be
present. Our work complements the previous work by
encoding complex domain knowledge on words (espe-
cially arbitrary Cannot-Links) into a ﬂexible and com-
putationally eﬃcient prior.

3. Topic Modeling with Dirichlet Forest

Our proposed model diﬀers from LDA in the way φ is
generated. Instead of (3), we have

q ∼ DirichletForest(β, η)
φ ∼ DirichletTree(q)

where q speciﬁes a Dirichlet tree distribution, β plays
a role analogous to the topic-word hyperparameter
in standard LDA, and η ≥ 1 is the “strength pa-
rameter” of the domain knowledge. Before discussing
DirichletForest(β, η) and DirichletTree(q), we ﬁrst ex-
plain how knowledge can be expressed using Must-
Link and Cannot-Link primitives.

3.1. Must-Links and Cannot-Links

Must-Links and Cannot-Links were originally pro-
posed for constrained clustering to encourage two in-
stances to fall into the same cluster or into separate

Cannot-Link (u, v): Two words u, v should not both
have large probability within any topic. It is permis-
sible for one to have a large probability and the other
small, or both small. For example, one primitive for
the wish example can be Cannot-Link (college, cure).

Many types of domain knowledge can be decomposed
into a set of Must-Links and Cannot-Links. We
demonstrate three types in our experiments: we can
Split two or more sets of words from a single topic
into diﬀerent topics by placing Must-Links within the
sets and Cannot-Links between them. We can Merge
two or more sets of words from diﬀerent topics into one
topic by placing Must-Links among the sets. Given a
common set of words which appear in multiple topics
(such as stopwords in English, which tend to appear
in all LDA topics), we can Isolate them by placing
Must-Links within the common set, and then placing
Cannot-Link between the common set and the other
high-probability words from all topics.
It is impor-
tant to note that our Must-Links and Cannot-Links
are preferences instead of hard constraints.

3.2. Encoding Must-Links

It is well-known that the Dirichlet distribution is lim-
ited in that all words share a common variance param-
eter, and are mutually independent except the normal-
ization constraint (Minka, 1999). However, for Must-
Link (u, v) it is crucial to control the two words u, v
diﬀerently than other words.

The Dirichlet tree distribution (Dennis III, 1991) is a
generalization of the Dirichlet distribution that allows
such control. It is a tree with the words as leaf nodes;
see Figure 1(a) for an example. Let γ(k) be the Dirich-
let tree edge weight leading into node k. Let C(k) be
the immediate children of node k in the tree, L the
leaves of the tree, I the internal nodes, and L(k) the

26Incorporating Domain Knowledge into Topic Modeling

leaves in the subtree under k. To generate a sample
φ ∼ DirichletTree(γ), one ﬁrst draws a multinomial
at each internal node s ∈ I from Dirichlet(γC(s)), i.e.,
using the weights from s to its children as the Dirich-
let parameters. One can think of it as re-distributing
the probability mass reaching s by this multinomial
(initially, the mass is 1 at the root). The probabil-
ity φ(k) of a word k ∈ L is then simply the prod-
uct of the multinomial parameters on the edges from
k to the root, as shown in Figure 1(b).
It can be
shown (Dennis III, 1991) that this procedure gives
DirichletTree(γ) ≡ p(φ|γ) =

L

φ(k)γ(k)−1

 

Yk

I

Γ

!






s
Y

Q

C(s)
k
(cid:16)P
C(s)
k

Γ

γ(k)

L(s)

γ(k)

(cid:17)



(cid:0)



(cid:1)

Xk

φ(k)





∆(s)






L
k means

where Γ(·) is the standard gamma function, and the
k∈L. The function ∆(s) ≡ γ(s)−
notation
k∈C(s) γ(k) is the diﬀerence between the in-degree
and out-degree of internal node s. When this diﬀerence
P
∆(s) = 0 for all internal nodes s ∈ I, the Dirichlet tree
reduces to a Dirichlet distribution.

Q

Q

Like the Dirichlet, the Dirichlet tree is conjugate to
the multinomial. It is possible to integrate out φ to
get a distribution over word counts directly, similar to
the multivariate P´olya distribution: p(w|γ) =

I

s
Y



Γ



Γ

C(s)
k
(cid:16)P
C(s)
k
(cid:16)P

(cid:0)

γ(k)

γ(k) + n(k)

(cid:17)

(cid:1)(cid:17)

C(s)

Γ

(cid:0)

Yk

γ(k) + n(k)
Γ(γ(k)) 

(5)

(cid:1)



Here n(k) is the number of word tokens in w that ap-
pear in L(k).

We encode Must-Links using a Dirichlet tree. Note
that our deﬁnition of Must-Link is transitive: Must-
Link (u, v) and Must-Link (v, w) imply Must-Link
(u, w). We thus ﬁrst compute the transitive closures
of expressed Must-Links. Our Dirichlet tree for Must-
Links has a very simple structure: each transitive clo-
sure is a subtree, with one internal node and the words
in the closure as its leaves. The weights from the in-
ternal node to its leaves are ηβ. The root connects to
these internal nodes s with weight |L(s)|β, where | · |
represents the set size. In addition, the root directly
connects to other words not in any closure, with weight
β. For example, the transitive closure for a Must-Link
(A,B) on vocabulary {A,B,C} is simply {A,B}, corre-
sponding to the Dirichlet tree in Figure 1(a).

To understand this encoding of Must-Links, consider
ﬁrst the case when the domain knowledge strength pa-
rameter is at its weakest η = 1. Then in-degree equals
out-degree for any internal node s (both are |L(s)|β),

and the tree reduces to a Dirichlet distribution with
symmetric prior β: the Must-Links are turned oﬀ in
this case. As we increase η, the re-distribution of prob-
ability mass at s (governed by a Dirichlet under s)
has increasing concentration |L(s)|ηβ but the same
uniform base-measure. This tends to redistribute the
mass evenly in the transitive closure represented by s.
Therefore, the Must-Links are turned on when η > 1.
Furthermore, the mass reaching s is independent of
η, and can still have a large variance. This properly
encodes the fact that we want Must-Linked words to
have similar, but not always large, probabilities. Oth-
erwise, Must-Linked words would be forced to appear
with large probability in all topics, which is clearly un-
desirable. This is impossible to represent with Dirich-
let distributions. For example, the blue dots in Fig-
ure 1(c) are φ samples from the Dirichlet tree in Fig-
ure 1(a), plotted on the probability simplex of dimen-
sion three. While it is always true that p(A) ≈ p(B),
their total probability mass can be anywhere from 0
to 1. The most similar Dirichlet distribution is per-
haps the one with parameters (50,50,1), which gener-
ates samples close to (0.5, 0.5, 0) (Figure 1(d)).

3.3. Encoding Cannot-Links

Cannot-Links are considerably harder to handle. We
ﬁrst transform them into an alternative form that is
amenable to Dirichlet trees. Note that Cannot-Links
are not transitive: Cannot-Link (A,B) and Cannot-
Link (B,C) does not entail Cannot-Link (A,C). We de-
ﬁne a Cannot-Link-graph where the nodes are words1,
and the edges correspond to the Cannot-Links. Then
the connected components of this graph are indepen-
dent of each other when encoding Cannot-Links. We
will use this property to factor a Dirichlet-tree selec-
tion probability later. For example, the two Cannot-
Links (A,B) and (B,C) form the graph in Figure 1(e)
with a single connected component {A,B,C}.

Consider the subgraph on connected component r.
We deﬁne its complement graph by ﬂipping the edges
(on to oﬀ, oﬀ to on), as shown in Figure 1(f). Let
there be Q(r) maximal cliques Mr1 . . . MrQ(r) in this
complement graph.
In the following, we simply call
them “cliques”, but it is important to remember that
they are maximal cliques of the complement graph,
not the original Cannot-Link-graph. In our example,
Q(r) = 2 and Mr1 = {A, C}, Mr2 = {B}. These
cliques have the following interpretation: each clique
(e.g., Mr1 = {A, C}) is the maximal subset of words in
the connected component that can “occur together”.

1

When there are Must-Links, all words in a Must-Link

transitive closure form a single node in this graph.

27Incorporating Domain Knowledge into Topic Modeling

C

C

C

φ=(0.53     0.38     0.09)

A

B

A

B

2β

β

0.91

0.09

ηβ

ηβ

0.58

0.42

A

B
(a)

A

C

B

(b)

A

C

B

(c)

β

C
(g)

β

A

(e)

(f)

2ηβ

β

ηβ

(d)

β

β

β

B

A
(h)

C

(i)

B

C

A

B

Figure 1. Encoding Must-Links and Cannot-Links with a Dirichlet Forest.
(a) A Dirichlet tree encoding Must-Link
(A,B) with β = 1, η = 50 on vocabulary {A,B,C}. (b) A sample φ from this Dirichlet tree. (c) A large set of samples
from the Dirichlet tree, plotted on the 3-simplex. Note p(A) ≈ p(B), yet they remain ﬂexible in actual value, which
is desirable for a Must-Link. (d) In contrast, samples from a standard Dirichlet with comparable parameters (50,50,1)
force p(A) ≈ p(B) ≈ 0.5, and cannot encode a Must-Link.
(e) The Cannot-Link-graph for Cannot-Link (A,B) and
Cannot-Link (B,C). (f) The complementary graph, with two maximal cliques {A,C} and {B}. (g) The Dirichlet subtree
for clique {A,C}. (h) The Dirichlet subtree for clique {B}. (i) Samples from the mixture model on (g,h), encoding both
Cannot-Links, again with β = 1, η = 50.

That is, these words are allowed to simultaneously
have large probabilities in a given topic without violat-
ing any Cannot-Link preferences. By the maximality
of these cliques, allowing any word outside the clique
(e.g., “B”) to also have a large probability will violate
at least 1 Cannot-Link (in this example 2).

We discuss the encoding for this single connected com-
ponent r now, deferring discussion of the complete en-
coding to section 3.4. We create a mixture model of
Q(r) Dirichlet subtrees, one for each clique. Each topic
selects exactly one subtree according to probability

p(q) ∝ |Mrq|, q = 1 . . . Q(r).

(6)

Conceptually, the selected subtree indexed by q tends
to redistribute nearly all probability mass to the words
within Mrq. Since there is no mass left for other
cliques, it is impossible for a word outside clique Mrq
to have a large probability. Therefore, no Cannot-
Link will be violated. In reality, the subtrees are soft
rather than hard, because Cannot-Links are only pref-
erences. The Dirichlet subtree for Mrq is structured
as follows. The subtree’s root connects to an inter-
nal node s with weight η|Mrq|β. The node s con-
nects to words in Mrq, with weight β. The subtree’s
root also directly connects to words not in Mrq (but
in the connected component r) with weight β. This
will send most probability mass down to s, and then
ﬂexibly redistribute it among words in Mrq. For ex-
ample, Figures 1(g,h) show the Dirichlet subtrees for
Mr1 = {A, C} and Mr2 = {B} respectively. Samples
from this mixture model are shown in Figure 1(i), rep-

resenting multinomials in which no Cannot-Link is vi-
olated. Such behavior is not achievable by a Dirichlet
distribution, or a single Dirichlet tree2.

Finally, we mention that although in the worst case
the number of maximal cliques Q(r) in a connected
component of size |r| can grow exponentially as
O(3|r|/3) (Griggs et al., 1988), in our experiments Q(r)
is no larger than 3, due in part to Must-Linked words
“collapsing” to single nodes in the Cannot-Link graph.

3.4. The Dirichlet Forest Prior

In general, our domain knowledge is expressed by a
set of Must-Links and Cannot-Links. We ﬁrst com-
pute the transitive closure of Must-Links. We then
form a Cannot-Link-graph, where a node is either
a Must-Link closure or a word not present in any
Must-Link. Note that the domain knowledge must
be “consistent” in that no pairs of words are simul-
taneously Cannot-Linked and Must-Linked (either ex-
plicitly or implicitly through Must-Link transitive clo-
sure.) Let R be the number of connected compo-
nents in the Cannot-Link-graph. Our Dirichlet For-
R
r=1 Q(r) Dirichlet trees, represented
est consists of
by the template in Figure 2. Each Dirichlet tree has

2

Dirichlet distributions with very small concentration
do have some selection eﬀect. For example, Beta(0.1,0.1)
tends to concentrate probability mass on one of the two
variables. However, such priors are weak – the “pseudo
counts” in them are too small because of the small concen-
tration. The posterior will be dominated by the data, and
we would lose any encoded domain knowledge.

Q

28Incorporating Domain Knowledge into Topic Modeling

R branches beneath the root, one for each connected
component. The trees diﬀer in which subtrees they
include under these branches. For the r-th branch,
there are Q(r) possible Dirichlet subtrees, correspond-
ing to cliques Mr1 . . . MrQ(r). Therefore, a tree in
the forest is uniquely identiﬁed by an index vector
q = (q(1) . . . q(R)), where q(r) ∈ {1 . . . Q(r)}.

derived using (5): p(w|q1:T , z, β, η) =

γ(k)
j

Cj (s)

Γ(γ(k)

T

Ij

j=1
Y

s
Y



Γ



Γ

Cj (s)
k
(cid:16)P
Cj (s)
(γ(k)
k
(cid:16)P

(cid:17)
j + n(k)
j

)

Yk

(cid:17)

Finally, the complete generative model is

)

j + n(k)
Γ(γ(k)

j

j
) 


.

connected
component 1

...

connected
component R

p(w, z, q1:T |α, β, η) = p(w|q1:T , z, β, η)p(z|α)

p(qj).

T

j=1
Y

η∗

...
M1q

(1)

...

other w

Q (1)

η∗

...
MRq

...

(R)

other w

Q (R)

=

η∗

η∗

...

or

word

Must−Link

Figure 2. Template of Dirichlet trees in the Dirichlet Forest

tree q from the prior
To draw a Dirichlet
DirichletForest(β, η), we select the subtrees indepen-
dently because the R connected components are in-
dependent with respect to Cannot-Links: p(q) =
R
r=1 p(q(r)). Each q(r) is sampled according to (6),
and corresponds to choosing a solid box for the r-th
Q
branch in Figure 2. The structure of the subtree within
the solid box has been deﬁned in Section 3.3. The
black nodes may be a single word, or a Must-Link tran-
sitive closure having the subtree structure shown in the
dotted box. The edge weight leading to most nodes k
is γ(k) = |L(k)|β, where L(k) is the set of leaves under
k. However, for edges coming out of a Must-Link in-
ternal node or going into a Cannot-Link internal node,
their weights are multiplied by the strength parameter
η. These edges are marked by “η∗” in Figure 2.

We now deﬁne the complete Dirichlet Forest model,
integrating out (“collapsing”) θ and φ. Let n(d)
j be the
number of word tokens in document d that are assigned
to topic j. z is generated the same as in LDA:

p(z|α) =

Γ(T α)
Γ(α)T

(cid:18)

D D

(cid:19)

Yd=1 Q

j + α)

T

j=1 Γ(n(d)
Γ(n(d)

· + T α)

.

R

r=1 p(q(r)

There is one Dirichlet tree qj per topic j = 1 . . . T ,
sampled from the Dirichlet Forest prior p(qj) =
j ). Each Dirichlet tree qj implicitly deﬁnes
its tree edge weights γ(·)
j using β, η, and its tree struc-
Q
ture Lj, Ij, Cj(·). Let n(k)
be the number of word to-
kens in the corpus assigned to topic j that appear un-
der the node k in the Dirichlet tree qj. The prob-
ability of generating the corpus w, given the trees
q1:T ≡ q1 . . . qT and the topic assignment z, can be

j

4. Inference for Dirichlet Forest

Because a Dirichlet Forest is a mixture of Dirichlet
trees, which are conjugate to multinomials, we can ef-
ﬁciently perform inference by Markov Chain Monte
Carlo (MCMC). Speciﬁcally, we use collapsed Gibbs
sampling similar to Griﬃths and Steyvers (2004).
However, in our case the MCMC state is deﬁned by
both the topic labels z and the tree indices q1:T .
An MCMC iteration in our case consists of a sweep
through both z and q1:T . We present the conditional
probabilities for collapsed Gibbs sampling below.
(Sampling zi): Let n(d)
−i,j be the number of word to-
kens in document d assigned to topic j, excluding the
word at position i. Similarly, let n(k)
−i,j be the number
of word tokens in the corpus that are under node k in
topic j’s Dirichlet tree, excluding the word at position
i. For candidate topic labels v = 1 . . . T , we have

p(zi = v|z−i, q1:T , w) ∝

(n(d)

−i,v + α)

Iv(↑i)

γ(Cv(s↓i))
v

s
Y

Cv(s)
k

P

(cid:16)

−i,v

+ n(Cv(s↓i))
v + n(k)
γ(k)
−i,v

,

(cid:17)

where Iv(↑ i) denotes the subset of internal nodes in
topic v’s Dirichlet tree that are ancestors of leaf wi,
and Cv(s↓i) is the unique node that is s’s immediate
child and an ancestor of wi (including wi itself).
(Sampling q(r)
j ): Since the connected components are
independent, sampling the tree qj factors into sam-
pling the cliques for each connected component q(r)
.
For candidate cliques q′ = 1 . . . Q(r), we have

j

p(q(r)

j = q′|z, q−j, q(−r)

j

, w) ∝

Mrq′



Xk

×

βk



Cj (s)

Γ



Ij,r=q′

γ(k)
j

Cj (s)
k
(cid:16)P
Cj (s)
(γ(k)
k
(cid:16)P

j
) 

where Ij,r=q′ denotes the internal nodes below the r-th
branch of tree qj, when clique Mrq′ is selected.

(cid:17)
j + n(k)
j

j + n(k)
Γ(γ(k)

Γ(γ(k)

s
Y

Yk



Γ

(cid:17)

)

)

j

29Incorporating Domain Knowledge into Topic Modeling

(Estimating φ and θ): After running MCMC
for suﬃcient iterations, we follow standard practice
(e.g. (Griﬃths & Steyvers, 2004)) and use the last sam-
ple (z, q1:T ) to estimate φ and θ. Because a Dirich-
let tree is a conjugate distribution, its posterior is a
Dirichlet tree with the same structure and updated
edge weights. The posterior for the Dirichlet tree of
the j-th topic is γpost(k)
, where the counts
n(k)
are collected from z, q1:T , w. We estimate φj by
j
the ﬁrst moment under this posterior (Minka, 1999):

j = γ(k)

j +n(k)

j

φ(w)
j =

γpost(Cj (s↓w))

j

Ij (↑w)

s
Y

b

Cj (s)





Xs′

−1

′

)

γpost(s

j 

.

(7)



The parameter θ is estimated the same way as in stan-
dard LDA:

j + α)/(n(d)

θ(d)
j = (n(d)

· + T α).

5. Experiments

b

Synthetic Corpora: We present results on synthetic
datasets to show how the Dirichlet Forest (DF) incor-
porates diﬀerent types of knowledge. Recall that DF
with η = 1 is equivalent to standard LDA (veriﬁed
with the code of (Griﬃths & Steyvers, 2004)).

Previous studies often take the last MCMC sample (z
and q1:T ), and discuss the topics φ1:T derived from
that sample. Because of the stochastic nature of
MCMC, we argue that more insight can be gained if
multiple independent MCMC samples are considered.
For each dataset, and each DF with a diﬀerent η, we
run a long MCMC chain with 200,000 iterations of
burn-in, and take out a sample every 10,000 iterations
afterward, for a total of 200 samples. We have some in-
dication that our chain is well-mixed, as we observe all
expected modes, and that samples with “label switch-
ing” (i.e., equivalent up to label permutation) occur
with near equal frequency. For each sample, we derive
its topics φ1:T with (7) and then greedily align the φ’s
from diﬀerent samples, permuting the T topic labels
to remove the label switching eﬀect. Within a dataset,
we perform PCA on the baseline (η = 1) φ and project
all samples into the resulting space to obtain a com-
mon visualization (each row in Figure 3. Points are
dithered to show overlap.).

Must-Link (B,C): The corpus consists of six docu-
ments over a vocabulary of ﬁve “words.” The doc-
uments are: ABAB, CDCD, and EEEE, each rep-
resented twice. We let T = 2, α = 0.5, β = 0.01.
LDA produces three kinds of φ1:T : roughly a third
E
of the time the topics are around [ A
2 ], which
2
is shorthand for φ1 = ( 1
4 , 1
2 )
on the vocabulary ABCDE. Another third are around

2 , 0, 0, 0) φ2 = (0, 0, 1

2 | C

2 , 1

4 , 1

D
4

B

4

3

2

2

3

5

3

3

5

3

2

2

0.6

0.4

0.2

0

−0.2

−0.4

−0.6

0.5

1

0

0.5

1

0

−0.5

−1

−1

1

0

−0.5

−1

−1

ML(B,C), eta=1

ML(B,C), eta=10

ML(B,C), eta=50

1

2

1

2

1

2

−0.5

0.5

CL(A,B), eta=1

0

−0.5
0.5
CL(A,B), eta=500

0

−0.5
0.5
CL(A,B), eta=1500

1

1

1

0.6

0.4

0.2

0

−0.2

−0.4

−0.6

0.5

1

0

0.5

1

0

−0.5

−1

−1

1

0

−0.5

−1

−1

3

5

3

0

2

2

0.6

0.4

0.2

0

−0.2

−0.4

−0.6

0.5

1

0

0.5

1

0

−0.5

−1

−1

1

0

−0.5

−1

−1

4

−0.5

−1

−1

4

−0.5

−1

−1

4

−0.5

−1

−1

−0.5

0

0.5

1

−0.5

0

0.5

1

−0.5

0

0.5

1

Isolate(B), eta=1

Isolate(B), eta=500

Isolate(B), eta=1000

1

3

1

3

1

−0.5

0

0.5

1

−0.5

0

0.5

1

−0.5

0

0.5

1

Split(AB,CD), eta=1

Split(AB,CD), eta=100

Split(AB,CD), eta=500

0.5

1

0.5

1

0.5

1

2

4

6

3

5

7

2

4

6

3

5

7

2

4

6

3

5

7

−0.5

0

0.5

1

−0.5

0

0.5

1

−0.5

0

0.5

1

Figure 3. PCA projections of permutation-aligned φ sam-
ples for the four synthetic data experiments.

4

2

E

D

C
4

B
4

B
4

2 | C

2 ], and the ﬁnal third around [ A

[ A
D
4 |E].
4
They correspond to clusters 1,2 and 3 respectively in
the upper-left panel of Figure 3. We add a single Must-
Link (B,C). When η = 10, the data still override our
Must-Link somewhat because clusters 1 and 2 do not
disappear completely. As η increases to 50, Must-Link
overrides the data and clusters 1 and 2 vanish, leaving
only cluster 3. That is, running DF and taking the last
sample is very likely to obtain the [ A
D
4 |E] topics.
4
This is what we want: B and C are present or absent
together in the topics and they also “pull” A, D along,
even though A, D are not in the knowledge we added.

B
4

C
4

C

B

D

2 |A|C], [ A

Cannot-Link (A,B): The corpus has four docu-
ments: ABCCABCC, ABDDABDD, twice each; T =
3, α = 1, β = 0.01. LDA produces six kinds of φ1:T
C
evenly: [ B
2 |A|D],
2
[ A
D
2 |A|B], corresponding to clusters 1–5
2
and the “lines”. We add a single Cannot-Link (A,B).
As DF η increases, cluster 2 [ A
B
2 |C|D] disappears, be-
2
cause it involves a topic A
B
2 that violates the Cannot-
2
Link. Other clusters become uniformly more likely.

2 |B|D], [ C

2 |C|D], [ A

2 |B|C], [ B

D

2

2

2

2

Isolate(B): The corpus has four documents, all of
which are ABC; T = 2, α = 1, β = 0.01. LDA pro-

30Incorporating Domain Knowledge into Topic Modeling

C

2 |B], [ A

duces three clusters evenly: [ A
C
2 |A].
2
We add Isolate(B), which is compiled into Cannot-
Link (B,A) and Cannot-Link (B,C). The DF’s sam-
C
ples concentrate to cluster 1:
2 |B], which indeed
isolates B into its own topic.

2 |C], [ B

[ A
2

B

2

2

C
4

B
4

Split(AB,CD): The corpus has
six documents:
ABCDEEEE, ABCDFFFF, each present three times;
α = 0.5, β = 0.01. LDA with T = 3 produces a large
D
portion of topics around [ A
4 |E|F ] (not shown).
4
We add Split(AB,CD), which is compiled into Must-
Link (A,B), Must-Link (C,D), Cannot-Link (B,C), and
increase T = 4. However, DF with η = 1 (i.e.,
LDA with T = 4) produces a large variety of top-
7F
ics: e.g., cluster 1 is [ A
8 |C|E], cluster 2 is
4
[ C
D
2 |E|F ].
8
That is, simply adding one more topic does not clearly
separate AB and CD. On the other hand, with η
increasing, DF eventually concentrates on cluster 7,
which satisﬁes the Split operation.

4 |E|F ], and cluster 7 is [ A

8 | 3A

8 | A

2 | C

3B
8

3B
8

7D

3D

B

C

2

2

8

8

Wish Corpus: We now consider interactive topic
modeling with DF. The corpus we use is a collection
of 89,574 New Year’s wishes submitted to The Times
Square Alliance (Goldberg et al., 2009). Each wish is
treated as a document, downcased but without stop-
word removal. For each step in our interactive ex-
ample, we set α = 0.5, β = 0.1, η = 1000, and run
MCMC for 2000 iterations before estimating the top-
ics from the ﬁnal sample. The domain knowledge in
DF is accumulative along the steps.
Step 1: We run LDA with T = 15. Many of the
most probable words in the topics are conventional
(“to, and”) or corpus-speciﬁc (“wish, 2008”) stop-
words, which obscure the meaning of the topics.
Step 2: We manually create a 50-word stopword list,
and issue an Isolate preference. This is compiled into
Must-Links among this set and Cannot-Links between
this set and all other words in the top 50 for all topics.
T is increased to 16. After running DF, we end up
with two stopword topics. Importantly, with the stop-
words explained by these two topics, the top words for
the other topics become much more meaningful.
Step 3: We notice that one topic conﬂates two con-
cepts: enter college and cure disease (top 8 words: “go
school cancer into well free cure college”). We issue
Split(“go,school,into,college”, “cancer,free,cure,well”)
to separate the concepts. This is compiled into Must-
Links within each quadruple, and a Cannot-Link be-
tween them. T is increased to 18. After running DF,
one of the topics clearly takes on the “college” concept,
picking up related words which we did not explicitly
encode in our prior. Another topic does likewise for
the “cure” concept (many wishes are like “mom stays
cancer free”). Other topics have minor changes.

Table 1. Wish topics from interactive topic modeling

love lose weight together forever marry meet

Topic Top words sorted by φ = p(word|topic)
Merge
success health happiness family good friends prosperity
life happy best live time long wishes ever years
as do not what someone so like don much he

life
-

money out make money up house work able pay own lots
people no people stop less day every each other another

iraq
joy

family
vote

home safe end troops iraq bring war return
love true peace happiness dreams joy everyone
happy healthy family baby safe prosperous
better hope president paul ron than person bush

Isolate and to for a the year in new all my

god
peace
spam com call if u 4 www 2 3 visit 1

god bless jesus everyone loved know heart christ
peace world earth win lottery around save

Isolate i to wish my for and a be that the

Split
Split mom hope cancer free husband son well dad cure

job go great school into good college hope move

Step 4: We then notice that two topics correspond to
romance concepts. We apply Merge(“love, forever,
marry, together,
loves”, “meet, boyfriend, married,
girlfriend, wedding”), which is compiled into Must-
Links between these words. T is decreased to 17. Af-
ter running DF, one of the romance topics disappears,
and the remaining one corresponds to the merged ro-
mance topic (“lose”, “weight” were in one of them,
and remain so). Other previous topics survive with
only minor changes. Table 1 shows the wish topics af-
ter these four steps, where we place the DF operations
next to the most aﬀected topics, and color-code the
words explicitly speciﬁed in the domain knowledge.

Yeast Corpus: Whereas the previous experiment il-
lustrates the utility of our approach in an interactive
setting, we now consider a case in which we use back-
ground knowledge from an ontology to guide topic
modeling. Our prior knowledge is based on six con-
cepts. The concepts transcription, translation and repli-
cation characterize three important processes that are
carried out at the molecular level. The concepts initia-
tion, elongation and termination describe phases of the
three aforementioned processes. Combinations of con-
cepts from these two sets correspond to concepts in the
Gene Ontology (e.g., GO:0006414 is translational elon-
gation, and GO:0006352 is transcription initiation). We
guide our topic modeling using Must-Links among a
small set of words for each concept. Moreover, we use
Cannot-Links among words to specify that we prefer
(i) transcription, translation and replication to be repre-
sented in separate topics, and (ii) initiation, elongation
and termination to be represented in separate topics.
We do not set any preferences between the “process”
topics and the “phase” topics, however.

31Incorporating Domain Knowledge into Topic Modeling

Table 2. Yeast topics. The left column shows the seed
words in the DF model. The middle columns indicate the
topics in which at least 2 seed words are among the 50
highest probability words for LDA, the “o” column gives
the number of other topics (not shared by another word).
The right columns show the same topic-word relationships
for the DF model.

LDA

DF

1
2

•
•
•

•
•
•

•
•
•

•
•
•

• •
•

• •
• •
•

1 •
2 •
1 •

1 2 3 4 5 6 7 8 o 1 2 3 4 5 6 7 8 9 10
transcription
•
transcriptional •
template
translation
translational
tRNA
replication
cycle
division
initiation
start
assembly
elongation
termination
disassembly
release
stop

•
•
•
• • • •
• • • •
• • • •

• • 7
• 1

• • • • •

•
• •
•

• • •

•
•
•
•

•
•
•

•
•
•

• •

3

2

•

•

•

The corpus that we use for our experiments con-
sists of 18,193 abstracts selected from the MEDLINE
database for their relevance to yeast genes. We induce
topic models using DF to encode the Must-Links and
Cannot-Links described above, and use standard LDA
as a control. We set T = 100, α = 0.5, β = 0.1, η =
5000. For each word that we use to seed a concept, Ta-
ble 2 shows the topics that include it among their 50
most probable words. We make several observations
about the DF-induced topics. First, each concept is
represented by a small number of topics and the Must-
Link words for each topic all occur as highly probable
words in these topics. Second, the Cannot-Link pref-
erences are obeyed in the ﬁnal topics. Third, the top-
ics use the process and phase topics compositionally.
For example, DF Topic 4 represents transcription initi-
ation and DF Topic 8 represents replication initiation.
Moreover, the topics that are signiﬁcantly inﬂuenced
by the prior typically include highly relevant terms
among their most probable words. For example, the
top words in DF Topic 4 include “TATA”, “TFIID”,
“promoter”, and “recruitment” which are all speciﬁ-
cally germane to the composite concept of transcription
initiation. In the case of standard LDA, the seed con-
cept words are dispersed across a greater number of
topics, and highly related words, such as “cycle” and
“division” often do not fall into the same topic. Many
of the topics induced by ordinary LDA are semanti-
cally coherent, but the speciﬁc concepts suggested by
our prior do not naturally emerge without using DF.

Acknowledgments: This work was supported by
NIH/NLM grants T15 LM07359 and R01 LM07050,
and the Wisconsin Alumni Research Foundation.

References

Basu, S., Davidson, I., & Wagstaﬀ, K. (Eds.). (2008).
Constrained clustering: Advances in algorithms,
theory, and applications. Chapman & Hall/CRC.

Blei, D., & Laﬀerty, J. (2006). Correlated topic mod-
In Advances in neural information processing
els.
systems 18, 147–154. Cambridge, MA: MIT Press.

Blei, D., Ng, A., & Jordan, M. (2003). Latent Dirichlet
allocation. Journal of Machine Learning Research,
3, 993–1022.

Chemudugunta, C., Holloway, A., Smyth, P., &
Steyvers, M. (2008). Modeling documents by com-
bining semantic concepts with unsupervised statis-
tical learning. Intl. Semantic Web Conf. (pp. 229–
244). Springer.

Dennis III, S. Y. (1991). On the hyper-Dirichlet type 1
and hyper-Liouville distributions. Communications
in Statistics – Theory and Methods, 20, 4069–4081.

Goldberg, A., Fillmore, N., Andrzejewski, D., Xu, Z.,
Gibson, B., & Zhu, X. (2009). May all your wishes
come true: A study of wishes and how to recognize
them. Human Language Technologies: Proc. of the
Annual Conf. of the North American Chapter of the
Assoc. for Computational Linguistics. ACL Press.

Griﬃths, T. L., & Steyvers, M. (2004). Finding scien-
tiﬁc topics. Proc. of the Natl. Academy of Sciences
of the United States of America, 101, 5228–5235.

Griggs, J. R., Grinstead, C. M., & Guichard, D. R.
(1988). The number of maximal independent sets in
a connected graph. Discrete Math., 68, 211–220.

Li, W., & McCallum, A. (2006). Pachinko alloca-
tion: DAG-structured mixture models of topic cor-
relations. Proc. of the 23rd Intl. Conf. on Machine
Learning (pp. 577–584). ACM Press.

Minka, T. P. (1999). The Dirichlet-tree distribution
(Technical Report). http://research.microsoft.com/
∼minka/papers/dirichlet/minka-dirtree.pdf.

Tam, Y.-C., & Schultz, T. (2007). Correlated latent
semantic model for unsupervised LM adaptation.
IEEE Intl. Conf. on Acoustics, Speech and Signal
Processing (pp. 41—44).

The Gene Ontology Consortium (2000). Gene Ontol-
ogy: Tool for the uniﬁcation of biology. Nature Ge-
netics, 25, 25–29.

32