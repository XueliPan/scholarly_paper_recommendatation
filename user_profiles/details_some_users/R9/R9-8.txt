RIPPS: Rogue Identifying Packet Payload
Slicer Detecting Unauthorized Wireless
Hosts Through Network Trafﬁ c Conditioning

6

CHAD D. MANO, ANDREW BLAICH, QI LIAO, YINGXIN JIANG,
DAVID A. CIESLAK, DAVID C. SALYERS, and AARON STRIEGEL
University of Notre Dame

Wireless network access has become an integral part of computing both at home and at the work-
place. The convenience of wireless network access at work may be extremely beneﬁcial to employ-
ees, but can be a burden to network security personnel. This burden is magniﬁed by the threat
of inexpensive wireless access points being installed in a network without the knowledge of net-
work administrators. These devices, termed Rogue Wireless Access Points, may allow a malicious
outsider to access valuable network resources, including conﬁdential communication and other
stored data. For this reason, wireless connectivity detection is an essential capability, but remains
a difﬁcult problem. We present a method of detecting wireless hosts using a local RTT metric and
a novel packet payload slicing technique. The local RTT metric provides the means to identify
physical transmission media while packet payload slicing conditions network trafﬁc to enhance
the accuracy of the detections. Most importantly, the packet payload slicing method is transparent
to both clients and servers and does not require direct communication between the monitoring
system and monitored hosts.

Categories and Subject Descriptors: C.2.1 [Computer-Communication Networks]: Network
Architecture and Design—Network Communications; K.6.5 [Management of Computing and
Information Systems]: Security and Protection

General Terms: Management, Measurement, Security

Additional Key Words and Phrases: network security, rogue systems, trafﬁc conditioning

ACM Reference Format:
Mano, C. D., Blaich, A., Liao, Q., Jiang, Y., Cieslak, D. A., Salyers, D. C., and Striegel, A. 2008.
RIPPS: Rogue identifying packet payload slicer detecting unauthorized wireless hosts through
network trafﬁc conditioning. ACM Trans. Inf. Syst. Secur. 11, 2, Article 6 (May 2008), 23 pages.
DOI = 10.1145/1330332.1330334. http://doi.acm.org/10.1145/1330332.1330334.

This research was supported in part by the National Science Foundation through the grant
CNS03-47392.
Authors’ addresses: C.D. Mano, Utah State University, Department of Computer Science;
A. Blaich, Q. Liao, Y. Jiang, D.A. Cieslak, D.C. Salyers, A.D. Striegel, University of Notre
Dame, Department of Computer Science and Engineering, Notre Dame, IN 46556; email:
striegel@cse.nd.edu.
Permission to make digital/hard copy of all or part of this material without fee for personal or
classroom use provided that the copies are not made or distributed for proﬁt or commercial advan-
tage, the ACM copyright/server notice, the title of the publication, and its date appear, and notice
is given that copying is by permission of the ACM, Inc. To copy otherwise, to republish, to post
on servers, or to redistribute to lists requires prior speciﬁc permission and/or a fee. Permission
may be requested from Publications Dept., ACM, Inc., 2 Penn Plaza, Suite 701, New York, NY
10121-0701, USA, fax +1 (212) 869-0481, or permissions@acm.org.
c(cid:13) 2008 ACM 1094-9224/2008/05-ART6 $5.00 DOI: 10.1145/1330332.1330334. http://doi.acm.org/
10.1145/1330332.1330334.

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 2

·

C. D. Mano et al.

1. INTRODUCTION

Computer security is a critical component of business operations for companies
ranging from small businesses to international conglomerates. The threat of a
malicious intruder forces network administration personnel to devote a signif-
icant portion of time to the detection of unauthorized users and the securing
of network resources. Success is dependent on the vigilant deployment of se-
curity devices such as ﬁrewalls, virus scanners, intrusion detection systems,
and the ability of those devices to quickly and accurately identify malicious
guests.

Wireless access points (WAPs) represent an important device which net-
work administrators must be prepared to guard against. An employee with
basic computer skills can purchase an inexpensive WAP and quickly conﬁg-
ure/install it into a corporate network. Basic protection provided by MAC ﬁl-
tering can be easily subverted by MAC spooﬁng, a common feature of WAPs,
enabling simple integration into the wired network. From a security perspec-
tive, this scenario is extremely dangerous as it creates a “backdoor” opening
for malicious parties to gain access to the network. The danger is compounded
by the fact that system administrators may be totally unaware that the vulner-
ability even exists. This type of unauthorized WAP is one type of Rogue WAP
(RWAP) due to its ability to hide within an existing network and its potential
for supporting mischievous activity.

Techniques for wireless detection can be broadly classiﬁed into over the air
and on the wire [Henning 2003]. For example, currently proposed techniques
range from wide-scale antenna deployment to wire-based host proﬁling to net-
work communication analysis. Antenna-based systems are extremely expen-
sive as they require full-coverage of the company campus. Many wire-based
systems rely on MAC ﬁltering which, as mentioned previously, can be sub-
verted through spooﬁng. An alternative method is active probing which re-
quires hosts to respond to communication attempts. Active probing techniques
suffer as results may be inconclusive or inaccurate in cases where probed sys-
tems are conﬁgured to respond incorrectly, or to not respond at all to probing
attempts. In particular, false alarms would be a problem as an authorized sys-
tem which is down would appear identical to an unauthorized system which
refuses to respond to probing requests.

Passive monitoring is a desirable method as it does not depend on host con-
ﬁguration settings which may be designed to easily avoid detection by active
techniques. However, data resulting from purely passive observation tech-
niques is often noisy, making highly accurate analysis difﬁcult. Ideally, an
RWAP detection method would utilize a monitoring technique which incorpo-
rates the “passive-like” monitoring characteristic of being independent of host
settings and an “active-like” monitoring characteristic of producing highly ac-
curate results.

This article posits the question: is it possible to deduce wireless connectivity
and hence potential RWAP activity from using existing wired network trafﬁc
in a fast and accurate manner? Hence, the premise of this article is to iden-
tify unauthorized and/or unsecured WAP (i.e., RWAP) connectivity without a

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

·

6: 3

wireless sensor or host-based deployment. To that end, we present the Rogue
Identifying Packet Payload Slicer (RIPPS) system that combines an active net-
work trafﬁc conditioning technique with passive packet timing analysis to ac-
complish those goals. RIPPS incorporates a novel packet payload slicing tech-
nique to perform network trafﬁc conditioning for signiﬁcantly enhancing the
accuracy and speed of its measurements. Moreover, the RIPPS conditioning
technique manipulates existing trafﬁc and does not require modiﬁcations to
client systems nor the ability to communicate directly with these systems.

The remainder of the article is organized as follows. Section 2 presents
related work while Section 3 provides an overview of the RIPPS system and its
components. Section 4 describes experiments conducted with a fully functional
prototype of the RIPPS system. Section 5 analyzes RIPPS with regards to
deployment and overhead. Finally, Section 6 summarizes the study and offers
several concluding remarks.

2. RELATED WORK

Wireless detection techniques can be classiﬁed as antenna-based [Chiru-
mamilla and Ramamurthy 2003; Adya et al. 2004] or wire-based. Antenna-
based techniques are available from a wide variety of vendors ranging from
dedicated sensors to reusing existing host/AP wireless capabilities (wisEntry,
Aruba Networks, AirMagnet, etc.). We limit our techniques to wire-based
methods as antenna-based methods take an entirely different approach and
have very different implementation requirements.

As shown in Deraison and Gula [2003] system proﬁling applications, in-
cluding nmap and nessus, are able to identify a WAP through port scanning.
Rapids is a commercial application based on similar techniques. These meth-
ods require active probing which can be defeated by a system that does not
to respond to the probing attempts. This can be the result of a host system
setting or even ﬁrewall or NAT devices which are often set, by default, to deny
all incoming communication requests. Conversely, Bro [Handley et al. 2001]
and other anomaly detection mechanisms could potentially rely on trafﬁc ob-
servations (normalization of trafﬁc, etc.) for WAP and/or NAT discovery. How-
ever, as will be shown in the later experiments, anomaly detection via trafﬁc
normalization/analysis can be inconclusive when faced with only short-lived
connections and the advent of faster wireless connectivity.

MAC ﬁltering applications including APTools identify systems by matching
MAC addresses with vendor MAC address lists. The work in Chirumamilla
and Ramamurthy [2003] provides an infrastructure which relies on MAC ad-
dress ﬁltering to identify and prevent RWAPs. MAC spooﬁng is a simple tech-
nique, and a feature in most routers, which can be used to avoid detection by
this method. Although techniques for detecting MAC spooﬁng as proposed in
Guo and Chiueh [2006] for wireless and others for the wired side (ex., 802.1X
certiﬁcates) would negate the ability to place a new network element, such
approaches have not yet seen widespread adoption.

Another related area of study is the detection of NAT-enabled devices, a
common conﬁguration of a WAP. SFlow detects NAT-based hosts by identify-
ing anomalous TTL values from the router functionality of the NAT. In Bellovin

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 4

·

C. D. Mano et al.

[2002], the authors use the ID ﬁeld of the IP header to determine the number
of hosts behind a NAT device. Beverly [2004] uses a similar model but incor-
porates TTL, window size and SYN size header information. Although these
approaches are effective when multiple hosts are present behind a NAT device,
they may fail when only a single device is used. Hence, a single host behind
an RWAP (as would typically exist from an employee using it for personal use)
would be nearly undetectable from these approaches. SFlow utilizes port num-
ber observation as NAT devices tend to bias towards the high side as to avoid
server conﬂict.

In Cheng and Marsic [2001], a similar RTT metric and fuzzy reasoning are
utilized to detect wireless connections in a client/server environment for the
purpose of improving quality of service (QoS). This technique relies on the
differences in the average RTT measured from the client perspective as well
as the standard deviation of RTTs. Equipment used in the study supported
a throughput of 1.6Mb per second, much lower than the standards of today.
Our experiments show that the RTT and associated standard deviations using
currently available equipment does not provide a distinct separation between
wired and wireless hosts.

In Wei et al. [2005], the authors present an active monitoring scheme for the
classiﬁcation of access network types. The active technique works by request-
ing a remote host to send numerous packet pairs and measuring the spacing
of the packets upon arrival. A large time gap is indicative of a slow medium
such as dial-up Internet access while a small gap indicates a faster medium
such as Ethernet. This method provides accurate results but depends on the
ability to communicate with the remote host and trusting the host to respond
appropriately to packet pair transmission requests.

Beyah et al. [2004] presented a passive method of detecting RWAPs in a
network. This method is based on the observation of interpacket spacing dif-
ferences between wired and wireless networks. While their results are promis-
ing, it is not entirely clear as to the network speeds of the hardware used. The
results lead us to believe that the wired hosts were connected via a 100Mb
per second link while the wireless hosts utilized an 802.11b type of connec-
tion. As our experiments will show, faster wireless (802.11g, 802.11 draft-n)
and operating system (OS) diversity make it difﬁcult to cleanly distinguish be-
tween wired and wireless hosts. In a similar vein, the recent work in Wei et al.
[2006] examines TCP ACK pairing from a theoretical and limited experimental
perspective for both 802.11b and 802.11g. However, OS diversity (speciﬁcally
Windows) also poses issues as noted later in our experimental studies. These
two methods are the only other transparent trafﬁc-based methods designed
speciﬁcally for wireless connectivity detection of which we are aware.

3. SYSTEM OVERVIEW

The RIPPS system acts as a pass-through device for all network trafﬁc while
selectively monitoring network hosts. It effectively identiﬁes the presence of
a local wireless link between two hosts that have a communication path that
passes through the RIPPS device. A RIPPS system could be incorporated at
any point in a network to protect important network resources. For example, a

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

·

6: 5

Fig. 1. Example RIPPS environment.

RIPPS system placed in front of a corporate data server would serve to protect
vital company information from an intruder utilizing an unauthorized and/or
unsecured wireless connection from an RWAP inside the company perimeter.
Figure 1 illustrates a typical deployment scenario for RIPPS.

The RIPPS system is comprised of several distinct components that work to-
gether to quickly and accurately detect the presence of local wireless transmis-
sion media. The actual wireless detection is accomplished through an analy-
sis of LRTT measurements derived from TCP communication which passes
through the RIPPS system. Importantly, this process is enhanced by the sec-
ond component (slicing) that conditions network trafﬁc to help by both remov-
ing interfering noise and expediting medium classiﬁcation. In short, RIPPS of-
fers the desirable transparency and deployment characteristics of purely pas-
sive approaches (no changes or installed agents at clients), the accuracy of
active probing approaches, and expedited measurement mechanisms.

It is important to note that the active components of the RIPPS process are
on-demand mechanisms that can be triggered through either periodic moni-
toring or by other external sensing mechanisms. Moreover, the performance
impact of RIPPS can be strictly limited as discussed in Section 5.2. RIPPS
can act in a stand-alone manner or be incorporated into existing approaches
such as antenna-based solutions for additional accuracy and/or localized host
isolation (i.e., SNMP exchange with switches and/or routers). The following
subsections analyze the key RIPPS components in greater detail with regard
to the Local Round Trip Time (LRTT), packet slicing, and packet ordering.

3.1 Local Round Trip Time

In a broad sense, the latency of network-based communication can be viewed
as the result of either WAN-side or LAN-side effects. WAN-side latency is the
result of many factors which can vary signiﬁcantly between communication
sessions and especially between differing communication host pairings. On the

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 6

·

C. D. Mano et al.

other hand, LAN-side latency represents a reasonably consistent path between
the end host and WAN gateway. Therefore, we limit ourselves to the RTT
associated only with LAN-side trafﬁc in order to remove WAN-side variations
and emphasize the connectivity medium of hosts in the LAN.

Local round trip time is a measurement of the time delay between a mes-
sage to and response from a speciﬁc host in the LAN. A sensor placed at the
edge of the LAN (or other appropriate location) collects data in a passive man-
ner. The metric is obtained by categorizing packets based on a connection-
wise basis (source IP, source port, destination IP, destination port) and stor-
ing both a timestamp as well as an expected acknowledgment (ACK) num-
ber. The timestamp associated with the messages is calculated solely by the
sensor, hence the relative time between messages is consistent and free from
time synchronization problems. Outbound packets are similarly classiﬁed on
a connection-wise basis and the ACK number from the TCP header is com-
pared to the expected ACK numbers calculated previously. The LRTT is the
time difference between incoming packets and corresponding ACK packets as
observed by the monitor itself.

The LRTT is inﬂuenced by a variety of factors. First and foremost, the met-
ric is inﬂuenced by the transmission medium between the monitoring system
and host. The purpose of RIPPS is to isolate this inﬂuence in order to accu-
rately identify the transmission type.

Second, the LRTT metric is inﬂuenced by the size of the data payload. The
variance in packet size results in varying LRTT values for a single host, which
may cause misleading results when comparing hosts to one another. This prob-
lem can be eliminated by calculating multiple LRTT values each based on
packets of uniform size. LRTT values calculated with small packets are de-
sirable in that small packets minimize the inﬂuence of bandwidth capabilities
on packet timing metrics, while large packets maximize those effects [Cheng
and Marsic 2001].

While our purpose is not to identify bandwidth capabilities, intuitively this
may be useful because of the differences between wired and wireless capacities.
However, the advent of MIMO (Multiple In/Multiple Out) and faster theoreti-
cal wireless connectivity are a cause of signiﬁcant concern for trafﬁc analysis
techniques. Furthermore, large packets are typically a signiﬁcant portion of
the overall trafﬁc contained in a typical network. Ignoring this portion means
wasting data, thereby potentially limiting the speed in which transmission
media can be identiﬁed. In addition, a typical client system receives relatively
large data transmissions while sending only small requests. Therefore, ignor-
ing large packets may result in overlooking the activity of potentially danger-
ous client systems.

However, while large packets maximize the inﬂuence of bandwidth on LRTT
(a desirable outcome for slower wireless speeds), large packets also introduce
signiﬁcant noise.1 RIPPS remedies the noise issue of large packets by slicing

1For the purposes of streamlining this article, the reader is referred to Mano [2006], with a discus-
sion of the shortcomings of using purely passive LRTT measurements at an enterprise (campus
gateway) level with thousands of hosts.

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

·

6: 7

the larger packets into smaller, ideally-sized packets through TCP-level modi-
ﬁcations as will be discussed later. This core contribution of our paper enables
not only the inclusion of more packets, but also greatly increases the speed and
quality at which a determination of transmission type can be made.

In addition, there exist other contributing factors to the overall LRTT value
which must be addressed. First, LAN-side jitter effects (congestion, queu-
ing, etc.) are present in the measurement, but are assumed to be a mini-
mal/reasonable component, resulting in precise measurements which can be
used to identify relative LRTT differences of LAN devices.2

A second factor is the retransmission ambiguity problem, presented in Karn
and Partridge [1991]. Simply put, the problem is based on the fact that if a
packet is retransmitted then it is ambiguous which transmission the corre-
sponding acknowledgment packet refers to. We negate these potential affects
by using Karn’s method of discarding LRTT values which may suffer from the
ambiguity problem.

A ﬁnal factor is the absolute time required for the host to process incoming
messages before sending an acknowledgment. While the original RFC for TCP
include strong wording regarding what the ACK represents, the guidelines for
ACK responsiveness and generation are left vague. While the vagueness can
create signiﬁcant issues for utilizing a purely passive LRTT, the next subsec-
tions offer techniques for minimizing the above problem through slicing and
intelligent packet reordering.

3.2 Packet Slicing

Packet slicing is a network trafﬁc conditioning technique which serves as the
key component of RIPPS. This technique has three vital properties which make
it an interesting solution for wireless connectivity assessment. First, packet
slicing dramatically increases the percentage of network data which can be
accurately utilized in assessing the connectivity type. Second, it maintains
consistency with in-band monitoring techniques as direct communication with
suspect hosts is not required. Finally, packet slicing eliminates the tempo-
ral spacing problem (i.e., small TCP data packets are located infrequently to-
gether), resulting in an increased ability to quickly identify wireless devices.

The general concept of packet slicing is simple, yet it improves transmission
medium identiﬁcation capabilities many fold. As noted in various network
trafﬁc studies, very small (64 byte) and very large packets (approaching MTU)
make up the vast majority of network trafﬁc. However, from the perspective
of an individual client, the percentage of small incoming packets is much less
than the percentage of all trafﬁc. The prevalence of large downstream (in-
coming) and small upstream (outgoing) packets can be directly attributed to
typical TCP functionality. The goal of RIPPS is to take these large ingress
data packets and condition them for use in LRTT metrics by slicing payloads
and creating many new smaller packets.

2The experimental studies note the tolerance of RIPPS to various forms of congestion in multi-
tiered networks.

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 8

·

C. D. Mano et al.

Fig. 2. Processing ﬂow of packets for the packet slicing system.

To describe the implementation of packet slicing, the processing of a sin-
gle ﬂow from SYN to FIN is illustrated in Figure 2. A client, A, requests a
connection with a server, B, by sending a SYN packet. RIPPS identiﬁes the
SYN packet and notes the source host, sequence (SEQ) number, and the port
number. B responds with a SYN/ACK, followed by an ACK from A, completing
the handshake. Once communication is established, RIPPS monitors incoming
trafﬁc for packets with the appropriate destination address and port numbers.
If the host is to be actively monitored, packets of a sufﬁcient size are sliced into
multiple packets and appropriately shaped. If the host is not being monitored
or the packet size is too small, the sequence number is noted and the packet
sent onwards with consideration for order preservation.

In short, packet payload slicing spreads a single payload over multiple pack-
ets, attaching each payload slice to an appropriate header. The headers from
the original packet are used to easily create valid headers for each new packet.
The Ethernet header is unchanged from the original, and the IP and TCP head-
ers are modiﬁed slightly to validate the newly created packet. After modify-
ing appropriate header ﬁelds, including checksums, the slices are reordered,
shaped, and forwarded. From the viewpoint of any applications running on
host A, data is still delivered as normal from B. From the perspective of B, the
normal level of ACKs are received from A as RIPPS will take special care to
hide its presence from B.

As noted earlier, it is important to emphasize that the packet slicing activity
of RIPPS is not always on, but is used periodically by intelligently selecting
which hosts should be monitored and when monitoring should be performed
(see 5.2). When coupled with a hybrid approach (minimal impact ﬁrst pass
followed by aggressive assessment if necessary), the impact on individual host
systems which are being monitored and on the overall network is minimal.

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

·

6: 9

Fig. 3. RIPPS Slicing and Re-ordering.

3.2.1 Slice Ordering. While slicing increases the number of potential mea-
surement points, the host is not obligated to acknowledge each packet. Crit-
ically, slices that do not result in additional measurement points represent
potential wasted overhead.

Our internal experiments show different operating systems providing ra-
tios varying from one to one and two to one depending on interpacket spacing
(Windows, Linux) with others cumulatively sending ACKs in a time-wise man-
ner (Mac OS). Hence, operating systems that bias heavily towards cumulative
ACKs would invalidate the entire foundation of RIPPS. To that end, we in-
corporate the packet reordering techniques from TCP Sting [Savage 1999]. In
short, TCP Sting reorders a group of TCP data packets (P0, P1, . . . , PN−1) to
(P1, . . . PN−1, P0) in order to force the creation of ACK messages for monitoring
courtesy of the TCP Fast Retransmit mechanism.

While this mechanism is highly successful when coupled with RIPPS to force
ACK generation, it does introduce the potential for additional ACK ambiguity.
For example, consider the earlier case of a set of sliced packets P0 through
PN−1 reordered in the prescribed Sting ordering (P0 is transmitted last). As a
result, the client will generate Fast ReTransmit ACKs containing an ACK with
the sequence number of P0 (i.e., cumulatively acknowledging everything before
P0). Hence, potentially N − 1 packets will contain that same ACK. Aside from
the cases of retransmissions, such ambiguity is not a problem as the TCP Fast
Retransmit behaviors are relatively consistent across the default OS network
stacks. Moreover, extended functionality such as Selective Acknowledgment
(SACK) is not a problem provided that the ACK is still generated according to
TCP Fast Retransmit behavior.

Since RIPPS is operating transparent to both the client and server
(application-wise), it is essential that RIPPS appropriately intercept and
squelch returning ACKs (forced by reordering). With the slicing of each data
packet, RIPPS notes the expected acknowledgment and a squelch (gobble)/no
squelch ﬂag to denote if the packet should be released from RIPPS. Packets
that are to be released to the server (i.e., the cumulative ACK that is gen-
erated based on Slice 0) are released appropriately. As will be noted in the

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 10

·

C. D. Mano et al.

Fig. 4. RIPPS Testbed.

experiments, the response time of the cumulative ACK varies considerably be-
tween different operating systems while the TCP Fast Re-transmit forced by
Sting is relatively fast and accurate. The effects of employing TCP Sting ver-
sus RIPPS without reordering and the effect of cumulative ACKs are examined
in the next section of experimental studies.

4. EXPERIMENTAL STUDIES

For our experimental studies, a fully functional prototype of RIPPS was im-
plemented. The prototype was developed in RedHat Enterprise 4 utilizing the
libpcap libraries for simplicity of development. The RIPPS monitoring sys-
tem was a dual-core Opteron workstation with three network ports, eth0 for
SSH/external management and a PCI-X Intel dual Gigabit server adapter pro-
viding the pass-through monitoring ports of eth1 and eth2.

The network testbed utilized in the experiments is shown in Figure 4. Mul-
tiple hosts were connected through the pass-through RIPPS box to the univer-
sity LAN. LRTT values were computed relative to the RIPPS box. Optionally,
trafﬁc congestion was introduced by hosts at the H1, H2, and H3 positions to
provide unidirectional and bidirectional congestion both visible and invisible
to RIPPS.

The hosts for comparison were connected at the testing points noted in the
ﬁgure to vary between wired, wired-NAT, and wireless connectivity. A wide
variety of host/network conﬁgurations were tested incorporating Windows,
Linux, and Mac OS as operating systems and 100 Mb per second fast ether-
net (T P1), 100 Mb per second fast ethernet behind a NAT (T P2), and wireless
802.11b, g, and draft-n (T P3). Connectivity was provided through a D-Link
DIR 625 draft-n wireless router. Multiple applications (web, ftp, ssh, scp) were
compared for completeness. Wireless connectivity to the WAP was strictly
limited between b, g, and draft-n in order to not force compatibility modes.
Considerations for 10 Mb per second Ethernet and other wireless routers are
available in Mano [2006].

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

6: 11

·

Fig. 5. Per-packet analysis of LRTT without RIPPS on Web trafﬁc.

Fig. 6. er-packet analysis of LRTT without RIPPS on simple ssh trafﬁc.

In the experiments, two key performance metrics were assessed:

—Medium separation: Regardless of the application involved, was there a
clear separation between the wired and wireless monitored characteristics?
Separation was measured by the 95% conﬁdence interval (CI) of the mea-
sured average LRTT.

—Time to classify: If a clear separation could be identiﬁed, at what time could
a reasonable classiﬁcation be trusted? Classiﬁcation speed was validated
through short-lived web (CNN, Yahoo) and ssh (login, ls, logout) connections.

4.1 Baseline— No RIPPS

To start, we analyzed the performance that occurs when RIPPS is not used. A
summary table is provided in Table I of the various OS/network combinations.
Packets were passed through the RIPPS box but the packets themselves were

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 12

·

C. D. Mano et al.

Table I. Baseline Case—No RIPPS

Application

ACKs

+/- 95% CI

Network Matched Avg. LRTT (ms)

Std. Dev.
of LRTT

OS
Windows
Windows
Windows
Linux
Linux
Mac
Mac

Windows
Windows
Windows

Windows
Windows
Windows

Windows
Windows
Windows
Linux
Linux
Mac
Mac

Windows
Windows
Windows
Linux
Linux
Mac
Mac

Windows
Windows
Windows
Linux
Linux
Mac
Mac

web cnn
web cnn
web cnn
web cnn
web cnn
web cnn
web cnn

web yahoo
web yahoo
web yahoo

web nd
web nd
web nd

ssh
ssh
ssh
ssh
ssh
ssh
ssh

scp
scp
scp
scp
scp
scp
scp

ftp
ftp
ftp
ftp
ftp
ftp
ftp

Type
wired

wireless g
wireless n

wired

wireless b

wired

wireless g

wired

wireless g
wireless n

wired

wireless g
wireless n

wired

wireless g
wireless n

wired

wireless b

wired

wireless g

wired

wireless g
wireless n

wired

wireless b

wired

wireless g

wired

wireless g
wireless n

wired

wireless b

wired

wireless g

481
499
544
436
344
325
358

111
127
107

37
39
32

33
35
33
53
54
41
35

2782
3060
2697
2192
2776
1215
2711

5621
9147
6825
4313
4717
3828
4413

17.508 +/- 3.213
20.802 +/- 3.026
18.606 +/- 3.022
2.000 +/- 0.496
11.520 +/- 0.882
4.038 +/- 1.826
11.010 +/- 3.435

14.022 +/- 5.820
18.923 +/- 6.099
15.231 +/- 5.506

15.058 +/- 12.893
32.560 +/- 14.037
24.228 +/- 14.086

62.141 +/- 18.518
67.438 +/- 19.085
71.138 +/- 19.461

2.144 +/- 1.752
5.095 +/- 1.758
0.251 +/- 0.018
7.286 +/- 9.046

0.723 +/- 0.133
16.905 +/- 0.268
4.185 +/- 0.204
0.641 +/- 0.060

106.762 +/- 1.133

0.573 +/- 0.010
77.620 +/- 1.362

0.598 +/- 0.068
19.088 +/- 0.311
2.890 +/- 0.109
1.016 +/- 0.105
69.544 +/- 0.936
0.719 +/- 0.096
4.658 +/- 0.322

42.836
41.087
42.836
6.299
9.939
20.011
39.504

37.272
41.776
34.617

47.668
53.281
48.433

64.659
68.630
67.952
7.754
7.851
0.069
32.528

4.266
9.013
6.437
1.712
36.289
0.221
43.096

3.080
18.100
5.477
4.177
39.061
3.608
13.001

only noted for LRTT. Neither slicing, reordering, nor shaping was applied to
the packets. Results were computed over several runs with cache ﬂushes.3

From the table, several key observations can be noted. First, in the case of
Windows and web trafﬁc (likely the most common occurrence), discrimination
between wired and wireless connectivity cannot be done with a degree of
conﬁdence. While there is limited separation for the wired versus wireless
cases, the results are inconclusive statistically. Moreover, as these results
were conducted in an idle setting maximizing differentiation, congestion
could introduce small amounts of bias to the readings, removing whatever
limited separation exists in the baseline case. We also note that the lack of

3Variations in packet counts and CPU impact occurred due to changing content at the Web sites,
for example, different ads or articles.

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

6: 13

·

clear separation manifests itself across multiple Web sites (Akamized or not,
small versus many sites, etc.). The lack of separation manifests itself most
clearly in short-lived connections (web, ssh). Although reasonable separation
occurs with Linux and Mac OS X-based hosts, these hosts are typically in
the minority rather than majority in the enterprise. Experiments were not
conducted with draft-n on Linux or Mac OS X as capable drivers did not exist.
A second observation is that as the number of packets measured increases
such as with a secure ﬁle copy or FTP, the accuracy of the measurement does
improve signiﬁcantly. However, the number of packets alone is insufﬁcient as
the lack of separation manifests itself for the short-lived connections in each
session (see Figure 5 and Figure 6). In short, the noise will reappear at sim-
ilar levels in each new session, regardless of monitor length. The graphs in
each ﬁgure show both the instantaneous LRTT measurement (shown via scat-
terplot) and cumulative average LRTT for the most problematic cases of Web
access and SSH. We deﬁne the cumulative average LRTT to be the computed
LRTT at that speciﬁc measurement point (i.e., the third packet represents the
average of packets 1-3).

As the network itself is idle, one can only conclude that the variation in de-
lay originates from the OS (Windows) network stack itself must not be forcing
out immediate ACKs. Similar LRTT observations under Windows were noted
using alternate browsers such as Firefox. In addition, larger spikes tended to
be correlated with the PSH ﬂag being set. Moreover, the performance in the
tests lends to the conclusion that the medium itself is not being stressed with
the short-lived connections. The short-lived characteristic of the connections
(ssh, web) tends to ﬁnish the connection before the TCP slow start window
expands to generate sufﬁcient trafﬁc. While the cumulative average LRTT
does eventually settle, a degree of statistical conﬁdence in the separation of
the measurements cannot be reached. Furthermore, a premature assessment
(time-based or packet-based) could result in incorrect classiﬁcation of the un-
derlying media.

The results of this baseline experiment clearly illustrate the need for RIPPS
if one desires to use LRTT as a medium classiﬁcation mechanism. The simple
LRTT mechanism fails in the web and ssh cases for both medium separation
and time to classify. While the works in Beyah et al. [2004] and Wei et al.
[2006] showed promise, we suspect the likely usage of UNIX-based hosts, long-
lived TCP connections, and slower, half-duplex wireless mediums (802.11b and
802.11g) biased the measurements in their work signiﬁcantly.

4.2 Comparing RIPPS

Table II shows the performance when RIPPS is engaged in the same scenarios.
RIPPS was enabled with a slice size of 60 bytes (approximately 100 byte L3-L7
packet size), a minimal 1 microsecond shaping between sliced packets, and a
1 millisecond spacing between groups of sliced packets. Figure 7 shows the
performance (no RIPPS) versus RIPPS in a side-by-side graph.

Several key observations stand out from the table. First, the separation
of the various medium is now visible in all cases, regardless of application.
This separation can be attributed to two factors, namely the uniformity of the

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 14

·

C. D. Mano et al.

Application

web cnn
web cnn
web cnn
web cnn
web cnn
web cnn
web cnn

web yahoo
web yahoo
web yahoo

web nd
web nd
web nd

Table II. The Performance of RIPPS

Network Matched Avg. LRTT (ms)

Std. Dev.
of LRTT

Type
wired

wireless g
wireless n

wired

wireless b

wired

wireless g

wired

wireless g
wireless n

wired

wireless g
wireless n

wired

wireless g
wireless n

wired

wireless b

wired

wireless g

wired

wireless g
wireless n

wired

wireless b

wired

wireless g

wired

wireless g
wireless n

wired

wireless b

wired

wireless g

ACKs
6705
7020
6295
5205
5470
7543
6052

466
462
482

834
927
587

39
37
36
56
57
49
49

111628
112296
88608
128860
129135
116992
50819

199754
213109
187634
226023
228814
216274
190355

+/- 95% CI

0.471 +/- 0.004
48.802 +/- 0.907
4.800 +/- 0.209
0.384 +/- 0.003

130.102 +/- 1.277

0.458 +/- 0.014
47.708 +/- 0.854

0.390 +/- 0.009
58.712 +/- 1.689
6.617 +/- 0.203

0.346 +/- 0.005

106.876 +/- 3.082

7.020 +/- 0.372

0.260 +/- 0.023
3.249 +/- 0.466
2.564 +/- 0.535
0.301 +/- 0.030
12.805 +/- 1.660
0.314 +/- 0.015
6.445 +/- 1.447

0.955 +/- 0.004

149.913 +/- 0.415

8.167 +/- 0.055
0.798 +/- 0.002

141.172 +/- 0.074

0.580 +/- 0.004
73.291 +/- 0.706

0.849 +/- 0.003

283.607 +/- 0.495

5.693 +/- 0.049
0.948 +/- 0.002
65.093 +/- 0.048
0.487 +/- 0.001
92.789 +/- 0.413

0.195
46.192
10.056
0.142
57.398
0.739
40.391

0.119
22.070
2.707

0.091
57.044
5.476

0.086
1.723
1.950
0.136
7.615
0.063
6.158

0.848
84.606
9.960
0.384
16.097
0.872
96.704

0.682

138.761
12.813
0.600
13.867
0.209

109.576

ssh
ssh
ssh
ssh
ssh
ssh
ssh

scp
scp
scp
scp
scp
scp
scp

ftp
ftp
ftp
ftp
ftp
ftp
ftp

OS
Windows
Windows
Windows
Linux
Linux
Mac
Mac

Windows
Windows
Windows

Windows
Windows
Windows

Windows
Windows
Windows
Linux
Linux
Mac
Mac

Windows
Windows
Windows
Linux
Linux
Mac
Mac

Windows
Windows
Windows
Linux
Linux
Mac
Mac

measurement packet size and the number of measurement points. While the
perceived rendering/receipt delay from the user standpoint was quite similar
(Web trafﬁc), the number of observed points increased dramatically in the
same approximate amount of time. We also note that despite the presence
of MIMO for draft-n, the separation is still quite noticeable versus the wired
baseline case.

Figure 8 breaks down this trend further by showing the instantaneous
and accumulated average values of a standard Web access under RIPPS.
The breakdown of instantaneous values further reafﬁrms the uniformity of
measurement. Despite having the same relatively small number of incoming
data packets, RIPPS identiﬁes signiﬁcantly more LRTT measurements.
Although the additional measurement points introduce overhead, the above
table represents an extreme case whereby RIPPS is permanently enabled.

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

6: 15

·

Fig. 7. Comparison of RIPPS versus no RIPPS for Windows, Web.

Fig. 8. Per-packet analysis of LRTT with RIPPS on Web trafﬁc.

In a deployment scenario, RIPPS would likely be set up to employ a hybrid
approach (slice ﬁrst 1 or 2 packets if host is up for monitoring and then
conduct aggressive RIPPS as necessary).

4.3 Varying RIPPS

Figure 9 shows the effect on the observed average LRTT as the slice size
(TCP payload) is varied from 30 bytes to 1,200 bytes on solely the Windows
wired and wireless draft-n scenarios. As noted in the ﬁgure, an increase in
the packet slice size decreases the relative accuracy of RIPPS. Put simply, the
LRTT becomes noisier due to the larger discrepancy in downstream versus
upstream packet size (data versus ACK) and due to the net reduction in the
number of monitoring packets.

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 16

·

C. D. Mano et al.

Fig. 9. Effect of varying slice sizes on RIPPS (Windows, web cnn).

Table III. Effect of Inter-slice Delay (Shaping) on RIPPS (Windows, web cnn)

Network Matched Avg. LRTT (ms)

Slice
Delay
0
1
100
1000
0
1
100
1000

Type
wired
wired
wired
wired

wireless n
wireless n
wireless n
wireless n

ACKs
6328
2955
7053
2245
2528
5770
6381
4971

+/- 95% CI

0.996 +/- 0.015
0.469 +/- 0.006
0.196 +/- 0.003
0.300 +/- 0.009
9.650 +/- 0.387
6.151 +/- 0.169
6.702 +/- 0.120
2.641 +/- 0.059

Std. Dev.
of LRTT

0.719
0.203
0.128
0.267
11.825
7.783
5.838
2.531

Table III notes the effect on the observed average LRTT as the slice shaping
delay is varied from no delay to one millisecond (1,000 microseconds). With
a signiﬁcant enough shaping delay, the medium access itself is taxed less,
slackening the separation although not signiﬁcantly enough. While the 100
microsecond delay offers the “cleanest” signal in terms of the wired medium, a
low slice size with such a delay creates a noticeable impact on Web page load
times. In contrast, the 1 microsecond delay offers similar performance with no
perceptible delay in page load times.

Finally, Table IV notes the effect of packet reordering on RIPPS. Table IV
notes the necessity of forcing the packet retransmit and avoiding the network
stack bottlenecks for an accurate measurement.

4.4 Congestion and Mixed Signal Sources

Although the previous subsection examined a pure wired or wireless case, it
is extremely likely that a RWAP would have both wired and wireless hosts
connected, hence exhibiting a mixed signal characteristic. Table V shows the

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

6: 17

·

Table IV. Effect of Packet Re-ordering on RIPPS (Windows, web cnn)

Sting
Enabled?
Yes
Yes
No
No

Network Matched Avg. LRTT (ms)

type
wired

wireless n

wired

wireless n

ACKs
2744
6295
1912
1153

+/- 95% CI

0.393 +/- 0.004
4.800 +/- 0.209
6.756 +/- 5.890
14.083 +/- 9.811

Std. Dev.
of LRTT

0.120
10.056
156.549
202.499

Table V. The Performance of No RIPPS and RIPPS with Mixed Signal Sources (Windows)

If RIPPS
no
no
no

yes
yes
yes

Application

type

ACKs

+/- 95% CI

Network Matched Avg. LRTT (ms)

web cnn
web cnn
web cnn

web cnn
web cnn
web cnn

wired NAT
wireless g
wireless n

wired NAT
wireless g
wireless n

608
799
615

12541
16662
11593

24.139 +/- 3.070
20.432 +/- 2.454
23.842 +/- 2.986

1.547 +/- 0.019
28.169 +/- 0.504
4.085 +/- 0.058

Std. Dev.
of LRTT

46.005
42.162
45.011

1.286
39.548
3.779

Table VI. Performance of RIPPS under VBR Congestion (Windows, web cnn)

Congestion Matched Avg. LRTT (ms)

ACKs
6944

+/- 95% CI

0.54 +/- 0.004

Std. Dev.
of LRTT

0.187

Network
Type
wired

wired

wired

wired

wireless n

wireless n

wireless n

wireless n

Type
down

H3 − H1
up+down
H3 = H1

down

H2 − H1
up+down
H2 = H1

down

H3 − H1
up+down
H3 = H1

down

H2 − H1
up+down
H2 = H1

6529

0.576 +/- 0.005

0.197

5608

0.577 +/- 0.0151

0.577

4745

2.133 +/- 0.0543

1.907

6293

5.994 +/- 0.1654

6.694

5901

6.841 +/- 0.2578

10.106

6134

5.398 +/- 0.09812

3.921

4686

11.133 +/- 0.5257

18.362

results of only the Web access in the mixed environment where one wired
Windows host is mixed with the other host listed in the table (two devices,
one wired, one variable access methods). In the table, we assume that both
hosts each conduct the same access pattern (retrieve the contents of a Web
page, i.e., CNN). Even in the mixed signal case, RIPPS is still able to clearly
differentiate between the MIMO draft-n and the wired host.

Finally, Table VI notes the effect of congestion on the monitored RIPPS
behavior. In the congestion case, UDP trafﬁc is streamed in VBR bursts to
achieve an average rate of 70 Mb per second between various hosts noted in
the earlier experimental testbed. Congestion is induced to both appear in-
visible (H1 to H2) and visible (H1 to H3) to the RIPPS monitoring system.
The goal of the experiment was to validate the tolerance of RIPPS to multiple
queuing levels such as may appear in a larger enterprise environment. We

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 18

·

C. D. Mano et al.

note that with additional congestion (upstream and downstream versus pure
downstream), the gap is not only consistent but actually widens for similar ap-
plications. While this test is not necesarily indicative of all environments, we
believe it lends credence to reasonable congestion tolerance for RIPPS. In the
event of extremely complex environments or nonwired links, the monitoring
point for RIPPS would likely be pushed closer to the host to reduce the effect
of tremendously varying links hidden from RIPPS.

5. ANALYSIS

5.1 Network Deployment

An enterprise RIPPS must provide an automated calibration system, as well
as an intelligent method of scanning network hosts. A calibration system is
necessary as the strength of LRTT metrics lie in the relation between values
generated through differing transmission media. Calibration occurs by the
RIPPS system systematically monitoring authenticated known hosts. In the
simplest case, only a single host (i.e., the management station) could be used as
the calibration host. LRTT values from these known hosts serve as a baseline
for the remaining hosts.

For deployment considerations, we assume a network environment whereby
only MAC-level ﬁltering is employed (valid host yields a valid IP via DHCP
lease). As the past behavior of a host may not be indicative of its current state,
periodic network scanning is vital. Consider the case where a wired host is
identiﬁed by RIPPS and shortly thereafter is disconnected from the network.
Then, a RWAP spooﬁng the MAC address of the removed host is inserted in
place of the wired host. It is highly probable that the spoofed MAC address
causes the RWAP to receive the same IP address as the previous host. If this
IP address is considered safe by RIPPS and is therefore not scanned again
until the session time expires, the RWAP will avoid detection.

Hence, an effective method of identifying hosts to be monitored must en-
compass two goals. First, each host is to be monitored periodically, but at
random intervals. The second goal is to monitor all hosts, including those with
a very short window of activity. The malicious intruder will likely minimize
exposure time on the network, quickly accomplishing his or her goal and ex-
iting. Missing such an event would nullify the protection the RIPPS system
offers.

When a SYN packet is observed, RIPPS immediately logs the appropriate
information to begin monitoring the host as described previously. RIPPS prob-
ing is conducted on a two-stage basis. In the ﬁrst stage, quick assessment,
hosts are examined with minor applications of RIPPS. For example, each host
might be monitored via the ﬁrst stage every ﬁve minutes with one or two full-
size data packet(s) conditioned by RIPPS. These initial measurements formu-
late the basis of transitioning to stage two, aggressive assessment. Hosts in
stage two have the entirety of their TCP packets monitored with RIPPS condi-
tioning to a reasonable statistical threshold. The results from the aggressive
assessment can then be tied into external mechanisms such as network isola-
tion (VLAN), additional intrusion monitoring, and/or alert generation coupled

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

6: 19

·

Table VII. First (Quick) Stage Assessment of

Slicing Only One or Two Full-size Packets

(Windows, web cnn)

Network
Type
wired
wireless g
wireless n

Avg LRTT (ms) Avg LRTT (ms)
Slice Two Pkts
Slice One Pkt

0.21 +/- 0.02
4.68 +/- 1.16
1.97 +/- 0.25

0.28 +/- 0.03
5.64 +/- 0.81
2.25 +/- 0.21

with location information via existing network tools (SNMP for physical port
identiﬁcation). The number of hosts being concurrently chosen for the rough
assessment can be limited either with a ﬁxed impact with random selection or
biased by the last monitoring time of a given host.

Table VII shows the measurements obtained by the quick assessment ap-
proach with a 95% conﬁdence interval and the ﬁrst captured ﬂow of the Win-
dows web cnn test. In fact, the single slice case demonstrates reasonable sepa-
ration even up to a 99.999% conﬁdence interval between the wired and wireless
cases for the ﬁrst ﬂow in the session. We note that the source of the quick
assessment in both cases is only one or two incoming full-sized data packets.

5.2 RIPPS Overhead/Performance

The maintenance of a minimum level of overhead is critical to the functionality
of the RIPPS system as additional network load can hamper communications,
diminishing end user QoS. Although one could leave RIPPS on permanently,
such an approach is simply not necessary. Rather, the two-tier process outlined
earlier can limit the impact of RIPPS.

The overhead introduced by aggressive RIPPS conditioning on a single con-

nection in terms of network bandwidth can be stated as:

O H = (⌈

⌉ − 1)(H D RL2 + H D RL3 + H D RL4)

PS
SS

where O H is the introduced overhead in terms of bytes; PS is the original TCP
payload size; SS is the target RIPPS slice size; and H D RL2, H D RL3, H D RL4
are the Ethernet (layer 2); IP (layer 3) and TCP (layer 4) header sizes. From
this formula, a single full-size data packet (1,514 bytes) would create an ad-
ditional 1,296 bytes of downstream network load, a near doubling of network
load in terms of bandwidth. Similarly, a nearly identical reverse ﬂow of pack-
ets (ACKs) would be generated (restricted to a minimum of 64 bytes) creating
1,536 bytes of data on the local network.

At ﬁrst glance, such overhead would appear to reduce RIPPS to a non-
starter. However, the actual impact of RIPPS is mitigated through several
factors. First, the two-tiered approach signiﬁcantly limits the impact of RIPPS.
In the quick assessment stage, only a single large packet per host per monitor-
ing period is conditioned for RIPPS. The net overhead is roughly proportional
to a single retransmission of a lost packet on the upstream and downstream
internal network links.

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 20

·

C. D. Mano et al.

Table VIII. Overhead of a Potential RIPPS Deployment

Stage 1

Pkts

Stage 2
Points

Slice
Size

Overhead

Hosts
100
200
400
800
1600
2400
3200

1
1
1
1
1
1
1

Mon

Period
1 min
1 min
1 min
1 min
1 min
1 min
1 min

60
60
60
60
60
60
60

(Mb)
1.26
2.53
5.05
10.11
20.21
30.33
40.44

400
400
400
400
400
400
400

Second, RIPPS trafﬁc is shaped using a relatively small shaping delay cou-
pled with a interpacket slicing delay to spread out the sliced trafﬁc. Hence,
the impact of RIPPS does not occur in an immediate burst. Third, RIPPS need
only gather sufﬁcient data to provide an appropriate conﬁdence in the relia-
bility of the data. From the earlier data, extracting a solid separation (95%+
conﬁdence interval) between draft-n (the current fastest wireless) and wired
hosts can easily be achieved in roughly 400 packets of data. At full incoming
data packet sizes, only 17 full-sized data packets would be required to satisfy
this level (roughly 26K of data). Hence, one could effectively cap the maximum
impact of monitoring a single host at 22K downstream, 26K upstream on the
local LAN.

Fourth, the impact of RIPPS is not extended beyond the local network itself.
RIPPS automatically “gobbles” the stimulated TCP Fast Retransmit packets,
leaving the net impact external to the network of RIPPS nearly zero (beyond
the slight initial throttling). Once the host leaves RIPPS monitoring, normal
operations commence without any performance impact by RIPPS. Further-
more, critical infrastructure hosts can easily be exempted from RIPPS in order
to not degrade performance. For instance, an environment whereby external
Internet visibility is placed in the DMZ outside of local ﬁrewalled network,
RIPPS would not degrade such services.

Consider a simple RIPPS deployment applied at a university (enterprise-
wide) scale. For simplicity, consider only a single RIPPS monitoring station at
the gateway to the Internet (i.e., co-located with the ﬁrewall/IDS). A Gigabit
Ethernet backbone is shared by all hosts that may branch out to 100 Mb per
second or Gigabit Ethernet. Table VIII shows the overhead of RIPPS in the up-
stream case with varying number of hosts, revalidating each host each minute
(assume hosts are always active to the Internet), and a payload slice size of
60 bytes. For the purposes of allowing noise via transient events (congestion,
computation, application), we assume the probability of a host transitioning to
the aggressive assessment stage is 1%.

We note that the overhead for 2,400 hosts monitored once per minute (typi-
cally with only a single fully sliced packet) is 30.33 Mb (3.79 MB). Depending
on how the hosts are monitored, the overhead can be spaced out over the course
of the monitoring period (one minute) leaving a net overhead of approximately
0.5% on a Fast Ethernet link. Despite that fact that the above table takes
an extremely pessimistic assessment (all hosts are active all of the time), the
actual overhead of RIPPS is quite reasonable, even on Fast Ethernet.

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

6: 21

·

While not noted in the above scenario, the likelihood of transitioning to the
aggressive stage is likely to occur for hosts in a batch-wise sense (i.e., the same
link serving those hosts becomes congested). Although this is a cause for minor
concern, the severity of this problem can be mitigated by the placement of the
RIPPS device itself and by limits on the number of simultaneous aggressive
assessments. Provided that the RIPPS device can observe the congestion (i.e.,
congestion crosses the RIPPS monitoring point), detection is only affected.

In practice, such a large enterprise would likely have RIPPS monitoring
points extended closer to the hosts themselves rather than using only a central
monitoring point in such a larger environment. For instance, consider a com-
pany campus with a wireless short haul between buildings. In such a case, a
RIPPS monitoring device would be placed at the edge of the Internet in addi-
tion to one on the far end of the wireless short haul. While near-host placement
in the switch as proposed by Bro-LAN [Weaver et al. 2006] is not necessary,
RIPPS would ideally be placed next to each router in the enterprise network.

5.3 Weaknesses

The nature of RIPPS results in the ability of a host to detect when it is being
monitored. This could be accomplished by a simple analysis of incoming trafﬁc,
which would show an abundance of very small packets, a clear indication of
RIPPS activity. In the best-case scenario, RIPPS would act as a deterrent to
would-be attackers. However, an attacker could potentially attempt to modify
its behavior in an attempt to avoid detection. Two counterattacks which could
be implemented by an intruder are wired system spooﬁng and a proxy attack.

5.3.1 Wired System Spooﬁng. Wired system spooﬁng is method whereby
an unauthorized wireless host would appear as a wired system to the RIPPS
monitoring system. If done successfully, an intruder could stealthily compro-
mise network resources as if a detection system was not present.

Analysis of this problem is simpliﬁed by ﬁrst looking at the unrealistic re-
verse situation of a wired host attempting to mimic a wireless one. To accom-
plish this, the wired host would add a delay to its acknowledgment of data
received, increasing its measured LRTT values. In addition, the delay would
be varied to create an increase in the standard deviation of the delay time.
RIPPS could not distinguish the delay from the total LRTT, allowing the wired
host to successfully take on the persona of wireless transmission.

The key to this mimicry is the ability of the wired host to delay TCP ac-
knowledgment responses. Returning to the original problem, it is clear that
in order for a wireless host to pass as being wired it must have the ability to
act in the opposite manner, meaning it must decrease the delay of the TCP ac-
knowledgments, as well as the variance of the delay. A wireless host would be
unable to decrease LRTT times by modifying wireless protocols or the nature
of the physical medium. Therefore, the host would need to resort to oppor-
tunistically sending ACKs in an attempt to reduce the LRTT values observed
by the RIPPS monitor. The potential for a mimicry attack could be made ex-
tremely difﬁcult to overcome by varying the shaping delay, slice size, and/or
slice ordering (i.e., a checkerboard-like approach).

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

6: 22

·

C. D. Mano et al.

5.3.2 Proxy Attack. A proxy attack involves the use of a system, such as
a laptop computer, which can be connected through a wired port and double
as a wireless access point. In this attack, the laptop computer would act as
a proxy for all communication between an unauthorized wireless source and
associated destination systems. It is important to note that this scenario of
an explicit proxy is distinct from most connection sharing methods (Mac OS X,
Windows) that simply provide NAT-like services across the private network.

In this scenario it would appear that all communication originates, or ter-
minates, at the proxy system, as this system is the actual endpoint for com-
munication. The proxy is responsible for sending ACKs, meaning the wireless
medium is not involved in the communication at all. The wireless host obtains
data by establishing an end-to-end connection directly with the proxy. There-
fore, direct communication to or from the wireless host will not pass through a
RIPPS monitor, successfully evading detection.

The RIPPS system identiﬁes wireless media involved directly in end-to-end
In this
communication which passes through a RIPPS monitoring system.
case, the wireless medium is outside the end-to-end connection, and is there-
fore outside the scope of the problem which RIPPS solves. A solution for this
problem could be drawn from proxy system detection techniques.

6. SUMMARY

Wireless connectivity point detection is an important capability for the secu-
rity of computer networks. The RIPPS system performs network trafﬁc condi-
tioning to quickly and transparently create modiﬁed TCP packets critical for
fast and accurate medium classiﬁcation. RIPPS can potentially identify the
existence of wireless connectivity on the order of milliseconds, eliminating the
threat of extremely quick intrusions on the network. The efﬁcient identiﬁca-
tion process results in a minimal amount of overhead on the network.

REFERENCES

ADYA, A., BAHL, P., CHANDRA, R., AND QIU, L. 2004. Architecture and techniques for diagnosing
faults in IEEE 802.11 infrastructure networks. In Proceedings of Annual International Confer-
ence on Mobile Computing and Networking (MOBICOM’04). 30–44.

BELLOVIN, S. M. 2002. A technique for counting NATted hosts. In Proceedings of the 2nd ACM

SIGCOMM Workshop on Internet Measurement (SIGCOMM’02). 267–272.

BEVERLY, R. 2004. A robust classiﬁer for passive TCP/IP ﬁngerprinting. In Proceedings of Passive

and Active Network Measurement, 5th International Workshop. 158–167.

BEYAH, R., KANGUDE, S., YU, G., STRICKLAND, B., AND COPELAND, J. 2004. Rogue access point
detection using temporal trafﬁc characteristics. In Proceedings of IEEE Global Telecommunica-
tions Conference (GLOBECOM’04). 2271–2275.

CHENG, L. AND MARSIC, I. 2001. Fuzzy reasoning for wireless awareness. Int. J. Wirel. Inform.

Netw. 8, 1, 15–26.

CHIRUMAMILLA, M. K. AND RAMAMURTHY, B. 2003. Agent based intrusion detection and re-
sponse system for wireless lans. In Proceedings of IEEE International Conference on Communi-
cations. Vol. 1. 492–496.

DERAISON, R. AND GULA, R. 2003. Using nessus to detect wireless acccess points. Tenable Net-

work Security. http://www.tenablesecurity.com/papers.html.

GUO, F. AND CHIUEH, T. 2006. Sequence number-based mac address spoof detection. EURASIP

J. Wirel. Commu. Network.

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

Detecting Unauthorized Wireless Hosts Through Network Trafﬁ c Conditioning

6: 23

·

HANDLEY, M., PAXSON, V., AND KREIBICH, C. 2001. Network intrusion detection: Evasion, trafﬁc
normalization, and end-to-end protocol semantics. In Proceedings of USENIX Security Sympo-
sium (USENIX’01).

HENNING, R. R. 2003. Vulnerability assessment in wireless networks. In Symposium on Applica-

tions and the Internet Workshops. 358–362.

KARN, P. AND PARTRIDGE, C. 1991. Improving round-trip time estimates in reliable transport

protocols. ACM Trans. Comput. Syst. 9, 4, 364–373.

MANO, C. 2006. Defending against malicious rogue system threats. Ph.D. thesis, University of

SAVAGE, S. 1999. Sting: A TCP-based network measurement tool. In USENIX Symposium on

Notre Dame.

Internet Technologies and Systems.

WEAVER, N., PAXSON, V., AND SOMMER, R. 2006. Work in progress: Bro-LAN pervasive network

inspection and control for LAN trafﬁc. In Workshop on Enterprise Network Security.

WEI, W., SUH, K., GU, Y., WANG, B., AND KUROSE, J. 2006. Passive online rogue access point
detection using sequential hypothesis testing with tcp ack-pairs. UMass CMPSCI Tech. rep.
2006-60.

WEI, W., WANG, B., ZHG, C., KUROSE, J., AND TOWSLEY, D. 2005. Classiﬁcation of access net-
work types: Ethernet, Wireless LAN, ADSL, Cable Modem or Dialup? In Proceedings of An-
nual Joint Conference of the IEEE Computer and Communications Societies (INFOCOM’05).
1060–1071.

Received January 2006; revision April 2007; accepted July 2007

ACM Transactions on Information and Systems Security, Vol. 11, No. 2, Article 6, Pub. date: May 2008.

