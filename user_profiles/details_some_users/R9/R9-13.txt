(cid:83)(cid:104)(cid:111)(cid:114)(cid:116) (cid:80)(cid:97)(cid:112)(cid:101)(cid:114)(cid:58) (cid:84)(cid:114)(cid:111)(cid:117)(cid:98)(cid:108)(cid:101)(cid:115)(cid:104)(cid:111)(cid:111)(cid:116)(cid:105)(cid:110)(cid:103) (cid:68)(cid:105)(cid:115)(cid:116)(cid:114)(cid:105)(cid:98)(cid:117)(cid:116)(cid:101)(cid:100) (cid:83)(cid:121)(cid:115)(cid:116)(cid:101)(cid:109)(cid:115) (cid:118)(cid:105)(cid:97) (cid:68)(cid:97)(cid:116)(cid:97) (cid:77)(cid:105)(cid:110)(cid:105)(cid:110)(cid:103)

(cid:68)(cid:97)(cid:118)(cid:105)(cid:100) (cid:65)(cid:46) (cid:67)(cid:105)(cid:101)(cid:115)(cid:108)(cid:97)(cid:107)(cid:44) (cid:68)(cid:111)(cid:117)(cid:103)(cid:108)(cid:97)(cid:115) (cid:84)(cid:104)(cid:97)(cid:105)(cid:110)(cid:44) (cid:97)(cid:110)(cid:100) (cid:78)(cid:105)(cid:116)(cid:101)(cid:115)(cid:104) (cid:86)(cid:46) (cid:67)(cid:104)(cid:97)(cid:119)(cid:108)(cid:97) (cid:0)

(cid:68)(cid:101)(cid:112)(cid:97)(cid:114)(cid:116)(cid:109)(cid:101)(cid:110)(cid:116) (cid:111)(cid:102) (cid:67)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:101)(cid:114) (cid:83)(cid:99)(cid:105)(cid:101)(cid:110)(cid:99)(cid:101) (cid:97)(cid:110)(cid:100) (cid:69)(cid:110)(cid:103)(cid:105)(cid:110)(cid:101)(cid:101)(cid:114)(cid:105)(cid:110)(cid:103)(cid:44)

(cid:85)(cid:110)(cid:105)(cid:118)(cid:101)(cid:114)(cid:115)(cid:105)(cid:116)(cid:121) (cid:111)(cid:102) (cid:78)(cid:111)(cid:116)(cid:114)(cid:101) (cid:68)(cid:97)(cid:109)(cid:101)(cid:44) (cid:85)(cid:83)(cid:65)

(cid:65)(cid:98)(cid:115)(cid:116)(cid:114)(cid:97)(cid:99)(cid:116)

(cid:84)(cid:104)(cid:114)(cid:111)(cid:117)(cid:103)(cid:104) (cid:109)(cid:97)(cid:115)(cid:115)(cid:105)(cid:118)(cid:101) (cid:112)(cid:97)(cid:114)(cid:97)(cid:108)(cid:108)(cid:101)(cid:108)(cid:105)(cid:115)(cid:109)(cid:44) (cid:100)(cid:105)(cid:115)(cid:116)(cid:114)(cid:105)(cid:98)(cid:117)(cid:116)(cid:101)(cid:100) (cid:115)(cid:121)(cid:115)(cid:116)(cid:101)(cid:109)(cid:115) (cid:101)(cid:110)(cid:97)(cid:98)(cid:108)(cid:101)
(cid:116)(cid:104)(cid:101) (cid:109)(cid:117)(cid:108)(cid:116)(cid:105)(cid:112)(cid:108)(cid:105)(cid:99)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110) (cid:111)(cid:102) (cid:112)(cid:114)(cid:111)(cid:100)(cid:117)(cid:99)(cid:116)(cid:105)(cid:118)(cid:105)(cid:116)(cid:121)(cid:46) (cid:85)(cid:110)(cid:102)(cid:111)(cid:114)(cid:116)(cid:117)(cid:110)(cid:97)(cid:116)(cid:101)(cid:108)(cid:121)(cid:44) (cid:105)(cid:110)(cid:99)(cid:114)(cid:101)(cid:97)(cid:115)(cid:45)
(cid:105)(cid:110)(cid:103) (cid:116)(cid:104)(cid:101) (cid:115)(cid:99)(cid:97)(cid:108)(cid:101) (cid:111)(cid:102) (cid:97)(cid:118)(cid:97)(cid:105)(cid:108)(cid:97)(cid:98)(cid:108)(cid:101) (cid:109)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101)(cid:115) (cid:116)(cid:111) (cid:117)(cid:115)(cid:101)(cid:114)(cid:115) (cid:119)(cid:105)(cid:108)(cid:108) (cid:97)(cid:108)(cid:115)(cid:111) (cid:109)(cid:117)(cid:108)(cid:45)
(cid:116)(cid:105)(cid:112)(cid:108)(cid:121) (cid:100)(cid:101)(cid:98)(cid:117)(cid:103)(cid:103)(cid:105)(cid:110)(cid:103) (cid:119)(cid:104)(cid:101)(cid:110) (cid:102)(cid:97)(cid:105)(cid:108)(cid:117)(cid:114)(cid:101) (cid:111)(cid:99)(cid:99)(cid:117)(cid:114)(cid:115)(cid:46) (cid:68)(cid:97)(cid:116)(cid:97) (cid:109)(cid:105)(cid:110)(cid:105)(cid:110)(cid:103) (cid:97)(cid:108)(cid:108)(cid:111)(cid:119)(cid:115)
(cid:116)(cid:104)(cid:101) (cid:101)(cid:120)(cid:116)(cid:114)(cid:97)(cid:99)(cid:116)(cid:105)(cid:111)(cid:110) (cid:111)(cid:102) (cid:112)(cid:97)(cid:116)(cid:116)(cid:101)(cid:114)(cid:110)(cid:115) (cid:119)(cid:105)(cid:116)(cid:104)(cid:105)(cid:110) (cid:108)(cid:97)(cid:114)(cid:103)(cid:101) (cid:97)(cid:109)(cid:111)(cid:117)(cid:110)(cid:116)(cid:115) (cid:111)(cid:102) (cid:100)(cid:97)(cid:116)(cid:97) (cid:97)(cid:110)(cid:100)
(cid:116)(cid:104)(cid:101)(cid:114)(cid:101)(cid:102)(cid:111)(cid:114)(cid:101) (cid:102)(cid:111)(cid:114)(cid:109)(cid:115) (cid:116)(cid:104)(cid:101) (cid:102)(cid:111)(cid:117)(cid:110)(cid:100)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110) (cid:102)(cid:111)(cid:114) (cid:97) (cid:117)(cid:115)(cid:101)(cid:102)(cid:117)(cid:108) (cid:109)(cid:101)(cid:116)(cid:104)(cid:111)(cid:100) (cid:111)(cid:102) (cid:100)(cid:101)(cid:45)
(cid:98)(cid:117)(cid:103)(cid:103)(cid:105)(cid:110)(cid:103)(cid:44) (cid:112)(cid:97)(cid:114)(cid:116)(cid:105)(cid:99)(cid:117)(cid:108)(cid:97)(cid:114)(cid:108)(cid:121) (cid:119)(cid:105)(cid:116)(cid:104)(cid:105)(cid:110) (cid:115)(cid:117)(cid:99)(cid:104) (cid:100)(cid:105)(cid:115)(cid:116)(cid:114)(cid:105)(cid:98)(cid:117)(cid:116)(cid:101)(cid:100) (cid:115)(cid:121)(cid:115)(cid:116)(cid:101)(cid:109)(cid:115)(cid:46) (cid:84)(cid:104)(cid:105)(cid:115)
(cid:112)(cid:97)(cid:112)(cid:101)(cid:114) (cid:111)(cid:117)(cid:116)(cid:108)(cid:105)(cid:110)(cid:101)(cid:115) (cid:97) (cid:115)(cid:117)(cid:99)(cid:99)(cid:101)(cid:115)(cid:115)(cid:102)(cid:117)(cid:108) (cid:97)(cid:112)(cid:112)(cid:108)(cid:105)(cid:99)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110) (cid:111)(cid:102) (cid:100)(cid:97)(cid:116)(cid:97) (cid:109)(cid:105)(cid:110)(cid:105)(cid:110)(cid:103) (cid:105)(cid:110)
(cid:116)(cid:114)(cid:111)(cid:117)(cid:98)(cid:108)(cid:101)(cid:115)(cid:104)(cid:111)(cid:111)(cid:116)(cid:105)(cid:110)(cid:103) (cid:100)(cid:105)(cid:115)(cid:116)(cid:114)(cid:105)(cid:98)(cid:117)(cid:116)(cid:101)(cid:100) (cid:115)(cid:121)(cid:115)(cid:116)(cid:101)(cid:109)(cid:115)(cid:44) (cid:112)(cid:114)(cid:111)(cid:112)(cid:111)(cid:115)(cid:101)(cid:115) (cid:97) (cid:102)(cid:114)(cid:97)(cid:109)(cid:101)(cid:119)(cid:111)(cid:114)(cid:107)
(cid:102)(cid:111)(cid:114) (cid:102)(cid:117)(cid:114)(cid:116)(cid:104)(cid:101)(cid:114) (cid:115)(cid:116)(cid:117)(cid:100)(cid:121)(cid:44) (cid:97)(cid:110)(cid:100) (cid:115)(cid:112)(cid:101)(cid:99)(cid:117)(cid:108)(cid:97)(cid:116)(cid:101)(cid:115) (cid:111)(cid:110) (cid:111)(cid:116)(cid:104)(cid:101)(cid:114) (cid:102)(cid:117)(cid:116)(cid:117)(cid:114)(cid:101) (cid:119)(cid:111)(cid:114)(cid:107)(cid:46)

(cid:49) (cid:73)(cid:110)(cid:116)(cid:114)(cid:111)(cid:100)(cid:117)(cid:99)(cid:116)(cid:105)(cid:111)(cid:110)

Distributed systems are multiplicative tools: they multi-
ply the ability of a user to perform useful work, but they also
multiply the ability to make a mess. Consider the following
common scenario: a user submits one million jobs to a sys-
tem consisting of thousands of CPUs. After working on the
jobs for some time, the system reports completion. How-
ever, the user unhappily discovers that a large fraction of
the jobs have failed! How would an end-user even begin to
sort out this mess? This is not merely an academic exercise.
Regular users of large distributed systems are accustomed
to these occurrences, particularly in the development stages
of a system. For example, Grid3 [7] has reported a thirty
percent failure rate for some categories of jobs.

Why do unexplained failures of this type occur at large
scale? There are many different kinds of failure that are
difﬁcult to disentangle. First, a given job may not necessar-
ily be compatible with arbitrary machines. Obviously, most
jobs require a particular CPU and operating system. More
subtly, users may not be aware that a particular job requires
certain tools or libraries to be installed on the operating sys-
tem. Other failures may be due to administrative activities:
the ﬁrewall rules on a cluster might be adjusted, or a user
may be denied access to resources previously available. Fi-
nally, some failures are due to pure chance: a cosmic ray
disrupts a stored value, and the program crashes.

(cid:1) Authors’ e-mail: (cid:2) dcieslak,dthain,nchawla (cid:3) @cse.nd.edu

We propose that data mining techniques can be applied
to the problem of large scale troubleshooting. If both jobs
and the resources that they consume are annotated with
structured information relevant to success or failure, then
classiﬁcation algorithms can be used to ﬁnd properties of
each that correlate with success or failure.
In the one-
million jobs example above, an ideal troubleshooter would
report to the user something like: (cid:89)(cid:111)(cid:117)(cid:114) (cid:106)(cid:111)(cid:98)(cid:115) (cid:97)(cid:108)(cid:119)(cid:97)(cid:121)(cid:115) (cid:102)(cid:97)(cid:105)(cid:108) (cid:111)(cid:110)
(cid:76)(cid:105)(cid:110)(cid:117)(cid:120) (cid:50)(cid:46)(cid:56) (cid:109)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101)(cid:115)(cid:44) (cid:97)(cid:108)(cid:119)(cid:97)(cid:121)(cid:115) (cid:102)(cid:97)(cid:105)(cid:108) (cid:111)(cid:110) (cid:99)(cid:108)(cid:117)(cid:115)(cid:116)(cid:101)(cid:114) (cid:88) (cid:98)(cid:101)(cid:116)(cid:119)(cid:101)(cid:101)(cid:110) (cid:109)(cid:105)(cid:100)(cid:45)
(cid:110)(cid:105)(cid:103)(cid:104)(cid:116) (cid:97)(cid:110)(cid:100) (cid:54) (cid:65)(cid:46)(cid:77)(cid:44) (cid:97)(cid:110)(cid:100) (cid:102)(cid:97)(cid:105)(cid:108) (cid:119)(cid:105)(cid:116)(cid:104) (cid:53)(cid:48)(cid:37) (cid:112)(cid:114)(cid:111)(cid:98)(cid:97)(cid:98)(cid:105)(cid:108)(cid:105)(cid:116)(cid:121) (cid:111)(cid:110) (cid:109)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101)(cid:115)
(cid:111)(cid:119)(cid:110)(cid:101)(cid:100) (cid:98)(cid:121) (cid:117)(cid:115)(cid:101)(cid:114) (cid:89)(cid:46) Further, these discoveries may be used to
automatically avoid making bad placement decisions that
waste time and resources.

We hasten to note that this form of data mining is not
It does not explain (cid:119)(cid:104)(cid:121) failures happen, or
a panacea.
make any attempt to diagnose problems in ﬁne detail.
It
only proposes to the user properties correlated with suc-
cess or failure. Other tools and techniques may be applied
to extract causes. Rather, data mining allows the user of
a large system to rapidly make generalizations to improve
the throughput and reliability of a system without engag-
ing in low level debugging. These generalizations may be
used later at leisure to locate and repair problems. In addi-
tion, the problem of distributed debugging, with its unique
idiosyncracies and dynamics, lends itself as a compelling
application for data mining research. Standard off-the-shelf
methodologies might not be directly applicable for large,
dynamic, and evolving system. It is desired to implement
techniques that are capable of incremental self-revision and
adaptation. The goal of our paper is to serve as a proof-of-
concept and identify venues for compelling future research.

(cid:50) (cid:80)(cid:114)(cid:111)(cid:111)(cid:102) (cid:111)(cid:102) (cid:67)(cid:111)(cid:110)(cid:99)(cid:101)(cid:112)(cid:116)

We have created a proof of concept of this idea by ana-
lyzing jobs submitted to an active Condor [9] pool of 250
machines with a wide variety of properties and several ac-
tive users. To apply data mining, we must use the informa-
tion available from this pool to determine attributes. Exper-
iments must then be performed to validate that data mining
is useful in distributed systems troubleshooting.

1-4244-0307-3/06/$20.00 ©2006 IEEE.

309

Condor makes use of ClassAds [15] to describe both jobs
and resources in a structured way, so we do not need to add
any additional gathering instrumentation. For example, Fig-
ure 1 represents fragments of job and machine ClassAds.
Of course, each job and machine has many more properties

(cid:77)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101)

(cid:74)(cid:111)(cid:98)
Cmd = “simul.exe” Name = “c01.nd.edu”
Owner = “dcieslak” Arch = “INTEL”
ImageSize = 40569 OpSys = “Linux”

(cid:70)(cid:105)(cid:103)(cid:117)(cid:114)(cid:101) (cid:49)(cid:46) (cid:74)(cid:111)(cid:98) (cid:97)(cid:110)(cid:100) (cid:77)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101) (cid:70)(cid:114)(cid:97)(cid:103)(cid:109)(cid:101)(cid:110)(cid:116)(cid:115)

that are not always apparent or interesting to the user. In our
conﬁguration, both jobs and machines have over 70 prop-
erties, describing items ranging from the vital (command
line arguments) to the mundane (time since last reboot). We
have constructed a tool to capture the information provided
on each machine by ClassAds, which then converts this dy-
namically into a feature space based by translating each
ﬁeld into a separate dimension of this space. This allows for
many descriptive properties of the machines, such as CPU,
size of memory, available diskspace, owner, and cluster. As
we will see below, these non-obvious properties and their
interactions play an interesting role in troubleshooting.

With a process in-hand to generate the attribute spaces as
needed, we then proceed to construct a set of controlled ex-
periments in which failure and failure conditions are unam-
biguous. This enables, veriﬁcation of data mining to capture
the proper failure conditions. To test this concept in a con-
trolled fashion, we construct batches of 1000 jobs that fail in
known ways. To simplify, we deﬁne (cid:102)(cid:97)(cid:105)(cid:108)(cid:117)(cid:114)(cid:101) to mean (cid:101)(cid:120)(cid:105)(cid:116)(cid:101)(cid:100)
(cid:119)(cid:105)(cid:116)(cid:104) (cid:115)(cid:116)(cid:97)(cid:116)(cid:117)(cid:115)(cid:33)(cid:61)(cid:48), although failures may be detected by many
other means. As the jobs complete, we extract feature vec-
tors that capture the pair of job and machine, along with an
indication of success or failure. With each dataset, we then
applied two data mining techniques. C4.5 [14] decision
trees are among the most popular data mining techniques
and employ an entropy-based divide-and-conquer induction
algorithm for tree construction. While C4.5 is used in most
supervised learning applications, they are prone to over-
ﬁtting without properly tuned pruning. Still, C4.5 is capable
of generating highly accurate models. RIPPER [4] is a rule
based data mining method that is more expensive than C4.5,
but is much more noise tolerant. This method uses incre-
mental pruning to reduce error and adopts a separate-and-
conquer approach, which removes training examples with
established rules via recursion. Our experiments we show
Ripper to be more amenable for distributed debugging. It
produced more accurate and comprehensibile model.

To evaluate the functionality offered by data mining, we
implemented the following four different (simulated) failure
scenarios. (1) Fail on a given operating system. (2) Fail on

(cid:70)(cid:105)(cid:103)(cid:117)(cid:114)(cid:101) (cid:51)(cid:46) (cid:67)(cid:52)(cid:46)(cid:53) (cid:68)(cid:101)(cid:99)(cid:105)(cid:115)(cid:105)(cid:111)(cid:110) (cid:84)(cid:114)(cid:101)(cid:101)

a given OS with insufﬁcient disk space. (3) Fail on a given
OS and on others with a 66% probability. (3) Fail randomly
with 50% probability.

Figure 2 shows the response to these simulated cases.
RIPPER produces compact rules, while C4.5 produces a
classiﬁcation tree, an example of which may be seen in Fig-
ure 3. In case (1), both classiﬁers predict that the job will
fail if it runs on a SUN4U CPU, which is always associated
with the SOLARIS OS in this pool. In case (2) both clas-
siﬁers ﬁnd that sufﬁcient disk is needed to run the job, but
capture the VirtualMemory property rather than the LINUX
OS. In this particular pool, all LINUX machines match the
VirtualMemory condition. In (3) RIPPER ﬁnds the condi-
tion most likely to lead to success (Arch==“INTEL”), even
though that failure rate is still high. Finally, (4) demon-
strates that random failures still result in some unexpected
classiﬁcations by chance. While RIPPER was found to be
the more robust method for rule learning, Figure 3 depicts a
C4.5 decision tree learned from the third simulation and is
useful for demonstrating the elegance of rules versus trees.
What is interesting about these results is that classiﬁca-
tion algorithms can produce results that are (cid:99)(cid:111)(cid:114)(cid:114)(cid:101)(cid:99)(cid:116) (cid:111)(cid:98)(cid:115)(cid:101)(cid:114)(cid:118)(cid:97)(cid:45)
(cid:116)(cid:105)(cid:111)(cid:110)(cid:115) that can be (cid:97)(cid:99)(cid:116)(cid:101)(cid:100) (cid:117)(cid:112)(cid:111)(cid:110), even though the results may be
(cid:117)(cid:110)(cid:101)(cid:120)(cid:112)(cid:101)(cid:99)(cid:116)(cid:101)(cid:100). Consider case (2): Even though the classiﬁer
identiﬁes machines based on disk and memory properties,
these properties may be used for future machine selection in
order to avoid failures, because those properties are in fact
correlated with the actual cause of the failure. A reason-
able troubleshooting tool may observe properties and then
modiﬁed the job requirements as a workload runs.

Of course, this assumes that the membership (and prop-
erties) of the pool do not change! Consider case (1): The
troubleshooter proposes that will always fail on SUN4U,
because the current pool only contains SUN4U-SOLARIS
and INTEL-LINUX machines.
If SUN4U-LINUX ma-
chines are added to the pool, they will (incorrectly) go un-
used. Or, if INTEL-SOLARIS machines are added, jobs
will fail on them. Case (4) presents a danger. If jobs fail

310

(cid:73)(cid:110)(cid:100)(cid:117)(cid:99)(cid:101)(cid:100) (cid:70)(cid:97)(cid:105)(cid:108)(cid:117)(cid:114)(cid:101)
(cid:73)(cid:102) (cid:79)(cid:83) (cid:61) (cid:83)(cid:111)(cid:108)(cid:97)(cid:114)(cid:105)(cid:115) (cid:116)(cid:104)(cid:101)(cid:110) (cid:102)(cid:97)(cid:105)(cid:108)
(cid:101)(cid:108)(cid:115)(cid:101) (cid:115)(cid:117)(cid:99)(cid:99)(cid:101)(cid:101)(cid:100)
(cid:73)(cid:102) (cid:79)(cid:83) (cid:61) (cid:76)(cid:105)(cid:110)(cid:117)(cid:120) (cid:116)(cid:104)(cid:101)(cid:110)
(cid:73)(cid:102) (cid:68)(cid:105)(cid:115)(cid:107) (cid:1) (cid:49)(cid:101)(cid:43)(cid:49)(cid:50) (cid:116)(cid:104)(cid:101)(cid:110) (cid:115)(cid:117)(cid:99)(cid:99)(cid:101)(cid:101)(cid:100)
(cid:101)(cid:108)(cid:115)(cid:101) (cid:102)(cid:97)(cid:105)(cid:108)
(cid:101)(cid:108)(cid:115)(cid:101) (cid:102)(cid:97)(cid:105)(cid:108)
(cid:73)(cid:102) (cid:65)(cid:114)(cid:99)(cid:104) (cid:61) (cid:83)(cid:85)(cid:78)(cid:52)(cid:85) (cid:116)(cid:104)(cid:101)(cid:110) (cid:102)(cid:97)(cid:105)(cid:108)
(cid:101)(cid:108)(cid:115)(cid:101) (cid:102)(cid:97)(cid:105)(cid:108) (cid:54)(cid:54)(cid:37) (cid:111)(cid:102) (cid:116)(cid:104)(cid:101) (cid:116)(cid:105)(cid:109)(cid:101)
(cid:102)(cid:97)(cid:105)(cid:108) (cid:53)(cid:48)(cid:37) (cid:111)(cid:102) (cid:116)(cid:104)(cid:101) (cid:116)(cid:105)(cid:109)(cid:101)

(cid:49)

(cid:50)

(cid:51)

(cid:52)

(cid:82)(cid:73)(cid:80)(cid:80)(cid:69)(cid:82) (cid:79)(cid:117)(cid:116)(cid:112)(cid:117)(cid:116)
(cid:40)(cid:65)(cid:114)(cid:99)(cid:104) (cid:61) (cid:83)(cid:85)(cid:78)(cid:52)(cid:117)(cid:41) (cid:0)

(cid:1) (cid:69)(cid:120)(cid:105)(cid:116)(cid:67)(cid:111)(cid:100)(cid:101)(cid:61)(cid:49) (cid:40)(cid:57)(cid:55)(cid:53)(cid:46)(cid:48)(cid:47)(cid:48)(cid:46)(cid:48)(cid:41)

(cid:1) (cid:69)(cid:120)(cid:105)(cid:116)(cid:67)(cid:111)(cid:100)(cid:101)(cid:61)(cid:48) (cid:40)(cid:49)(cid:57)(cid:57)(cid:54)(cid:46)(cid:48)(cid:47)(cid:48)(cid:46)(cid:48)(cid:41)

(cid:40)(cid:84)(cid:111)(cid:116)(cid:97)(cid:108)(cid:68)(cid:105)(cid:115)(cid:107) (cid:2) (cid:50)(cid:50)(cid:57)(cid:53)(cid:53)(cid:52)(cid:50)(cid:52)(cid:41) (cid:97)(cid:110)(cid:100) (cid:40)(cid:68)(cid:105)(cid:115)(cid:107) (cid:3) (cid:49)(cid:51)(cid:57)(cid:56)(cid:57)(cid:53)(cid:48)(cid:50)(cid:41)
(cid:97)(cid:110)(cid:100) (cid:40)(cid:84)(cid:111)(cid:116)(cid:97)(cid:108)(cid:86)(cid:105)(cid:114)(cid:116)(cid:117)(cid:97)(cid:108)(cid:77)(cid:101)(cid:109)(cid:111)(cid:114)(cid:121) (cid:3) (cid:50)(cid:48)(cid:52)(cid:48)(cid:50)(cid:52)(cid:52)(cid:41)

(cid:1) (cid:69)(cid:120)(cid:105)(cid:116)(cid:67)(cid:111)(cid:100)(cid:101)(cid:61)(cid:48) (cid:40)(cid:50)(cid:55)(cid:51)(cid:46)(cid:48)(cid:47)(cid:48)(cid:46)(cid:48)(cid:41)
(cid:1) (cid:69)(cid:120)(cid:105)(cid:116)(cid:67)(cid:111)(cid:100)(cid:101)(cid:61)(cid:49) (cid:40)(cid:49)(cid:55)(cid:56)(cid:52)(cid:46)(cid:48)(cid:47)(cid:48)(cid:46)(cid:48)(cid:41)

(cid:67)(cid:52)(cid:46)(cid:53) (cid:79)(cid:117)(cid:116)(cid:112)(cid:117)(cid:116) (cid:65)(cid:99)(cid:116)(cid:105)(cid:111)(cid:110) (cid:84)(cid:97)(cid:107)(cid:101)(cid:110)
(cid:65)(cid:115)(cid:115)(cid:105)(cid:103)(cid:110) (cid:97)(cid:108)(cid:108) (cid:106)(cid:111)(cid:98)(cid:115)
(cid:110)(cid:111)(cid:100)(cid:101)(cid:115)(cid:58) (cid:51)
(cid:108)(cid:101)(cid:97)(cid:118)(cid:101)(cid:115)(cid:58) (cid:50)
(cid:116)(cid:111) (cid:110)(cid:111)(cid:110)(cid:45)(cid:83)(cid:85)(cid:78)(cid:52)(cid:117) (cid:109)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101)(cid:115)

(cid:110)(cid:111)(cid:100)(cid:101)(cid:115)(cid:58) (cid:55)
(cid:108)(cid:101)(cid:97)(cid:118)(cid:101)(cid:115)(cid:58) (cid:52)

(cid:65)(cid:115)(cid:115)(cid:105)(cid:103)(cid:110) (cid:116)(cid:111) (cid:109)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101)(cid:115) (cid:119)(cid:105)(cid:116)(cid:104)
(cid:104)(cid:105)(cid:103)(cid:104) (cid:100)(cid:105)(cid:115)(cid:107) (cid:115)(cid:112)(cid:97)(cid:99)(cid:101)

(cid:40)(cid:65)(cid:114)(cid:99)(cid:104) (cid:61) (cid:73)(cid:78)(cid:84)(cid:69)(cid:76)(cid:41) (cid:0)

(cid:1) (cid:69)(cid:120)(cid:105)(cid:116)(cid:67)(cid:111)(cid:100)(cid:101)(cid:61)(cid:48) (cid:40)(cid:54)(cid:50)(cid:50)(cid:46)(cid:48)(cid:47)(cid:51)(cid:48)(cid:55)(cid:46)(cid:48)(cid:41)

(cid:1) (cid:69)(cid:120)(cid:105)(cid:116)(cid:67)(cid:111)(cid:100)(cid:101)(cid:61)(cid:49) (cid:40)(cid:53)(cid:48)(cid:56)(cid:46)(cid:48)(cid:47)(cid:48)(cid:46)(cid:48)(cid:41)

(cid:40)(cid:75)(cid:70)(cid:108)(cid:111)(cid:112)(cid:115) (cid:2) (cid:49)(cid:48)(cid:55)(cid:53)(cid:50)(cid:55)(cid:41) (cid:0)
(cid:40)(cid:68)(cid:105)(cid:115)(cid:107) (cid:3) (cid:49)(cid:53)(cid:53)(cid:55)(cid:52)(cid:55)(cid:57)(cid:41) (cid:0)

(cid:1) (cid:69)(cid:120)(cid:105)(cid:116)(cid:67)(cid:111)(cid:100)(cid:101)(cid:61)(cid:49) (cid:40)(cid:50)(cid:52)(cid:52)(cid:46)(cid:48)(cid:47)(cid:49)(cid:49)(cid:49)(cid:46)(cid:48)(cid:41)

(cid:1) (cid:69)(cid:120)(cid:105)(cid:116)(cid:67)(cid:111)(cid:100)(cid:101)(cid:61)(cid:49) (cid:40)(cid:50)(cid:48)(cid:56)(cid:46)(cid:48)(cid:47)(cid:49)(cid:48)(cid:49)(cid:46)(cid:48)(cid:41)

(cid:1) (cid:69)(cid:120)(cid:105)(cid:116)(cid:67)(cid:111)(cid:100)(cid:101)(cid:61)(cid:48) (cid:40)(cid:51)(cid:55)(cid:49)(cid:46)(cid:48)(cid:47)(cid:49)(cid:55)(cid:48)(cid:46)(cid:48)(cid:41)

(cid:110)(cid:111)(cid:100)(cid:101)(cid:115)(cid:58) (cid:49)(cid:55)
(cid:108)(cid:101)(cid:97)(cid:118)(cid:101)(cid:115)(cid:58) (cid:57)

(cid:110)(cid:111)(cid:100)(cid:101)(cid:115)(cid:58) (cid:51)
(cid:108)(cid:101)(cid:97)(cid:118)(cid:101)(cid:115)(cid:58) (cid:50)

(cid:65)(cid:115)(cid:115)(cid:105)(cid:103)(cid:110) (cid:97)(cid:108)(cid:108) (cid:106)(cid:111)(cid:98)(cid:115)
(cid:116)(cid:111) (cid:73)(cid:110)(cid:116)(cid:101)(cid:108) (cid:109)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101)(cid:115)
(cid:65)(cid:115)(cid:115)(cid:105)(cid:103)(cid:110) (cid:116)(cid:111) (cid:97)(cid:110)(cid:121) (cid:109)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101)(cid:115)(cid:44)
(cid:98)(cid:117)(cid:116) (cid:102)(cid:97)(cid:118)(cid:111)(cid:114) (cid:108)(cid:111)(cid:119) (cid:75)(cid:70)(cid:108)(cid:111)(cid:112)(cid:115)
(cid:97)(cid:110)(cid:100) (cid:104)(cid:105)(cid:103)(cid:104) (cid:68)(cid:105)(cid:115)(cid:107) (cid:118)(cid:97)(cid:108)(cid:117)(cid:101)(cid:115)

(cid:70)(cid:105)(cid:103)(cid:117)(cid:114)(cid:101) (cid:50)(cid:46) (cid:68)(cid:105)(cid:97)(cid:103)(cid:110)(cid:111)(cid:115)(cid:105)(cid:115) (cid:111)(cid:102) (cid:83)(cid:121)(cid:110)(cid:116)(cid:104)(cid:101)(cid:116)(cid:105)(cid:99) (cid:70)(cid:97)(cid:105)(cid:108)(cid:117)(cid:114)(cid:101)(cid:115)

randomly, or due to some factor not captured by the instru-
mentation, a naive troubleshooter will unnecessarily restrict
the set of machines to be used. If applied multiple times,
the set will shrink until no machines are available.

Using this approach, some initial results on real jobs are
promising. Evaluating several thousands jobs that previ-
ously ran on the pool, RIPPER identiﬁed an 80% failure
rate on machines with less than 10 GB of disk and 80%
success rate on machines with greater than 10 GB. With
this information in hand, we explored individual failures
on machines with less disk space, and discovered that Con-
dor itself crashed in an unusual way when large output ﬁles
consumed all space. By adjusting the job’s requirements
to avoid such machines, we may avoid such continuous
crashes and make the resources available to other users. We
intend to deploy this tool on more systems and more work-
loads to gain more experience.

(cid:51) (cid:67)(cid:104)(cid:97)(cid:108)(cid:108)(cid:101)(cid:110)(cid:103)(cid:101)(cid:115) (cid:97)(cid:110)(cid:100) (cid:79)(cid:112)(cid:112)(cid:111)(cid:114)(cid:116)(cid:117)(cid:110)(cid:105)(cid:116)(cid:105)(cid:101)(cid:115)

Based on these results, we believe that troubleshooting
via data mining must be a (cid:100)(cid:121)(cid:110)(cid:97)(cid:109)(cid:105)(cid:99) and (cid:99)(cid:111)(cid:110)(cid:116)(cid:105)(cid:110)(cid:117)(cid:111)(cid:117)(cid:115) activity
in the spirit of autonomic computing. Such a troubleshooter
cannot be run once and forgotten. It must continually mon-
itor the productivity of a system and make adjustments at
run-time. In order to deal with the challenges of a changing
system mentioned above, decisions must be re-evaluated
periodically and re-applied to the system.
In this sense,
troubleshooting can be posed as a control theory problem:
an output signal must be kept within certain tolerances by
applying controls that have delays and imprecise effects.

Thus far, we have employed (cid:101)(cid:97)(cid:103)(cid:101)(cid:114) (cid:108)(cid:101)(cid:97)(cid:114)(cid:110)(cid:105)(cid:110)(cid:103) methods,
such as the discussed C4.5 and RIPPER classiﬁers, to con-
struct a model using a set of training data in an off-line man-
ner. Once the set of rules has been constructed, the original
training dataset is no longer applied and each new record
has no bearing in future decisions. However, the above de-
scription of troubleshooting clearly entails a (cid:108)(cid:97)(cid:122)(cid:121) (cid:108)(cid:101)(cid:97)(cid:114)(cid:110)(cid:105)(cid:110)(cid:103)
approach. Such methods postpone generalization until a

query (in this case, when the user requests the grid to match
a given program to a pool machine) and therefore have a
larger set of information available to inform decisions. Ex-
amples of lazy learning include (cid:4) -Nearest Neighbor and fu-
ture studies of data mining assisted troubleshooting should
consider this type of an approach. However, one disadvan-
tage of lazy learning is that the training data must always re-
main available, which introduces separate concerns such as
maintaining and storing a required information warehouse.
There are many more subtleties to be explored from a
data mining perspective. We have only considered the pos-
sibility that machine properties are the cause of various fail-
ures. In a real system, it may be job properties: a faulty
code might crash only on certain inputs. Or, it might be
some combination of job and machine properties: varying
job conﬁgurations may consume resources that cause a fail-
ure only on certain classes of machines. Or, there may be
correlations between machines and external events: a clus-
ter might be rebooted on a regular basis, causing jobs to
failure; or, network ﬁrewall rules might inhibit certain ap-
plications on certain clusters. Each of these requires differ-
ent classiﬁcation techniques and introduces new sources of
noise that must be accommodated. Thus, the desired char-
acteristics of data mining techniques will be: incremental,
prediction and learning under uncertainty, robust and efﬁ-
cient. Efﬁciency can be a characteristic as running a dis-
tributed debugger using data mining should not impose ad-
ditional overhead on the system. Moreover, it should ide-
ally be transparent to the end user. We believe the problem
presents itself as an interesting hand-shake between two dif-
ferent streams of research reaping broad beneﬁts. To under-
stand and implement this better, we must instrument large
scale systems under heavy load.

As the quality of data mining results is bounded by the
ability of the constructed model to capture the nuance of
information modeled, the described troubleshooting system
performance is likely to be enhanced through more sophis-
ticated features. Speciﬁcally, the information acquired for
this survey was limited in (cid:97)(cid:116)(cid:116)(cid:114)(cid:105)(cid:117)(cid:98)(cid:117)(cid:116)(cid:101)(cid:115) and (cid:99)(cid:108)(cid:97)(cid:115)(cid:115). In terms
of class, this problem has been devolved into one of binary

311

(cid:0)
(cid:0)
(cid:0)
(cid:0)
(cid:0)
classes: identify successes and failures, where each is ab-
stracted by Condor and deﬁned by the user: Condor reports
the ﬁnal status of each submission and the user must in-
terpret which of these implies success and failure. While
quantifying separate success states is unlikely to improve
results, increasing granularity in types of failure may yield
information that is signiﬁcantly more valuable to the user.
This type of power allows the potential isolation of error
source: faulty code, incompatible source libraries, bad in-
put, system level issues, or randomized glitches. Addition-
ally, the attributes surveyed impose further restrictions on
the quality of predictions.

The ClassAd used to construct the attributes is user de-
ﬁned and maintained, and therefore there is no insurance to
the accuracy of the information stored. Additionally, Clas-
sAd tends to kept higher level information on each system
(i.e. architecture, OS, memory), but signiﬁcant clues to pro-
gram failure may not be represented (i.e. the system’s (cid:112)(cid:101)(cid:114)(cid:108)
version). Therefore, classiﬁcation is limited by the amount
of detail provided by each computer’s administrator. Even a
full archive of such information may be insufﬁcient for trou-
bleshooting, but such a record would allow isolation of error
at a system level. Further considerations for troubleshoot-
ing could be made to isolate the exact point of failure within
a program on a given system and a recommended solution
is reported to the user or used automatically.

(cid:52) (cid:82)(cid:101)(cid:108)(cid:97)(cid:116)(cid:101)(cid:100) (cid:87)(cid:111)(cid:114)(cid:107)

Debuggers such as Paradyn [12], PDB [11], and
P2D2 [3] have extended the stop-modify-run mode of de-
bugging to parallel and distributed systems. Although we
have made use of the ClassAd mechanism in Condor, a va-
riety of tools are available for logging and collecting data
from distributed systems. Ganglia [10], NetLogger [8],
MAGNET [6] and MonALISA [13] all allow for the con-
struction of sophisticated monitoring networks and reduc-
tion services that allow for the aggregation of hundreds
or thousands of performance measurements into a uniﬁed
stream. A related method of debugging systems is to treat
all components of a system as black boxes, using (cid:115)(cid:116)(cid:114)(cid:117)(cid:99)(cid:116)(cid:117)(cid:114)(cid:101)
rather than (cid:109)(cid:101)(cid:116)(cid:97)(cid:100)(cid:97)(cid:116)(cid:97) to debug problems. For example, one
may examine the messages in a distributed system to in-
fer causal relationships [16], to identify performance bot-
tlenecks [1], or to suggest root-cause failures [2] without
understanding the content of the messages themselves. A
related technique is to search for deviant use patterns [5] in
order to locate bugs.

(cid:53) (cid:67)(cid:111)(cid:110)(cid:99)(cid:108)(cid:117)(cid:115)(cid:105)(cid:111)(cid:110)

To conclude, we believe that large scale distributed sys-
tems are sorely lacking in debugging and troubleshooting

facilities. As others have noted [17], most users of the grid
are limited by usability, not by performance. Troubleshoot-
ing via data mining represents one method that helps the
user to draw general conclusions from large amounts of
data. Many more tools and techniques are needed in order
draw out speciﬁc reasons why individual components fail.

(cid:65)(cid:99)(cid:107)(cid:110)(cid:111)(cid:119)(cid:108)(cid:101)(cid:100)(cid:103)(cid:101)(cid:109)(cid:101)(cid:110)(cid:116)(cid:46) We thank Aaron Striegel for pro-

viding the computing resources used in this project.

(cid:82)(cid:101)(cid:102)(cid:101)(cid:114)(cid:101)(cid:110)(cid:99)(cid:101)(cid:115)

[1] M. Aguilera, J. Mogul, J. Wiener, P. Reynolds, and A. Muthi-
tacharoen. Performance debugging of black-box distributed systems.
In (cid:65)(cid:67)(cid:77) (cid:83)(cid:121)(cid:109)(cid:112)(cid:111)(cid:115)(cid:105)(cid:117)(cid:109) (cid:111)(cid:110) (cid:79)(cid:112)(cid:101)(cid:114)(cid:97)(cid:116)(cid:105)(cid:110)(cid:103) (cid:83)(cid:121)(cid:115)(cid:116)(cid:101)(cid:109)(cid:115) (cid:80)(cid:114)(cid:105)(cid:110)(cid:99)(cid:105)(cid:112)(cid:108)(cid:101)(cid:115), October 2003.
[2] M. Chen, E. Kiciman, E. Fratkin, E. Brewer, and A. Fox. Pinpoint:
Problem determination in large, dynamic, internet services. In (cid:73)(cid:110)(cid:116)(cid:101)(cid:114)(cid:45)
(cid:110)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110)(cid:97)(cid:108) (cid:67)(cid:111)(cid:110)(cid:102)(cid:101)(cid:114)(cid:101)(cid:110)(cid:99)(cid:101) (cid:111)(cid:110) (cid:68)(cid:101)(cid:112)(cid:101)(cid:110)(cid:100)(cid:97)(cid:98)(cid:108)(cid:101) (cid:83)(cid:121)(cid:115)(cid:116)(cid:101)(cid:109)(cid:115) (cid:97)(cid:110)(cid:100) (cid:78)(cid:101)(cid:116)(cid:119)(cid:111)(cid:114)(cid:107)(cid:115), 2002.

[3] D. Cheng and R. Hood. A portable debugger for parallel and dis-

tributed programs. In (cid:67)(cid:111)(cid:110)(cid:102)(cid:101)(cid:114)(cid:101)(cid:110)(cid:99)(cid:101) (cid:111)(cid:110) (cid:83)(cid:117)(cid:112)(cid:101)(cid:114)(cid:99)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:105)(cid:110)(cid:103), 1994.

[4] W. Cohen. Fast effective rule induction. In (cid:80)(cid:114)(cid:111)(cid:99)(cid:46) (cid:111)(cid:102) (cid:77)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101) (cid:76)(cid:101)(cid:97)(cid:114)(cid:110)(cid:45)

(cid:105)(cid:110)(cid:103)(cid:58) (cid:116)(cid:104)(cid:101) (cid:49)(cid:50)(cid:116)(cid:104) (cid:73)(cid:110)(cid:116)(cid:101)(cid:114)(cid:110)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110)(cid:97)(cid:108) (cid:67)(cid:111)(cid:110)(cid:102)(cid:101)(cid:114)(cid:101)(cid:110)(cid:99)(cid:101), pages 115–123, July 1995.

[5] D. Engler, D. Chen, S. Hallem, A. Chaou, and B. Chelf. Bugs as
deviant behavior: A general approach to inferring errors in system
code. In (cid:65)(cid:67)(cid:77) (cid:83)(cid:121)(cid:109)(cid:112)(cid:111)(cid:115)(cid:105)(cid:117)(cid:109) (cid:111)(cid:110) (cid:79)(cid:112)(cid:101)(cid:114)(cid:97)(cid:116)(cid:105)(cid:110)(cid:103) (cid:83)(cid:121)(cid:115)(cid:116)(cid:101)(cid:109)(cid:115) (cid:80)(cid:114)(cid:105)(cid:110)(cid:99)(cid:105)(cid:112)(cid:108)(cid:101)(cid:115), October
2001.

[6] M. Gardner, W. chen Feng, M. Broxton, A. Engelhart, and G. Hur-
witz. MAGNET: A tool for debugging, analyzing, and adapting com-
puter systems. In (cid:73)(cid:69)(cid:69)(cid:69)(cid:47)(cid:65)(cid:67)(cid:77) (cid:83)(cid:121)(cid:109)(cid:112)(cid:111)(cid:115)(cid:105)(cid:117)(cid:109) (cid:111)(cid:110) (cid:67)(cid:108)(cid:117)(cid:115)(cid:116)(cid:101)(cid:114) (cid:67)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:105)(cid:110)(cid:103) (cid:97)(cid:110)(cid:100)
(cid:116)(cid:104)(cid:101) (cid:71)(cid:114)(cid:105)(cid:100), May 2003.

[7] R. Gardner and et al. The Grid2003 production grid: Principles and
practice. In (cid:73)(cid:69)(cid:69)(cid:69) (cid:72)(cid:105)(cid:103)(cid:104) (cid:80)(cid:101)(cid:114)(cid:102)(cid:111)(cid:114)(cid:109)(cid:97)(cid:110)(cid:99)(cid:101) (cid:68)(cid:105)(cid:115)(cid:116)(cid:114)(cid:105)(cid:98)(cid:117)(cid:116)(cid:101)(cid:100) (cid:67)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:105)(cid:110)(cid:103), 2004.
[8] D. Gunter, B. Tierney, K. Jackson, J. Lee, and M. Stoufer. Dynamic
In (cid:73)(cid:69)(cid:69)(cid:69)

monitoring of high-performance distributed applications.
(cid:72)(cid:105)(cid:103)(cid:104) (cid:80)(cid:101)(cid:114)(cid:102)(cid:111)(cid:114)(cid:109)(cid:97)(cid:110)(cid:99)(cid:101) (cid:68)(cid:105)(cid:115)(cid:116)(cid:114)(cid:105)(cid:98)(cid:117)(cid:116)(cid:101)(cid:100) (cid:67)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:105)(cid:110)(cid:103), June 2002.

[9] M. Litzkow, M. Livny, and M. Mutka. Condor - a hunter of idle work-
stations. In (cid:69)(cid:105)(cid:103)(cid:104)(cid:116)(cid:104) (cid:73)(cid:110)(cid:116)(cid:101)(cid:114)(cid:110)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110)(cid:97)(cid:108) (cid:67)(cid:111)(cid:110)(cid:102)(cid:101)(cid:114)(cid:101)(cid:110)(cid:99)(cid:101) (cid:111)(cid:102) (cid:68)(cid:105)(cid:115)(cid:116)(cid:114)(cid:105)(cid:98)(cid:117)(cid:116)(cid:101)(cid:100) (cid:67)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:45)
(cid:105)(cid:110)(cid:103) (cid:83)(cid:121)(cid:115)(cid:116)(cid:101)(cid:109)(cid:115), June 1988.

[10] M. L. Massie, B. N. Chun, and D. E. Culler. The ganglia distributed
monitoring system: Design, implementation, and experience. (cid:80)(cid:97)(cid:114)(cid:97)(cid:108)(cid:45)
(cid:108)(cid:101)(cid:108) (cid:67)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:105)(cid:110)(cid:103), 30, July 2004.

[11] R. Mehmood, J. Crowcroft, S. Hand, and S. Smith. Grid-level
computing needs pervasive debugging. In (cid:73)(cid:69)(cid:69)(cid:69)(cid:47)(cid:65)(cid:67)(cid:77) (cid:73)(cid:110)(cid:116)(cid:101)(cid:114)(cid:110)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110)(cid:97)(cid:108)
(cid:87)(cid:111)(cid:114)(cid:107)(cid:115)(cid:104)(cid:111)(cid:112) (cid:111)(cid:110) (cid:71)(cid:114)(cid:105)(cid:100) (cid:67)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:105)(cid:110)(cid:103), Seattle, WA, November 2005.

[12] B. Miller, M. Callaghan, J. Cargille, J. Hollingsworth, R. B. Irvin,
K. Karavanic, K. Kunchithapadam, and T. Newhall. The Paradyn par-
allel performance measurement tools. (cid:73)(cid:69)(cid:69)(cid:69) (cid:67)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:101)(cid:114), 28(11):37–
46, November 1995.

[13] H. Newman, I. Legrand, P.Galvez, R. Voicu, and C. Cirstoiu. Mon-
ALISA: A distributed monitoring service architecture. In (cid:67)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:105)(cid:110)(cid:103)
(cid:105)(cid:110) (cid:72)(cid:105)(cid:103)(cid:104) (cid:69)(cid:110)(cid:101)(cid:114)(cid:103)(cid:121) (cid:80)(cid:104)(cid:121)(cid:115)(cid:105)(cid:99)(cid:115), March 2003.

[14] J. Quinlan. Induction of decision trees. (cid:77)(cid:97)(cid:99)(cid:104)(cid:105)(cid:110)(cid:101) (cid:76)(cid:101)(cid:97)(cid:114)(cid:110)(cid:105)(cid:110)(cid:103), 1:81–106,

1986.

[15] R. Raman, M. Livny, and M. Solomon. Matchmaking: Distributed
resource management for high throughput computing. In (cid:73)(cid:69)(cid:69)(cid:69) (cid:83)(cid:121)(cid:109)(cid:45)
(cid:112)(cid:111)(cid:115)(cid:105)(cid:117)(cid:109) (cid:111)(cid:110) (cid:72)(cid:105)(cid:103)(cid:104) (cid:80)(cid:101)(cid:114)(cid:102)(cid:111)(cid:114)(cid:109)(cid:97)(cid:110)(cid:99)(cid:101) (cid:68)(cid:105)(cid:115)(cid:116)(cid:114)(cid:105)(cid:98)(cid:117)(cid:116)(cid:101)(cid:100) (cid:67)(cid:111)(cid:109)(cid:112)(cid:117)(cid:116)(cid:105)(cid:110)(cid:103), July 1998.

[16] C. Schaubschlager, D. Kranzlmuller, and J. Volkert. Event-based
program analysis with de-wiz. In (cid:87)(cid:111)(cid:114)(cid:107)(cid:115)(cid:104)(cid:111)(cid:112) (cid:111)(cid:110) (cid:65)(cid:117)(cid:116)(cid:111)(cid:109)(cid:97)(cid:116)(cid:101)(cid:100) (cid:97)(cid:110)(cid:100) (cid:65)(cid:108)(cid:103)(cid:111)(cid:45)
(cid:114)(cid:105)(cid:116)(cid:104)(cid:109)(cid:105)(cid:99) (cid:68)(cid:101)(cid:98)(cid:117)(cid:103)(cid:103)(cid:105)(cid:110)(cid:103), pages 237–246, Septmber 2003.

[17] J. Schopf. State of grid users: 25 conversations with UK eScience
groups. Argonne National Laboratory Tech Report ANL/MCS-
TM/278, 2003.

312

