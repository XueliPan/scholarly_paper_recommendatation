MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

Failure-Aware, Open-Loop, Adaptive Video Streaming 

With Packet-Level Optimized Redundancy 

Yiannis Andreopoulos*, Ram Keralapura, Mihaela van der Schaar, and Chen-Nee Chuah 

ABSTRACT 

A plethora of coding and streaming mechanisms have been proposed for real-time multimedia transmission over the 

Internet.  However,  most  proposed  mechanisms  rely  only  on  global  (e.g.  based  on  end-to-end  measurements), 

delayed  (at  least  by  the  round-trip-time),  or  statistical  (often  based  on  simplistic  network  models)  information 

available about the network state. Based on recently-proposed state-of-the-art open-loop video coding schemes, we 

propose  a  new  integrated  streaming  and  routing  framework  for  robust  and  efficient  video  transmission  over 

networks exhibiting path failures. Our approach explicitly takes into account the network dynamics, path diversity, 

and  the  modeled  video  distortion  at  the  receiver  side  to  optimize  the  packet  redundancy  and  scheduling.  In  the 

derived  framework,  multimedia  streams  can  be  adapted  dynamically  at  the  video  server  based  on  instantaneous 

routing-layer information or failure-modeling statistics. The performance of our integrated application and network-

layer method is simulated against equivalent approaches that are not optimized based on routing-layer feedback and 

distortion modeling, and the obtained gains in video quality are quantified. 

Keywords:  Video  transmission  under  path  failures,  routing-layer  adaptation,  network-layer  feedback,  predicting 

network availability, open-loop scalable video coding 

EDICS CODE: 5-STRM (Multimedia Streaming) 

I  INTRODUCTION 

T 

HERE  are  two  major  causes  of  network  performance  degradation  when  streaming  video  over  the 

Internet: network congestion and routing instability due to link/node failures. Past literature on video 

streaming  over  Internet  has  been  focusing  on  coping  with  bandwidth  variation  and  losses  [1]–[3]  that  are 

caused by network congestion. However, recent studies have found that the level of congestion in the core IP 

                                                 
Parts  of  the  material  of  this  paper  were  presented  in  the  IEEE  International  Conference  on  Image  Processing,  Sept.  2003,  the 
IEEE  International  Workshop  on  Quality  of  Service,  June  2004,  and  the  IEEE  International  Conference  on  Communications, 
June 2004.  
R.  Keralapura  and  C.-N.  Chuah  are  with  the  University  of  California  Davis  (UCD),  Dept.  of  Electrical  and  Computer 
Engineering (ECE), One Shields Ave., Kemper Hall, Davis, CA, 95616, USA. They would like to acknowledge the kind support 
of the NSF (CAREER Award ANI-0238348). 
Y.  Andreopoulos  and  M.  van  der  Schaar  are  with  the  University  of  California  Los  Angeles  (UCLA),  Dept.  of  Electrical 
Engineering (EE), 66-147E Engineering IV Building, 420 Westwood Plaza, Los Angeles, CA, 90095-1594, USA. They would 
like to acknowledge the kind support of the NSF (CAREER Award CCF-0541867) and grants from Intel IT Research and UC 
Micro.  
*Corresponding 
yandreop@ee.ucla.edu. 

above;  Phone:  +1-310-825-5843,  Fax:  +1-310-206-4685; 

author.  Postal  address:  See 

email: 

 

 

1

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

backbone  is  always  negligible  and  has  relatively  small  impact  on  latency  sensitive  applications  [4].  On  the 

other  hand,  link/node  failures  have  been  observed  to  be  fairly  common  in  the  day-to-day  operation  of  a 

network  [5]  due  to  fiber  cuts,  faulty  equipments,  or  router  misconfigurations.  Re-routing  after  a  link/node 

failure  can  take  tens  of  seconds  within  a  single  domain  [5],  while  inter-domain  route  changes  through  the 

border gateway protocol (BGP) can take up to minutes to converge [6]. During this transient period of route 

convergence, packets can be dropped (because of invalid paths) or caught in routing loops leading to additional 

delays. These routing instabilities result in service disruptions at the application layer and can adversely affect 

the quality of real-time video streaming. Notice that in the case of content delivery networks, such as Akamai 

[46], multiple client requests for the same video stream are grouped together which means that a failure on a 

backbone link could affect a number of customers.  

Several coding and rate-adaptation mechanisms have been proposed to cope with bandwidth variations, losses, 

and/or delay jitter at either the sender or the receiver [7]. However, most proposed mechanisms rely on either 

delayed  (at  least  round-trip-time)  end-to-end  observations  of  the  network  state  [3]  [14]  [16]  [17]  [9]  or 

simplistic  statistical  channel  models.  While  some  models,  e.g.,  Gilbert  model  [2]  [19],  may  be  suitable  for 

bursty loss patterns of wireless channels or congestion-induced losses, they fail to capture routing dynamics in 

the presence of failures, which occur frequently in the IP-networks [8]. For all these cases, the lack of feedback 

on instantaneous network conditions can lead to sub-optimal performance for delay-sensitive video streaming. 

Moreover, end-to-end or application-level measurements can only detect the packet losses, but cannot easily 

establish  their  cause,  e.g.,  changes  at  the  underlying  network  topology.  For  example,  the  paths  between  a 

receiver and multiple sources may share the same physical link. In this case, there is no true redundancy at the 

routing-layer to protect against failure of that critical link.  

In  this  paper,  we  propose  a  new  integrated  compression,  streaming,  and  routing  framework  for  robust  and 

efficient streaming of multimedia content over wide-area Internet in the presence of failures. In Section II, we 

propose  to  deploy  routing  proxies  to  detect  link  or  node  failures  directly.  Upon  failure  detection,  the  proxy 

sends explicit notification to the multimedia server to report the starting time and location (path) of a failure 

event.  Similarly,  the  proxy  notifies  the  multimedia  server  when  the  path  is  restored.  We  develop  a  novel 

technique to estimate the service disruption time after a failure event by taking into account transient routing 

dynamics during the convergence period of Internal Gateway Protocols (IGP) and operational conditions, such 

as BGP table size and traffic distributions. When the explicit failure notification is not available, the proposed 

 

2

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

technique estimates the expected service disruption based on a realistic failure model that captures the failure 

patterns observed in operational IP-backbone network [8]. 

Based  on  the derived  failure-detection  and  modeling  framework,  in Section  III  we  propose  novel  multi-path 

open-loop (scalable) video transmission schemes that enable on-the-fly redundancy adaptation. A key element 

of  the  proposed  adaptation  mechanism  is  the  deployment  of  a  new  distortion-estimation  model  (Subsection 

III.B) that infers the expected frame-decoding error as well as the temporal error propagation, based on content 

characteristics  accumulated  at  encoding  time.  This  model  provides  accurate  predictions  for  the  decoder 

objective  quality  in  real-time,  and  under  various  transmission  conditions.  Finally,  for  the  multi-path  failure-

aware transmission framework of this paper, novel packet scheduling algorithms are proposed in Subsections 

III.C and III.D. When network feedback is available, the algorithm leverages the explicit failure notification to 

schedule  the  application-layer  packets  on  all  working  paths  according  to  the  expected  distortion  reduction 

offered  by  the  packets  of  each  path.  Alternatively,  when  channel  feedback  is  not  available,  the  algorithm 

establishes  the  redundancy  level  for  packet  scheduling based  on  distortion-reduction  estimates  for  each  path 

provided by the combination of the proposed video distortion model with the estimated failure probability of 

each path.  

The derived framework facilitates flexible tradeoffs between throughput, redundancy and complexity, that are 

not possible with conventional error-tolerant video coding schemes such as multiple-description (MD) coding 

[24]  [22],  forward-error-correction  (FEC)  multiple-description  coding  [25]  [32],  or  multiple-description  via 

multiple-state  encoding  [23].  In  particular,  our  solution  adjusts  the  bitstream  redundancy  at  the  packet-level 

during transmission time, based on the transient network behavior. Unlike previous MD coding mechanisms 

for streaming under path failures [38], we use an open-loop video coding system that permits seamless bitrate 

adaptation via packet scheduling, and propose a mechanism for, on-the-fly, optimized packet redundancy for 

the  given  transmission  paths.  Moreover,  unlike  FEC-based  MD  coding  where  the  redundancy  level  is 

determined statically based on statistical information gathered over a large time interval [25] [32], in our work 

the  redundancy  level  can  be  adjusted  on-the-fly  based  on  the  instantaneous  information  of  the  channel 

condition  and  the  expected  distortion  at  the  receiver.  In  order  to  quantify  the  effectiveness  of  the  proposed 

algorithms, experimental results are presented in Section IV, and our conclusions are drawn in Section V.  

II  MODELING NETWORK FAILURES AND ROUTING RE-CONVERGENCE DYNAMICS 

Previous empirical studies have shown that congestion losses can be modeled with low-order Markov chains, 

and the number of lost packets in a loss period is approximately geometric [2]. However, the use of a similar 

 

3

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

model for loss patterns during routing instabilities caused by link/node failures has not been validated. When a 

link or node fails, it is often followed by a transient routing instability (or route re-convergence) period during 

which all the routers in the network are notified of the failure, recompute their routing tables and update their 

forwarding paths. There are two distinct stages during the convergence period: 

•  Black-out stage: All packets traversing the failed link are dropped initially due to invalid forwarding path. 

•  Routing-loop  stage:  Subsequently,  some  of  these  packets  may  be  caught  in  routing  loops  because  of 

inconsistent  forwarding  tables  at  various  routers.  The  packets  caught  in  the  loop  will  traverse  a  random 

number of extra hops and hence experience extra delay before being successfully delivered to their final 

destination. The additional time-to-live (TTL) of a packet caught in a routing loop can be used to estimate 

the increase in end-to-end delay. Routing loops from which packets do not escape contribute to an increase 

packet loss rate but have no effect on the delay performance. 

Once the routing protocol converges, the traffic will be forwarded on the backup path, which could be longer 

than  the  original  path,  resulting  in  an  increased  end-to-end  delay.  After  the  link  or  node  recovers,  traffic 

forwarding will resume on the original path. 

II.A  Empirical Models for Network Failures 

The first step towards measuring the impact of failures on multimedia streaming performance is to develop a 

detailed understanding of how often failures occur in a network and how long they last. The distribution of the 

frequency and duration of link failures observed in a Tier-1 ISP backbone are reported in our previous work 

[5] [8] [21]. Figure 1 shows the distribution of independent link failure events that occurred across more than 

600 links within a Tier-1 backbone network of an ISP over a 7 month period (April – October 2002)1. Note 

that, as shown in our previous study [21], failures are fairly well spread out across weeks, days, and even over 

the course of a single day. Clearly, they need to be taken into account as part of every day operations. In our 

simulation studies and analysis, we model the network failures based on the following observations [8]:  

•  The majority (70%) of the unplanned failure events are isolated, i.e., only affect a single link at a time, and 

hence can be modeled as independent link failures. 

•  Links are highly heterogeneous: some links fail significantly more often than others. This motivates us to 

classify  the  links  into  two  categories:  “high-frequency”  and  “low-frequency”  links  and  model  them 

separately.  Within  each  class,  the  number  of  failures, 

( )n l

,  for  link  l   roughly  follows  a  power-law: 

                                                 
1  For  proprietary  reasons  we  are  unable  to  provide  absolute  numbers  but  only  the  normalized  number  of  failures  to  show  the 
difference in the order of magnitude between the number of failures experienced by different links.  

 

4

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

( )
n l

k
l −∝

,  where  the  exponent  is  found  to  be 

k = −

0.73

  for  high-frequency  links  and 

k = −

1.35

  for 

low-frequency links. 

•  The  empirical  cumulative  distribution  function  (CDF)  for  time  between  any  two  failures  can  be 

approximated by a Weibull distribution as found in our previous study [8].  

For example, Figure 2 shows the empirical CDF for the network-wide time between failures for low-frequency 

links.  The  Weibull  parameters  can  be  derived  for  each  set  of  empirical  data  based  on  maximum-likelihood 

estimation,  e.g.,  in  this  case, 

α =

0.046

,  and 

β =

0.414

.  The  cumulative  distribution  of  the  duration  of 

failures observed over the same period shows that most failures are transient (i.e., short-lived): 46% last less 

than a minute and 85% last less than ten minutes [21]. However, as discussed earlier, the actual failure duration 

is much less important since the packets will be forwarded correctly on the recomputed (alternate) paths once 

the  routing  protocol  converges.  Hence,  we  only  concentrate  on  modeling  the  loss  behavior  during  the  re-

convergence period following a failure, but not the failure duration itself. The experiments conducted in the 

same study [21] indicate that this instability period can last between 2 to 6.6 seconds. This is in agreement with 

another finding that the duration of routing loops is mostly under 10 seconds [20]. We will describe the routing 

convergence behavior in details in the next section. 

s
e
r
u
l
i
a
f
 
f
o
 
r
e
b
m
u
n
d
e
z
i
l
a
m
r
o
N

 

100

10

1

F
D
C

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

Individual     
Link Failures  

Router-related   
multiple failures

Router-related failures
Individual link failures
Weibull (α=0.046, β=0.414)

100

200

300

400

500

600

Link Index

0
10-2

10-1

100

101

102

103

104

105

106

107

Time between failures (sec)

Figure  1.  Non-uniform  distribution  of 
independent 
failures  across  over  600  links  within  a  Tier-1  ISP 
backbone.  

Figure  2.  Network-wide  time  between  failures  for 
router-related  multiple  failures,  low-failure  links, 
and the approximation by the Weibull distribution. 

II.B  Network Dynamics during Routing Convergence 

Within a  single  network  domain  or  an  Autonomous  System  (AS),  an IGP  like  IS-IS  [12]  and OSPF  [13],  is 

used to exchange connectivity information and compute the shortest path between different source-destination 

pairs.  These  protocols  are  linkstate  protocols,  where  each  node  has  complete  knowledge  of  the  network 

 

5

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

topology including all the links present in the network. When a node detects a change in the network (due to 

link/node failures or a configuration changes), it is responsible to disseminate the new topology description to 

all  its  neighbors  and  recompute  its  routing  and  forwarding  information  to  update  its  own  routing  and 

forwarding tables.  

From the time of the topology change to the time all nodes have been informed of the change and have updated 

their routing/forwarding tables, traffic disruptions (i.e., packet drops, routing loops) are possible as the nodes 

may have an inconsistent view of the network. We define “network convergence time” as the time it takes for 

all  nodes  to  be  notified  of  the  change  and  update  their  forwarding  tables.  We  can  also  define  “convergence 

time”,  on  a  per  node  basis,  where  the  time  for  network  convergence  is  the  maximum  among  all  per-node 

convergence times. The convergence time can be summarized as a combination of three components [40]: 

•  Detection  time:  The  time  required  by  a  node  in  the  network  to  identify  if  neighboring  nodes  are  not 

reachable. Today’s IP routers provide several mechanisms to perform this function [15] but all of them are 

based  only  on  local  information  exchanged  between  the  two  nodes.  For  this  reason,  detection  time 

represents a fixed price that is independent of the network topology or configuration. 

•  Notification time: The time taken by the routing message update to propagate across the network. In link 

state  protocols,  messages  are  flooded  throughout  the  network.  Hence,  the  notification  time  strongly 

depends on the network diameter (maximum hop distance between two nodes). Each node processes the 

message update and forwards it to its neighbors introducing a delay in the propagation of the information. 

•  Route update time:  The time  spent by  each node  in updating  its  routing  information. The  update  of  this 

information  consists  of  two  steps.  First,  each  node  recomputes  its  routing  tree  (i.e.,  the  shortest  path  to 

every  other  node)  and then  applies the  changes  to  all the network  prefixes  that  have been  learnt  via the 

BGP  inter-domain  protocol.  The  result  of  this  computation  is  a  forwarding  table  where  each  prefix  is 

associated  with  a  neighboring  node  (next  hop).The  route  update  time  of  a  node  is  proportional  to  the 

number  of  prefixes  for  which  the  next  hop  information  needs  to  be  changed.  In  turn,  the  number  of 

prefixes to be updated depends on the location of the topology change and on the distribution of prefixes 

to egress nodes. Indeed, the closer the topology change occurs to a node, the larger will be the number of 

prefixes  affected.  Similarly,  if  a  large  number  of  prefixes  share  the  same  egress  node,  a  change  in  the 

topology close to that egress node will result in long route update time for all nodes in the network.  

The network convergence time only provides a rough upper bound on service availability. The service is not 

available  when  the packets  cannot  reach  their  destinations  due to  the lack  of  forwarding  information.  Given 

 

6

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

that traffic forwarding may resume even if all the nodes in the network have not updated their routing table, 

there may be a significant difference between network convergence and service availability.  

Consider the network illustrated in Figure 3. Assume that the nodes and the links have similar characteristics 

with a detection time of 1000 msec, a notification time between adjacent nodes of 200 msec, and a node route 

update time of 800 msec (except for node C for which we assume this is 200 msec given that it does not need 

to  change  its  route  to  reach  D).  The  number  on  each  link  indicates  the  IGP  weight.  Consider  the  disruption 

observed  for  the  traffic  sent  from  node  A  to  node  D  due  to  the  failure  of  link  E–D  at  time 

ot = .  Table  I 

0

shows the routing events, changes in the forwarding path and service availability from node A to node D. In 

this example, we assume that a node notifies neighboring nodes only after it has completed the update of its 

own routing table. However, it is easy to verify that if the updates are sent before updating the routing table, 

 

the example yields similar results.  
 
 
 
 
 
 
  

8   

A   

4   

2   

B   

6   

F   

C   

14   

E   

4   

D   

2   

2   

 
Figure  3.  Example  of  convergence  time 
and service disruption. 

Time 

0.0 sec 
1.0 sec 
1.8 sec 

2.0 sec 

2.2 sec 
2.4 sec 

2.8 sec 

Event 

Failure of link E-D 
D, E: failure detection 

D, E: route update 
C, F: notified of 

failure 

C: route update 

B: notified of failure 

F: route update 

3.0 sec 

A: notified of failure 

3.2 sec 

3.8 sec 

B: route update 

A: route update 

Forwarding Path 

(A-D) 

A-F-E-D 
A-F-E-D 

A-F-E-C-D 

A-F-E-C-D 

A-F-E-C-D 
A-F-E-C-D 
A-F-B-F-…  
(Routing loop B-F) 
A-F-B-F-…  
(Routing loop B-F) 
A-F-B-C-D 
A-B-C-D  

(Network Convergence) 

Service 
(A to D) 

NO 
NO 
YES 

YES 

YES 
YES 

NO 

NO 

YES 

YES 

Table I. Summary of routing events (with a route update time of 
400 msec) 

Interestingly, as the message update propagates across the network, the forwarding path from node A to node D 

changes four times. Some of these intermediate paths are valid thus restoring service between A and D, while 

some are not, causing packet drops (“traffic black-hole”) and routing loops. For example, packets are dropped 

until node E has computed a new forwarding path to reach D and routing loops occur when nodes B and F have 

conflicting  forwarding  information.  In  the  next  subsection,  we  introduce  an  algorithm  to  compute  the 

cumulative time for which service is not available or affected during the routing convergence period. 

II.C  Routing Introspection and Feedback Layer 

One can assume that multimedia clients can send acknowledgment packets (ACKs) or statistical feedbacks in 

the form of RTCP (Real-time Control Protocol) reports to inform the sender/proxy of the loss rate and round 

trip  time  (RTT)  observed  at  the  application  layer.  While  such  feedbacks  are  useful,  they  do  not  provide 

 

7

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

sufficient information to determine the cause of the performance degradation. We propose the following two 

mechanisms to explicitly detect link/node failures and estimate the associated service disruption time. 

II.C.1 

Proxy-Assisted Failure Detection 

We  propose  to  deploy  routing  proxies  in  the  network  to  detect  link  or  node  failures  directly.  The  proxy 

contains a route listener, such as Python Routing Toolkit (PyRT) [10] or Zebra [11], that allows it to receive 

routing  messages  from  an  adjacent  network  router.  Since  most  network  domains  run  link-state  routing 

protocols,  such  as  IS-IS  [12]  or  OSPF  [13],  any  changes  in  the  routing  topology  (link/node  addition  or 

deletion) are flooded throughout the network, e.g., via Link-State Announcements (LSAs) in OSPF.  

The  routing  proxy  associated  with  a  multimedia  server  keeps  track  of  the  end-to-end  paths  used  for  video 

streaming  to  its  various  clients,  e.g.  by  running  traceroute  from  the  video  server  to  its  client.  When  the 

proxy receives an LSA announcing a link or node failure that affects the path of the video streaming, it notifies 

the video server of the failure. This marks the start time of a failure and routing instability period, which can 

take up to tens of seconds [5] before the network convergences to the backup routing paths. The passive route 

listeners  can  be  placed  at  strategic  locations  to  monitor  routing  dynamics  of  both  IGPs  within  an  AS  and 

external  gateway  protocols  between  different  ASes.  When  the  multimedia  server  receives  an  explicit  failure 

notification from the proxy, the coding and streaming schemes are adapted, as described in Section V. 

Step 

1: 

Step 

2: 

Step 

3: 

Step 

4: 

Step 

5: 

Step 

6: 

1

=

CT

l x y
( , )
φ

( , )
φ
l x y
0

  for  the  path  from  x   to  y   due  to  the 
= . If the original path from  x  to  y  does not 

Initialize  the  service  disruption  time, 
failure of the link  l  to zero i.e.  ( , )
l x y
φ
contain link  l  then QUIT. 
Find the convergence time ( CT ) for each node and list the nodes in the increasing order 
1CT ,  2nd 
of  convergence  time.  Let  the  convergence  time  of  the  1st  node  in  the  list  be 
2CT  and so on. In general, the convergence time for the  thn  node in the list is 
node be 
nCT . Set the current node,  k , (i.e. the node number on the sorted list) to zero. 
Increment  k  to 1. Set 
. At the time instant  CT  after the failure event, find 
the path that a packet from the source node,  x , follows to reach the destination node, 
y ,  taking  into  account  that  the  first  node  in  the  list  has  converged  and  others  have 
not.  If  the  path  has  a  routing  loop  or  black-hole,  then  set  previousDisruption  =  true 
else set previousDisruption = false. 
kCT  after the failure event, find the path that 
Increment  k  by 1. At the time instant 
a packet from the source node,  x , follows to reach the destination node,  y , taking into 
account that the intermediate nodes might have converged or not. 
If  the  path  that  the  packet  follows  does  not  contain  the  failed  link  l   or  a  routing 
loop, then set previousDisruption = false. Go to Step 7. Else go to Step 6. 
If  the  path  that  the  packet  follows  contains  the  failed  link  l   or  has  a  routing  loop, 
then the path from  x  to  y  is still disrupted. 
If  previousDisruption  =  false,  then  do  not  update  the  service  disruption  time  but  set 
previousDisruption = true 
Else  if  previousDisruption  =  true,  then  update  the  service  disruption  time  in  the  k -th 
iteration as, 

( , )
x y

( , )
x y

CT

CT

=

+

−

1
−

 

k

k

φ
l

φ
l

Step 
7:  If there are more nodes in the list then go to Step 4. Else QUIT. 

Table II. Algorithm to estimate Service Disruption Time (SDT) due to single-link failures. 

II.C.2 

Estimating Service Disruption Time 

To capture the effect of a link failure and its subsequent impact on traffic forwarding and perceived streaming 

quality, we define a metric called service disruption time (SDT) [40]. SDT is the amount of time for which the 

service between a source and destination is disrupted due to a link failure. In essence, it is the upper bound of 

 

8

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

the time for which connectivity between a particular video client and the server experiences a degradation in 

performance. In Table II, we present an algorithm to compute SDT. 

II.D  Multi-path Routing Architecture  

Since one of the requirements of our system is for the multimedia server to find multiple paths from the source 

to the destination, we conclude this section by identifying two ways to accomplish this: 

1.  Collaboration with different ISPs to exploit Equal Cost Multi-Path (ECMP) routing. ECMP provides 

the multimedia server with multiple paths between a source and destination node. 

2.  Construction  of  an  overlay  network  or  leveraging  of  the  mechanisms  offered  by  existing  overlay 

networks like Resilient Overlay Network (RON) [42], Detour [43], SplitStream [44], OverCast [45], 

etc. Overlay networks are application layer networks with multiple overlay nodes that collaborate with 

each other at the application layer to provide features (such as multi-path routing) that are not readily 

supported by IP layer routing services. For example, RON [42] and Detour [43] demonstrate that end-

to-end route selection often finds multiple alternative paths by relaying traffic among overlay nodes. 

Even  though  there  are  multiple  ways  to  accomplish  multi-path  routing,  in  this  work,  we  propose  to  use  the 

second approach based on overlay networks not only because it is simple but also because, in practice, ISPs are 

very reluctant to cooperate on routing issues with their customers. In the remainder of the paper we assume 

that  the  multimedia  server  has  the  ability  to  discover  and  utilize  multiple  paths  through  an  ISP  backbone 

network, and focus mainly on its streaming technique. 

III  FAILURE-AWARE STREAMING WITH OPTIMIZED REDUNDANCY 

We present a novel framework for optimized redundancy in video transmission over multiple paths through the 

use  of  (open-loop)  motion  compensated  temporal  filtering  (MCTF)  as  a  decorrelating  transform  [29].  Our 

scheme  retains  the  advantages  of  low-complexity  since  the  redundancy  generation  is  applied  post-encoding 

[29], i.e. during the bitstream-extraction and packetization stage. In this way, our system takes into account the 

bit-stream  packetization  aspects  and  consequently  achieves  a  better  synergy  between  the  application  and 

network  layers.  A  certain  percentage  of  the  important  visual  information  can  be  easily  reproduced  via  all 

transmission paths so that quality-of-service requirements are facilitated. This is achieved in a very efficient 

manner  by  exploiting  the  rate-distortion  metrics  established  during  the  multi-track  hinting  stage.  The  next 

subsection  (III.A)  briefly  reviews  MCTF-based  video  coding.  Subsection  III.B  presents  our  proposed 

distortion-modeling  strategy  at  the  packet  level.  Subsection  III.C  presents  the  proposed  multi-path  video 

transmission  framework  and  finally  Subsection  III.D  presents  two  scenarios  for  packet  scheduling  and 

 

9

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

redundancy  that  depend  on  the  available  network  feedback  mechanisms  and  on  the  proposed  distortion-

modeling strategy. 

III.A Motion Compensated Temporal Filtering 

Recent  state-of-the-art  scalable  video  coding  schemes  that  have  been  adopted  for  the  generation  of  adaptive 

packet redundancy [29] are based on motion compensated temporal filtering. During MCTF, the original video 

frames  are  filtered  temporally  in  the  direction  of  motion,  prior  to  performing  the  spatial  transformation  and 

coding,  Video  frames  are  filtered  into  L   (low-frequency  or  average)  and  H   (high-frequency  of  difference) 

frames, as shown in Figure 4. For example, for two consecutive video frames  A  and  B , an instantiation of 

MCTF can be written using the lifting formulation [26], which, for each pixel  ( , )

x y  of a  X Y×  video frame, 

is written as: 

H x y

[ ,

]

=

(

B x y

[ ,

]

−

p x
[

F

+

v y
x

,

+

v A x
[
y

]

⋅

+

v y
x

,

+

v
y

]

)

 

1
2

L x
[

+

v y
x

,

+

v
y

]

=

2 [ ,
A x y

]

+

u x y H x y

[ ,

[ ,

]

⋅

]

B

 

(1) 

(2) 

where  (

v v
x
y

,

)

 is the motion vector associated with pixel ( , )

x y  and 

[ , ]
p i iF

, 

u i i
[ , ]

B

 are pixel weights chosen by 

an  optimization  mechanism  that  normalizes  the  information  during  the  forward  ( F )  motion-compensated 

prediction of (1) and the backward ( B ) inversion of the motion information during the update step of (2). We 

refer to recent work [30] [34] [33] for a variety of algorithms that estimate these factors for various temporal 

decompositions  in  order  for  the  filtering  process  to  approximate  an  orthonormal  temporal  transform.  The 

process is applied initially in a group of pictures (GOP) and also to all the subsequently-produced  L  frames 

thereby forming a total of T  temporal levels, as shown in Figure 4. 

 

video sequence 

0,0 

A

0,1 

A

0,2 

A

0,3 
A
A

0,4 

0,5 

A

0,6 

A

0,7 
A

1st level of 
decomposition 

L1,0 

L1,1 

L1,2

L1,3

L2,0 

L2,1 

H2,0 

H2,1 

3rd level of 
decomposition 

H1,0

H1,1

H1,2

H1,3

2nd level of 
decomposition 

L3,0 

H3,0 

Figure 4. MCTF decomposition 

 motion compensation  
 
  low-pass temporal filtering 
 
 high pass temporal filtering 

 

 

 

 

10

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

We  use  the  notation 

,t kH   to  indicate  the  k –th  H   frame  of  temporal  level  t ,  where  1

≤ ≤   and 

t T

0

≤ <

k

−
2T t

. Equivalently the notation 

,0TL  is used to indicate the remaining  L  frame at the last level after 

the completion of the temporal decomposition in the GOP. 

III.B  Packetization and Distortion-Modeling Aspects of MCTF-based Video 

For each GOP, each 

,t kH  frame and the remaining 

,0TL  frame are compressed using embedded wavelet image 

coding [33] [34] [27]. Alternatively, embedded coding based on H.264/AVC [36] can be applied [37]. The vast 

majority of state-of-the-art embedded coding engines for still-images applies bitplane encoding, where, if the 

compressed  bitstream  is  truncated at  an  intermediate point,  one  can estimate  the  expected  transform-domain 

distortion [27].  

Once the expected transform-domain distortion is established at different bitstream truncation points of each 

decoded-frame,  we  can  associate  this  information  with  different  video  packets  generated  for  that  frame.  An 

example  is  given  in  Figure  5,  where  different  frames  of  the  temporal  decomposition  of  one  GOP  are 

represented  by  a  series  of  video  packets.  Each  video  packet  is  characterized  by  its  corresponding  rate 

g
increment  and  distortion  decrement.  In  particular,  for  each  video  packet  vpi
j+

,  where  i   is  the  first  packet 

number of the current GOP and  0

≤ <  is the in-GOP packet number (assuming a total of  J  packets for 

J

j

the  current  GOP),  we  denote  these  as 


r
∆ 

g
vpi
+

j

, 





d
∆ 

g
vpi
+

j




  (respectively),  with 

=g

{ , ,
g t k r

, }

  a  spatio-

temporal coordinates vector indicating: the current-GOP number ( g ), the temporal level (t ), the frame index 

within the temporal level ( k ) and the spatial decomposition level ( r ).  

 

 

3,0L
3,0L

3,0H
3,0H

2,0H
2,0H

2,1H
2,1H

1,1H
1,1H

1,2H
1,2H

1,3H
1,3H

{
{

d∆ ∆
d∆ ∆

r
r

,
,

g
g

}{ ,3,0,1}
}{ ,3,0,1}
i
i

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,3,0,1}
g
}{ ,3,0,1}
d +
d +
i
i

6
6

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,2,0,1}
g
}{ ,2,0,1}
d +
d +
i
i

10
10

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,1,3,1}
}{ ,1,3,1}
g
d + −
d + −
2
i J
2
i J

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,3,0,1}
g
}{ ,3,0,1}
d +
d +
1
i
1
i

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,3,0,1}
g
}{ ,3,0,1}
d +
d +
i
i

7
7

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,2,0,1}
g
}{ ,2,0,1}
d +
d +
i
i

11
11

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,3,0,1}
g
}{ ,3,0,1}
d +
d +
2
i
2
i

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,3,0,1}
g
}{ ,3,0,1}
d +
d +
i
i

8
8

{
{

∆ ∆
∆ ∆

r
r

,
,

g
g
d +
d +

}{ ,3,0,1}
}{ ,3,0,1}
i
i

3
3

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,3,0,0}
g
}{ ,3,0,0}
d +
d +
i
i

5
5

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,3,0,0}
}{ ,3,0,0}
g
d +
d +
i
i

4
4

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,3,0,0}
}{ ,3,0,0}
g
d +
d +
9
i
9
i

{
{

∆ ∆
∆ ∆

r
r

,
,

g
}{ ,2,0,0}
}{ ,2,0,0}
g
d +
d +
i
i

12
12

{
{

∆ ∆
∆ ∆

r
r

,
,

}{ ,1,3,0}
}{ ,1,3,0}
g
g
d + −
d + −
i J
1
1
i J

1,0H
1,0H
…
…

.
.
.
.
.
.

…
…

Figure 5. An example of the video packets generated for the spatio-temporal decomposition of Figure 4. 

 

As indicated by the arrows of Figure 5, in order to create video packets with bounded maximum size (where 

the  bound  is  set  by  the  size  of  an  application-layer  packet),  the  compressed  information  of  a  certain  spatial 

resolution level  r  may be divided into several packets, which are dependent on previous packets of the same 

11

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

resolution. These dependencies vary based on the utilized compressed scheme; in the example of Figure 5 we 

assume that the entire resolution level of each video frame is compressed into one bitstream, which is the case 

in the utilized codec [30]. Under any loss pattern 

=j

{ ,
j
1

j

2

,

,
…

j

}N

 for the video packets, if the packets of a 

g
frame at a certain spatio-temporal resolution are indicated by  vpi
l+

, with  l  bounded as  start

l

≤ <

l

l

end

, we 

can define the expected transform-domain distortion reduction for this frame at the decoder side as: 

 

D
g

= 

∃
l

loss

∈

[
l

,

l

start

end

−

1] :

. 

(3) 

l

1
−

]
,  if  

[

l
l

d

∆

end
l
=

start
1
−

g
vp
i
l
+

∑
∑
                            

g
vp
i
l
+

loss
l
=

∆

start

d

[

l

]
,  if  

[





∀ ∈

l

[
l

,

l

start

end

−

1] :

i

+ ∉

l

j 

                      

i

+

l

loss

∈

j

 & 

(

∀ ∈

l

[
l

,

l

start

loss

−

1] :

i

+ ∉

l

j

)

]

Since the spatio-temporal transform decomposition is based on biorthogonal filter-pairs, the transform-domain 

distortion-reduction estimates based on distortion-modeling of embedded wavelet coding [27] in conjunction 

with  (3)  will  not  represent  the  distortion-reduction  from  the  inverse  MCTF  process  that  utilized  the  certain 

amount  of  packets.  Concerning  lack  of  orthonormality  in  space,  one  can  weight  the  transform-domain 

distortion generated by the embedded wavelet coder according to the gain of the synthesis filter-kernel [27]. 

Nevertheless the lack of orthonormality in temporal decomposition cannot be corrected by a fixed weighting 

scheme, since advanced MCTF techniques, such as the ones used in the present paper and other recent state-of-

the-art  open-loop  coding  methods  [33]  [34]  [37],  create  different  dependencies  among  neighboring  frames, 

depending on the motion-vectors selected for each area of every frame. In practice, this corresponds to the use 

of different filters in different levels of the temporal filtering, as well as in different areas of each frame.  

In order to simplify our analysis we make the certain assumptions and simplifications. Similar to other studies 

[35], we do not analyze the case of fractional-pixel MCTF, but rather focus on the case of full-pixel MCTF. 

Moreover,  instead  of  analyzing  the  error-propagation  per  pixel,  we  assume  a  uniform  distribution  of  the 

decoding  error  among  the  pixels  of  an  L   or  H   frame  [41].  Finally,  we  assume  no  correlation  among  the 

decoding error of consecutive  L  and  H  frames used for the reconstruction of consecutive output frames [41]. 

Under  these  assumptions,  we  can  simplify  the  adaptive  MCTF  decomposition  for  each  temporal  level  by 

expressing it as: 

1,
t

H

=

1
2

(

A

0,2
t

+

1

−

p

2
t
F

0,2
t

⋅

A

−

+

2

p

2
t
B

⋅

A

0,2
t

+

2

)

 

1,
t
L

=

0,2
t

2
A

+

u

t
1
−
F

⋅

H

1,
t

1
−

+

u H

⋅

t
B

1,
t

 

(4) 

(5) 

where  the  factors 

p

i
M

= ∑ ∑

X Y

1
⋅

=

0

x

X

1
−

Y

1
−

y

=

0

p

i
M

[ ,
x y

]

, 

i

=

{2 , 2
t

t

+ , 

2}

=M F B   express  the  average 

{ , }

weighting of the pixels of the corresponding frames 

0,iA  during the prediction step that utilizes forward ( F ) 

and  backward  ( B )  motion  compensation,  and 

u

j
M

= ∑ ∑

X Y

1
⋅

=

0

x

X

1
−

Y

1
−

y

=

0

u

j
M

[ ,
x y

]

, 

j

= −

{
t

1, }

t

,  express  the 

 

 

 

12

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

average  weighting of  the pixels  of  the  error  frames 

1,jH   during  the  (forward  and backward)  inverse  motion 

compensation  of  the  update  step.  These  weighting  factors  are  calculated  during  encoding  according  to  the 

optimized temporal filtering for each frame and stored along with the compressed bitstream.  Notice that, by 

adjusting 

ipM  and 

juM , equations (4) and (5) express a generalized form of temporal filtering that can include 

the bi-directional Haar filter-pair with and without the update step [30], as well as the 5/3 temporal filter-pair 

[26]  with  and  without  the  update  step  [30],  which  constitute  the  common  choices  found  in  the  relevant 

literature [34] [26] [30]. For example, by setting 

2

2
tp + =
B

0

 and 

1

tu − =F

0

, (4) and (5) correspond to (1) and 

(2), i.e. the (uni-directional) Haar MCTF.  

For each pair of frames  1,

,t

L H , the inversion process is found by establishing 

A

1,
t

0,2

,t

0,2
t

A +  based on (4) and 

1

(5), yielding: 

(6), yielding: 

0,2
t

A

=

1
2

(

1,
t
L

−

u H

t
1
−
F

1,
t

1
−

−

u H

t
B

1,
t

)

 

0,2
t

+

1

A

=

1,
t

2
H

+

p A

2
t
F

0,2
t

+

p

2
t
B

+

2

0,2
t

+

2

A

. 

The last equation can be expressed in function of  L  and  H  frames by replacing 

0,2tA  and 

0,2

2tA +  based on 

0,2
t

1
+

A

=

(

2

−

p

2
t
F

⋅

u

t
B

−

p

2
t
B

+

2

⋅

)
u H

t
F

1,
t

−

p

2
t
B

+

2

⋅

u

1
+
t
B

⋅

H

1,
t

1
+

. 

(8) 

− ⋅

p

2
t
F

u

t
1
−
F

⋅

H

1,
t

1
−

+

p

2
t
F

⋅

1,
t
L

+

+

2

p

2
t
B

⋅

1,
t
L

1
+

Based on (6) and (8) we can express the expected mean square error (MSE) of the reconstructed output frames 

(cid:105) 0,2t
A , 

1t
+

(cid:105) 0,2
A

 

in 

function  of 

the  MSE  of  decoded 

(and 

spatially-reconstructed) 

frames 

1,
t

(cid:105) (cid:105)
H H

,

1,
t

1
−

1,
t

+

1

(cid:105)
H

,

1,
t

(cid:105)
(cid:105)
L L

,

,

1,
t

1
+ . For any frame 

]M x y  we define this error as: 

[ ,

E

{

e

2
A

}

=

1

X Y

1
− −

1
⋅ ∑ ∑

= =

0

0

y

x

X Y

E

{

M x y M x y

[ ,

[ ,

−

]

]

(cid:106)

2

}

 

where  (cid:106)[ ,

]M x y  represents the decoded pixel of frame  M  at position  ( , )

x y . Based on our assumption that no 

correlation exists on the decoding error of adjacent transform-domain frames, we have: 

E

{

e
M

e⋅

N

}

=  
0

for: 

M N

,

=

1,
t

{
H H

,

1,
t

1
−

,

H

1,
t

+

1

1,
t

1,
t
L L

,

,

+

1

}

 with  M N≠ . 

In this way we derive the expected mean-square error after the reconstruction as: 

E

{

2
e
A

0,2

t

}

=

1
2

(

E

{
e

2
1,
t
L

}

+

(

u

t
B

2

)

E

{
e

2
H

1,
t

}

+

(

u

t
−
1
F

2

)

E

{
e

2
H

1,
t

1
−

}

)

 

E

{

2
e
A

}

=

0,2

t

1
+

2

−

p

t
2
F

⋅

u

t
B

−

p

t
2
B

+

2

⋅

u

t
F

2

E

2
H

1,
t

}

+

(

p

t
2
B

+

2

2

) (

u

t
+
1
B

2

)

E

{
e

2
H

}

1,
t

1
+

+

p

t
2
F

2

) (

u

t
−
1
F

2

)

E

{
e

2
H

}

+

p

t
2
F

1,
t

1
−

E

{
e

2
1,
t
L

}

+

(

p

t
2
B

+

2

2

)

E

{
e

2
1,
t
L

1
+

}

)
(

{
e
2

)

(
(

. 

(13) 

(6) 

(7) 

(9) 

(10) 

(11) 

(12) 

 

 

 

 

 

 

 

 

13

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

Based  on  (12),  (13)  we  can  estimate  the  reconstruction  error  after  the  inverse  MCTF  that  utilizes  a  certain 

subset of video packets if we replace the expected mean square error  {

}2E Me

, with  M  defined by (11), by the 

expected  transform-domain  reconstruction  error  given  by  (3)  and  appropriately  weighted  by  the  gain  of  the 

spatial-analysis  filter-bank.  For  the  example  case  of  one  temporal  decomposition  level  and  R   spatial 

decomposition levels we have: 

E

{

e

}2
M

R

= ∑

S

r

=

0

{
g

M

,1,
t

M

, }
r

,1,
t

M

, }
r

M

D
{
g

 

(14) 

with  Mg

,  Mt

 indicate the GOP number and frame-index (within temporal-level one) of the particular frame 

M ,  respectively.  In  this  paper,  the  utilized  weighting  for  the  transform-domain  distortion  of  each  spatial 

resolution  r ,  {
S
g

t
,1,
M

r
, }

M

, is based on the weighting used in related work: 

S

g
{

M

t
,1,

M

r
, }

=

(

r
−
)

2

. 

In  the  generic  case  of  a  multilevel  temporal  decomposition,  equations  (3),  (14),  (12),  (13)  are  applied 

hierarchically for all the frames of each temporal level in order to estimate the expected mean-square error at 

the output video frames of each GOP. For this purpose, in our streaming experiments the percentages of the 

pixels  predicted  and  updated  (forward  and  backward)  by  each  frame  during  the  temporal  decomposition  are 

kept along with the rate-distortion information in order to be used during the actual streaming process for the 

formulation  of  the  expected  distortion.  It  is  important  to  notice  that  the  application  of  (3),  (14)  and 

subsequently  the  calculations  of  (12)  and  (13)  can  be  performed  multiple  times  in  real  time  during  the 

streaming  process  as  they  do  not  demand  a  significant  number  of  arithmetic  operations.  Hence,  even  if  the 

proposed distortion-estimation scheme leads only to approximations of the actual decoded-frame distortion, it 

consists of a realistic framework that could be readily deployed on a streaming server. Alternatively, if non-

embedded coding based on H.264/AVC [36] is used, or different forms of embedded coding inspired thereof 

[37], the entire process could be performed off-line: for each packet-loss pattern, the distortion 

D
g
{

t
,1,
M

r
, }

M

 of 

each decoded frame could be measured based on multiple decodings, followed by the application of (12) and 

(13). This is similar to the concept of distortion-chain modeling [18], and could be potentially performed off-

line. Nevertheless, the complexity of such a framework can be significantly higher [18], since a large number 

of packet-loss patterns would have to be evaluated by off-line decoding at the streaming server.  

One  important  aspect  not  treated  in  this  analysis  concerns  the  expected  distortion-reduction  under  losses  of 

motion-vector information. In general, this results in non-linear MSE variations across various reconstructed 

frames.  As  a  result,  we  mark  the  motion-vector  packets  with  the  maximum  expected  distortion-reduction  of 

their corresponding error frame in order to ensure that they are prioritized versus their corresponding texture 

bitstream  in  the  error  frames.  In  addition,  if  a  certain  motion-vector  packet  is  not  received,  we  zero  the 

 

 

14

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

corresponding  percentage  of  pixels  linked  with  the  appropriate  reference  frame  in  order  to  incorporate  the 

effect of lost motion information in the estimation of (12)–(14).  

Temporal level 

Average size (bytes) 

1 
135 

2 
268 

3 
632 

4 
982 

Aggregated 

971 

Table  III:  The  importance  of  packet  aggregation.  In  the  first  four  columns,  the  average  (over  the  entire 
sequence) video-packet size (in bytes) is shown for the frames of a four-level temporal decomposition. The last 
column  demonstrates  the  packet  size  after  the  aggregation process.  The  maximum  application-layer  packet 
size  was  set  to  1000  bytes.  The  sequence  “Mad  Cyclist”  was  used  for  this  example  (CIF  resolution,  900 
frames, extracted at 500 kbps with the utilized MCTF codec [30]).  

Finally, by segregating all video packets  vpj

g  (with  j  indicating the video-packet number) into certain classes, 

if the sum of sizes of two or more packets in the same class is smaller than the maximum application-packet 

size, a packet aggregation (PA) process merges these packets thereby forming aggregated packets  apa  (with a  

indicating the aggregated packet number. The class segregation is formed based on the packet spatio-temporal 

vector  g  as well as based on the data dependencies among packets. More specifically, two packets are set in 

the same class if they belong to the same GOP, are of the same type (texture or motion-vector packet), spatial 

resolution, frame type ( H  or  L ), the same color channel (luminance or chrominance channels), and, either do 

not have any dependencies on other video packets, or depend on packets of the same temporal level. Packet 

aggregation within each class occurs in a breadth-first scan through the temporal decomposition of each GOP; 

this  means  that,  in  the vast  majority  of  cases,  packets of  the  same  temporal  level  are  grouped together.  It  is 

important  to  notice  that  the  aggregation  process  is  affected  by  the  number  of  transmission  paths  ( P );  in 

particular,  only  packets  that  have  frame-indices  offset  by  k P⋅

,  with  k

+∈ Z ,  can  be  aggregated.  This  is 

mandated from the initialization of the packet-separation algorithm described in the following section.  

The  process  of  packet  aggregation  is  necessitated  by  the  fact  that  several  video  packets  generated  by  the 

bitstream adaptation process can be very small in size in comparison to the maximum application-packet size. 

This is illustrated in Table III, where it is shown that the average video-packet size increases according to the 

temporal  level.  This  is  a  problem  similar  to  the  different  video-packet  sizes  for  P-  and  B-  frames  in 

conventional MPEG coding. However, it becomes more significant in our case due to the multilevel temporal 

decomposition  structure  of  MCTF.  Each  aggregated  packet  apa   is  associated  with  a  corresponding  rate 

increment and a list of distortion decrements, denoted by 

r∆

[ap ]a

, 

d∆

[ap ]a

, respectively, defined as: 

{

∆
r

[ap ],

d∆

a

}
[ap ]
a

=

∆
r

[vp ] ,  

[

∆

d

g
i

g
[vp ]
i

]

∀

i

g
:vp
i

∈

ap
a

(15) 









∑

∀

i

g
:vp
i

∈

ap
a

. 









Notice that the individual video-packet distortion-decrements in vector 

d∆

[ap ]a

 cannot simply be added as in 

the case of the rate increments, as their contribution to the model estimated distortion is calculated through the 

 

 

 

15

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

hierarchical  application  of  (3),  (14),  (12),  (13).  In  particular,  for  a  group  of  packets  that  correspond  to  the 

vector of distortion decrements 

d∆ , we denote the average estimated distortion-reduction of a reconstructed 

GOP after T  levels of MCTF reconstruction as 

D∆ =

T ∆ . For example, 
T

d

(

)

1

T ∆  is given by (12) and 

d

(

)

(13), where the expected mean square error  {

}2E Me

 [with  M  given in (11)] defined by replacing the result of 

(3) in (14). 

III.C  Packet-level  Optimized  Redundancy  of  Video  via  Polyphase  Transform  and 

Motion Compensated Temporal Filtering 

The  proposed  video  streaming  architecture  is  outlined  in  Figure  6.  The  front  end  of  the  proposed  system 

consists  of  an  implementation  of  the  MCTF-based  coding  process.  As  shown  in  Figure  6,  the  created  video 

packets are initially separated into  P  classes, depending on their frame index  k  within each temporal level 

[29]. Notice that the video packets of frame 

,0TL  exist on all classes. In this way, an amount of redundancy is 

initially introduced in each path and independent decoding from any path becomes possible [29]. In MCTF-

based  coding,  the  frame 

,0TL   is  the  equivalent  of  an  intra-frame  of  conventional  MPEG  coding:  due  to  the 

temporal dependencies of MCTF, the existence of certain video packets of 

,0TL  on both paths is a requirement 

for the independent reconstruction of visually-meaningful results from each path. However, as it will be shown 

in the next section, the amount of redundancy existing on each path is adaptively established based on network 

feedback, the proposed path-failure modeling, and the derived distortion-reduction estimates.  

Although the polyphase separation creates information to be transmitted on each of the  P  paths, the essential 

adaptation  process  to  the  paths’  characteristics  is  performed  in  the  adaptive  redundancy  scheduling  (ARS) 

module (Figure 6), which is elaborated in more detail in the following subsection. Through ARS, the packets 

to be transmitted via each path are established. For each of the  P  paths, the packet interleaving (PI) module 

adjusts the transmission order of the packets according to their processing order at the decoder. This process is 

generally  transmitting  packets  in  a  bottom-up  manner  through  the  temporal  pyramid,  i.e.  the  packets 

corresponding to the coarsest temporal levels are transmitted first. 

Although  the proposed  multipath  video-transmission  architecture is  partially  motivated  by  previous  work on 

polyphase-transform MDC [39] and multiple-state encoding with path diversity [23], Figure 6 shows that two 

significant conceptual differences exist between the proposed framework and the related work.  

Firstly, the proposed method generates redundancy during the bitstream adaptation stage. As a result, there is 

no  loop  between  the  video  encoding  and  the  redundancy-generation.  Instead,  coarse  and  fine-quantized 

descriptions of each video GOP are transmitted together by exploiting the layered structure of spatio-temporal 

 

16

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

embedded  coding.  In  practice,  this  means  that  the  proposed  technique  can  work  equivalently  with  pre-

compressed content. In terms of applications, apart from the obvious complexity gain from such a process, this 

separates  content  generation  and  content  protection  for  network  transmission.  This  can  be  very  important  in 

today’s  distributed  multimedia  environment  where  content  may  be  compressed  and  transmitted  through 

various media, some of which may not be requiring advanced protection from channel failures. 

Temporal 
Temporal 
Filtering
Filtering

Current 
Current 
frame
frame

DWT
DWT

EC
EC

MVC
MVC

MCTF
MCTF

MVs and Ref.
MVs and Ref.

Frame No.
Frame No.

Video
Video

ME
ME

ME: Motion Estimation
ME: Motion Estimation
EC: Embedded Coder
EC: Embedded Coder
DWT: Discrete Wavelet 
DWT: Discrete Wavelet 
Transform
Transform
MVC: Motion Vector Coder
MVC: Motion Vector Coder
ARS: Adaptive Redundancy
ARS: Adaptive Redundancy
Scheduling
Scheduling
PA: Packet Aggregation
PA: Packet Aggregation
PI: Packet Interleaving
PI: Packet Interleaving

R/D estimate 
R/D estimate 
per packet
per packet

Texture/MV
Texture/MV
Bitstreams
Bitstreams

Bitstream
Bitstream
Adaptation
Adaptation

video
video
packets
packets

+
+

=
=

Pm i
,
,
Pm i

k
k
or packet of  T
or packet of  T
L
L

,0
,0

ARS
ARS

PI
PI

Path
Path

i +
i +

1
1

Polyphase
Polyphase

P−
P−
Transform
Transform

=
=

Pm
,
,
Pm

k
k
or packet of  T
or packet of  T
L
L

,0
,0

=
=

+
+

Pm
Pm

k
k
or packet of  T
or packet of  T
L
L

1,
1,

,0
,0

PA
PA

PA
PA

PA
PA

PA
PA

PA
PA

… …
… …

… …
… …

=
=

Pm P
Pm P

2,
2,
k
k
+ −
+ −
,0
or packet of  T
,0
or packet of  T
L
L

=
=

Pm P
Pm P

1,
1,
k
k
+ −
+ −
,0
or packet of  T
,0
or packet of  T
L
L

PI
PI

PI
PI

PI
PI

PI
PI

Path 1
Path 1

Path 2
Path 2

Path
Path

1P −
1P −

Path 
Path 

P
P

Network  Model  Statistics 
Network  Model  Statistics 
or Routing-layer Feedback
or Routing-layer Feedback

Channel Bandwidth
Channel Bandwidth

 

Figure 6. Application-layer system overview 

A  second  advantage  of  the  proposed  scheme  is  that  it  operates  directly  at  the  bitstream  extraction  and 

packetization stage and hence it can respond and adapt faster to network failures and varying bandwidth. In 

addition,  this  allows  the  explicit  effects  of  the  packetization  process  to  be  taken  into  account  during  the 

optimized adaptation process of ARS. These topics are elaborated in more detail in the following section. 

III.D  Adaptive Redundancy Scheduling (ARS) 

In this section we present an algorithm for optimized packet scheduling in two different scenarios. The first 

scenario (subsection III.D.1) involves the existence of network feedback in terms of failure notifications from 

the proxy server. The second scenario (subsection III.D.2) assumes no feedback and optimizes the redundancy 

level  by  transmission  of  a  subset  of  packets  on  all paths  based  on  each  path’s  probability  of  failure  and  the 

failure  duration  period.  In  both  cases,  we  utilize  the  pre-computed  rate-distortion  hint  information  for  the 

packet  data  and  no  actual  parsing  or  decoding  of  compressed  information  takes  place.  As  a  result,  all  the 

proposed algorithms have low complexity. 

 

 

17

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

In this paper, we denote the  P  paths via the vector  u  (of length  P ). In general, the commonly-used dyadic 

temporal decomposition of MCTF fits more naturally to a streaming system with 

P = ; hence we shall focus 

2

on this case for our simulation results. However, since the proposed algorithm is generic, it is presented for an 

arbitrary  number  of  paths.  Moreover,  it  is  important  to  notice  that  for 

P = ,  a  three-band  temporal 

3

decomposition can be used for MCTF [31] without apparent sacrifice in coding efficiency. For higher values of 

P , we note that one can easily extend the proposed schemes for 

P

=

2 ,  k
k

∈ Z . 

+

u  
After  the  video-packet  aggregation  of  the  current  GOP  (Figure  6),  a  total  of  C u   packets,  denoted  by  apcu

( 1

≤

c

≤u

C

u ),  and  their  associated  with  their  rate-distortion  information 

{

r∆

[

u
ap
c
u

]
,

d∆

[

u
ap
c
u

]

}

  are 

generated for each path so that the path bandwidth 

( )iRu

 is matched2.  

III.D.1  Adaptive Packet Scheduling with Network Feedback  

The  process  of  adaptive  packet  scheduling  in  P   paths  is  performed  with  a  GOP  granularity.  A  buffering 

scheme at the decoder side ensures that, under constant bitrate transmission, the decoder does not run out of 

received data. Under this scenario, the worst-case overall transmission and decoding latency was estimated to 

be  around  4 GOPs3,  i.e. approximately  2.5  seconds  if we  assume  a  GOP  of  16  frames  at  a  frame-rate  of  30 

frames-per-second.  We  assume  that  a  failure-initiation  and  failure-termination  notification  is  sent  from  the 

proxy server upon the detection of link failures or routing instability. The maximum delay for such notification 

events is set to 200 msec and packet transmission occurs in intervals of 100 msec.  

For  each  GOP,  we  initially  assume  that  all  paths  are  operational.  Hence,  initially,  any  existing  redundancy 

among the packets to be transmitted via all paths is removed. For example, if originally all the packets of frame 

,0TL   are  included  in  all  paths  (as  indicated  in  Figure  6),  then  they  are  removed  from  all  but  one  path. 

Consequently, all the packets of each path are sorted according to their relative distortion-reductions. This is 

performed  by  applying  the  distortion  modeling  of  Subsection  III.B  for  each  packet  starting  from  the  last 

temporal level. If a packet has dependencies, we assume these packets to be present at the decoder side so as to 

establish  the  relative  distortion-reduction  of  each  individual  application-layer  packet  under  the  proposed 

distortion modeling framework. In this way,  P  separate packet lists are created with the packets included each 

list  having  decreasing  importance  in  terms  of  distortion  reduction.  For  the  duration  where  no  path  failure  is 

detected, for each path, the packets are prioritized for transmission based on their position in the sorted lists. 

                                                 
2 In the case of constant-bitrate (CBR) transmission, it is common to assume that, for every path 
duration of the transmission of each GOP. 
3 We did not take into account the decoder execution time in these measurements as, under real-time decoding, this overhead is minimal versus 
the overall delay. 

≤ ≤ , we have 

R =u

 for the 

( )iu

,  1

R
P

P

( )
i

i

 

18

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

Once a failure notification is received for one or more paths, the transmission continues through the remaining 

paths by redistributing the packets of the failed path(s) in all or some of the working paths, starting at the point 

where the failure was detected.  

The  redistribution  of  packets  among  the  existing  paths  is  performed  according  to  the  distortion-reduction 

estimates. Assume that  d  paths have failed during the transmission of the current GOP, with  1

≤ < ; for 

P

d

each  d ,  there  are 

  combinations  of  failed  paths.  For  each  combination  m , 

1

≤ ≤

m

P

!
−
d P d

!
(

)

!

,  we 

P

!

d P d−

!
(

)

!

denote the vector of successful-paths by  ms

 (of length P d− ) and the vector of unsuccessful (failed) paths by 

mf

 (of lengthd ). The packet distribution algorithm starts by establishing the paths 

f
( )m i

 and 

s
( )m j

 with the 

highest and lowest total estimated distortion-reduction, respectively; the total estimated distortion-reduction of 

a path is established by summing all the individual packet distortion reductions with the distortion modeling 

framework of subsection III.B. At this point, all packets 

f
ap m
cf

( )
i
im
( )

 with: 

∀
c

f ( ) :

i

m

T
T

(

∆

d

f
ap
m
c
f
m

( )
i
i
( )





)





≥

max
∀
c
jm
( )
s

{

T
T

(

∆

d

s
ap
m
c
s
m

( )
j
j
( )





)

}

 





(16) 

are  moved  in  path 

( )m j
s

.  The  process  continues  with  the  next  path  from  mf

,  until  all  the  failed  paths  have 

been covered, or the delay constraints for the transmission window are exceeded. Notice that the decision to 

move packets is invariant to the packet size as, after packet aggregation, the vast majority of packets have the 

same size, which is determined by the application-layer packet size, as shown in Table III.  

In each case, once the path bandwidth 

( )m iRs

 is met in a working path 

( )m j
s

, the transmission of the packets of 

( )m j
s

 stops and the remaining packets are discarded. In our experiments, the minimum path-failure duration 

always exceeded the transmission time of one GOP. As a result, once a path fails during the transmission of 

the  current  GOP,  no  attempt  is  made  to  check  whether  the  path  has  been  re-established  within  the  GOP 

transmission intervals. This is only performed once the packets of the next GOP are processed. Without being 

overly complex, this algorithm guarantees that all the working paths  ms

 can eventually converge to equalized 

distortions from the addition of packets from the failed paths  mf

. 

III.D.2  Model-based Optimized Packet Redundancy  

This case is based on the proposed path-failure network modeling framework of Section II. If we define the 

average  length  of  a  streaming  session  to  be  W   seconds,  for  any  path 

( )iu

,  1

≤ ≤ ,  the  modeling 

P

i

framework can provide an estimate for: 

• 

the expected number of link failures 

F
u

( )
i

(
z

u

( )
i

)

, with 

( )izu

 denoting the link number of 

( )iu

 (that has a 

total of 

( )iZu

 links) and 

1

≤

z

≤u
( )
i

Z

u

( )
i

, 

• 

the expected average service-disruption time due to a link-failure, denoted by  idle
( )i

tu

.  

 

 

19

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

Assuming  that,  for  each  path,  no  two  links  fail  at  the  same  time4,  the  estimated  disruption  time  within  W  

milliseconds  is  given  by 

t

idle
i
u
( )

Z

⋅ ∑ u

z

( )
i

=

1

u

( )
i

F
u

i
( )

(
z

u

i
( )

)

.  In  the  “blind”  case  with  no  network  feedback,  we  can 

assume  a  uniform  distribution  of  link  failures  within  the  timeframe  of  the  streaming  session.  Hence  the 

probability of a path failure for any path  ( )iu

 is: 

q

u

i
( )

Z

u

( )
i

t

idle
( )
i
u
W

= ∑

z

u

( )
i

=

1

F
u

i
( )

(
z

u

i
( )

)

. 

(17) 

Alternatively,  if  we  assume  that  a  failure-termination  packet  is  received  for  path 

( )iu

  at  the  server,  the 

probability  of  a  new  failure  on 

( )iu

  for  the  k -th  GOP  after  the  failure  termination  is  given  based  on  the 

Weibull distribution with the parameters defined as in Section II. We note that, for any two paths  ( )iu

,  ( )ju

, 

the probability 

( )iqu

 is independent of 

( )jqu

 only if the paths do not have shared links5.  

As mentioned before, concerning the actual packets transmitted via each path, independent decoding from any 

one  path  should  be  possible.  As  a  result,  the  most  significant  packets  in  terms  of  distortion-reduction  are 

reproduced on all paths. A simple example is demonstrated in Figure 6 where the video-packets of frame 

,0TL  

are included on all paths. To generalize this concept, we define as redundancy group 

rw  the vector containing 

a  total  of 

rC   packets  transmitted  over  each  path  with  these  packets  originally  belonging  to  paths  path

r

  and 

their in-path position indicated by the vector 

r
in-path

 (both vectors of length 

rC ). The optimized estimation of 

the parameters  {

rC r

,

path

,

r
in-path

}

 that define 

rw  is the topic of this subsection. Under the assumption of an 

existing redundancy group, its distortion-reduction vector is: 

∆

d

w

r


= 


∆

d

ap





(1)

r
path
r
in-path

(1)





,

d…

∆

,

ap





r
path
r
in-path

)
(
C
r
(
C

)

r

. 

 
 
 

Moreover, for the remaining packets received via any path  ( )iu

, the distortion-reduction vector is: 

(18) 

(19) 

∆

d

u

( )
i

=

∆

d





( )
i
u
ap
′
c
u

( )
i











′∀
c
u

( )
i

∈

[1,

C

u

( )
i

( )
i
u
]:ap
′
c
i
( )
u

∉

w

r

 







As  explained  before,  the  total  number  of  packets  on  each  path, 

( )iC u

,  is  always  determined  so  that  the  path 

bandwidth 

( )iRu

 is not exceeded. 

During the transmission of each GOP the following situations are possible at the receiver: 

• 

the number of failed paths is zero; this happens with probability 

ϕ
0

=

−∏

(1

q

)

; 

u

i
( )

P

i

=

1

                                                 
4 This corresponds to the worst-case scenario. 
5  The  case  with  shared  links  can  be  solved  in  the  same  manner  by  establishing  the  probability  of  failure  per  link.  However,  since  the  case  of 
multipath transmission with a large number of shared links among the paths will lead to intervals with complete loss of video information (hence 
no quality-of-service can be guaranteed), it is less interesting for video streaming. 

20

 

 

 

 

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

• 

d   out  of  P   paths  are  not  operational  (1

≤ < );  the  probability  that  a  certain  combination  m  

P

d

(

1

≤ ≤

m

P

!
d P d
−

!
(

)

!

) of  d  failed paths occurs is expressed by 

ϕ

d m

,

(1

−

q

s
m

( )
j

)

 with  ms

,  mf

 

d

P d
−

=

∏ ∏f

( )
i

q

m

i

=

1

j

=

1

defined in subsection III.D.1; 

•  no path is operational; this happens with probability 

ϕ
P

= ∏ u
q

( )
i

. 

P

i

=

1

By  definition,  for  the  current  GOP,  the  average  distortion-reduction  for  the  case  of  Pϕ   is  zero,  since  no 

packets were received out of any path. Consequently, this case is not included in our optimization problem. As 

a result, the expected distortion-reduction for the current GOP under all practical situations can be written as: 

GOP

∆

D

=

ϕ
0

T
T

(

[

∆

d

,
(1)

u

,
…

∆

d

u

( )
P

,

∆

d

ϕ

T
d m T

,

(

[

∆

d

s
m

,
(1)

…
,

∆

d

s
m

(
P d
−

,
)

∆

d

w
r

]

)

.(20) 

P

!
d P d
−

1 !
(

)

!

P

−

]

)

+ ∑ ∑

w
r

d

1
=

m

1
=

In the last equation, the explicit packet distortion-reductions may be replaced from (19). As a result, with the 

help of the proposed distortion modeling framework, equation (20) provides the expected distortion-reduction 

occurring  from  any  selected  packet  transmission  scenario  for  each  path.  If  (17)  is  used  for  the  path-failure 

probabilities 

( )iqu

  then  we  use  no  dynamic  channel  feedback,  except  for  a  training  session  for  the 

establishment  of  average  link  failures 

F
u

( )
i

(
z

u

( )
i

)

  and  average  disruption  time 

.  Alternatively,  if  the 

idle
tu
( )i

Weibull  distribution  is  used  for  the  calculation  of 

,  then  we  assume  that  the  server  receives  packets 

( )iqu

indicating failure-termination events.  

We can now define and solve the problem of optimal allocation of packet redundancy as follows. 

Problem statement: 

following data are provided:  

For  the  transmission  of  the  current  GOP  over  P   paths,  given  that,  for  each  path 

( )iu

  ( 1

≤ ≤ )  the 

P

d

(a)  the probabilities 

0ϕ  and 

,d mϕ

, with 

1

≤ ≤

m

P

!
d P d
−

!
(

)

!

 and  1

≤ ≤ − , 

P

d

1

(b)  an initial set of application-layer packets 

 allocated at each path  ( )iu

 and their associated rate-

distortion reduction estimates {

r 
∆ 


u
( )
i
ap
c
i
u
( )

u
( )
i
ap
c
i
u
( )





}





 

(c)  the bandwidth 

( )iRu

 of each path  ( )iu

 during the GOP transmission interval,  

u
( )
i
ap i
cu
( )




d∆

,

determine  the  optimal  redundancy  group 

∗w   with  parameters  {

r

rC ∗

,

∗
r
path

,

∗
r
in-path

}

,  i.e.  the  subset  of  packets 

that should be transmitted via all paths so that the expected distortion-reduction 

GOPD∆

 is maximized. 

Having the  analytical expression  of 

GOPD∆

  from  equation  (20)  and the  predetermined probabilities of path 

failures, 

GOPD∆

 becomes a function of  {

rC ∗

,

∗
r
path

,

∗
r
in-path

}

 and 

( )iud∆ . 

In  order  to  establish  the  solution,  initially  all  the  GOP  packets  apcu

u   are  sorted  together,  according  to  their 

relative distortion-reductions 

T ∆
T

(

d

[

ap

u
cu

]

)

, calculated individually as for subsection III.D.1. Consequently, 

 

21

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

the  redundancy  group  consisting  of 

rC   packets  (and  their  corresponding  vectors  path

r

, 

r
in-path

)  with  the 

maximum distortion reduction can be found by selecting the first 

rC  packets of the sorted list of packets. At 

this point, the optimal solution can be found by adjusting the value of 

rC  until convergence to the maximum 

value for 

GOPD∆

 is achieved. The bisection method can be used for this process.  

 

with: 

∆

C

i
step

( )
k i
{

=

=

{
1
iC
−∆
step
2

Specifically, we start with an initial value 

rC  that corresponds to the number of video-packets corresponding 

1

to the 

,0TL  frame and a step 

C∆

1
step

= . Then a series of iterations are performed: 

1
rC
2

C

i
r

−=
1

C

i
r

+

k i C

( )

∆

i
step

, 

(21) 

1,  if 

∆

D

GOP

(
C

i
r

)

> ∆

D

GOP

−
1

(
C

i
r

,  if  ( )
k i

≠

(
k i

− ∆

1);

C

,  otherwise

−
1
i
step

i
r

GOP

GOP

)

D

D

−

∆

(
C

< ∆

); 1,  if 
}
rwd∆   are  calculated  based  on  the  sorted  list  of  GOP 

,  until  convergence  is  achieved,  i.e. 

k i = .  For 
( )

); 0,  otherwise

and 

(
C

, 

0

−
1

i
r

}

each  iteration  the  vectors  path

r

, 

r
in-path

, 

ud∆   and 

packets and the bandwidth constraints  Ru . Since we are only modifying the value of 

rC  and then calculate the 

expected  GOP  distortion  based  on  (20),  under  the  context  of  the  proposed  solution  the  obtained  maximum 

value  for 

GOPD∆

  is  guaranteed  to  be  the  global  maximum  if 

∆

D

GOP(
C

)r

  approximates  a  polynomial 

function of maximum order two. By applying curve fitting techniques to the experimentally-derived points of 

∆

D

GOP(
C

)r

 incurred by all the GOPs of the tested video material, this assumption was verified empirically. 

IV.A  Accuracy of the Distortion Estimation 

IV  PERFORMANCE EVALUATION 

In  order  to  evaluate  the  accuracy  of  the  proposed  distortion-estimation  algorithm,  a  number  of  typical  test 

sequences  were  encoded  with  the  utilized  MCTF-based  video  coder  [30].  The  codec  uses  advanced 

multihypothesis  prediction and a  normalization process  for  the  update  step [30],  thereby  producing  different 

pixel weighting factors for the temporal filtering of each GOP. In our experiments, we used the 5/3 temporal 

filter  with  a  maximum  of  two  hypotheses  and  variable-block  size  prediction  with  block  sizes  ranging  from 

64

64×   down  to  4

4×   pixels.  The  temporal  decomposition  was  applied  for  a  total  of  four  levels,  and  the 

search  range  for  the  motion  estimation  was  set  to 

16±   pixels  for  all  temporal  levels,  with  the  full-search 

(exhaustive) algorithm. This configuration encapsulates one of the most generic instantiations of MCTF-based 

coding. Concerning the spatial transform and entropy coding, the 9/7 filter-pair was used for each  L  and  H  

frames;  embedded  quantization  and  entropy  coding  of  the  wavelet  representation  of  each  frame  was 

subsequently applied as described in our previous work [30]. During the encoding, rate-distortion estimates are 

collected  for  each  frame  at  the  end  of  each  fractional-bitplane  pass  [27].  The  utilized  codec  allows  for 

bitstream extraction at a number of bitrates; for each case, the packetization process separates the bitstream of 

 

22

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

each  frame  into  video  packets  and  associates  them  with  their  corresponding  rate  increment  and  distortion 

decrement based on the accumulated rate-distortion information, as explained in Subsection III.B.  

Figure 7 demonstrates four typical examples of the match between the model-based distortion estimation and 

the actual PSNR results generated by decoding each sequence. As mentioned before, the model estimation is 

based  on  the  weighting  of  the  distortion  estimates  for  the  distortion-reduction  incurred  by  processing  each 

packet.  In  practice,  we  found  that  the  model-estimated  distortion  tends  to  overestimate  the  actual  decoding 

PSNR.  For  this  reason,  the  model-estimated  results  of  Figure  7  were  (uniformly)  linearly  scaled  to  the 

maximum PSNR measurement of each sequence. It is important to notice that the scaling performed for each 

sequence  does  not  affect  the  proposed  packet  scheduling  algorithms  of  the  previous  section,  as  this 

corresponds to a linear scaling of the distortion-reduction estimates used in (16) and (20), and hence does not 

affect the relative distortion-comparison operations performed during the iterations of (21). 

As shown in the figure, after this scaling, the model-based distortion estimation predicts the transient behavior 

of the decoded-frames distortion relatively well. This is quantified by the first and second sample moments of 

the absolute error between the experimental and theoretical results, presented in Table IV. 

Coastguard, CIF

Foreman, CIF

Experimental
Model

Experimental
Model

)

B
d
(
 

 

Y
R
N
S
P

)

B
d
(
 

 

Y
R
N
S
P

32

0

35.5

35

34.5

34

33.5

33

32.5

32.5

32

31.5

31

30.5

30

29.5

0

)

B
d
(
 

 

Y
R
N
S
P

40.5

40

39.5

39

38.5

38

37.5

0

42.5

42

41.5

40

39.5

39

0

)

B
d
(
 

 

Y
R
N
S
P

41

40.5

 

 

10

20

40

50

60

10

20

40

50

60

30

frame no.

Mobile, CIF

30

frame no.

Silent, CIF

Experimental
Model

Experimental
Model

 

 

10

20

40

50

60

10

20

40

50

60

30

frame no.

30

frame no.

Figure  7.  Examples  of  PSNR  estimation  with  the  proposed  model.  The  first  60  frames  of  four  typical  CIF 
sequences are demonstrated; all sequences were extracted at 1024 kbps and the “Experimental” PSNR was 
measured from each decoded sequence. All the “Model” estimated points for each sequence were uniformly 
scaled to the maximum PSNR measurement.  

 

23

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

Sequence 

Bitrate 
(kbps) 

Mean Absolute Error (MAE) 
Between Experimental and 
Model-generated PSNR (dB) 

MAE Variance 

Coastguard 

Foreman 

Mobile 

Silent 

Average 

256 
1024 
256 
1024 
256 
1024 
256 
1024 
256 
1024 

0.358 
0.363 
0.270 
0.259 
0.345 
0.571 
0.336 
0.347 
0.327 
0.385 

0.068 
0.078 
0.042 
0.044 
0.064 
0.091 
0.070 
0.070 
0.061 
0.071 

Table  IV.  Mean  absolute  error  between  the  uniformly-scaled  model-based  distortion  estimate  and  the  real 
distortion, as measured for two representative bitrates in four CIF test sequences.  

IV.B  Simulating Realistic Network Dynamics 

We built a java-based simulator to emulate intra-domain routing dynamics in the presence of link failures and 

to  implement  the  algorithm  used  to  compute  SD  time  (Table  II).  The  inputs  to  the  simulator  are  complete 

network topology specifications, BGP prefix distribution, and traffic load along different links in the network. 

We categorize the network nodes as large, medium and small, depending on the traffic amount they generate. 

We consider 20% of the nodes as large nodes, 30% as medium nodes and the rest as small nodes. The traffic 

matrix  for  all  the  networks  is  generated  using  this  model.  This  network  model  is  based  on  PoP  (Point  of 

Presence)  level  network  topologies  of  various  tier-1  ISPs.  We  distribute  BGP  prefixes  proportional  to  the 

traffic  between  nodes,  i.e.,  large  traffic  flow  from  a  source  node  to  destination  node  implies  that  the  source 

node reaches a large number of prefixes in the Internet through the destination node. Based on these inputs, the 

simulator  runs  Dijkstra’s  SPF  algorithm  to  find  the  shortest  path  from  every  node  to  all  other  nodes  in  the 

network. It then simulates single link failures and executes Dijkstra’s SPF algorithm again, to find new paths 

in the network. The SD time for various paths are calculated based on the algorithm of Table II. 

We use a scenario where the packet size is 1000 bytes and each path has a fixed (constant) bandwidth of 256 

Kbps.  Hence,  in  total  we  can  achieve  512  Kbps  (CBR)  by  using  both  paths.  The  duration  of  the  streaming 

session was set to 

W = ⋅

5
3 10

 msec. The network topology that was considered is depicted in Figure 8, which 

is a subgraph of an ISP topology. The numbers indicated on each link show the average number of failures of 

the link during the duration of the streaming session. The time between failures of links in the network was 

considered to follow a Weibull distribution.  

The  simulated  paths  are  shown  in  Table  V.  The  table  also  presents  the  average  expected  service  disruption 

time due to a link failure as calculated by the algorithm of Table II. Notice that paths 1 and 3 do not have any 

common links, while paths 2 and 3 share link A(cid:198)B. 

 

24

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

0.1261
0.1261

B
B

D
D

0.0833
0.0833

5.6061
5.6061

 
  

A
A

2.9461
2.9461

0.0412
0.0412

F
F

H
H

1.7637
1.7637

0.6593
0.6593

0.0159
0.0159

0.8151
0.8151

C
C

0.0105
0.0105

E
E

0.0943
0.0943

G
G

Figure 8. The considered network topology. 

Path # 

Links in Path 

idle

t

(msec) 

1 
2 
3 

A(cid:198)C(cid:198)E(cid:198)G(cid:198)H 

A(cid:198)B(cid:198)E(cid:198)F(cid:198)G(cid:198)H 

A(cid:198)B(cid:198)D(cid:198)F(cid:198)H 

3491.9 
3196.9 
3111.3 

Table  V.  The  three  different  paths  that  were  used 
in  our  simulations  and 
the  average  service 
disruption time due to a link failure on each path. 

IV.C  Performance of Streaming with Optimized Redundancy 

In our experiments, we used two standard MPEG test sequences provided for streaming simulation purposes in 

the recent MPEG Call for Evidence Test on scalable video coding [28], namely “Mad Cyclist” (CIF resolution) 

and “Big Ships” (SIF resolution). The test sequences have smaller duration than the length of the streaming 

session. As a result, they were repeated in order to cover the duration of W  msec. Moreover, each streaming 

simulation was performed a number of times, in order to incorporate different network behavior in terms of 

path failures. The two different schemes proposed in Subsections III.D.1 and III.D.2 were simulated and the 

results were compared in terms of mean PSNR values. In addition, for comparison purposes, we used a scheme 

that inserts fixed redundancy in the bit-streams of each path by reproducing a certain percentage of the most 

significant  (in  terms  of  distortion-reduction)  texture  and  motion-vector  packets.  The  redundancy  percentage 

was set to 15%, since we experimentally verified that this redundancy ensures that at least one packet exists on 

both paths for the  L -frame of each GOP. In this way, we avoid the effect of loosing the  L -frame information 

completely,  which  would  lead  to  very  bad  picture  quality.  In  all  cases,  in  the  case  of  lost  motion-vector 

information for error frame  k  of temporal level  t , the motion vector data of error frame  2

k  of temporal level 

t +  was used. If the motion-vector data of that frame was lost as well, the motion vectors are set to zero. 

1

Although more advanced concealment techniques may be envisaged, the utilized approach performed well for 

our comparison purposes. 

An  overview  of  our  obtained  results  can  be  seen  in  Table  VI.  The  adaptive  method  utilizing  failure 

notifications  from  the  proxy  server  (APS)  performs  best.  The  proposed  model-based  optimized  packet 

redundancy  (OPR),  which  uses  (17)  with  the  derived  SD  times  and  link-failure  probabilities  (Table  V  and 

Figure  8,  respectively),  underperforms  APS  by  approximately  0.6  dB  on  average  (in  terms  of  mean  PSNR). 

However,  it  also  outperforms  the  ad-hoc  method  that  uses  a  fixed-redundancy  percentage  (FRP)  by 

approximately  1.0  dB.  In  order  to  illustrate  the  impact  of  distortion-modeling  in  the  proposed  adaptive 

 

25

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

streaming  schemes,  “FRP  no  DM”  present  the  obtained  results  when  using  the  FRP  method  without  packet 

distortion  estimates.  In  this  case,  we  are  prioritizing  the  packets  in  a  heuristic  manner  according  to  their 

dependencies, the frame type they belong to, and the frame’s temporal decomposition level using an ad-hoc 

weighting scheme for the packet significance. The results demonstrate that, even if smart heuristics are used 

for  packet  prioritization,  the  proposed  distortion-modeling  framework  benefits  the  streaming  scheme  by 

approximately 0.7-0.8 dB on average under the same transmission scenario. 

We  note  that,  in  contrast  to  the  APS  scheme  which  uses  explicit  network  feedback,  both  OPR  and  FRP 

schemes do not require any network feedback and rely solely on network and decoding-distortion modeling. 

Moreover,  the  results  of  Table  VI  demonstrate  that,  concerning  the  average  PSNR  after  multiple  runs,  each 

method performs almost identically over the two different pairs of paths. This is explained by the fact that the 

percentage  of  time  when  a  simultaneous  failure  occurred  in  links  of  both  paths  tends  to  be  very  small  in 

comparison to the streaming-session interval. 

Indicative  average  PSNR  results  across  intervals  of  30  seconds  can  be  seen  in  Figure  9.  The  results 

demonstrate that the proposed OPR systematically outperforms the ad-hoc scheme that sets a fixed amount of 

redundancy.  Moreover,  for  the  vast  majority  of  cases,  distortion-modeling  benefits  the  proposed  framework 

versus heuristic techniques. 

Sequence 

Method 

PSNR (Y) 

PSNR (U) 

PSNR (V) 

Mean PSNR 

Pair of 

Paths used 

Mad Cyclist 

FRP, no DM 

1, 3 

2, 3 

1, 3 

2, 3 

APS 
OPR 
FRP 

APS 
OPR 
FRP 

APS 
OPR 
FRP 

APS 
OPR 
FRP 

FRP, no DM 

FRP, no DM 

29.50 
28.35 
27.13 
26.21 
29.49 
28.35 
27.12 
26.20 
35.66 
35.36 
34.13 
33.25 
35.62 
35.38 
34.16 
33.21 

37.01 
35.99 
35.12 
34.81 
37.02 
36.03 
35.12 
34.81 
42.08 
41.95 
41.33 
40.91 
42.04 
41.94 
41.35 
40.90 

39.67 
39.05 
38.44 
37.61 
39.68 
39.07 
38.44 
37.58 
43.43 
43.31 
42.87 
42.52 
43.39 
43.31 
42.87 
42.53 

32.45 
31.41 
30.35 
29.54 
32.44 
31.41 
30.34 
29.53 
38.03 
37.78 
36.79 
36.07 
37.98 
37.80 
36.81 
36.05 

Big Ships 

FRP, no DM 

Table VI. Average PSNR for luminance and chrominance channels and mean PSNR for two test sequences 
mean_PSNR= (4PSNR_Y+PSNR_U+PSNR_V) ; 
and two combinations of paths. The mean PSNR is defined as 
APS  represents  the  adaptive  packet  scheduling  techniques  based  on  routing-layer  notifications  (subsection 
III.D.1); OPR represents the optimized packet redundancy based on Subsection III.D.2; FRP represents the 
fixed redundancy percentage scheme, which is devised as a baseline for comparison purposes; “FRP, no DM” 
represents the FRP scheme without distortion modeling. 

1
6

 

 

26

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

Mad Cyclist

_
_
_
_
_
_
_

 
 
 
 
 
)

B
d
(
 

 

Y
R
N
S
P

30

29

28

27

26

25

24

Adaptive Packet Scheduling

Optimized Packet Redundancy

Fixed Redundancy Percent

Fixed Redundancy Percent, No Distortion Modeling

1

2

3

4

5

6

7

interval no. (x30 sec)

8

9

10

 

Figure 9. Average PSNR results in intervals of 900 frames (30 seconds). 

Sequence 

Mad Cyclist 

Big Ships 

Interval  
(30 sec) 

Failure-free 

Failures occurred 

Failure-free 

Failures occurred 

APS 

32.78 
32.06 
38.41 
37.54 

OPR 

31.99 
31.46 
38.09 
36.43 

FRP 

30.26 
30.03 
36.84 
36.65 

FRP, no DM 

29.99 
29.38 
35.64 
35.20 

Mean PSNR (dB) 

Mean PSNR (dB) 

Mean PSNR (dB) 

Mean PSNR (dB) 

Table VII. Average PSNR values during failure free periods, and during the period with the maximum-length 
path failure.  

A low packet redundancy benefits the proposed approaches since less sacrifice in coding efficiency is made for 

the time intervals that are failure free. As a result, on average, the OPR approach converges to the use of low 

redundancy. The average redundancy percentage used in the OPR approach was found to be 4% and 3.5% for 

“Mad  Cyclist”  and  “Big  Ships”,  respectively.    However,  the  quality  degradation  during  a  path  failure  can 

become more severe in this case in comparison to the APS scheme and the FRP scheme. This is demonstrated 

in Table VII, where within the duration of a path failure, the quality provided by the OPR method drops more 

severely than in the other methods in the “Big Ships” sequence. As a result, it can be said that the proposed 

model-based OPR approach presents a feedback-free mechanism that provides high quality for the failure-free 

periods, which is comparable to an adaptive method requiring network feedback; moreover, without specific 

knowledge of the occurrence of a failure, good visual quality can be provided within the failure duration. 

V CONCLUSIONS 

In this paper a new joint source-network framework for video transmission over the Internet is presented. In 

terms of network modifications, we propose to deploy routing proxies to detect link or node failures directly. 

Upon failure detection, the proxy sends explicit notification to the multimedia server to report the starting time 

and location of a failure event or the restoration of a path. We also propose and develop a novel technique to 

estimate service disruption time after a failure event by taking into account transient routing dynamics during 

the  convergence  period  of  IGP.  To  take  advantage  of  this  accurate  network  information  and  adapt  at  a 

 

27

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

minimum complexity cost for the server, we deploy a novel adaptive scheme, which can generate redundancy 

at the packet level by exploiting the open-loop motion-compensated temporal filtering structure of state-of-the 

art  video  coders  with  the  aid  of  distortion  modeling  for  the  receiver  video  quality.  The  adaptation  can  be 

performed based on real-time network information or based on a realistic model that can estimate the network 

behavior by tuning the redundancy factor for an improved video quality depending on the network condition. 

Our  results  indicate  gains  in  performance  as  opposed  to  the  fixed  redundancy  schemes  that  do  not  consider 

explicitly the network information or the expected distortion at the receiver. 

REFERENCES 

[1]  Z.  Miao  and  A.  Ortega,  “Optimal  scheduling  for  streaming  of  scalable  media,”  in  Proc.  Asilomar  Conf. 

Signals, Syst. and Comp., vol. 2, pp. 1357-1362, Nov. 2000. 

[2]  P. Frossard and O. Verscheure, “Joint source/fec rate selection for quality-optimal MPEG-2 video delivery,” 

IEEE Trans. on Image Proc., vol. 10, pp. 1815–1825, Dec. 2001. 

[3]  P.  A.  Chou  and  Z.  Miao,  “Rate-distortion  optimized  streaming  of  packetized  media,”  Microsoft  Research 

Technical Report MSR-TR-2001-35, Feb. 2001, also submitted to IEEE Trans. on Multimedia. 

[4]  C. Boutremans, G. Iannaccone, and C. Diot, “Impact of link failures on VoIP performance,” in Proc. ACM Int. 

Workshop Netw., Oper. Syst. Sup. for Digit. Audio and Video, NOSSDAV-02, May 2002. 

[5]  G.  Iannaccone,  C.-N.  Chuah,  R.  Mortier,  S.  Bhattacharyya,  and  C.  Diot,  “Analysis  of  link  failures  in  an  IP 

backbone,” in Proc. ACM SIGCOMM Internet Meas. Workshop, Nov. 2002. 

[6]  C.  Labovitz,  A.  Ahuja,  A.  Abose,  and  F.  Jahanian,  “An  experimental  study  of  BGP  convergence,”  in  Proc. 

ACM SIGCOMM Internet Meas. Workshop, 2000. 

[7]  S. Floyd, M. Handley, J. Padhye, and J. Widmer, “Equation-based congestion control for unicast applications,” 

in Proc. ACM Internet Meas. Workshop, 2000.  

[8]  A. Markopoulou, G. Iannaccone, S. Bhattacharrya, C. N. Chuah, and C. Diot, “Characterization of failures in 

an IP Backbone network,” in Proc. IEEE Infocom, 2004. 

[9]  T.  Nguyen,  P.  Mehra,  and  A.  Zakhor,  “Path  diversity  with  forward  error  correction  (pdf)  system  for  packet 

switched networks,” in Proc. IEEE Infocom, April 2003. 

[10] “Python Routing Toolkit.” http://www.cl.cam.ac.uk/ rmm1002/pyrt.html. 
[11] “GNU Zebra, free routing software.” http://www.zebra.org/. 
[12] D. Oran, “OSI IS-IS intra-domain routing protocol.” RFC 1142, February 1990. 
[13] J. Moy, “OSPF Version 2.” RFC 2328, April 1998. 
[14] M.R.  Civanlar,  “Internet  video,”  Chapter  in  “Advances  in  Multimedia:  Systems,  Standards,  and  Networks”, 

Marcel Dekker, Inc., 2000. 

[15] R. Rejaie, M. Handley, and D. Estrin, “Quality adaptation for congestion controlled video playback over the 

Internet,” in Proc. ACM SIGCOMM Internet Meas. Workshop, 1999. 

[16] J.  Chakareski,  and  B.  Girod,  “Computing  rate-distortion  optimized  policies  for  streaming  media  with  rich 

acknowledgements,” Proc. IEEE Data Compr. Conf., DCC-04, pp. 202-211, March 2004. 

[17] D.  Rubenstein,  J.  Kurose,  and  D.  Towsley,  “Detecting  shared  congestion  of  flows  via  end-to-end 

measurement,” IEEE/ACM Trans. on Networking, vol. 10, no. 3, June 2002.  

[18] J. Chakareski, J. Apostolopoulos, W. Tan, S. Wee, and B. Girod, “Distortion chains for predicting the video 
distortion for general packet loss patterns,” in Proc. IEEE Int. Conf. Acoust., Speech, Signal Process., vol. 5, 
1001-1004, May 2004.  

[19] K. Stulmuller, N. Farber, M. Link, and B. Girod, “Analysis of video transmission over lossy channels,” IEEE 

Journal on Select. Areas in Comm., vol. 18, no. 6, pp. 1012-1032, June 2000. 

 

28

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

[20] U. Hengartner, S. B. Moon, R. Mortier, and C. Diot, “Detection and analysis of routing loops in packet traces,” 

in Proc. ACM SIGCOMM Internet Measurement Workshop, Nov. 2002. 

[21] G.  Iannaccone,  C.-N.  Chuah,  S.  Bhattacharyya,  and  C.  Diot,  “Feasibility  of  IP  restoration  in  a  tier-1 

backbone,” IEEE Network, March 2004. 

[22] V. Goyal, “Multiple description coding: compression meets the network,” IEEE Signal Proc., no. 9, pp. 74-93, 

Sept. 2001. 

[23] J.  G.  Apostolopoulos,  “Reliable  video  communication  over  lossy  packet  networks  using  multiple  state 

encoding and path diversity,” Visual Commun. and Image Proc., VCIP’01, Jan. 2001. 

[24] Y.  Wang  and  S.  Lin,  "Error  resilient  video  coding  using  multiple  description  motion  compensation,"  IEEE 

Transactions on Circuits and Systems for Video Technology, vol. 12, no. 6, pp. 438-452, June 2002. 

[25] R.  Puri,  K.-W.  Lee,  K.  Ramchandran  and  V.  Bharghavan,  “Forward  error  correction  (FEC)  codes  based 
multiple description coding for Internet video streaming and multicast,” Signal Process.: Image Commun., vol. 
16, no. 8, pp 745-762, May 2001. 

[26] A.  Secker  and  D.  Taubman,  “Motion-compensated  highly  scalable  video  compression  using  an  adaptive  3D 
wavelet transform based on lifting,” in Proc. IEEE Int. Conf. Image Proc., ICIP 2001, vol. 2, pp. 1029-1032, 
Oct. 2001. 

[27] JPEG2000: Image Compression Fundamentals, Standards and Practice, D. Taubman, M. Marcellin, Kluwer 

[28] ISO/IEC  JTC1/SC29/WG11,  w5559,  “Call  for  Evidence  on  Scalable  Video  Coding  Advances”,  (MPEG), 

Acad. Pubs, 2002. 

Pattaya, Thailand, March 2003. 

[29] M.  van  der  Schaar  and  D.  Turaga,  “Multiple  description  scalable  coding  using  wavelet-based  motion 
compensated  temporal  filtering,”  Proc.  IEEE  Intern.  Conf.  Image  Proc.  ICIP-03,  vol.  2,  pp.  489-892,  Sept. 
2003. 

[30] Y.  Andreopoulos,  A.  Munteanu,  J.  Barbarien,  M.  van  der  Schaar,  J.  Cornelis  and  P.  Schelkens,  "In-band 
motion compensated temporal filtering," Signal Process.: Image Commun. (special issue on "Subband/Wavelet 
Interframe Video Coding"), vol. 19, no. 7, pp. 653-673, Aug. 2004. 

[31] C. Tillier, B. Pesquet-Popescu, and M. van der Schaar, “Highly scalable video coding by bidirectional predict-
update 3-band schemes,” in Proc. IEEE Int. Conf. Accoust., Speech, and Signal Process., vol. 3, pp. 125-128, 
May 2004. 

[32] P.  A.  Chou,  H.  J.  Wang,  and  V.  N.  Padmanabhan,  "Layered  multiple  description  coding,"  in  Proc.  Packet 

Video Workshop, Nantes, France, April 2003. 

[33] P. Chen and J. W. Woods, “Bidirectional MC-EZBC with lifting implementation,” IEEE Trans. Circuits Syst. 

Video Technol., vol. 14, no. 10, Oct. 2004.  

[34] L. Luo, F. Wu, S. Li, Z. Xiong, and Z. Zhuang, “Advanced motion threading for 3D wavelet video coding,” 
Signal Process: Image Commun., (special issue on "Subband/Wavelet Interframe Video Coding"), vol. 19, no. 
7, pp. 601-616, Aug. 2004. 

[35] T. Rusert, K. Hanke, J.-R. Ohm, “Transition ﬁltering and optimized quantization in interframe wavelet video 

coding,” in Proc. SPIE Vis. Commun. and Image Process., VCIP ’03, pp. 682-693, 2003. 

[36] T.  Wiegand,  G.  Sullivan,  G.  Bjontegaard,  and  A.  Luthra,  “Overview  of  the  H.264/AVC  video  coding 

standard,” IEEE Trans. on Circ. Syst. for Video Technol., vol. 13, no. 7, July 2003. 

[37] H. Schwarz, T. Hinz, H. Kirchhoffer, D. Marpe, and T. Wiegand, “Technical description of the HHI proposal 

for SVC CE1,” ISO/IEC JTC1/SC29/WG11 (MPEG), m11244, Oct. 2004.  

[38] A. C. Begen, Y. Altunbasak, O. Ergun, and M. H. Ammar, “Multi-path selection for multiple description video 

streaming over overlay networks,” Signal Process.: Image Commun., vol. 20, no. 1, pp. 39-60, Jan. 2005. 

[39] W.  Jiang  and  A.  Ortega,  “Multiple  description  coding  via  polyphase  transform  and  selective  quantization,” 

Proc. Visual Commun. Image Proc. (VCIP-99), San Jose, CA, Jan. 1999. 

[40] R. Keralapura, C.-N. Chuah, G. Iannaccone, and S. Bhattacharyya, “Service Availability: A New Approach To 
Characterize IP Backbone Topologies”, Proc. IEEE Intern. Workshop on Quality of Service, IWQoS’04, June 
2004. 

[41] A.  Munteanu, Y.  Andreopoulos,  M.  van  der  Schaar,  P.  Schelkens  and  J.  Cornelis,  "Control  of  the  distortion 
variation in video coding systems based on motion compensated temporal filtering," Proc. IEEE Internat Conf. 
on Image Process., ICIP'03, vol. 2, pp. 61-64. 

 

29

MM000952.R1, IEEE TRANS. ON MULTIMEDIA 

[42] D. Anderson, H. Balakrishna, M. Kaashoek, and R. Morris, “Resilient Overlay Networks,” Proc. ACM Symp. 

Operating Syst. Principl. (SOSP), Oct. 2001. 

[43] Stefan  Savage,  Tom  Anderson,  Amit  Aggarwal,  David  Becker,  Neal  Cardwell,  Andy  Collins,  Eric  Homan, 
John  Snell,  Amin  Vahdat,  Geo  Voelker,  and  John  Zahorjan.  “Detour:  A  Case  for  Informed  Internet  Routing 
and Transport,” IEEE Micro, January 1999 

[44] M. Castro, P. Druschel, A. Kermarrec, A. Nandi, A. Rowstron, and A. Singh, “SplitStream: High-Bandwidth 

Multicast in Cooperative Environments,” Proc. ACM Symp. Operating Syst. Principl. (SOSP), Oct. 2003 

[45] John Jannotti, David K. Giford, Kirk L. Johnson, M. Frans Kaashoek, and Jr. James W. O'Toole: “Overcast: 
Reliable  Multicasting  with  an  Overlay  Network”  Proc.  ACM  Symp.  Operating  Syst.  Design  and 
Implementation (OSDI), October 2000 

[46] J. Dilley, B. Maggs, J. Parikh, H. Prokop, R. Sitaraman, and B. Weihl, “Globally distributed content delivery,” 

IEEE Internet Computing, vol. 6, no. 5, pp. 50-58, Sept. 2002.  

 

30

