Can coexisting overlays inadvertently step on each other?

Ram Keralapura*, Chen-Nee Chuah*

Nina Taft, Gianluca Iannaccone

University of California, Davis

Intel Research Labs

Abstract

By allowing end hosts to make routing decisions at the
application level, different overlay networks may uninten-
tionally interfere with each other. This paper describes
how multiple similar or dissimilar overlay networks mak-
ing independent routing decisions could experience race
conditions, resulting in oscillations in both route selection
and network load. We pinpoint the causes for synchroniza-
tion in terms of partially overlapping routes and periodic
path probing processes and derive an analytic formulation
for the synchronization probability of two overlays. Our
model indicates that the probability of synchronization is
non-negligible across a wide range of parameter settings,
thus implying that the ill-effects of synchronization should
not be ignored. Using the analytical model, we ﬁnd an up-
per bound on the duration of trafﬁc oscillations. We validate
our model through simulations that are designed to capture
the transient routing behavior of both the IP- and overlay-
layers. We use our model to study the effects of factors such
as path diversity (measured in round trip times) and probing
aggressiveness on these race conditions. Finally, we discuss
the implications of our study on the design of overlay net-
works and the choice of their path probing parameters.

1

Introduction

Application-layer overlay networks are becoming very
popular due to the fact that they can often offer better ser-
vices catered to different applications than the traditional IP
networks. This concept has been exploited in building con-
tent delivery networks like Akamai [1], resilient networks
like RON [2], multicast services like SplitStream [3], and
distributed hash table services like Bamboo [14], among
others. All of these networks have multiple nodes that col-
laborate with each other at the application layer to provide
features that are not readily supported by IP layer routing
services. For example, RON [2] and Detour [15] demon-
strate that end-to-end route selection can often ﬁnd better

* The authors were supported by NSF CAREER Grant No.0238348

alternative paths by relaying trafﬁc among overlay nodes.

Numerous of these overlays are being deployed over the
Internet and the volume of trafﬁc that they carry is increas-
ing [16]. Since most overlay networks are designed inde-
pendently with different target applications in mind, our
suspicion is that as overlay trafﬁc load increases, different
overlays may unintentionally interfere with each other. It
is therefore very important to examine the impacts of the
co-existence of multiple overlay networks when their trafﬁc
represents a signiﬁcant, if not dominant, portion of the total
trafﬁc.

Based on our previous work in [8], we arrive at a hy-
pothesis that two (or more) overlays can experience race
conditions and become synchronized leading to route and
trafﬁc oscillations. This hypothesis is formulated based on
two key observations. First, in the work by Floyd et al [4],
the authors discuss how there are many examples of seem-
ingly independent periodic processes in the Internet that
can inadvertently become synchronized. They warned that
the phenomenon of inadvertent synchronization of period
processes would most likely become an increasing problem
in computer networks. Typically overlay networks use a pe-
riodic probing process to detect events that deteriorate path
performance, and to identify alternate paths between pairs
of source and destination overlay nodes.
IP layer events
such as failures can trigger an overlay network to detect a
performance problem and move its trafﬁc to an alternate
path. The work in [4] would suggest that a situation in
which two different overlays, both using periodic probing,
that can react to the same IP layer triggering event, is a can-
didate scenario for the synchronization problem. A second
motivation for suspecting that synchronization might arise
comes from control theory. Different overlays are simulta-
neously and independently conducting routing control at the
application layer. This corresponds to a situation in which
multiple independent control loops coexist, yet react to the
same events (e.g, failures). This is a classic situation for
race conditions.

This paper seeks to explore this hypothesis and to gain a
better understanding on the likelihood of oscillations, how
long they can last, and the conditions under which they oc-
cur. The contributions of this work are:

1

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

• We pinpoint the reasons for oscillations in terms of par-
tially overlapping paths and periodic probing process (Sec-
tion 3).
• We develop an analytical method to compute the proba-
bility of synchronization between two overlay networks as
a function of the path probing parameters. We also pro-
vide an upper bound on the number of oscillations that the
two overlays will experience after they are synchronized, in
the absence of external events acting as stop triggers (Sec-
tion 4).
• We validate our hypothesis and analytical model using
simulations that are carefully designed to capture the IP-
layer transient routing dynamics and the generic properties
of overlay routing strategies. We do indeed see a variety
of scenarios in which oscillations happen when the overlay
trafﬁc is a signiﬁcant portion of the total trafﬁc. The scenar-
ios differ in the length of oscillations, the number of over-
lays involved, and in the manner by which oscillations are
eventually stopped. The simulation results closely match
the predictions from our analytical model both in terms of
probability of synchronization and the number of oscilla-
tions (Section 5).
• We show that the synchronization probability is not negli-
gible for a wide range of parameters, suggesting that partic-
ular care must be given by network designers to the conﬁg-
uration of overlay routing protocols. We illustrate that os-
cillations can occur even for two overlays that deploy con-
siderably dissimilar path probing parameters. We study the
impact of path diversity and probing aggressiveness on the
probability of synchronization (Section 6).

We summarize the implications of this study on the de-
sign of overlay routing strategies in Section 7 and discuss
some future directions in Section 8.

2 Related Work

Interactions between multiple co-existing overlay net-
works were ﬁrst addressed by Qiu et al. [13], where the au-
thors investigate the performance of selﬁsh routing after the
system reaches the Nash equilibrium point (when network-
level routing is static). They also show that selﬁsh routing
can achieve optimal average latency at the cost of overload-
ing certain links. Liu et al. [10] model the interaction be-
tween overlay routing and IP trafﬁc engineering as a two-
player game, where the overlay attempts to minimize its
delay and IP trafﬁc engineering tries to minimize network
cost. In our current work, we focus instead on dynamics of
the overlay routing layer before the system reaches the equi-
librium.
Instead of static network-layer routing, we con-
sider events such as link/router failures, ﬂash crowds and
network congestions that lead to dynamic re-computation
of routes in overlay applications and/or IGP protocols.

Other works have studied the overlay network probing

process, a crucial component of overlay routing. Nakao
et al. [12] proposed a shared routing underlay that exposes
large-scale, coarse-grained static information (e.g., topol-
ogy and path characteristics) to overlay services through
a set of queries. They advocate that the underlay must
take cost (in terms of network probes) into account and
be layered so that specialized routing services can be built
from a set of basic primitives. However, sharing network-
layer path information may induce synchronized routing
decisions in overlay networks and unintentionally lead to
route/trafﬁc oscillations, an aspect not addressed in [12].
We hope to shed some light on this problem through our
modeling of overlay and IP-layer dynamics in response to
failures.

While our work was in part inspired by the work in [4],
the particular periodic process we focus on is different from
the one considered in [4]. They focused on routing proto-
cols such as EGP, IGRP and RIP that send a periodic up-
date message to ensure routing tables are kept up to date.
The process we explore uses two types of periodic probes,
and only reacts to external triggers. Also, they study the
scenario of many routers participating in the same proto-
col, whereas as we consider two different instances of the
protocol, with non-identical parameters that only partially
overlap in the underlying physical network.

3 Why do race conditions occur?

Before we present the arguments for why and when race-
conditions (and hence trafﬁc oscillations) between multiple
co-existing overlays occur, we describe how we model the
overlay networks in both our analysis and simulation.

3.1 Modeling Overlay Networks

While different overlay networks, designed for a wide
range of applications, may differ in their implementation
details (like choice of topologies or performance goals),
most of them provide a common set of functionalities, in-
cluding periodic path/performance monitoring, failure de-
tection and restoration. In this paper, we attempt to model
the most generic properties of an overlay network, as sum-
marized below:

• Most overlay routing strategies select a path between
a source-destination pair with the best performance based
on end-to-end delay, throughput, and/or packet loss. Our
model assumes the overlay path with the shortest end-to-
end delays will be selected, but can be extended to include
other metrics.

• Most overlay networks monitor the actively used paths
by sending frequent probes to check if the paths adhere to
acceptable performance bounds.
If the probing event de-
tects a problematic path (due to failures, congestion, etc. at
the IP-layer), then the overlay network sends probes at a

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

higher rate to conﬁrm the problem before selecting an alter-
nate path. Our model assumes regular probes are sent out
every P seconds.
If a probe does not receive a response
within a given timeout (or T ) value, then the path is probed
at a higher rate (every Q seconds). If a path remains bad
after N such high frequency probes, the overlay will ﬁnd an
alternate path (or the next best path) between the source and
destination nodes. For instance, RON [2] can be modeled
with P =12s, Q=3s, and N =3 while Akamai network can be
modeled with much smaller values of P , Q, and N [9]. As
soon as an alternate path is found, the trafﬁc is moved to
the alternate path, which is now probed every P seconds to
ensure that it is healthy1.

Overlay-I

Overlay-II

Original Path
First Alternate Path
Second Alternate Path

Overlay-I

Overlay-II

Src=A; Dst=F

Src=A; Dst=L

Primary Path

1st Alt Path

A-C-F

A-B-F

A-C-G-L

A-B-E-K-L

2nd Alt Path

A-D-G-F

A-D-H-L

E

F

B

D

K

H

A

C

G

L

Figure 1. Two overlay networks that partially share
primary and alternate paths

3.2 Conditions for Trafﬁc Oscillations

Oscillations are initiated when coexisting overlays sat-

isfy the following conditions:

Path Performance Degradation. An event must trigger
a perturbation of the network state that leads overlay net-
works to revisit their routing decisions and look for alternate
paths. This event can be an increase in the trafﬁc demand
of the IP network or one of the overlay networks, or a link
failure event that results in a reduction of capacity. Since
different overlays are controlled by autonomous timers and
routing algorithms, a path performance degradation event
could provoke independent reactions from different over-
lays.

Topology (i.e., Primary and Backup Paths). The node lo-
cations determine how the paths of coexisting overlay net-
works overlap. Oscillations may occur when the primary
and alternate paths share at least one common link. Figure
1 illustrates this case with overlays on top on an IP net-
work. The node pair A − F in Overlay-I, and pair A − L

1As long as the current path adheres to the performance bounds, an
overlay does not shift trafﬁc to an alternate path even if the alternate path
starts to exhibit better performance.

in Overlay-II share the link A − C on their primary paths.
Assume, for simplicity of discussion, that the “top” path is
their ﬁrst alternate choice. If link A − C fails, then the ﬁrst
alternate path for A − F and that for A − L would share
link A − B. If this link becomes a bottleneck, forcing the
overlay networks to move their trafﬁc again, then the over-
lay source-destination pairs A − F and A − L would now
move to the “bottom” path. However, they would still share
link A − D that could itself become a bottleneck. Hence
the topology criteria for synchronization to occur is: there
is a pair of overlay nodes in each of two different overlay
networks, such that the two primary paths share at least one
common bottleneck link. This condition is intuitive. Two
overlays will not get synchronized if they do not share por-
tions of physical paths. For oscillations to sustain, the two
overlays must share bottleneck link/s in both their ﬁrst and
second alternate path choices.

Probing Parameters. As mentioned in Section 3.1, over-
lays periodically probe their paths. Consider the two over-
lays in Figure 1 and a failure on link A-C that is common
to their primary paths (A − F in Overlay-I and A − L in
Overlay-II). Suppose the timing of the probing processes
for two overlays is such that the last high frequency probes,
for each of the two overlays, expire within a short time win-
dow of the other. Then both overlays will shift their trafﬁc
to their ﬁrst choice alternate path roughly at the same time.
When this occurs we say that two overlays get synchronized.
This happens when the window of time is so short that the
overlay that moves second does not have time to re-probe
its path to realize that some trafﬁc load from the other over-
lay has already moved. Now, if the trafﬁc load on the ﬁrst
choice alternate path becomes high, then the overlays could
react again moving their trafﬁc to the second choice alter-
nate path. Such reactions can continue and overlays move
their trafﬁc in a lock-step fashion between the two alter-
nate paths until the distance between the probes grows large
enough to end the synchronization. When this happens we
say that the two overlays disentangle themselves.

Since overlay networks have no control over perfor-
mance degradation events inside an ISP (ﬁrst condition),
and since they may not have much control over the place-
ment of overlay nodes that eventually determines the over-
lap of paths (second condition), we focus our calculation of
the probability of synchronization in terms of just the prob-
ing process parameters.

4 Analyzing Oscillations

In this section, we focus on how the path probing para-
meters affect synchronization. First we develop an analytic
formulation of the probability of synchronization for two
overlays as a function of the parameters in the path probing
procedure. Second we derive an upper bound on how long

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

two overlays can remain synchronized, for a given set of
parameters.

4.1 Probability of Synchronization

For our analysis, we assume the ﬁrst two conditions for
synchronization hold, i.e., the two overlays share at least
one link on their primary paths and one event on the shared
links occurs (e.g., failure or congestion) that causes probe
packets to be lost or excessively delayed.

As described in Section 3.1, overlay networks probe their
paths at regular intervals of P seconds. If the path is healthy,
the probe should return in one round trip time, with a mea-
sure of the path delay (or an assessment of another chosen
metric). If the probe does not return before the timeout T
expires, then the overlay starts sending its high-frequency
probes (N will be sent) every Q seconds. Thus, the probing
procedure for each overlay i on path j is speciﬁed by ﬁve
parameters: the probe interval Pi, the high frequency probe
interval Qi, the timeout Ti, the number of high frequency
probes Ni, and the round trip time Rij over path j. Note
that Ti is the same for low- and high-frequency probes. By
deﬁnition Pi ≥ Qi ≥ Ti ≥ Rij.

The probing procedure implies that (under normal cir-
cumstances) on a given path there will be exactly one probe
in every time period of length P . Now suppose that an event
(e.g., a link failure) occurs at time tl. We assume that a
probe sent on path j in overlay i at time t0 “senses” the
state of the path at t0 + Rij/2, i.e., the probe is dropped if
the path is not operational at that time2. Hence, the over-
lay network will detect the failure event with the probe sent
at t0 if t0 ∈ [tl − Rij/2, tl − Rij/2 + Pi]. We call this
period the detection period. The overlay will then react at
time t0 + Ti sending the high frequency probes as discussed
above.

Consider two overlay networks, O1 and O2. Let t1 and t2
be the actual times at which the initial probes are sent during
the detection period. We assume that t1 and t2 are equally
likely to occur anywhere in their detection period and hence
are uniformly distributed in their detection period. Once an
overlay network detects the failure, it begins sending the
high frequency probes every Qi time units. The ﬁnal high
frequency probe will be sent out at fi = ti + NiQi for
i = 1, 2.

An overlay network actually moves its trafﬁc to an alter-
nate path immediately after the ﬁnal high frequency probe
has timed out (fi + Ti for Oi). Two overlay networks will
synchronize if they both move their trafﬁc to the same bot-
tleneck link (shared by their chosen alternate paths) in a
“short” window of time. By “short” we mean here that the
window is small enough that when one overlay moves, the

2To simplify our analysis during failures we ignore the exact values of
propagation delays between the source, the failed spot, and destination.
Thus we approximate the instant at which a probe is dropped by Rij /2.

second overlay does not see or detect that move through its
probing process and thus moves itself onto the same link(s).
There are two cases for synchronization - in one case O1
moves its trafﬁc ﬁrst and O2 moves shortly thereafter, or
vice versa. Consider the case of O1 moving ﬁrst. Suppose
that O2 sends out the ﬁnal high frequency probe after O1
sends its ﬁnal high frequency probe, but before O1 moves
its trafﬁc. We assume that O2 decides at time f2 what its
alternate path will be if this last probe does not return, and
hence it doesn’t have time to detect the trafﬁc move by O1
before it moves its own trafﬁc. Hence if we have the timing
f1 < f2 and f2 − f1 < T1, then both overlays move their
trafﬁc without being aware of the other’s reaction. This
is the condition for synchronization when O1 moves ﬁrst.
Similarly, if O2 moves ﬁrst, the networks will synchronize
if f2 < f1 and f1 − f2 < T2. Hence the condition for
synchronization of two overlays is:

−T1 < f1 − f2 < T2

−T1 < (t1 + N1Q1) − (t2 + N2Q2) < T2

b < t1 − t2 < a

(1)

where a = N2Q2 − N1Q1 + T2; b = N2Q2 − N1Q1 − T1
We assume that t1 and t2 can occur anywhere in their
detection period with a uniform probability. It is important
to notice that the actual value of tl is irrelevant and hence
for the ease of understanding we consider tl = 0. Thus the
range of t1 is [−R1/2, P1 − R1/2] and the range of t2 is
[−R2/2, P2 − R2/2], where R1 is the RTT for the primary
path in overlay O1 and R2 is the RTT for the overlapping
primary path in the other overlay3, O2.

For a speciﬁc set of parameters (Pi, Qi, Ti, Ni, Ri) for
i = 1, 2, we can represent the system as a two dimen-
sional graph with the x-axis representing probe t1 and the
y-axis representing probe t2. All the allowable values for
the tuple (t1, t2) lie inside the rectangle with the vertices:
(−R1/2, −R2/2), (P1 − R1/2, −R2/2), (P1 − R1/2, P2 −
R2/2) and (−R1/2, P2 − R2/2) (see Figure 3). This geo-
metric representation allows us to compute the probability
of synchronization, P (S), of two overlay networks in an in-
tuitively simple way. We deﬁne the region of conﬂict to be
the portion of this rectangle in which synchronization will
occur, i.e., the region that satisﬁes the two constraints spec-
iﬁed in Equation 1. The boundaries of the region of conﬂict
are thus determined by the boundaries of the rectangle and
their intersection with the two parallel lines of slope 1:

Line 1: t1 − t2 = a
Line 2: t1 − t2 = b

(2)

(3)

Since t1 and t2 can occur anywhere in their detection pe-
riod with uniform probability, synchronization will occur if

3Since we focus only on the primary path in both the overlays, we drop

the second subscript in Rij .

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

the point (t1, t2) lies inside the region of conﬂict. Now the
probability of synchronization, P (S), can be deﬁned to be
the ratio of the area of the region of conﬂict to the total area
of the rectangle. This 2-dimensional representation captures
the inﬂuence of all the parameters (Pi, Qi, Ni, Ti, Ri) since
these quantities ultimately deﬁne all the corners and line in-
tersection points needed to compute the relevant areas.

as

t2

t1 – t2 = b

R egion of 
conflict

Scenario 1

t2

R egion of 
conflict

t1 – t2 = b

t1 – t2 = a

Scenario 4

t2

t1 – t2 = b

R egion of 
conflict

Scenario 7

t1

t1

t1

t1 – t2 = b

t2

t1 – t2 = b

o f
n
gio
n flict
e
c o

R

t1 – t2 = a

t1 – t2 = a

t1 – t2 = a

Scenario 2

Scenario 3

t1 – t2 = b

o f
n
gio
n flict
e
c o

R

t1 – t2 = a

t2

t1 – t2 = b

n flict

o f c o

n

gio

e

R

t1 – t2 = a

t1

t1

R egion of 
conflict

t2

t2

Scenario 5

t2

t1 – t2 = b

R egion of conflict

Scenario 8

t1

t1

t1

Scenario 6

t2

t1 – t2 = b

R egion of 
conflict

t1

Scenario 9

t1 – t2 = a

t1 – t2 = a

t1 – t2 = a

Figure 2. All possible scenarios to calculate the
region of conﬂict

t2 (Probe 2)

A2 = 0.5 (P2 – V2 + b + V1)2

Scenario 1

V1 = R1/2
V2 = R2/2

(-V1, P2-V2)

(P2-V2+b, P2-V2)

(P1-V1, P2-V2)

t1 – t2 = b

(-V1, -b-V1)

(b, 0)

(0, 0)

(-V1, 0)

(-V1, -V2)

(0, -V2)

(a-V2, -V2)

Region of conflict

(P1-V1, P1-V1-a)

(a, 0)

t1 – t2 = a

A1 = 0.5 (P1 – V1 – a + V2)2

t1 (Probe 1)

(P1-V1, -V2)

Total Area, A = P1 P2

Area of Region of Conflict, AC = A – A1 – A2

Probability of Synchronization, P(S) = AC / A

Figure 3. Scenario 1 (V1 = R1/2 and V2 = R2/2)

There are a number of ways in which Line-1 and Line-2
intersect the boundaries of the rectangle. All possible sce-
narios that determine this area are shown in Figure 2. Con-
sider Figure 3 that represents Scenario 1 in detail. Line-1
intersects the bottom and right edges, while Line-2 inter-
sects the left and top edges. As evident in Figure 3, we can
clearly see that the area A of the rectangle is composed of
three distinct regions: A1 (area of the region below Line-1
and the rectangle boundaries), A2 (area of the region above
Line-2 and the rectangle boundaries) and the region of con-
ﬂict. Hence the region of conﬂict, AC, can be expressed
as,

(4)

(5)

(6)
(7)

(8)

AC = A − A1 − A2

Thus we can express the probability of synchronization

P (S) = P robability(b < t1 − t2 < a) =

AC
A

In Scenario 1, A1 and A2 are triangular regions with two
equal edges (due to the fact that both Line-1 and Line-2 have
a slope of 1). From Figure 3, we see that AC can be com-
puted using

A = P1P2
A1 = 0.5(P1 − R1/2 − a + R2/2)2
A2 = 0.5(P2 − R2/2 + b + R1/2)2

Even though the above equations for A1 and A2 are valid
for Scenario 1, they do not hold for scenarios where Line-1
intersects boundaries other than the right and bottom edges
of the rectangle, and/or Line-2 intersects boundaries other
than the left and top edges of the rectangle. For example,
if we consider Scenario 2 in Figure 2, Line-1 intersects the
top and bottom edges of the rectangle. If we use Equation 7
to calculate A1, then A1 is larger that it should actually be
since it includes space outside the rectangle. We thus need
to add another term, E, to AC in Equation 4 to compensate
for the excess included in A1.
In the case of Scenario 2
(when Line − 1 intersects the top edge of the rectangle),
the excess term to be removed is E = 0.5(P1 − R1/2 − a −
P2+R2/2)2. We do not include the excess terms for each of
the nine scenarios since it is a straight forward computation.
Although this model results in 9 different scenarios, each of
them with a different equation for P (S), it is still attractive
since it is conceptually very simple.

4.2 How long do oscillations last?

Suppose that two overlays react to an event within a short
window of time, and land up on alternate paths that share at
least one common link. As depicted in Figure 1, such a re-
action by both overlays could overload the common link,
prompting them to ﬁnd another alternate path. These re-
actions lead to oscillations that last until the overlay net-
works disentangle themselves or are inﬂuenced by an exter-
nal event (e.g., a shift in the trafﬁc loads). If no external
events stop the oscillations, then it is important to ask how
long these oscillations will last. In this section, we derive
an upper bound on the number of oscillations.

To break synchronization what matters is the temporal
spacing between the two probing processes that govern their
reaction times (moving trafﬁc). Let s0 = t1 − t2 denote
the difference in time between the initial detection of the
path problem. Since we are concerned with the difference
between the reaction times, we can map the (cid:3)2 region of

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

conﬂict space onto (cid:3)1 space on a real line for all possible
scenarios. In other words, we can represent all the points in
the region of conﬂict by the value of t1 − t2 at that point.
Here all the points in the region of conﬂict are mapped to
the region between the points b and a on the real line.

Every time an overlay network shifts trafﬁc to an alter-
nate path it starts probing the new overlay path every P
seconds.
If both the overlays shift their trafﬁc almost si-
multaneously resulting in performance degradation on the
ﬁrst choice alternate path, then this will trigger another re-
sponse from both overlays. They will shift their trafﬁc to
their second choice alternate path. If these second choice
paths become overloaded, each overlay may move back to
its ﬁrst choice path, thus entering into oscillations. The time
for an overlay to detect a problem on a new path and then
move its trafﬁc is given by Pi + NiQi + Ti. Thus each time
the synchronized overlays move together from one set of
alternate paths to another, the spacing between the probes
change by c = P1 + N1Q1 + T1 − P2 − N2Q2 − T2. After
k (k = 1, 2, . . . ) such reactions, the spacing between the
probes can be expressed as:

sk = s0 + k.c

(9)

Note that we have implicitly assumed here that the pa-
rameter values for the primary and alternate paths remain
the same for both the overlays; hence the value of c is the
same regardless of whether we are on the ﬁrst or second set
of alternate paths. We make this assumption for two rea-
sons. First, it allows our model to remain tractable; without
this the size of the box (feasible region for probe values) in
our model for P (S) would change with each trafﬁc shift.
Second, this is not unreasonable for scenarios in which two
overlay networks select locations for their nodes that are
similar either because they are strategic or resident where
the trafﬁc demands are high. Also, if the values of c are dif-
ferent for each of the alternate paths then the rate at which
the spacing moves towards the boundary condition could
either increase or decrease, thus introducing the possibility
that the number of oscillations could be better or worse than
the case that we consider here.

From Eqn 1 the stop condition for the oscillations is
given by |sk| > a − b (note that a > b). The worst case
in the number of oscillations happens when s0 is equal to a
(or b) and moves towards b (or a) by c seconds at each step.
It is then straightforward to derive ¯k, the upper bound on
the number of oscillations, ¯k =

. Hence,

(cid:2)

(cid:1)

a−b
|c|

(cid:3)

¯k =

T1 + T2

|P1 − P2 + N1Q1 − N2Q2 + T1 − T2|

(cid:4)

(10)

Notice that when the overlays have identical parameters,
they remain synchronized forever. The model thus follows
our intuition that once two overlay gets synchronized, if the

spacing between the probes never changes, they remain syn-
chronized always.

5 Simulating Multiple Co-existing Overlays

To validate our hypothesis and the model, we built a sim-
ulator that implements the control planes at both the over-
lay and IP layers. The simulator allows us to analyze the
conﬂicting decisions made by multiple overlays and their
impact on both overlay and other IP trafﬁc.

5.1 Simulating IP and Overlay Network Dynam-

ics

Within each ISP domain, we emulate an IP-layer interior
gateway protocol (IGP) that implements Dijkstra’s shortest
path algorithm. To simulate real-world network scenarios,
we introduce link failures and carefully model the IGP dy-
namics in response to failures as outlined in [6] and [7]. In
any IP network, the link utilization determines the delay,
throughput, and losses experienced by trafﬁc ﬂows that tra-
verse the link. To simulate realistic link delays, we model
delay on any link as a monotonically increasing piecewise
linear convex function of its utilization (as in [5] and [13]).
In our simulations, a single IP network could have mul-
tiple overlay networks with nodes resident in its domain.
Each overlay can have a different topology and routing
strategy. Note that we do not require that all of the nodes
participating in an overlay be resident in the same domain.
All overlay networks adopt the same routing strategies and
path probing mechanisms described in Section 3.1.

We assigned the background trafﬁc between various IP
nodes in the network based on the ﬁndings in [11]. The
trafﬁc between overlay nodes in various overlay networks
was assigned such that the overlay trafﬁc accounts for a
signiﬁcant portion of the IP trafﬁc (an implicit assumption
made in all of our discussions). In our simulations the com-
bined overlay trafﬁc from all the overlay networks was typi-
cally 30-50% of the overall trafﬁc. We generated numerous
events at the IP layer and observed the reactions of overlay
and IP networks, both at the control plane and the data for-
warding plane. In the following section, we present some
of our key observations.

5.2

Illustrating Race Conditions

As mentioned before, our hypothesis is that the co-
existence of multiple independent overlays can exhibit race
conditions that lead to unexpected network instability. To
test our hypothesis, we consider a scenario with ﬁve overlay
networks deployed on top of a tier-1 ISP backbone topology
(similar to [7]), as shown in Figure 4. To simulate a realis-
tic scenario with heterogeneous overlay networks, we chose
different timers values (i.e., P , Q, T , and N ) for each of the

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

18

16

4

19

14

17

13

15

Overlay 1
Overlay 2

Overlay 3
Overlay 4
Overlay 5

11

12

10

3

5

9

0

2

1

7

6

8

Figure 4. Simulation topology

overlay networks (Table 1). Notice that the timers of the
ﬁrst two overlays have signiﬁcantly larger values compared
to the other three. Even though our simulation topology has
a single domain, it is straightforward to see that the observa-
tions and results that we present in the rest of the paper can
occur even when overlay networks span multiple domains.

Timer
Overlay-1
Overlay-2
Overlay-3
Overlay-4
Overlay-5

P (ms) Q(ms)
2000
2000
1000
800
700

600
1000
500
400
300

T (ms) N
3
300
350
3
3
200
3
120
100
3

Table 1. Timer Values for the overlays in simulation

Traffic Oscillations 

Link 2−5
Link 0−1
Link 0−2
Link 10−12
Link 10−15
Link 10−11
Link 0−4
Link 2−6
Link 12−18

Link Recovery

Link Recovery

Failure on
Link 10−12

Reconvergence

Failure on
Link 2−5

Reconvergence

1

2

3

4

5

6

Time (ms)

7
4
x 10

Figure 5. Link utilization as a function of time

We ran numerous simulations by generating different IP-
level events and various trafﬁc loads in the overlay net-
works. Results reveal many different possible interactions
between overlay networks triggered by different events. For
ease of presentation, we only show the dynamics of multiple
overlays in response to a very common event, link failures.

n
o

i
t

a
z

i
l
i
t

U
 
k
n
L

i

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

Figure 5 shows the utilization of a subset of links in one
of the simulation runs that lasted for 70s. On the x-axis we
mark the timeline of various IP-layer events such as link
failures, routing re-convergence (IGP routing protocol has
converged and identiﬁed alternate path), and link recovery
(failed link becomes operational again). We consider two
link failure events: (i) link 10-12 fails at t = 10s, and (ii)
link 2-5 fails at t = 50s. The failures are far apart such that
the ﬁrst link is operational (i.e. recovered) before the second
failure event. Note that we do not show multiple simultane-
ous link failures for ease of illustration. However, multiple
failures will exacerbate the race conditions described here.

Trafﬁc Oscillations: In Figure 5, we can clearly see that
soon after the link failure events, loads on some of links
start oscillating. There are two sets of oscillations: one cor-
responding to the failure of link 10-12 and the other for the
failure of link 2-5. During these two sets of oscillations, the
paths between some source-destination pairs in the over-
lay layer change constantly. The ﬁrst set of oscillations
involves two overlay networks (Overlay-1 and Overlay-2)
while the second set involves three (Overlay-1, Overlay-2,
and Overlay-3). We observe that the overlay paths involved
in these oscillations do share at least a few common links
in the IP layer. Note that the two sets of oscillations in-
volve different number of overlays, implying that different
number of overlay networks can interact with each other re-
sulting in oscillations.

Stop Triggers for Oscillations: Even though both sets of
oscillations in Figure 5 are triggered by failure events, the
stop trigger for the oscillations are different.
In the ﬁrst
set, the oscillations stop when the overlay networks de-
synchronize, or disentangle themselves, with no external
trigger. In the second set, oscillations stop when IGP re-
converges. Different runs of our simulations clearly indi-
cate that there is a variety of events that act as stop triggers
for these oscillations (e.g., IGP re-convergence, link recov-
ery, self-disentanglement, etc.). An important observation
here is that certain IP layer events that act as stop triggers
for oscillations at some point in time might not affect the
oscillations at another point in time. Also, most of the IP
layer events that act as stop triggers are heavily dependent
on the network conditions at the IP layer. For example, IGP
convergence depends not only on timer values set by the
ISPs, but also on the location of BGP peering points [7].
The order of occurrence of these stop triggers is not deter-
ministic, thus introducing unpredictability in the duration
of the oscillations. In essence, the end of oscillations de-
pends on numerous factors, thus making it non-trivial to ac-
curately estimate the impact of oscillations on overlay or
non-overlay trafﬁc.

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

5.3 Validation of Analytical Model

To validate both our analytic formulation and our im-
plementation in the simulator, we compare P (S) computed
using the model (Section 4) versus that seen in simulation.
We consider two similar networks (i.e., all the parameters
are identical), but vary the value of the probe interval. The
results are given in Figure 6. The simulation results are
based on running the simulation 1000 times and calculating
the number of times the overlay networks got synchronized.
We can see that the analytical results closely match the sim-
ulation results.

Simulation
Theoretical

P1 = P2
Q1 = Q2
T1 = T2 = 0.16s
R1 = R2 = 0.04s

as a function of Q for constant values of P . We can clearly
see that for a given probe interval, varying Q does not im-
pact the probability of synchronization between two identi-
cal networks thus conﬁrming the accuracy of our model.

To verify the correctness of the theoretical upper bound
on the number of oscillations (Eqn 10), using our simulator
we simulate oscillations in two synchronized overlays that
are dissimilar (Figure 8). We run the simulations 50 times
for each set, but the ﬁgure represents only those cases where
the overlays synchronize and oscillate. We can clearly see
that the theoretical upper bound on the number of oscilla-
tions before the overlays disentangle is larger than the ac-
tual number of oscillations in our simulations, yet lies near
the values observed in simulation. Note that we are explor-
ing the number of oscillations in a small parameter space,
but the main purpose of this ﬁgure is to validate our model.
We look at a wider parameter space in Section 6.2.

Set 1 (P2=4.5s)
Set 2 (P2=4.65s)
Set 3 (P2=4.75s)
Set 4 (P2=4.85s)
Set 5 (P2=4.95s)
Set 6 (P2=5.05s)
Set 7 (P2=5.15s)
Set 8 (P2=5.25s)
Set 9 (P2=5.35s)
Set 10 (P2=5.5s)
Upper Bound

P1 = 5s
Q1 = Q2 = 1
N1 = N2 = 3
T1 = 4*R1
T2 = 4*R2
R1 = R2 = 0.2s

s
n
o

i
t

a

l
l
i

c
s
O

 
f

o

 
r
e
b
m
u
N

35

30

25

20

15

10

5

0
1

0
0

5

10

15

Probe Interval

20

25

Figure 6. A comparison of theoretical and simula-
tion results for P (S) between two identical overlay
networks with different values of P

2

3

4

5

6

7

8

9

10

Different Sets of Parameter Values

P = 12 s
P = 8 s
P = 4 s
P = 1 s

Figure 8. Comparison between theoretical and
simulation results for number of oscillations.

2

4

6

8

10

12

Ratio of P to Q

Figure 7. P (S) as a function of the ratio P/Q with
different values of Q for a given value of P in two
identical overlay networks

When the two overlay networks are identical (i.e, P1 =
P2 = P , Q1 = Q2 = Q, T1 = T2 = T , N1 = N2 = N ,
and R1 = R2 = R, it is easy to see that we have a = T
and b = −T . Hence the probability of synchronization
(from Eqns 5, 6, 7, 8), collapses to the simple equation
P (S) = T (2P − T )/P 2. If our model is correct, this im-
plies that P (S) is independent of Q, N and RT T . Figure 7
shows the variation of P (S) (generated using the simulator)

6 Sensitivity to Probing Parameters

To assess whether or not these race conditions pose a
problem in the design of overlay networks, we need to un-
derstand whether such situations are pathological (and thus
very unlikely to occur) or if there is a reasonable chance
that this can happen over some non-narrow range of the pa-
rameter space. For the case of two overlays, we have ten
parameters, and thus P (S) describes a probability in 10-
dimensional space. We now study how P (S) varies with
respect to some of these parameters, or combinations of
them. Due to the complexity of the parameter space, we di-
rect our attention to address the following questions: (i) Is
P (S) non-negligible in operating regions that can occur in
the Internet? (ii) Can we count on naturally occurring vari-
ations in RTT (due to path length diversity) to reduce P (S)
to negligible values? (iii) If not, which parameter settings

1

0.9

0.8

0.7

0.6

0.4

0.3

0.2

0.1

)

S
P

(

0.5

0.3

0.25

0.2

)

S
P

(

0.15

0.1

0.05

0
0

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

can drive P (S) to low values? In other words, how should
an overlay network designer choose the probing parameters
to reduce the likelihood of synchronization, especially when
the behavior of other overlays are not known?

6.1 Aggressiveness Factor and Probe Parameter

Setting

We start with the simplest case of two overlays with iden-
tical parameter setting because this case provides some in-
sight about overlays in general. Recall from Section 5.3 that
for two identical overlays, we have P (S) = T (2P −T )/P 2.
We see that P (S) depends only on the probe interval and
the timeout values of the overlays. The maximum value of
P (S) = 1 occurs when T = P , i.e., for these parameter
settings, the overlay networks will deﬁnitely synchronize.
If P = 2T then P (S) = 0.75. In order to decrease the
probability of synchronization to less than 0.05 (i.e. 5%
chance of synchronization) we need to use P ≈ 40T .

We are thus motivated to characterize overlay networks
by their probing frequencies. We consider overlays that
probe frequently and move their trafﬁc quickly as aggres-
sive. We deﬁne an aggressiveness factor, α, of an over-
lay network as the ratio of the timeout and probe inter-
val, αi = Ti/Pi. Note that RT T ≤ T ≤ P , hence
0 < α ≤ 1. For two identical overlay networks we have
P (S) = 2α − α2, which shows that as the networks in-
crease their aggressiveness (i.e. as α → 1), P (S) increases.
In many of our sample scenarios in the next section, we
varied RTT values between 20ms and 300ms to capture a
variety of realistic Internet overlay paths that span either a
small or large geographic distance (i.e. nearby cities to in-
ternational routes). We choose the timeout value to be four
times the RTT. This is motivated by the type of approach
usually followed in TCP in which timeout values are set to
be the mean RTT plus 3 or 4 times the standard deviation.
Assuming the standard deviation is similar to the mean, we
use T = 4 ∗ RT T in our calculations.

The other probing parameters P and Q can be set in two
ways: (i) Proportional values, where P and Q are set to be
multiples of T (and hence RTT) and are different for each
path in the overlay; (ii) Fixed values, where P and Q are
constants independent of T and RTT and therefore the same
for all the paths.

6.2 Results and Discussion

In Figure 9, we explore the impact of variations in RTT
values on P (S) for two proportional parameter overlays.
Although both overlays have the same aggressiveness in
this example, the actual values of P , Q, and T will differ
for each overlay because the parameters ultimately depend
on the particular RTT. We observe in this ﬁgure that when
both overlays are aggressive (e.g., T /P = 1/3), P (S) can

be as high as 55%. When both are non-aggressive (e.g.,
T /P = 1/20), P (S) never gets above 10%. In this ﬁgure,
we plot P (S) versus the relative difference in RTT values
between two overlays. The ﬁgure indicates that when one
RTT is more than twice the value of the other, then this
synchronization issue is not a concern as P (S) is near or
at zero. However when the RTTs are less than 50% dif-
ferent from one another, then we can have non-negligible
probability of synchronization. This could happen for two
overlay networks that both span a similar geographic region.
Since the dependence here is on the relative RTT’s, the ac-
tual size of this geographic region does not matter.

T/P = 1/3
T/P = 1/10
T/P = 1/20

Range of RTT = [0.02s, 0.3s]
T = 4*RTT
Q = 2*T

)

S
P

(

 
l
a
c
i
t
e
r
o
e
h
T

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0
−1

−0.5

0

0.5

1

1.5

2

2.5

3

(R2−R1)/R1

Figure 9. P (S) Vs (R2 − R1)/R1 for proportional
parameter overlays with similar aggressiveness
and varying RTT

As overlays are not widely deployed and their perfor-
mance requirements are not yet well understood, it is not
clear how to decide for which values should P (S) be con-
sidered “signiﬁcant”, or “non-negligible”.
In this paper,
we consider P (S) to be non-negligible if it exceeds 10%.
Admittedly, this number is subjective, however we will see
plenty of scenarios in which P (S) is considerably far away
from zero to indicate that synchronization problems should
not be neglected.

In Figure 10, we examine some scenarios in which the
two overlays have different aggressiveness factors. In these
scenarios, the ﬁrst overlay is set to be aggressive, while the
second overlay varies from aggressive (α2 = 1/5) to non-
aggressive (α2 = 1/20). We see that even in the case of one
aggressive and one non-aggressive overlay network, P (S)
can still be non-negligible for a wide range of relative RTT
values. However, this ﬁgure indicates that an overlay might
beneﬁt from using non-aggressive parameters even if an-
other overlay behaves aggressively. To further explore this
hypothesis, we consider a wider variety of cases in Figure
11.

Figure 11 shows the value of P (S) as a function of the

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

aggressiveness factors of the two overlays. Each curve in
the graph represents the value of P (S) for a ﬁxed value
of T1/P1 but different values of T2/P2. We can clearly
see that as the aggressiveness of both the overlays increase,
there is a higher chance of synchronization. This proba-
bility signiﬁcantly decreases when the overlays are non-
aggressive. This conﬁrms that as long as one of the overlays
is non-aggressive, the probability of synchronization is low.
In other words, setting a high value of P is critical to reduc-
ing P (S). We wish to point out that there could be fairness
issues when one overlay is very aggressive, and exploits the
non-aggressive parameter settings of the other overlay. We
defer the study of fairness to future work.

We now look at the impact of using a ﬁxed parameter
approach to choosing P and Q. In Figure 12, we consider
the case of two RON networks. The pattern in this ﬁgure
is explained as follows. Each straight line of points be-
longs to the cases of a ﬁxed R1 as R2 is varied through
its entire range. An interesting observation from this plot is
that even when the relative difference between the RTT’s is
zero, P (S) does not take on a single value, but instead can
take on any of a number of values. P (S) is at its minimum
when both RTT values are small (R1 = 20ms, R2 = 20ms),
and achieves its maximum when both RTT values are large
(R1 = 300ms, R2 = 300ms). This suggests that in ﬁxed
parameter overlays, unlike proportional parameter overlays,
the absolute value of RT T is an important factor in deter-
mining P (S). We observe that RON networks are designed
to be non-aggressive (T /P varies between 0.007 and 0.1)
and this results in low synchronization probabilities. How-
ever, there still do remain a number of cases in which P (S)
exceeds 10%.

In Figure 13, we consider a case of two ﬁxed parameter
overlays with different values of P and Q. We see a similar
behavior as in the previous case of ﬁxed parameter over-
lays. We wish the point out that in these two cases P (S) is
signiﬁcant for a wider range of values on the x-axis when
compared to Figure 9. In other words, P (S) does not reach
zero once the relative difference exceeds 60% or 70%. Us-
ing a ﬁxed approach to parameter selection means P is con-
stant, however, since the aggressiveness is determined by
α = T /P , the aggressiveness is varying per path (since T
is proportional to RTT). The overlay is more aggressive on
long paths and less so on shorter paths. The increased ag-
gressiveness on longer paths could explain why P (S) does
not disappear when the relative difference of RTTs is high
(e.g., 300%).

The above results show the inﬂuence of P and T on the
probability of synchronization. Figure 14 explores the in-
ﬂuence of Q on P (S) for ﬁxed parameter overlays. For
a given value of P2, as Q2 grows, P (S) decreases. For a
given value of Q2, the range of cases (i.e., values of P2)
in which synchronization can happen are more numerous

when Q2 is small than when it is large. Thus, in general,
it seems beneﬁcial to use a higher value of Q to reduce the
chances of synchronization. The tradeoff here is a delayed
reaction by the overlay. However, most importantly, based
on Figure 14 we can conclude that the inﬂuence of the high
frequency probes (Q) on P (S) is far less signiﬁcant com-
pared to the inﬂuence of the probe interval P or the timeout
T .

T2/P2 = 1/20
T2/P2 = 1/10
T2/P2 = 1/5

T1/P1 = 1/3
Q1 = 2*T1
Q2 = 2*T2
RTT = [0.02s, 0.3s]
Timeout = 4*RTT

0
−1

−0.5

0

(R2−R1)/R1

0.5

1

Figure 10. Proportional parameter overlays with
mixed aggressiveness and varying RTT

α
 = 1
1
α
 = 0.5
1
α
 = 0.25
1
α
 = 0.17
1
α
 = 0.1
1
α
 = 0.07
1
α
 = 0.05
1

R1 = R2 = 0.1s
T1 = 4*R1
T2 = 4*R2
Q1 = T1
Q2 = T2

0.45

0.4

0.35

0.3

0.25

0.2

0.15

0.1

0.05

)

S
P

(

 
l

a
c
i
t

e
r
e
o
h
T

)

S
P

(

 
l

a
c
i
t

e
r
o
e
h
T

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

−1

10

α
 (Aggressiveness Factor of the second overlay network)
2

0
10

Figure 11. Proportional parameter overlays with
mixed aggressiveness and a chosen value of RTT

Finally, Figure 15 shows the upper bound on the number
of oscillations between two overlays after they are synchro-
nized for both proportional and ﬁxed parameter overlays.
Even though we are exploring a small subset of the parame-
ter space, there are a considerable number of cases where
the number of oscillations is more than 5.

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

)

S
P

(

 
l

a
c
i
t

e
r
o
e
h
T

0.4

0.35

0.3

0.25

0.2

0.15

0.1

0.05

0

40

35

30

25

20

15

10

5

s
n
o
i
t
a

l
l
i

c
s
o

 
f

o

 
r
e
b
m
u
n

 
x
a
M

)

S
P

(

 
l
a
c
i
t
e
r
o
e
h
T

)

S
P

(

 
l

a
c
i
t

e
r
o
e
h
T

0.2

0.18

0.16

0.14

0.12

0.1

0.08

0.06

0.04

0.02

0
−2

0.25

0.2

0.15

0.1

0.05

0
−2

P1 = P2 = 12s
Q1 = Q2 = 3s
R1 = [0.02, 0.3]
R2 = [0.02, 0.3]
T1 = 4*R1
T2 = 4*R2
N1 = N2 =3

P1 = 5s
R1 = R2 = 0.2s
T1 = 4*R1
T2 = 4*R2 

Q = P/2
Q = P/3
Q = P/4
Q = P/5
Q = P/6

0

2

4

6

8

10

12

14

(R2−R2)/R1

2

4

10
Probe Interval of second overlay network, P2 (s)

6

8

12

Figure 14. P (S) as a function of P2 with P1 = 5s

Figure 12. Fixed parameter overlays (RON-like)
with the same values of P and Q, and varying RTT

P1 = 6; P2 = 8;
Q1 = 1.5; Q2 = 2;
T1 = 4*R1; T2 = 4*R2
N1 = N2 = 3

Proportional parameter overlay networks
Fixed parameter overlay networks

For both cases of proportional 
parameter and fixed parmeter overlays:

Range of R1 = [0.02s, 0.3s]
T1 = 4*R1
Range of P1 = [0.2s, 12s]

R2 = 0.1s
T2 = 0.4s
Range of P2 = [0.8, 12s]

0

2

4

6

8

10

12

14

(R2−R1)/R1

Figure 13. Fixed parameter overlays with the dif-
ferent values of P and Q, and varying RTT

7

Implications of synchronization in overlays

Today’s Internet does not have multiple overlay networks
deployed, that is, not the type that use continuous probing to
do path selection. We have explored the possibility of race
conditions occurring should multiple overlays get deployed
so that we may accumulate some wisdom about how to de-
sign such networks before they become widely used. We
have seen a variety of scenarios in which the probability
of synchronization exceeds 10%. These scenarios included
cases in which RTTs were varied, probe rates were varied,
and the relationships among the parameters were varied. We
thus believe that there does exist a non-narrow range of the
parameter space in which synchronization is non-negligible.
We also illustrated that once synchronization occurs, the re-
sulting oscillations can sometimes last for a long time. We
thus believe that these issues should be taken into consider-

0
−1

0

1

2

(R2−R1)/R1

3

4

Figure 15. Maximum number of oscillations as a
function of relative RTT

ation when overlay networks are designed and conﬁgured.
One of the questions we set out to explore was whether
we can count of variations in RTT alone to avoid synchro-
nization. When using a proportional approach to parameter
selection, P (S) can be signiﬁcant (e.g., 40%) when the rela-
tive difference in RTTs is small (roughly less than 70%) and
the overlays are aggressive. When using a ﬁxed approach to
parameter setting, P (S) can exceed 10% even when the rel-
ative difference is as high as 300%. Moreover, when using
the ﬁxed approach, the absolute value of RTTs matter and
large RTTs can bring about larger P (S). This implies, for
example, that designing a cross-continental overlay network
is more challenging than designing one in a single country.
Since synchronization can occur, even when overlay paths
have dissimilar RTTs (whether large or small), overlay net-
work designers should not rely upon differences in RTTs to
avoid synchronization.

We believe that overlay networks should be designed

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

with care so as to mitigate race conditions as much as pos-
sible. This is non-trivial as we have shown there isn’t any
“ideal” set of parameters that ensures avoidance of synchro-
nization. Our results indicate that using a proportional ap-
proach to parameter selection might be better than using
a ﬁxed one. The proportional approach narrows down the
range of relative RTTs in which synchronization can occur.
Also, proportional parameter overlays depend only on the
relative RTTs and can exploit the path diversity in the In-
ternet better than ﬁxed parameter overlays. But in reality,
different overlay networks could easily end up choosing the
same strategic locations to place their nodes, resulting in
similar RTT values for various paths in different overlays,
thus making it harder to achieve and exploit path diversity.
In other words, using either a proportional or ﬁxed parame-
ter approach could result in a fair chance of experiencing
oscillations.

We saw that P (S) is more sensitive to the low-frequency
probe P than the higher frequency probe Q. It appears that
the best approach for averting race conditions, is for over-
lays to be nonaggressive in their probing, i.e., by using large
values of P . The tradeoff here is a slower reaction time. We
showed that being nonaggressive can result in smaller val-
ues of P (S) even if other overlays are aggressive. There
may be implications here in terms of fairness. We also
show that it is beneﬁcial to be nonaggressive, as we suspect
that the trend is towards building more aggressive overlays
because of the popular belief that overlays can outperform
layer-3 networks in terms of their reaction time to perfor-
mance degradation events. We wish to point out that when
many overlays start to co-exist, aggressive probing can have
negative consequences and overlays can inadvertently step
on each other.

8 Future Directions

In addition to nonaggressive probing, there are other
ways to mitigate oscillations. One obvious method is to
add randomness into various parameters. Although this is a
simple approach, we believe that it may not be very effec-
tive in solving the problem due to the fact that P (S) and ¯k
depend on the difference terms (like P1 − P2 in Eqn 10) and
randomness added to different overlays could cancel each
other.

An approach to quickly stop oscillations would be to
employ a back-off approach, i.e., to successively increase
the timeout and/or probe parameters each time an overlay
source node decides to switch routes to the same destina-
tion. Another technique is to have overlays share informa-
tion in order to ensure that harmful interactions are mini-
mized. A detailed analysis of the above issues are a part of
our future work.

We also plan to perform asymptotic analysis to under-

stand what happens as the number of overlays increase and
these overlays may or may not use similar overlay routing
algorithms. We also hope to explore the issue of fairness
when distinct overlays are conﬁgured with different levels
of aggressiveness.

Another direction of future work is to gain a comprehen-
sive understanding of stop triggers for oscillations. In other
words, we plan to investigate: (i) what are the various pos-
sible stop triggers?, (ii) what is the stop trigger for a given
set of oscillations?, (iii) frequency of occurrence of differ-
ent stop triggers, (iv) the inﬂuence of network topology and
conditions on the occurrence of stop triggers, etc. Since this
is the ﬁrst work of its kind, we have many assumptions in
our model and analysis, but we plan to relax these assump-
tions and improve our model in the future.

References

[1] Akamai. http://www.akamai.com.
[2] D. Anderson, H. Balakrishna, M. Kaashoek, and R. Morris.

Resilient Overlay Networks. In SOSP, Oct. 2001.

[3] M. Castro, P. Druschel, A. Kermarrec, A. Nandi, A. Row-
stron, and A. Singh. SplitStream: High-Bandwidth Multi-
cast in Cooperative Environments. In SOSP, Oct. 2003.

[4] S. Floyd and V. Jacobson. The Synchronization of Periodic

Routing Messages. In ACM SIGCOMM, Sept. 1993.

[5] B. Fortz and M. Thorup.

Internet Trafﬁc Engineering by
Optimizing OSPF Weights. In IEEE INFOCOM, Mar. 2000.
[6] G. Iannaccone, C.-N. Chuah, S. Bhattacharyya, and C. Diot.
IEEE

Feasibility of IP Restoration in a Tier-1 Backbone.
Network, Mar. 2004.

[7] R. Keralapura, C. Chuah, G. Iannaccone, and S. Bhat-
tacharyya. Service Availability: A New Approach to Char-
acterize IP Backbone Topologies. In IWQoS, June 2004.

[8] R. Keralapura, N. Taft, C. N. Chuah, and G. Iannaccone.
In ACM

Can ISPs take the heat from overlay networks?
HotNets, Nov. 2004.

[9] T. Leighton. The Challenges of Delivering Content and Ap-

plications on the Internet. In NSDI Keynote, May 2005.

[10] Y. Liu, H. Zhang, W. Gong, and D. Towsley. On the inter-
action between overlay routing and trafﬁc engineering. In
IEEE INFOCOM, Mar. 2005.

[11] A. Medina, N. Taft, K. Salamatian, S. Bhattacharyya, and
C. Diot. Trafﬁc Matrix Estimation: Existing Techniques
and Future Directions. In ACM SIGCOMM, Aug. 2002.

[12] A. Nakao, L. Peterson, and A. Bavier. A Routing Underlay

for Overlay Networks. In ACM SIGCOMM, Aug. 2003.

[13] L. Qiu, Y. Yang, Y. Zhang, and S. Shenker. On Selﬁsh Rout-
In ACM SIGCOMM,

ing in Internet-Like Environments.
Aug. 2003.

[14] S. Rhea, D. Geels, T. Roscoe, and J. Kubiatowicz. Handling

Churn in a DHT. In USENIX ATC, June 2004.

[15] S. Savage, A. Collins, E. Hoffman, J. Snell, and T. Ander-
In

son. The end-to-end effects of internet path selection.
ACM SIGCOMM, Aug. 1999.

[16] K. Sripanidkulchai, B. Maggs, and H. Zhang. An Analysis
of Live Streaming Workloads on the Internet. In ACM IMC,
Oct. 2004.

Proceedings of the 13th IEEE International Conference on Network Protocols (ICNP’05) 
0-7695-2437-8/05 $20.00 © 2005 IEEE 

